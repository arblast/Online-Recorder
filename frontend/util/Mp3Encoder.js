(function(self) {
  var Module = self.Mp3LameEncoderConfig;

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }


  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 96992;
  /* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([69,114,114,111,114,58,32,99,97,110,39,116,32,97,108,108,111,99,97,116,101,32,86,98,114,70,114,97,109,101,115,32,98,117,102,102,101,114,10,0,0,0,0,0,193,192,0,0,129,193,0,0,64,1,0,0,1,195,0,0,192,3,0,0,128,2,0,0,65,194,0,0,1,198,0,0,192,6,0,0,128,7,0,0,65,199,0,0,0,5,0,0,193,197,0,0,129,196,0,0,64,4,0,0,1,204,0,0,192,12,0,0,128,13,0,0,65,205,0,0,0,15,0,0,193,207,0,0,129,206,0,0,64,14,0,0,0,10,0,0,193,202,0,0,129,203,0,0,64,11,0,0,1,201,0,0,192,9,0,0,128,8,0,0,65,200,0,0,1,216,0,0,192,24,0,0,128,25,0,0,65,217,0,0,0,27,0,0,193,219,0,0,129,218,0,0,64,26,0,0,0,30,0,0,193,222,0,0,129,223,0,0,64,31,0,0,1,221,0,0,192,29,0,0,128,28,0,0,65,220,0,0,0,20,0,0,193,212,0,0,129,213,0,0,64,21,0,0,1,215,0,0,192,23,0,0,128,22,0,0,65,214,0,0,1,210,0,0,192,18,0,0,128,19,0,0,65,211,0,0,0,17,0,0,193,209,0,0,129,208,0,0,64,16,0,0,1,240,0,0,192,48,0,0,128,49,0,0,65,241,0,0,0,51,0,0,193,243,0,0,129,242,0,0,64,50,0,0,0,54,0,0,193,246,0,0,129,247,0,0,64,55,0,0,1,245,0,0,192,53,0,0,128,52,0,0,65,244,0,0,0,60,0,0,193,252,0,0,129,253,0,0,64,61,0,0,1,255,0,0,192,63,0,0,128,62,0,0,65,254,0,0,1,250,0,0,192,58,0,0,128,59,0,0,65,251,0,0,0,57,0,0,193,249,0,0,129,248,0,0,64,56,0,0,0,40,0,0,193,232,0,0,129,233,0,0,64,41,0,0,1,235,0,0,192,43,0,0,128,42,0,0,65,234,0,0,1,238,0,0,192,46,0,0,128,47,0,0,65,239,0,0,0,45,0,0,193,237,0,0,129,236,0,0,64,44,0,0,1,228,0,0,192,36,0,0,128,37,0,0,65,229,0,0,0,39,0,0,193,231,0,0,129,230,0,0,64,38,0,0,0,34,0,0,193,226,0,0,129,227,0,0,64,35,0,0,1,225,0,0,192,33,0,0,128,32,0,0,65,224,0,0,1,160,0,0,192,96,0,0,128,97,0,0,65,161,0,0,0,99,0,0,193,163,0,0,129,162,0,0,64,98,0,0,0,102,0,0,193,166,0,0,129,167,0,0,64,103,0,0,1,165,0,0,192,101,0,0,128,100,0,0,65,164,0,0,0,108,0,0,193,172,0,0,129,173,0,0,64,109,0,0,1,175,0,0,192,111,0,0,128,110,0,0,65,174,0,0,1,170,0,0,192,106,0,0,128,107,0,0,65,171,0,0,0,105,0,0,193,169,0,0,129,168,0,0,64,104,0,0,0,120,0,0,193,184,0,0,129,185,0,0,64,121,0,0,1,187,0,0,192,123,0,0,128,122,0,0,65,186,0,0,1,190,0,0,192,126,0,0,128,127,0,0,65,191,0,0,0,125,0,0,193,189,0,0,129,188,0,0,64,124,0,0,1,180,0,0,192,116,0,0,128,117,0,0,65,181,0,0,0,119,0,0,193,183,0,0,129,182,0,0,64,118,0,0,0,114,0,0,193,178,0,0,129,179,0,0,64,115,0,0,1,177,0,0,192,113,0,0,128,112,0,0,65,176,0,0,0,80,0,0,193,144,0,0,129,145,0,0,64,81,0,0,1,147,0,0,192,83,0,0,128,82,0,0,65,146,0,0,1,150,0,0,192,86,0,0,128,87,0,0,65,151,0,0,0,85,0,0,193,149,0,0,129,148,0,0,64,84,0,0,1,156,0,0,192,92,0,0,128,93,0,0,65,157,0,0,0,95,0,0,193,159,0,0,129,158,0,0,64,94,0,0,0,90,0,0,193,154,0,0,129,155,0,0,64,91,0,0,1,153,0,0,192,89,0,0,128,88,0,0,65,152,0,0,1,136,0,0,192,72,0,0,128,73,0,0,65,137,0,0,0,75,0,0,193,139,0,0,129,138,0,0,64,74,0,0,0,78,0,0,193,142,0,0,129,143,0,0,64,79,0,0,1,141,0,0,192,77,0,0,128,76,0,0,65,140,0,0,0,68,0,0,193,132,0,0,129,133,0,0,64,69,0,0,1,135,0,0,192,71,0,0,128,70,0,0,65,134,0,0,1,130,0,0,192,66,0,0,128,67,0,0,65,131,0,0,0,65,0,0,193,129,0,0,129,128,0,0,64,64,0,0,115,116,114,97,110,103,101,32,101,114,114,111,114,32,102,108,117,115,104,105,110,103,32,98,117,102,102,101,114,32,46,46,46,32,10,0,0,0,0,0,69,114,114,111,114,58,32,77,65,88,95,72,69,65,68,69,82,95,66,85,70,32,116,111,111,32,115,109,97,108,108,32,105,110,32,98,105,116,115,116,114,101,97,109,46,99,32,10,0,0,0,0,0,0,0,0,73,110,116,101,114,110,97,108,32,98,117,102,102,101,114,32,105,110,99,111,110,115,105,115,116,101,110,99,121,46,32,102,108,117,115,104,98,105,116,115,32,60,62,32,82,101,115,118,83,105,122,101,0,0,0,0,98,105,116,32,114,101,115,101,114,118,111,105,114,32,101,114,114,111,114,58,32,10,108,51,95,115,105,100,101,45,62,109,97,105,110,95,100,97,116,97,95,98,101,103,105,110,58,32,37,105,32,10,82,101,115,118,111,105,114,32,115,105,122,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,114,101,115,118,32,100,114,97,105,110,32,40,112,111,115,116,41,32,32,32,32,32,32,32,32,32,37,105,32,10,114,101,115,118,32,100,114,97,105,110,32,40,112,114,101,41,32,32,32,32,32,32,32,32,32,32,37,105,32,10,104,101,97,100,101,114,32,97,110,100,32,115,105,100,101,105,110,102,111,58,32,32,32,32,32,32,37,105,32,10,100,97,116,97,32,98,105,116,115,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,116,111,116,97,108,32,98,105,116,115,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,40,114,101,109,97,105,110,100,101,114,58,32,37,105,41,32,10,98,105,116,115,112,101,114,102,114,97,109,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,0,0,84,104,105,115,32,105,115,32,97,32,102,97,116,97,108,32,101,114,114,111,114,46,32,32,73,116,32,104,97,115,32,115,101,118,101,114,97,108,32,112,111,115,115,105,98,108,101,32,99,97,117,115,101,115,58,0,57,48,37,37,32,32,76,65,77,69,32,99,111,109,112,105,108,101,100,32,119,105,116,104,32,98,117,103,103,121,32,118,101,114,115,105,111,110,32,111,102,32,103,99,99,32,117,115,105,110,103,32,97,100,118,97,110,99,101,100,32,111,112,116,105,109,105,122,97,116,105,111,110,115,0,0,0,0,0,0,32,57,37,37,32,32,89,111,117,114,32,115,121,115,116,101,109,32,105,115,32,111,118,101,114,99,108,111,99,107,101,100,0,0,0,0,0,0,0,0,32,49,37,37,32,32,98,117,103,32,105,110,32,76,65,77,69,32,101,110,99,111,100,105,110,103,32,108,105,98,114,97,114,121,0,0,0,0,0,0,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([94,131,108,63,21,239,195,62,109,196,126,63,54,189,200,61,67,236,127,63,176,10,201,60,196,254,127,63,136,15,201,59,88,88,88,0,0,0,0,0,37,108,117,0,0,0,0,0,105,109,97,103,101,47,112,110,103,0,0,0,0,0,0,0,105,109,97,103,101,47,103,105,102,0,0,0,0,0,0,0,105,109,97,103,101,47,106,112,101,103,0,0,0,0,0,0,37,100,0,0,0,0,0,0,128,187,0,0,0,0,0,0,0,0,208,64,0,0,0,0,0,0,208,64,148,92,0,0,68,172,0,0,0,0,0,0,0,0,208,64,0,0,0,0,0,0,208,64,20,85,0,0,0,125,0,0,0,0,208,64,0,0,0,65,102,102,166,64,0,0,208,64,184,61,0,0,192,93,0,0,0,0,0,65,0,0,8,65,102,102,166,64,0,0,192,64,74,46,0,0,34,86,0,0,0,0,8,65,246,40,16,65,102,102,166,64,0,0,208,64,140,42,0,0,128,62,0,0,246,40,16,65,102,102,22,65,205,204,156,64,0,0,208,64,223,30,0,0,224,46,0,0,102,102,22,65,154,153,25,65,0,0,144,64,0,0,192,64,40,23,0,0,17,43,0,0,154,153,25,65,102,102,30,65,51,51,163,64,0,0,208,64,70,21,0,0,64,31,0,0,102,102,30,65,0,0,32,65,205,204,156,64,0,0,208,64,112,15,0,0,8,0,0,0,208,7,0,0,16,0,0,0,116,14,0,0,24,0,0,0,60,15,0,0,32,0,0,0,124,21,0,0,40,0,0,0,88,27,0,0,48,0,0,0,76,29,0,0,56,0,0,0,16,39,0,0,64,0,0,0,248,42,0,0,80,0,0,0,188,52,0,0,96,0,0,0,252,58,0,0,112,0,0,0,240,60,0,0,128,0,0,0,104,66,0,0,160,0,0,0,92,68,0,0,192,0,0,0,168,72,0,0,224,0,0,0,200,75,0,0,0,1,0,0,244,76,0,0,64,1,0,0,20,80,0,0,44,76,0,0,56,74,0,0,168,72,0,0,80,70,0,0,92,68,0,0,128,62,0,0,240,60,0,0,52,58,0,0,212,48,0,0,16,39,0,0,110,15,0,0,0,0,0,0,192,93,0,0,44,76,0,0,68,72,0,0,80,70,0,0,92,68,0,0,104,66,0,0,116,64,0,0,240,60,0,0,96,59,0,0,62,28,0,0,110,15,0,0,0,0,0,0,44,76,0,0,56,74,0,0,68,72,0,0,80,70,0,0,92,68,0,0,116,64,0,0,140,60,0,0,164,56,0,0,212,48,0,0,28,37,0,0,110,15,0,0,0,0,0,0,102,102,182,64,0,0,208,64,154,153,233,64,51,51,3,65,0,0,32,65,102,102,62,65,0,0,80,65,0,0,96,65,0,0,112,65,0,0,132,65,87,97,114,110,105,110,103,58,32,104,105,103,104,112,97,115,115,32,102,105,108,116,101,114,32,100,105,115,97,98,108,101,100,46,32,32,104,105,103,104,112,97,115,115,32,102,114,101,113,117,101,110,99,121,32,116,111,111,32,115,109,97,108,108,10,0,0,0,0,0,0,0,69,114,114,111,114,58,32,99,97,110,39,116,32,97,108,108,111,99,97,116,101,32,105,110,95,98,117,102,102,101,114,32,98,117,102,102,101,114,10,0,0,0,0,0,1,0,0,0,16,0,0,0,17,0,0,0,8,0,0,0,9,0,0,0,24,0,0,0,25,0,0,0,4,0,0,0,5,0,0,0,20,0,0,0,21,0,0,0,12,0,0,0,13,0,0,0,28,0,0,0,29,0,0,0,2,0,0,0,3,0,0,0,18,0,0,0,19,0,0,0,10,0,0,0,11,0,0,0,26,0,0,0,27,0,0,0,6,0,0,0,7,0,0,0,22,0,0,0,23,0,0,0,14,0,0,0,15,0,0,0,30,0,0,0,31,0,0,0,0,27,134,42,204,204,52,43,33,78,132,43,252,247,157,43,88,156,166,43,252,247,157,43,33,78,132,43,204,204,52,43,0,27,134,42,83,248,191,44,254,169,171,44,146,50,149,44,159,129,122,44,239,29,73,44,62,186,23,44,116,173,207,43,133,159,107,43,183,89,146,42,83,248,191,172,254,169,171,172,146,50,149,172,159,129,122,172,239,29,73,172,62,186,23,172,116,173,207,171,133,159,107,171,183,89,146,170,0,27,134,170,204,204,52,171,33,78,132,171,252,247,157,171,88,156,166,171,252,247,157,171,33,78,132,171,204,204,52,171,0,27,134,170,0,27,134,42,204,204,52,43,33,78,132,43,252,247,157,43,88,156,166,43,252,247,157,43,33,78,132,43,204,204,52,43,0,27,134,42,83,248,191,44,254,169,171,44,146,50,149,44,159,129,122,44,239,29,73,44,62,186,23,44,116,173,207,43,133,159,107,43,183,89,146,42,37,39,192,172,51,37,173,172,234,209,152,172,227,84,131,172,249,175,89,172,11,14,43,172,102,34,244,171,201,49,137,171,74,123,157,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,144,128,170,174,79,227,170,5,174,113,170,234,207,6,62,205,19,212,62,139,111,68,63,255,175,139,63,23,208,166,63,117,235,200,63,190,226,245,63,122,130,26,64,105,251,74,64,185,87,144,64,107,16,243,64,233,58,183,65,92,28,124,63,187,141,36,63,68,29,175,62,178,143,112,63,212,208,49,190,125,27,68,191,215,179,93,63,0,0,0,63,254,181,3,191,218,134,241,190,2,115,160,190,116,71,58,190,29,176,193,189,135,203,39,189,29,161,104,188,70,123,114,187,168,132,91,63,216,185,97,63,221,26,115,63,129,186,123,63,65,218,126,63,253,200,127,63,101,249,127,63,141,255,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,144,128,42,174,79,227,42,5,174,113,42,37,39,192,44,51,37,173,44,234,209,152,44,227,84,131,44,249,175,89,44,11,14,43,44,102,34,244,43,201,49,137,43,74,123,157,42,83,248,191,172,254,169,171,172,146,50,149,172,159,129,122,172,239,29,73,172,62,186,23,172,116,173,207,171,133,159,107,171,183,89,146,170,0,27,134,170,204,204,52,171,33,78,132,171,252,247,157,171,88,156,166,171,252,247,157,171,33,78,132,171,204,204,52,171,0,27,134,170,121,207,23,190,138,59,1,66,164,51,148,67,155,200,92,68,202,167,45,70,175,40,132,68,192,222,152,67,129,155,246,65,199,156,118,64,77,183,109,66,194,101,49,68,74,15,165,69,82,45,182,197,71,104,76,196,73,213,153,194,66,4,147,192,94,6,104,63,54,189,72,62,3,97,30,190,44,76,9,66,68,231,150,67,96,102,76,68,47,215,52,70,17,168,147,68,117,204,160,67,46,219,249,65,68,124,109,64,146,154,86,66,183,10,43,68,136,68,163,69,35,243,198,197,129,62,99,196,80,169,179,194,43,42,173,192,1,24,82,63,194,197,199,62,223,144,36,190,144,150,16,66,32,15,152,67,140,47,55,68,113,86,59,70,101,128,162,68,120,164,167,67,193,231,251,65,149,237,87,64,209,237,60,66,46,47,35,68,80,99,160,69,178,232,215,197,240,127,122,196,100,62,207,194,121,91,195,192,207,220,61,63,49,160,20,63,61,91,42,190,177,1,23,66,106,129,151,67,98,254,28,68,14,27,65,70,229,136,176,68,246,95,173,67,75,201,252,65,52,59,74,64,173,80,34,66,178,10,26,68,170,126,156,69,83,240,232,197,121,249,136,196,253,124,236,194,231,48,218,192,193,13,43,63,21,239,67,63,139,188,47,190,75,118,28,66,177,43,149,67,81,195,251,67,92,30,70,70,161,146,189,68,23,254,177,67,116,41,251,65,165,166,58,64,77,48,7,66,62,185,15,68,225,169,151,69,144,236,249,197,102,184,148,196,253,164,5,195,130,12,247,192,196,112,25,63,234,90,113,63,120,177,52,190,11,224,32,66,197,255,144,67,75,169,179,67,9,89,74,70,63,131,201,68,227,108,181,67,12,94,248,65,73,159,52,64,49,233,215,65,148,121,4,68,250,250,145,69,153,95,5,198,224,82,160,196,230,149,21,195,193,75,10,193,185,213,8,63,218,57,142,63,244,54,185,190,93,45,36,66,238,197,138,67,123,163,67,67,193,197,77,70,150,52,212,68,118,180,183,67,208,116,244,65,169,3,34,64,173,143,160,65,68,192,240,67,195,135,139,69,122,165,13,198,28,180,171,196,130,42,38,195,136,83,25,193,112,40,242,62,153,103,162,63,55,74,189,190,167,146,37,66,148,165,130,67,182,247,78,65,135,96,80,70,71,144,221,68,247,225,184,67,182,2,238,65,153,191,25,64,113,224,84,65,226,71,215,67,116,104,132,69,186,183,21,198,32,182,182,196,153,32,55,195,248,124,43,193,205,19,212,62,243,4,181,63,187,232,192,190,91,122,38,66,227,13,113,67,88,242,59,195,65,40,82,70,237,132,229,68,213,190,184,67,201,3,232,65,16,147,4,64,105,242,216,64,110,227,188,67,47,102,121,69,214,134,29,198,81,62,193,196,85,96,72,195,235,212,61,193,80,50,183,62,3,228,197,63,71,16,196,190,73,155,36,66,18,122,88,67,23,20,203,195,140,28,83,70,216,249,235,68,185,166,183,67,247,22,225,65,11,250,244,63,71,16,196,62,69,237,161,67,91,2,105,69,239,4,37,198,124,38,203,196,16,160,89,195,54,63,80,193,66,80,155,62,49,219,212,63,46,15,21,191,242,108,33,66,98,51,60,67,83,17,32,196,220,60,83,70,70,243,240,68,238,104,181,67,38,192,215,65,112,137,223,63,88,12,180,192,157,166,134,67,47,214,87,69,149,32,44,198,6,85,212,196,16,196,106,195,193,157,98,193,212,63,128,62,152,197,225,63,57,182,22,191,234,239,28,66,206,194,27,67,244,79,94,196,226,141,82,70,182,97,244,68,249,56,178,67,221,40,207,65,124,229,200,63,57,233,50,193,16,207,86,67,160,18,70,69,73,205,50,198,21,165,220,196,104,176,123,195,1,246,119,193,175,175,75,62,94,131,236,63,230,143,74,191,36,147,21,66,35,102,239,66,16,227,143,196,201,17,81,70,166,76,246,68,130,2,174,67,22,218,197,65,28,72,177,63,12,95,131,193,224,12,33,67,81,229,51,69,247,251,56,198,140,255,227,196,139,36,134,195,184,137,134,193,100,229,23,62,11,250,244,63,223,202,75,191,201,237,12,66,223,9,160,66,174,0,178,196,45,207,78,70,187,185,246,68,213,254,168,67,51,80,186,65,197,91,178,63,32,204,168,193,139,247,216,66,54,123,33,69,232,158,62,198,230,72,234,196,148,31,142,195,218,232,144,193,220,181,201,61,190,20,251,63,15,177,127,191,152,64,2,66,94,213,19,66,106,66,213,196,38,205,75,70,66,172,245,68,70,55,163,67,112,102,177,65,251,108,153,63,81,248,202,193,231,35,102,66,180,6,15,69,179,170,67,198,226,90,239,196,151,161,149,195,66,6,155,193,60,57,73,61,109,196,254,63,54,211,37,70,68,177,165,69,175,113,104,68,69,51,54,68,128,12,144,67,180,213,129,66,2,0,241,65,34,63,131,64,49,19,72,70,167,49,243,68,86,182,156,67,170,105,166,65,251,100,249,68,112,3,16,65,17,158,233,193,0,0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,166,64,0,0,250,66,102,102,134,192,154,153,201,192,154,153,153,64,0,0,128,63,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,236,81,120,63,0,0,160,64,0,0,200,66,1,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,154,153,169,64,0,0,250,66,102,102,102,192,51,51,179,192,0,0,144,64,0,0,192,63,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,205,204,172,63,0,0,160,64,0,0,200,66,2,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,51,51,179,64,0,0,250,66,205,204,12,192,0,0,96,192,51,51,51,64,0,0,0,64,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,82,184,190,63,0,0,160,64,0,0,200,66,3,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,185,64,0,0,2,67,102,102,230,191,51,51,51,192,102,102,38,64,0,0,64,64,0,0,128,192,0,0,0,0,2,0,0,0,20,0,0,0,133,235,209,63,0,0,160,64,0,0,200,66,4,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,192,64,0,0,7,67,51,51,51,191,205,204,140,191,205,204,140,63,0,0,96,64,0,0,0,193,0,0,0,0,2,0,0,0,0,0,0,0,184,30,229,63,0,0,160,64,0,0,200,66,5,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,205,204,204,64,0,0,12,67,0,0,0,63,205,204,204,62,0,0,240,192,0,0,128,64,0,0,64,193,23,183,81,57,0,0,0,0,0,0,0,0,154,153,249,63,0,0,160,64,0,0,200,66,6,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,31,133,43,63,102,102,38,63,51,51,107,193,0,0,208,64,0,0,152,193,23,183,209,57,0,0,0,0,0,0,0,0,51,51,19,64,0,0,160,64,0,0,200,66,7,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,205,204,76,63,0,0,64,63,154,153,157,193,0,0,0,65,0,0,176,193,82,73,29,58,0,0,0,0,0,0,0,0,205,204,44,64,0,0,160,64,0,0,200,66,8,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,154,153,153,63,51,51,147,63,0,0,220,193,0,0,32,65,0,0,184,193,52,128,55,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,9,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,205,204,204,63,205,204,204,63,0,0,16,194,0,0,48,65,0,0,200,193,23,183,81,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,10,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,0,0,0,64,0,0,0,64,0,0,16,194,0,0,64,65,0,0,200,193,23,183,81,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,0,0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,154,153,217,192,154,153,217,192,51,51,227,64,0,0,128,63,0,0,0,0,0,0,0,0,2,0,0,0,31,0,0,0,0,0,128,63,0,0,160,64,0,0,200,66,1,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,154,153,153,192,154,153,153,192,205,204,172,64,51,51,179,63,0,0,128,191,0,0,0,0,2,0,0,0,27,0,0,0,178,157,143,63,0,0,160,64,0,0,196,66,2,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,102,102,38,192,102,102,38,192,205,204,108,64,0,0,0,64,0,0,64,192,0,0,0,0,2,0,0,0,23,0,0,0,47,221,164,63,0,0,160,64,0,0,194,66,3,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,205,204,204,191,205,204,204,191,0,0,0,64,0,0,0,64,0,0,160,192,0,0,0,0,2,0,0,0,18,0,0,0,223,79,189,63,0,0,160,64,0,0,192,66,4,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,64,0,0,0,193,0,0,0,0,2,0,0,0,12,0,0,0,16,88,217,63,0,0,160,64,0,0,190,66,5,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,102,102,166,63,102,102,166,63,0,0,192,192,0,0,96,64,0,0,48,193,0,0,0,0,2,0,0,0,8,0,0,0,154,153,249,63,0,0,160,64,102,102,188,66,6,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,144,64,0,0,200,66,205,204,12,64,51,51,19,64,0,0,64,193,0,0,192,64,0,0,96,193,0,0,0,0,2,0,0,0,4,0,0,0,199,75,15,64,0,0,64,64,205,204,187,66,7,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,153,64,0,0,72,67,205,204,44,64,205,204,44,64,0,0,144,193,0,0,16,65,0,0,136,193,0,0,0,0,2,0,0,0,0,0,0,0,225,122,36,64,0,0,128,63,51,51,187,66,8,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,169,64,0,0,150,67,51,51,51,64,51,51,51,64,0,0,168,193,0,0,32,65,0,0,184,193,23,183,81,57,0,0,0,0,0,0,0,0,47,221,60,64,0,0,0,0,154,153,186,66,9,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,150,67,51,51,51,64,51,51,51,64,0,0,184,193,0,0,48,65,0,0,200,193,82,73,29,58,0,0,0,0,0,0,0,0,254,212,88,64,0,0,0,0,154,153,186,66,10,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,200,65,0,0,150,67,51,51,51,64,51,51,51,64,0,0,200,193,0,0,64,65,0,0,216,193,10,215,35,59,0,0,0,0,0,0,0,0,0,0,96,64,0,0,0,0,154,153,186,66,0,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,240,193,0,0,48,65,82,73,157,58,1,0,0,0,16,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,200,193,0,0,48,65,111,18,131,58,1,0,0,0,24,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,160,193,0,0,48,65,111,18,131,58,1,0,0,0,32,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,112,193,0,0,48,65,111,18,131,58,1,0,0,0,40,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,32,193,0,0,48,65,250,237,107,58,1,0,0,0,48,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,32,193,0,0,48,65,250,237,107,58,1,0,0,0,56,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,192,192,0,0,48,65,23,183,81,58,1,0,0,0,64,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,192,0,0,48,65,23,183,81,58,1,0,0,0,80,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,0,0,0,0,65,52,128,55,58,1,0,0,0,96,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,32,64,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,128,63,0,0,176,64,82,73,29,58,1,0,0,0,112,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,16,64,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,64,0,0,144,64,111,18,3,58,1,0,0,0,128,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,154,153,249,63,205,204,204,64,0,0,12,67,51,51,115,63,0,0,0,0,0,0,64,64,0,0,128,64,23,183,81,57,1,0,0,0,160,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,184,30,229,63,0,0,192,64,0,0,7,67,51,51,115,63,0,0,0,192,0,0,160,64,0,0,96,64,0,0,0,0,1,0,0,0,192,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,82,184,190,63,51,51,179,64,0,0,250,66,236,81,120,63,0,0,128,192,0,0,224,64,0,0,64,64,0,0,0,0,0,0,0,0,224,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,160,63,102,102,166,64,0,0,250,66,72,225,122,63,0,0,192,192,0,0,16,65,0,0,0,64,0,0,0,0,0,0,0,0,0,1,0,0,9,0,0,0,9,0,0,0,1,0,0,0,236,81,120,63,102,102,166,64,0,0,250,66,0,0,128,63,0,0,0,193,0,0,32,65,0,0,128,63,0,0,0,0,0,0,0,0,64,1,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,102,63,102,102,166,64,0,0,250,66,0,0,128,63,0,0,32,193,0,0,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,128,63,54,89,75,63,152,134,33,63,152,134,33,63,152,134,33,63,152,134,33,63,152,134,33,63,250,155,128,62,153,158,240,61,0,0,0,0,0,0,0,0,0,0,0,0,137,158,227,63,229,83,236,63,167,94,245,63,155,20,249,63,14,217,252,63,123,143,234,63,218,151,217,63,226,132,191,63,124,145,168,63,0,0,128,63,0,0,0,0,0,0,0,0,205,204,60,65,154,153,89,65,154,153,137,65,0,0,0,66,0,0,58,66,51,51,77,66,0,0,102,66,51,51,134,66,0,0,143,66,51,51,169,66,51,51,195,66,0,0,2,67,154,153,217,64,154,153,185,64,154,153,185,64,205,204,204,64,0,0,208,64,102,102,30,65,154,153,65,65,102,102,102,65,0,0,112,65,51,51,151,65,205,204,172,65,51,51,215,65,205,204,8,66,205,204,32,66,51,51,59,66,0,0,98,66,205,204,114,66,205,204,147,66,102,102,171,66,205,204,186,66,51,51,252,66,0,0,0,0,205,204,236,192,205,204,236,192,205,204,236,192,0,0,24,193,205,204,236,192,51,51,195,192,0,0,176,192,102,102,150,192,102,102,150,192,102,102,150,192,102,102,150,192,0,0,0,0,73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,3,0,0,0,9,0,0,0,9,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,9,0,0,0,12,0,0,0,6,0,0,0,11,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,6,0,0,0,15,0,0,0,12,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,12,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,9,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,5,0,0,0,0,0,0,0,15,0,0,0,12,0,0,0,9,0,0,0,0,0,0,0,6,0,0,0,18,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,32,0,0,0,42,0,0,0,56,0,0,0,74,0,0,0,100,0,0,0,132,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,114,0,0,0,136,0,0,0,162,0,0,0,194,0,0,0,232,0,0,0,22,1,0,0,76,1,0,0,138,1,0,0,208,1,0,0,28,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,136,0,0,0,180,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,52,0,0,0,62,0,0,0,74,0,0,0,90,0,0,0,110,0,0,0,134,0,0,0,162,0,0,0,196,0,0,0,238,0,0,0,32,1,0,0,86,1,0,0,162,1,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,30,0,0,0,40,0,0,0,52,0,0,0,66,0,0,0,84,0,0,0,106,0,0,0,136,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,42,0,0,0,50,0,0,0,60,0,0,0,72,0,0,0,88,0,0,0,106,0,0,0,128,0,0,0,156,0,0,0,190,0,0,0,230,0,0,0,20,1,0,0,74,1,0,0,128,1,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,28,0,0,0,38,0,0,0,50,0,0,0,64,0,0,0,80,0,0,0,100,0,0,0,126,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,82,0,0,0,102,0,0,0,126,0,0,0,156,0,0,0,194,0,0,0,240,0,0,0,40,1,0,0,108,1,0,0,192,1,0,0,38,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,30,0,0,0,42,0,0,0,58,0,0,0,78,0,0,0,104,0,0,0,138,0,0,0,180,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,24,0,0,0,36,0,0,0,48,0,0,0,60,0,0,0,72,0,0,0,88,0,0,0,108,0,0,0,132,0,0,0,160,0,0,0,192,0,0,0,232,0,0,0,24,1,0,0,80,1,0,0,144,1,0,0,220,1,0,0,54,2,0,0,56,2,0,0,58,2,0,0,60,2,0,0,62,2,0,0,64,2,0,0,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,36,0,0,0,52,0,0,0,72,0,0,0,96,0,0,0,124,0,0,0,160,0,0,0,162,0,0,0,164,0,0,0,166,0,0,0,192], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+6448);
/* memory initializer */ allocate([1,4,3,5,0,0,0,0,1,5,5,7,5,8,7,9,5,7,7,9,7,9,9,10,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,192,72,1,0,56,65,1,0,3,0,0,0,0,0,0,0,200,72,1,0,224,72,1,0,3,0,0,0,0,0,0,0,240,72,1,0,8,73,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,24,73,1,0,56,73,1,0,4,0,0,0,0,0,0,0,72,73,1,0,104,73,1,0,6,0,0,0,0,0,0,0,120,73,1,0,192,73,1,0,6,0,0,0,0,0,0,0,232,73,1,0,48,74,1,0,6,0,0,0,0,0,0,0,88,74,1,0,160,74,1,0,8,0,0,0,0,0,0,0,200,74,1,0,72,75,1,0,8,0,0,0,0,0,0,0,136,75,1,0,8,76,1,0,8,0,0,0,0,0,0,0,72,76,1,0,200,76,1,0,16,0,0,0,0,0,0,0,8,77,1,0,8,79,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,80,1,0,16,0,0,0,0,0,0,0,8,81,1,0,8,83,1,0,1,0,0,0,1,0,0,0,8,84,1,0,8,86,1,0,2,0,0,0,3,0,0,0,8,84,1,0,8,86,1,0,3,0,0,0,7,0,0,0,8,84,1,0,8,86,1,0,4,0,0,0,15,0,0,0,8,84,1,0,8,86,1,0,6,0,0,0,63,0,0,0,8,84,1,0,8,86,1,0,8,0,0,0,255,0,0,0,8,84,1,0,8,86,1,0,10,0,0,0,255,3,0,0,8,84,1,0,8,86,1,0,13,0,0,0,255,31,0,0,8,84,1,0,8,86,1,0,4,0,0,0,15,0,0,0,8,87,1,0,8,89,1,0,5,0,0,0,31,0,0,0,8,87,1,0,8,89,1,0,6,0,0,0,63,0,0,0,8,87,1,0,8,89,1,0,7,0,0,0,127,0,0,0,8,87,1,0,8,89,1,0,8,0,0,0,255,0,0,0,8,87,1,0,8,89,1,0,9,0,0,0,255,1,0,0,8,87,1,0,8,89,1,0,11,0,0,0,255,7,0,0,8,87,1,0,8,89,1,0,13,0,0,0,255,31,0,0,8,87,1,0,8,89,1,0,0,0,0,0,0,0,0,0,8,90,1,0,64,65,1,0,0,0,0,0,0,0,0,0,40,90,1,0,80,65,1,0,4,0,1,0,5,0,5,0,7,0,7,0,8,0,9,0,9,0,10,0,10,0,10,0,10,0,11,0,11,0,11,0,11,0,12,0,12,0,12,0,12,0,12,0,12,0,13,0,12,0,13,0,12,0,13,0,13,0,14,0,10,0,10,0,5,0,4,0,6,0,6,0,7,0,8,0,8,0,9,0,9,0,10,0,10,0,11,0,10,0,11,0,11,0,11,0,11,0,12,0,11,0,12,0,12,0,12,0,12,0,13,0,12,0,14,0,12,0,13,0,12,0,14,0,10,0,10,0,7,0,7,0,7,0,8,0,8,0,9,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,11,0,12,0,11,0,13,0,11,0,12,0,11,0,13,0,12,0,13,0,12,0,13,0,12,0,14,0,13,0,14,0,9,0,11,0,8,0,9,0,8,0,9,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,9,0,12,0,9,0,10,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,13,0,15,0,9,0,11,0,10,0,10,0,9,0,10,0,10,0,11,0,10,0,11,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,14,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,9,0,12,0,10,0,11,0,10,0,11,0,10,0,11,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,13,0,16,0,9,0,12,0,11,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,13,0,17,0,13,0,17,0,10,0,12,0,11,0,11,0,11,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,11,0,14,0,11,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,13,0,16,0,13,0,16,0,10,0,12,0,11,0,12,0,11,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,14,0,11,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,13,0,15,0,13,0,16,0,13,0,15,0,10,0,13,0,12,0,12,0,11,0,13,0,11,0,12,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,17,0,13,0,17,0,13,0,16,0,10,0,12,0,12,0,13,0,12,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,16,0,12,0,16,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,16,0,13,0,15,0,13,0,16,0,10,0,13,0,12,0,13,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,17,0,13,0,16,0,13,0,16,0,13,0,16,0,13,0,16,0,13,0,18,0,10,0,13,0,12,0,15,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,18,0,13,0,17,0,13,0,17,0,13,0,17,0,13,0,19,0,13,0,17,0,10,0,13,0,13,0,14,0,12,0,15,0,12,0,13,0,12,0,14,0,12,0,16,0,12,0,16,0,12,0,15,0,13,0,16,0,13,0,16,0,13,0,17,0,13,0,18,0,13,0,17,0,13,0,19,0,13,0,17,0,13,0,16,0,10,0,13,0,9,0,10,0,9,0,10,0,9,0,10,0,9,0,11,0,9,0,11,0,9,0,12,0,9,0,12,0,9,0,12,0,9,0,13,0,9,0,13,0,9,0,13,0,10,0,13,0,10,0,13,0,10,0,13,0,10,0,13,0,6,0,10,0,2,0,1,0,3,0,4,0,7,0,7,0,4,0,4,0,4,0,5,0,7,0,7,0,6,0,6,0,7,0,7,0,8,0,8,0,0,0,0,0,3,0,1,0,4,0,4,0,6,0,7,0,8,0,8,0,4,0,4,0,4,0,5,0,6,0,8,0,7,0,9,0,5,0,7,0,6,0,8,0,7,0,9,0,8,0,10,0,7,0,8,0,7,0,8,0,8,0,9,0,9,0,10,0,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,144,0,0,0,160,0,0,0,255,255,255,255,0,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,255,255,255,255,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,6,0,0,0,11,0,0,0,16,0,0,0,21,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,2,0,1,0,3,0,1,0,1,0,3,0,2,0,0,0,0,0,0,0,0,0,1,4,7,4,5,7,6,7,8,0,0,0,0,0,0,0,3,0,2,0,1,0,1,0,1,0,1,0,3,0,2,0,0,0,0,0,0,0,0,0,2,3,7,4,4,7,6,7,8,0,0,0,0,0,0,0,1,0,2,0,6,0,5,0,3,0,1,0,4,0,4,0,7,0,5,0,7,0,1,0,6,0,1,0,1,0,0,0,1,4,7,8,4,5,8,9,7,8,9,10,8,8,9,10,7,0,3,0,5,0,1,0,6,0,2,0,3,0,2,0,5,0,4,0,4,0,1,0,3,0,3,0,2,0,0,0,3,4,6,8,4,4,6,7,5,6,7,8,7,7,8,9,1,0,2,0,10,0,19,0,16,0,10,0,3,0,3,0,7,0,10,0,5,0,3,0,11,0,4,0,13,0,17,0,8,0,4,0,12,0,11,0,18,0,15,0,11,0,2,0,7,0,6,0,9,0,14,0,3,0,1,0,6,0,4,0,5,0,3,0,2,0,0,0,1,4,7,9,9,10,4,6,8,9,9,10,7,7,9,10,10,11,8,9,10,11,11,11,8,9,10,11,11,12,9,10,11,12,12,12,0,0,0,0,3,0,4,0,6,0,18,0,12,0,5,0,5,0,1,0,2,0,16,0,9,0,3,0,7,0,3,0,5,0,14,0,7,0,3,0,19,0,17,0,15,0,13,0,10,0,4,0,13,0,5,0,8,0,11,0,5,0,1,0,12,0,4,0,4,0,1,0,1,0,0,0,2,4,7,9,9,10,4,4,6,10,10,10,7,6,8,10,10,11,9,10,10,11,11,12,9,9,10,11,12,12,10,10,11,11,13,13,0,0,0,0,7,0,5,0,9,0,14,0,15,0,7,0,6,0,4,0,5,0,5,0,6,0,7,0,7,0,6,0,8,0,8,0,8,0,5,0,15,0,6,0,9,0,10,0,5,0,1,0,11,0,7,0,9,0,6,0,4,0,1,0,14,0,4,0,6,0,2,0,6,0,0,0,3,4,6,7,9,10,4,5,6,7,8,10,5,6,7,8,9,10,7,7,8,9,9,10,8,8,9,9,10,11,9,9,10,10,11,11,0,0,0,0,1,0,2,0,10,0,23,0,35,0,30,0,12,0,17,0,3,0,3,0,8,0,12,0,18,0,21,0,12,0,7,0,11,0,9,0,15,0,21,0,32,0,40,0,19,0,6,0,14,0,13,0,22,0,34,0,46,0,23,0,18,0,7,0,20,0,19,0,33,0,47,0,27,0,22,0,9,0,3,0,31,0,22,0,41,0,26,0,21,0,20,0,5,0,3,0,14,0,13,0,10,0,11,0,16,0,6,0,5,0,1,0,9,0,8,0,7,0,8,0,4,0,4,0,2,0,0,0,1,4,7,9,10,10,10,11,4,6,8,9,10,11,10,10,7,8,9,10,11,12,11,11,8,9,10,11,12,12,11,12,9,10,11,12,12,12,12,12,10,11,12,12,13,13,12,13,9,10,11,12,12,12,13,13,10,10,11,12,12,13,13,13,3,0,4,0,10,0,24,0,34,0,33,0,21,0,15,0,5,0,3,0,4,0,10,0,32,0,17,0,11,0,10,0,11,0,7,0,13,0,18,0,30,0,31,0,20,0,5,0,25,0,11,0,19,0,59,0,27,0,18,0,12,0,5,0,35,0,33,0,31,0,58,0,30,0,16,0,7,0,5,0,28,0,26,0,32,0,19,0,17,0,15,0,8,0,14,0,14,0,12,0,9,0,13,0,14,0,9,0,4,0,1,0,11,0,4,0,6,0,6,0,6,0,3,0,2,0,0,0,2,4,6,8,9,10,9,10,4,5,6,8,10,10,9,10,6,7,8,9,10,11,10,10,8,8,9,11,10,12,10,11,9,10,10,11,11,12,11,12,9,10,11,12,12,13,12,13,9,9,9,10,11,12,12,12,9,9,10,11,12,12,12,12,9,0,6,0,16,0,33,0,41,0,39,0,38,0,26,0,7,0,5,0,6,0,9,0,23,0,16,0,26,0,11,0,17,0,7,0,11,0,14,0,21,0,30,0,10,0,7,0,17,0,10,0,15,0,12,0,18,0,28,0,14,0,5,0,32,0,13,0,22,0,19,0,18,0,16,0,9,0,5,0,40,0,17,0,31,0,29,0,17,0,13,0,4,0,2,0,27,0,12,0,11,0,15,0,10,0,7,0,4,0,1,0,27,0,12,0,8,0,12,0,6,0,3,0,1,0,0,0,4,4,6,8,9,10,10,10,4,5,6,7,9,9,10,10,6,6,7,8,9,10,9,10,7,7,8,8,9,10,10,10,8,8,9,9,10,10,10,11,9,9,10,10,10,11,10,11,9,9,9,10,10,11,11,12,10,10,10,11,11,11,11,12,1,0,5,0,14,0,21,0,34,0,51,0,46,0,71,0,42,0,52,0,68,0,52,0,67,0,44,0,43,0,19,0,3,0,4,0,12,0,19,0,31,0,26,0,44,0,33,0,31,0,24,0,32,0,24,0,31,0,35,0,22,0,14,0,15,0,13,0,23,0,36,0,59,0,49,0,77,0,65,0,29,0,40,0,30,0,40,0,27,0,33,0,42,0,16,0,22,0,20,0,37,0,61,0,56,0,79,0,73,0,64,0,43,0,76,0,56,0,37,0,26,0,31,0,25,0,14,0,35,0,16,0,60,0,57,0,97,0,75,0,114,0,91,0,54,0,73,0,55,0,41,0,48,0,53,0,23,0,24,0,58,0,27,0,50,0,96,0,76,0,70,0,93,0,84,0,77,0,58,0,79,0,29,0,74,0,49,0,41,0,17,0,47,0,45,0,78,0,74,0,115,0,94,0,90,0,79,0,69,0,83,0,71,0,50,0,59,0,38,0,36,0,15,0,72,0,34,0,56,0,95,0,92,0,85,0,91,0,90,0,86,0,73,0,77,0,65,0,51,0,44,0,43,0,42,0,43,0,20,0,30,0,44,0,55,0,78,0,72,0,87,0,78,0,61,0,46,0,54,0,37,0,30,0,20,0,16,0,53,0,25,0,41,0,37,0,44,0,59,0,54,0,81,0,66,0,76,0,57,0,54,0,37,0,18,0,39,0,11,0,35,0,33,0,31,0,57,0,42,0,82,0,72,0,80,0,47,0,58,0,55,0,21,0,22,0,26,0,38,0,22,0,53,0,25,0,23,0,38,0,70,0,60,0,51,0,36,0,55,0,26,0,34,0,23,0,27,0,14,0,9,0,7,0,34,0,32,0,28,0,39,0,49,0,75,0,30,0,52,0,48,0,40,0,52,0,28,0,18,0,17,0,9,0,5,0,45,0,21,0,34,0,64,0,56,0,50,0,49,0,45,0,31,0,19,0,12,0,15,0,10,0,7,0,6,0,3,0,48,0,23,0,20,0,39,0,36,0,35,0,53,0,21,0,16,0,23,0,13,0,10,0,6,0,1,0,4,0,2,0,16,0,15,0,17,0,27,0,25,0,20,0,29,0,11,0,17,0,12,0,16,0,8,0,1,0,1,0,0,0,1,0,1,5,7,8,9,10,10,11,10,11,12,12,13,13,14,14,4,6,8,9,10,10,11,11,11,11,12,12,13,14,14,14,7,8,9,10,11,11,12,12,11,12,12,13,13,14,15,15,8,9,10,11,11,12,12,12,12,13,13,13,13,14,15,15,9,9,11,11,12,12,13,13,12,13,13,14,14,15,15,16,10,10,11,12,12,12,13,13,13,13,14,13,15,15,16,16,10,11,12,12,13,13,13,13,13,14,14,14,15,15,16,16,11,11,12,13,13,13,14,14,14,14,15,15,15,16,18,18,10,10,11,12,12,13,13,14,14,14,14,15,15,16,17,17,11,11,12,12,13,13,13,15,14,15,15,16,16,16,18,17,11,12,12,13,13,14,14,15,14,15,16,15,16,17,18,19,12,12,12,13,14,14,14,14,15,15,15,16,17,17,17,18,12,13,13,14,14,15,14,15,16,16,17,17,17,18,18,18,13,13,14,15,15,15,16,16,16,16,16,17,18,17,18,18,14,14,14,15,15,15,17,16,16,19,17,17,17,19,18,18,13,14,15,16,16,16,17,16,17,17,18,18,21,20,21,18,1,5,7,9,10,10,11,11,12,12,12,13,13,13,14,11,4,6,8,9,10,11,11,11,12,12,12,13,14,13,14,11,7,8,9,10,11,11,12,12,13,12,13,13,13,14,14,12,9,9,10,11,11,12,12,12,13,13,14,14,14,15,15,13,10,10,11,11,12,12,13,13,13,14,14,14,15,15,15,12,10,10,11,11,12,13,13,14,13,14,14,15,15,15,16,13,11,11,11,12,13,13,13,13,14,14,14,14,15,15,16,13,11,11,12,12,13,13,13,14,14,15,15,15,15,17,17,13,11,12,12,13,13,13,14,14,15,15,15,15,16,16,16,13,12,12,12,13,13,14,14,15,15,15,15,16,15,16,15,14,12,13,12,13,14,14,14,14,15,16,16,16,17,17,16,13,13,13,13,13,14,14,15,16,16,16,16,16,16,15,16,14,13,14,14,14,14,15,15,15,15,17,16,16,16,16,18,14,15,14,14,14,15,15,16,16,16,18,17,17,17,19,17,14,14,15,13,14,16,16,15,16,16,17,18,17,19,17,16,14,11,11,11,12,12,13,13,13,14,14,14,14,14,14,14,12,7,0,12,0,18,0,53,0,47,0,76,0,124,0,108,0,89,0,123,0,108,0,119,0,107,0,81,0,122,0,63,0,13,0,5,0,16,0,27,0,46,0,36,0,61,0,51,0,42,0,70,0,52,0,83,0,65,0,41,0,59,0,36,0,19,0,17,0,15,0,24,0,41,0,34,0,59,0,48,0,40,0,64,0,50,0,78,0,62,0,80,0,56,0,33,0,29,0,28,0,25,0,43,0,39,0,63,0,55,0,93,0,76,0,59,0,93,0,72,0,54,0,75,0,50,0,29,0,52,0,22,0,42,0,40,0,67,0,57,0,95,0,79,0,72,0,57,0,89,0,69,0,49,0,66,0,46,0,27,0,77,0,37,0,35,0,66,0,58,0,52,0,91,0,74,0,62,0,48,0,79,0,63,0,90,0,62,0,40,0,38,0,125,0,32,0,60,0,56,0,50,0,92,0,78,0,65,0,55,0,87,0,71,0,51,0,73,0,51,0,70,0,30,0,109,0,53,0,49,0,94,0,88,0,75,0,66,0,122,0,91,0,73,0,56,0,42,0,64,0,44,0,21,0,25,0,90,0,43,0,41,0,77,0,73,0,63,0,56,0,92,0,77,0,66,0,47,0,67,0,48,0,53,0,36,0,20,0,71,0,34,0,67,0,60,0,58,0,49,0,88,0,76,0,67,0,106,0,71,0,54,0,38,0,39,0,23,0,15,0,109,0,53,0,51,0,47,0,90,0,82,0,58,0,57,0,48,0,72,0,57,0,41,0,23,0,27,0,62,0,9,0,86,0,42,0,40,0,37,0,70,0,64,0,52,0,43,0,70,0,55,0,42,0,25,0,29,0,18,0,11,0,11,0,118,0,68,0,30,0,55,0,50,0,46,0,74,0,65,0,49,0,39,0,24,0,16,0,22,0,13,0,14,0,7,0,91,0,44,0,39,0,38,0,34,0,63,0,52,0,45,0,31,0,52,0,28,0,19,0,14,0,8,0,9,0,3,0,123,0,60,0,58,0,53,0,47,0,43,0,32,0,22,0,37,0,24,0,17,0,12,0,15,0,10,0,2,0,1,0,71,0,37,0,34,0,30,0,28,0,20,0,17,0,26,0,21,0,16,0,10,0,6,0,8,0,6,0,2,0,0,0,3,5,6,8,8,9,10,10,10,11,11,12,12,12,13,14,5,5,7,8,9,9,10,10,10,11,11,12,12,12,13,13,6,7,7,8,9,9,10,10,10,11,11,12,12,13,13,13,7,8,8,9,9,10,10,11,11,11,12,12,12,13,13,13,8,8,9,9,10,10,11,11,11,11,12,12,12,13,13,13,9,9,9,10,10,10,11,11,11,11,12,12,13,13,13,14,10,9,10,10,10,11,11,11,11,12,12,12,13,13,14,14,10,10,10,11,11,11,11,12,12,12,12,12,13,13,13,14,10,10,10,11,11,11,11,12,12,12,12,13,13,14,14,14,10,10,11,11,11,11,12,12,12,13,13,13,13,14,14,14,11,11,11,11,12,12,12,12,12,13,13,13,13,14,15,14,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,15,12,12,11,12,12,12,13,13,13,13,13,13,14,14,15,15,12,12,12,12,12,13,13,13,13,14,14,14,14,14,15,15,13,13,13,13,13,13,13,13,14,14,14,14,15,15,14,15,13,13,13,13,13,13,13,14,14,14,14,14,15,15,15,15,1,0,5,0,14,0,44,0,74,0,63,0,110,0,93,0,172,0,149,0,138,0,242,0,225,0,195,0,120,1,17,0,3,0,4,0,12,0,20,0,35,0,62,0,53,0,47,0,83,0,75,0,68,0,119,0,201,0,107,0,207,0,9,0,15,0,13,0,23,0,38,0,67,0,58,0,103,0,90,0,161,0,72,0,127,0,117,0,110,0,209,0,206,0,16,0,45,0,21,0,39,0,69,0,64,0,114,0,99,0,87,0,158,0,140,0,252,0,212,0,199,0,131,1,109,1,26,0,75,0,36,0,68,0,65,0,115,0,101,0,179,0,164,0,155,0,8,1,246,0,226,0,139,1,126,1,106,1,9,0,66,0,30,0,59,0,56,0,102,0,185,0,173,0,9,1,142,0,253,0,232,0,144,1,132,1,122,1,189,1,16,0,111,0,54,0,52,0,100,0,184,0,178,0,160,0,133,0,1,1,244,0,228,0,217,0,129,1,110,1,203,2,10,0,98,0,48,0,91,0,88,0,165,0,157,0,148,0,5,1,248,0,151,1,141,1,116,1,124,1,121,3,116,3,8,0,85,0,84,0,81,0,159,0,156,0,143,0,4,1,249,0,171,1,145,1,136,1,127,1,215,2,201,2,196,2,7,0,154,0,76,0,73,0,141,0,131,0,0,1,245,0,170,1,150,1,138,1,128,1,223,2,103,1,198,2,96,1,11,0,139,0,129,0,67,0,125,0,247,0,233,0,229,0,219,0,137,1,231,2,225,2,208,2,117,3,114,3,183,1,4,0,243,0,120,0,118,0,115,0,227,0,223,0,140,1,234,2,230,2,224,2,209,2,200,2,194,2,223,0,180,1,6,0,202,0,224,0,222,0,218,0,216,0,133,1,130,1,125,1,108,1,120,3,187,1,195,2,184,1,181,1,192,6,4,0,235,2,211,0,210,0,208,0,114,1,123,1,222,2,211,2,202,2,199,6,115,3,109,3,108,3,131,13,97,3,2,0,121,1,113,1,102,0,187,0,214,2,210,2,102,1,199,2,197,2,98,3,198,6,103,3,130,13,102,3,178,1,0,0,12,0,10,0,7,0,11,0,10,0,17,0,11,0,9,0,13,0,12,0,10,0,7,0,5,0,3,0,1,0,3,0,1,5,7,9,10,10,11,11,12,12,12,13,13,13,14,10,4,6,8,9,10,11,11,11,12,12,12,13,14,13,14,10,7,8,9,10,11,11,12,12,13,12,13,13,13,14,14,11,9,9,10,11,11,12,12,12,13,13,14,14,14,15,15,12,10,10,11,11,12,12,13,13,13,14,14,14,15,15,15,11,10,10,11,11,12,13,13,14,13,14,14,15,15,15,16,12,11,11,11,12,13,13,13,13,14,14,14,14,15,15,16,12,11,11,12,12,13,13,13,14,14,15,15,15,15,17,17,12,11,12,12,13,13,13,14,14,15,15,15,15,16,16,16,12,12,12,12,13,13,14,14,15,15,15,15,16,15,16,15,13,12,13,12,13,14,14,14,14,15,16,16,16,17,17,16,12,13,13,13,13,14,14,15,16,16,16,16,16,16,15,16,13,13,14,14,14,14,15,15,15,15,17,16,16,16,16,18,13,15,14,14,14,15,15,16,16,16,18,17,17,17,19,17,13,14,15,13,14,16,16,15,16,16,17,18,17,19,17,16,13,10,10,10,11,11,12,12,12,13,13,13,13,13,13,13,10,15,0,13,0,46,0,80,0,146,0,6,1,248,0,178,1,170,1,157,2,141,2,137,2,109,2,5,2,8,4,88,0,14,0,12,0,21,0,38,0,71,0,130,0,122,0,216,0,209,0,198,0,71,1,89,1,63,1,41,1,23,1,42,0,47,0,22,0,41,0,74,0,68,0,128,0,120,0,221,0,207,0,194,0,182,0,84,1,59,1,39,1,29,2,18,0,81,0,39,0,75,0,70,0,134,0,125,0,116,0,220,0,204,0,190,0,178,0,69,1,55,1,37,1,15,1,16,0,147,0,72,0,69,0,135,0,127,0,118,0,112,0,210,0,200,0,188,0,96,1,67,1,50,1,29,1,28,2,14,0,7,1,66,0,129,0,126,0,119,0,114,0,214,0,202,0,192,0,180,0,85,1,61,1,45,1,25,1,6,1,12,0,249,0,123,0,121,0,117,0,113,0,215,0,206,0,195,0,185,0,91,1,74,1,52,1,35,1,16,1,8,2,10,0,179,1,115,0,111,0,109,0,211,0,203,0,196,0,187,0,97,1,76,1,57,1,42,1,27,1,19,2,125,1,17,0,171,1,212,0,208,0,205,0,201,0,193,0,186,0,177,0,169,0,64,1,47,1,30,1,12,1,2,2,121,1,16,0,79,1,199,0,197,0,191,0,189,0,181,0,174,0,77,1,65,1,49,1,33,1,19,1,9,2,123,1,115,1,11,0,156,2,184,0,183,0,179,0,175,0,88,1,75,1,58,1,48,1,34,1,21,1,18,2,127,1,117,1,110,1,10,0,140,2,90,1,171,0,168,0,164,0,62,1,53,1,43,1,31,1,20,1,7,1,1,2,119,1,112,1,106,1,6,0,136,2,66,1,60,1,56,1,51,1,46,1,36,1,28,1,13,1,5,1,0,2,120,1,114,1,108,1,103,1,4,0,108,2,44,1,40,1,38,1,32,1,26,1,17,1,10,1,3,2,124,1,118,1,113,1,109,1,105,1,101,1,2,0,9,4,24,1,22,1,18,1,11,1,8,1,3,1,126,1,122,1,116,1,111,1,107,1,104,1,102,1,100,1,0,0,43,0,20,0,19,0,17,0,15,0,13,0,11,0,9,0,7,0,6,0,4,0,7,0,5,0,3,0,1,0,3,0,4,5,7,8,9,10,10,11,11,12,12,12,12,12,13,10,5,6,7,8,9,10,10,11,11,11,12,12,12,12,12,10,7,7,8,9,9,10,10,11,11,11,11,12,12,12,13,9,8,8,9,9,10,10,10,11,11,11,11,12,12,12,12,9,9,9,9,10,10,10,10,11,11,11,12,12,12,12,13,9,10,9,10,10,10,10,11,11,11,11,12,12,12,12,12,9,10,10,10,10,10,11,11,11,11,12,12,12,12,12,13,9,11,10,10,10,11,11,11,11,12,12,12,12,12,13,13,10,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,10,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,10,12,11,11,11,11,12,12,12,12,12,12,13,13,13,13,10,12,12,11,11,11,12,12,12,12,12,12,13,13,13,13,10,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,10,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,10,13,12,12,12,12,12,12,13,13,13,13,13,13,13,13,10,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,6,1,0,10,0,8,0,20,0,12,0,20,0,16,0,32,0,14,0,12,0,24,0,0,0,28,0,16,0,24,0,16,0,15,0,28,0,26,0,48,0,22,0,40,0,36,0,64,0,14,0,24,0,20,0,32,0,12,0,16,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,18,0,0,0,36,0,0,0,54,0,0,0,51,0,0,0,35,0,0,0,53,0,0,0,71,0,0,0,52,0,0,0,70,0,0,0,88,0,0,0,69,0,0,0,87,0,0,0,105,0,0,0,104,0,0,0,122,0,0,0,0,0,0,0,18,0,0,0,36,0,0,0,54,0,0,0,54,0,0,0,36,0,0,0,54,0,0,0,72,0,0,0,54,0,0,0,72,0,0,0,90,0,0,0,72,0,0,0,90,0,0,0,108,0,0,0,108,0,0,0,126,0,0,0,0,0,0,0,10,0,0,0,20,0,0,0,30,0,0,0,33,0,0,0,21,0,0,0,31,0,0,0,41,0,0,0,32,0,0,0,42,0,0,0,52,0,0,0,43,0,0,0,53,0,0,0,63,0,0,0,64,0,0,0,74,0,0,0,15,0,0,0,15,0,0,0,7,0,0,0,7,0,0,0,15,0,0,0,15,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,31,0,0,0,31,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,7,0,0,0,7,0,0,0,10,0,0,0,10,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+82224);
/* memory initializer */ allocate([51,46,57,57,46,53,0,0,93,61,127,102,158,160,230,63,0,0,0,0,0,136,57,61,68,23,117,250,82,176,230,63,0,0,0,0,0,0,216,60,254,217,11,117,18,192,230,63,0,0,0,0,0,120,40,189,191,118,212,221,220,207,230,63,0,0,0,0,0,192,30,61,41,26,101,60,178,223,230,63,0,0,0,0,0,0,216,188,227,58,89,152,146,239,230,63,0,0,0,0,0,0,188,188,134,147,81,249,125,255,230,63,0,0,0,0,0,216,47,189,163,45,244,102,116,15,231,63,0,0,0,0,0,136,44,189,195,95,236,232,117,31,231,63,0,0,0,0,0,192,19,61,5,207,234,134,130,47,231,63,0,0,0,0,0,48,56,189,82,129,165,72,154,63,231,63,0,0,0,0,0,192,0,189,252,204,215,53,189,79,231,63,0,0,0,0,0,136,47,61,241,103,66,86,235,95,231,63,0,0,0,0,0,224,3,61,72,109,171,177,36,112,231,63,0,0,0,0,0,208,39,189,56,93,222,79,105,128,231,63,0,0,0,0,0,0,221,188,0,29,172,56,185,144,231,63,0,0,0,0,0,0,227,60,120,1,235,115,20,161,231,63,0,0,0,0,0,0,237,188,96,208,118,9,123,177,231,63,0,0,0,0,0,64,32,61,51,193,48,1,237,193,231,63,0,0,0,0,0,0,160,60,54,134,255,98,106,210,231,63,0,0,0,0,0,144,38,189,59,78,207,54,243,226,231,63,0,0,0,0,0,224,2,189,232,195,145,132,135,243,231,63,0,0,0,0,0,88,36,189,78,27,62,84,39,4,232,63,0,0,0,0,0,0,51,61,26,7,209,173,210,20,232,63,0,0,0,0,0,0,15,61,126,205,76,153,137,37,232,63,0,0,0,0,0,192,33,189,208,66,185,30,76,54,232,63,0,0,0,0,0,208,41,61,181,202,35,70,26,71,232,63,0,0,0,0,0,16,71,61,188,91,159,23,244,87,232,63,0,0,0,0,0,96,34,61,175,145,68,155,217,104,232,63,0,0,0,0,0,196,50,189,149,163,49,217,202,121,232,63,0,0,0,0,0,0,35,189,184,101,138,217,199,138,232,63,0,0,0,0,0,128,42,189,0,88,120,164,208,155,232,63,0,0,0,0,0,0,237,188,35,162,42,66,229,172,232,63,0,0,0,0,0,40,51,61,250,25,214,186,5,190,232,63,0,0,0,0,0,180,66,61,131,67,181,22,50,207,232,63,0,0,0,0,0,208,46,189,76,102,8,94,106,224,232,63,0,0,0,0,0,80,32,189,7,120,21,153,174,241,232,63,0,0,0,0,0,40,40,61,14,44,40,208,254,2,233,63,0,0,0,0,0,176,28,189,150,255,145,11,91,20,233,63,0,0,0,0,0,224,5,189,249,47,170,83,195,37,233,63,0,0,0,0,0,64,245,60,74,198,205,176,55,55,233,63,0,0,0,0,0,32,23,61,174,152,95,43,184,72,233,63,0,0,0,0,0,0,9,189,203,82,200,203,68,90,233,63,0,0,0,0,0,104,37,61,33,111,118,154,221,107,233,63,0,0,0,0,0,208,54,189,42,78,222,159,130,125,233,63,0,0,0,0,0,0,1,189,163,35,122,228,51,143,233,63,0,0,0,0,0,0,45,61,4,6,202,112,241,160,233,63,0,0,0,0,0,164,56,189,137,255,83,77,187,178,233,63,0,0,0,0,0,92,53,61,91,241,163,130,145,196,233,63,0,0,0,0,0,184,38,61,197,184,75,25,116,214,233,63,0,0,0,0,0,0,236,188,142,35,227,25,99,232,233,63,0,0,0,0,0,208,23,61,2,243,7,141,94,250,233,63,0,0,0,0,0,64,22,61,77,229,93,123,102,12,234,63,0,0,0,0,0,0,245,188,246,184,142,237,122,30,234,63,0,0,0,0,0,224,9,61,39,46,74,236,155,48,234,63,0,0,0,0,0,216,42,61,93,10,70,128,201,66,234,63,0,0,0,0,0,240,26,189,155,37,62,178,3,85,234,63,0,0,0,0,0,96,11,61,19,98,244,138,74,103,234,63,0,0,0,0,0,136,56,61,167,179,48,19,158,121,234,63,0,0,0,0,0,32,17,61,141,46,193,83,254,139,234,63,0,0,0,0,0,192,6,61,210,252,121,85,107,158,234,63,0,0,0,0,0,184,41,189,184,111,53,33,229,176,234,63,0,0,0,0,0,112,43,61,129,243,211,191,107,195,234,63,0,0,0,0,0,0,217,60,128,39,60,58,255,213,234,63,0,0,0,0,0,0,228,60,163,210,90,153,159,232,234,63,0,0,0,0,0,144,44,189,103,243,34,230,76,251,234,63,0,0,0,0,0,80,22,61,144,183,141,41,7,14,235,63,0,0,0,0,0,212,47,61,169,137,154,108,206,32,235,63,0,0,0,0,0,112,18,61,75,26,79,184,162,51,235,63,0,0,0,0,0,71,77,61,231,71,183,21,132,70,235,63,0,0,0,0,0,56,56,189,58,89,229,141,114,89,235,63,0,0,0,0,0,0,152,60,106,197,241,41,110,108,235,63,0,0,0,0,0,208,10,61,80,94,251,242,118,127,235,63,0,0,0,0,0,128,222,60,178,73,39,242,140,146,235,63,0,0,0,0,0,192,4,189,3,6,161,48,176,165,235,63,0,0,0,0,0,112,13,189,102,111,154,183,224,184,235,63,0,0,0,0,0,144,13,61,255,193,75,144,30,204,235,63,0,0,0,0,0,160,2,61,111,161,243,195,105,223,235,63,0,0,0,0,0,120,31,189,184,29,215,91,194,242,235,63,0,0,0,0,0,160,16,189,233,178,65,97,40,6,236,63,0,0,0,0,0,64,17,189,224,82,133,221,155,25,236,63,0,0,0,0,0,224,11,61,238,100,250,217,28,45,236,63,0,0,0,0,0,64,9,189,47,208,255,95,171,64,236,63,0,0,0,0,0,208,14,189,21,253,250,120,71,84,236,63,0,0,0,0,0,102,57,61,203,208,87,46,241,103,236,63,0,0,0,0,0,16,26,189,182,193,136,137,168,123,236,63,0,0,0,0,128,69,88,189,51,231,6,148,109,143,236,63,0,0,0,0,0,72,26,189,223,196,81,87,64,163,236,63,0,0,0,0,0,0,203,60,148,144,239,220,32,183,236,63,0,0,0,0,0,64,1,61,137,22,109,46,15,203,236,63,0,0,0,0,0,32,240,60,18,196,93,85,11,223,236,63,0,0,0,0,0,96,243,60,59,171,91,91,21,243,236,63,0,0,0,0,0,144,6,189,188,137,7,74,45,7,237,63,0,0,0,0,0,160,9,61,250,200,8,43,83,27,237,63,0,0,0,0,0,224,21,189,133,138,13,8,135,47,237,63,0,0,0,0,0,40,29,61,3,162,202,234,200,67,237,63,0,0,0,0,0,160,1,61,145,164,251,220,24,88,237,63,0,0,0,0,0,0,223,60,161,230,98,232,118,108,237,63,0,0,0,0,0,160,3,189,78,131,201,22,227,128,237,63,0,0,0,0,0,216,12,189,144,96,255,113,93,149,237,63,0,0,0,0,0,192,244,60,174,50,219,3,230,169,237,63,0,0,0,0,0,144,255,60,37,131,58,214,124,190,237,63,0,0,0,0,0,128,233,60,69,180,1,243,33,211,237,63,0,0,0,0,0,32,245,188,191,5,28,100,213,231,237,63,0,0,0,0,0,112,29,189,236,154,123,51,151,252,237,63,0,0,0,0,0,20,22,189,94,125,25,107,103,17,238,63,0,0,0,0,0,72,11,61,231,163,245,20,70,38,238,63,0,0,0,0,0,206,64,61,92,238,22,59,51,59,238,63,0,0,0,0,0,104,12,61,180,63,139,231,46,80,238,63,0,0,0,0,0,48,9,189,104,109,103,36,57,101,238,63,0,0,0,0,0,0,229,188,68,76,199,251,81,122,238,63,0,0,0,0,0,248,7,189,38,183,205,119,121,143,238,63,0,0,0,0,0,112,243,188,232,144,164,162,175,164,238,63,0,0,0,0,0,208,229,60,228,202,124,134,244,185,238,63,0,0,0,0,0,26,22,61,13,104,142,45,72,207,238,63,0,0,0,0,0,80,245,60,20,133,24,162,170,228,238,63,0,0,0,0,0,64,198,60,19,90,97,238,27,250,238,63,0,0,0,0,0,128,238,188,6,65,182,28,156,15,239,63,0,0,0,0,0,136,250,188,99,185,107,55,43,37,239,63,0,0,0,0,0,144,44,189,117,114,221,72,201,58,239,63,0,0,0,0,0,0,170,60,36,69,110,91,118,80,239,63,0,0,0,0,0,240,244,188,253,68,136,121,50,102,239,63,0,0,0,0,0,128,202,60,56,190,156,173,253,123,239,63,0,0,0,0,0,188,250,60,130,60,36,2,216,145,239,63,0,0,0,0,0,96,212,188,142,144,158,129,193,167,239,63,0,0,0,0,0,12,11,189,17,213,146,54,186,189,239,63,0,0,0,0,0,224,192,188,148,113,143,43,194,211,239,63,0,0,0,0,128,222,16,189,238,35,42,107,217,233,239,63,0,0,0,0,0,67,238,60,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,190,188,90,250,26,11,240,63,0,0,0,0,0,64,179,188,3,51,251,169,61,22,240,63,0,0,0,0,0,23,18,189,130,2,59,20,104,33,240,63,0,0,0,0,0,64,186,60,108,128,119,62,154,44,240,63,0,0,0,0,0,152,239,60,202,187,17,46,212,55,240,63,0,0,0,0,0,64,199,188,137,127,110,232,21,67,240,63,0,0,0,0,0,48,216,60,103,84,246,114,95,78,240,63,0,0,0,0,0,63,26,189,90,133,21,211,176,89,240,63,0,0,0,0,0,132,2,189,149,31,60,14,10,101,240,63,0,0,0,0,0,96,241,60,26,247,221,41,107,112,240,63,0,0,0,0,0,36,21,61,45,168,114,43,212,123,240,63,0,0,0,0,0,160,233,188,208,155,117,24,69,135,240,63,0,0,0,0,0,64,230,60,200,7,102,246,189,146,240,63,0,0,0,0,0,120,0,189,131,243,198,202,62,158,240,63,0,0,0,0,0,0,152,188,48,57,31,155,199,169,240,63,0,0,0,0,0,160,255,60,252,136,249,108,88,181,240,63,0,0,0,0,0,200,250,188,138,108,228,69,241,192,240,63,0,0,0,0,0,192,217,60,22,72,114,43,146,204,240,63,0,0,0,0,0,32,5,61,216,93,57,35,59,216,240,63,0,0,0,0,0,208,250,188,243,209,211,50,236,227,240,63,0,0,0,0,0,172,27,61,166,169,223,95,165,239,240,63,0,0,0,0,0,232,4,189,240,210,254,175,102,251,240,63,0,0,0,0,0,48,13,189,75,35,215,40,48,7,241,63,0,0,0,0,0,80,241,60,91,91,18,208,1,19,241,63,0,0,0,0,0,0,236,60,249,42,94,171,219,30,241,63,0,0,0,0,0,188,22,61,213,49,108,192,189,42,241,63,0,0,0,0,0,64,232,60,125,4,242,20,168,54,241,63,0,0,0,0,0,208,14,189,233,45,169,174,154,66,241,63,0,0,0,0,0,224,232,60,56,49,79,147,149,78,241,63,0,0,0,0,0,64,235,60,113,142,165,200,152,90,241,63,0,0,0,0,0,48,5,61,223,195,113,84,164,102,241,63,0,0,0,0,0,56,3,61,17,82,125,60,184,114,241,63,0,0,0,0,0,212,40,61,159,187,149,134,212,126,241,63,0,0,0,0,0,208,5,189,147,141,140,56,249,138,241,63,0,0,0,0,0,136,28,189,102,93,55,88,38,151,241,63,0,0,0,0,0,240,17,61,167,203,111,235,91,163,241,63,0,0,0,0,0,72,16,61,227,135,19,248,153,175,241,63,0,0,0,0,0,57,71,189,84,93,4,132,224,187,241,63,0,0,0,0,0,228,36,61,67,28,40,149,47,200,241,63,0,0,0,0,0,32,10,189,178,185,104,49,135,212,241,63,0,0,0,0,0,128,227,60,49,64,180,94,231,224,241,63,0,0,0,0,0,192,234,60,56,217,252,34,80,237,241,63,0,0,0,0,0,144,1,61,247,205,56,132,193,249,241,63,0,0,0,0,0,120,27,189,143,141,98,136,59,6,242,63,0,0,0,0,0,148,45,61,30,168,120,53,190,18,242,63,0,0,0,0,0,0,216,60,65,221,125,145,73,31,242,63,0,0,0,0,0,52,43,61,35,19,121,162,221,43,242,63,0,0,0,0,0,248,25,61,231,97,117,110,122,56,242,63,0,0,0,0,0,200,25,189,39,20,130,251,31,69,242,63,0,0,0,0,0,48,2,61,2,166,178,79,206,81,242,63,0,0,0,0,0,72,19,189,176,206,30,113,133,94,242,63,0,0,0,0,0,112,18,61,22,125,226,101,69,107,242,63,0,0,0,0,0,208,17,61,15,224,29,52,14,120,242,63,0,0,0,0,0,238,49,61,62,99,245,225,223,132,242,63,0,0,0,0,0,192,20,189,48,187,145,117,186,145,242,63,0,0,0,0,0,216,19,189,9,223,31,245,157,158,242,63,0,0,0,0,0,176,8,61,155,14,209,102,138,171,242,63,0,0,0,0,0,124,34,189,58,218,218,208,127,184,242,63,0,0,0,0,0,52,42,61,249,26,119,57,126,197,242,63,0,0,0,0,0,128,16,189,217,2,228,166,133,210,242,63,0,0,0,0,0,208,14,189,121,21,100,31,150,223,242,63,0,0,0,0,0,32,244,188,207,46,62,169,175,236,242,63,0,0,0,0,0,152,36,189,34,136,189,74,210,249,242,63,0,0,0,0,0,48,22,189,37,182,49,10,254,6,243,63,0,0,0,0,0,54,50,189,11,165,238,237,50,20,243,63,0,0,0,0,128,223,112,189,184,215,76,252,112,33,243,63,0,0,0,0,0,72,34,189,162,233,168,59,184,46,243,63,0,0,0,0,0,152,37,189,102,23,100,178,8,60,243,63,0,0,0,0,0,208,30,61,39,250,227,102,98,73,243,63,0,0,0,0,0,0,220,188,15,159,146,95,197,86,243,63,0,0,0,0,0,216,48,189,185,136,222,162,49,100,243,63,0,0,0,0,0,200,34,61,57,170,58,55,167,113,243,63,0,0,0,0,0,96,32,61,254,116,30,35,38,127,243,63,0,0,0,0,0,96,22,189,56,216,5,109,174,140,243,63,0,0,0,0,0,224,10,189,195,62,113,27,64,154,243,63,0,0,0,0,0,114,68,189,32,160,229,52,219,167,243,63,0,0,0,0,0,32,8,61,149,110,236,191,127,181,243,63,0,0,0,0,0,128,62,61,242,168,19,195,45,195,243,63,0,0,0,0,0,128,239,60,34,225,237,68,229,208,243,63,0,0,0,0,0,160,23,189,187,52,18,76,166,222,243,63,0,0,0,0,0,48,38,61,204,78,28,223,112,236,243,63,0,0,0,0,0,166,72,189,140,126,172,4,69,250,243,63,0,0,0,0,0,220,60,189,187,160,103,195,34,8,244,63,0,0,0,0,0,184,37,61,149,46,247,33,10,22,244,63,0,0,0,0,0,192,30,61,70,70,9,39,251,35,244,63,0,0,0,0,0,96,19,189,32,169,80,217,245,49,244,63,0,0,0,0,0,152,35,61,235,185,132,63,250,63,244,63,0,0,0,0,0,0,250,60,25,137,97,96,8,78,244,63,0,0,0,0,0,192,246,188,1,210,167,66,32,92,244,63,0,0,0,0,0,192,11,189,22,0,29,237,65,106,244,63,0,0,0,0,0,128,18,189,38,51,139,102,109,120,244,63,0,0,0,0,0,224,48,61,0,60,193,181,162,134,244,63,0,0,0,0,0,64,45,189,4,175,146,225,225,148,244,63,0,0,0,0,0,32,12,61,114,211,215,240,42,163,244,63,0,0,0,0,0,80,30,189,1,184,109,234,125,177,244,63,0,0,0,0,0,128,7,61,225,41,54,213,218,191,244,63,0,0,0,0,0,128,19,189,50,193,23,184,65,206,244,63,0,0,0,0,0,128,0,61,219,221,253,153,178,220,244,63,0,0,0,0,0,112,44,61,150,171,216,129,45,235,244,63,0,0,0,0,0,224,28,189,2,45,157,118,178,249,244,63,0,0,0,0,0,32,25,61,193,49,69,127,65,8,245,63,0,0,0,0,0,192,8,189,42,102,207,162,218,22,245,63,0,0,0,0,0,0,250,188,234,81,63,232,125,37,245,63,0,0,0,0,0,8,74,61,218,78,157,86,43,52,245,63,0,0,0,0,0,216,38,189,26,172,246,244,226,66,245,63,0,0,0,0,0,68,50,189,219,148,93,202,164,81,245,63,0,0,0,0,0,60,72,61,107,17,233,221,112,96,245,63,0,0,0,0,0,176,36,61,222,41,181,54,71,111,245,63,0,0,0,0,0,90,65,61,14,196,226,219,39,126,245,63,0,0,0,0,0,224,41,189,111,199,151,212,18,141,245,63,0,0,0,0,0,8,35,189,76,11,255,39,8,156,245,63,0,0,0,0,0,236,77,61,39,84,72,221,7,171,245,63,0,0,0,0,0,0,196,188,244,122,168,251,17,186,245,63,0,0,0,0,0,8,48,61,11,70,89,138,38,201,245,63,0,0,0,0,0,200,38,189,63,142,153,144,69,216,245,63,0,0,0,0,0,154,70,61,225,32,173,21,111,231,245,63,0,0,0,0,0,64,27,189,202,235,220,32,163,246,245,63,0,0,0,0,0,112,23,61,184,220,118,185,225,5,246,63,0,0,0,0,0,248,38,61,21,247,205,230,42,21,246,63,0,0,0,0,0,0,1,61,49,85,58,176,126,36,246,63,0,0,0,0,0,208,21,189,181,41,25,29,221,51,246,63,0,0,0,0,0,208,18,189,19,195,204,52,70,67,246,63,0,0,0,0,0,128,234,188,250,142,188,254,185,82,246,63,0,0,0,0,0,96,40,189,151,51,85,130,56,98,246,63,0,0,0,0,0,254,113,61,142,50,8,199,193,113,246,63,0,0,0,0,0,32,55,189,126,169,76,212,85,129,246,63,0,0,0,0,0,128,230,60,113,148,158,177,244,144,246,63,0,0,0,0,0,120,41,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+91696);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function _InitGainAnalysis() {
  Module['printErr']('missing function: InitGainAnalysis'); abort(-1);
  }

  function _AnalyzeSamples() {
  Module['printErr']('missing function: AnalyzeSamples'); abort(-1);
  }


  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

  var _floorf=Math_floor;


  Module["_memset"] = _memset;

  var _BDtoILow=true;



  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};

  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};


  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _VBR_encode_frame() {
  Module['printErr']('missing function: VBR_encode_frame'); abort(-1);
  }

  function _abort() {
      Module['abort']();
    }

  function _init_xrpow_core_sse() {
  Module['printErr']('missing function: init_xrpow_core_sse'); abort(-1);
  }



  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};

  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;

              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}

              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);

              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }

            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};

  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }

        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();

          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }

          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }

          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};

  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);

          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);

            var src = populate ? remote : local;
            var dst = populate ? local : remote;

            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }

        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;

          var fileStore;

          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }

          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;

          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};

        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };

        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));

        while (check.length) {
          var path = check.pop();
          var stat;

          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }

          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }

          entries[path] = { timestamp: stat.mtime };
        }

        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};

        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);

          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };

          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');

          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;

            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }

            entries[cursor.primaryKey] = { timestamp: cursor.key };

            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;

        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }

        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }

          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }

        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);

          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }

        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;

        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });

        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });

        if (!total) {
          return callback(null);
        }

        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };

        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };

        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });

        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};

  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }

          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }

          return position;
        }}};

  var _stdin=allocate(1, "i32*", ALLOC_STATIC);

  var _stdout=allocate(1, "i32*", ALLOC_STATIC);

  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};

        if (!path) return { path: '', node: null };

        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }

        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }

        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);

        // start at the root
        var current = FS.root;
        var current_path = '/';

        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }

          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);

          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }

          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);

              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;

              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }

        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;


        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };

          FS.FSNode.prototype = {};

          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;

          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }

        var node = new FS.FSNode(parent, name, mode, rdev);

        FS.hashAddNode(node);

        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];

        while (check.length) {
          var m = check.pop();

          mounts.push(m);

          check.push.apply(check, m.mounts);
        }

        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }

        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;

        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };

        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;

        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;

          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }

          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }

        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };

        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;

        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;

          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }

        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }

        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);

        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];

          while (current) {
            var next = current.name_next;

            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }

            current = next;
          }
        });

        // no longer a mountpoint
        node.mounted = null;

        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);

        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops

        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }

        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');

        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');

        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();

        FS.nameTable = new Array(4096);

        FS.mount(MEMFS, {}, '/');

        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;

        FS.ensureErrnoError();

        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];

        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes

          if (!hasByteServing) chunkSize = datalength;

          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");

            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);

            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }

            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });

          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });

          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }

        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html

      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }


  Module["_strlen"] = _strlen;

  function _GetTitleGain() {
  Module['printErr']('missing function: GetTitleGain'); abort(-1);
  }


  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  var _floor=Math_floor;

  var _sqrt=Math_sqrt;

  function _hip_set_errorf() {
  Module['printErr']('missing function: hip_set_errorf'); abort(-1);
  }

  var _llvm_pow_f32=Math_pow;



  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;

      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }

      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;

      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');

      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;

      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;

      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }

        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;

        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }

        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.

        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }

        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });

        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;

        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();

        Browser.mainLoop.scheduler();
      }

      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)

        Browser.mainLoop.scheduler();
      }

      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers

        if (Browser.initted) return;
        Browser.initted = true;

        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }

        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).

        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);

        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);

        // Canvas event setup

        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;

          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);


          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);

          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.

        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };

          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }

          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }

        if (!ctx) return null;

        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');

          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;

        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {

            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);

            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }

        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }

        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);

        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);

        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            delta = event.detail;
            break;
          case 'mousewheel':
            delta = event.wheelDelta;
            break;
          case 'wheel':
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }

          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;

          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);

          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL

            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);

            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);

            var coords = { x: adjustedX, y: adjustedY };

            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }

          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);

          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);

          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _llvm_sqrt_f64=Math_sqrt;


  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _hip_decode_init() {
  Module['printErr']('missing function: hip_decode_init'); abort(-1);
  }

  function _hip_set_msgf() {
  Module['printErr']('missing function: hip_set_msgf'); abort(-1);
  }

  var _sin=Math_sin;

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }


  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _hip_decode_exit() {
  Module['printErr']('missing function: hip_decode_exit'); abort(-1);
  }

  var _atan=Math_atan;

  var _BDtoIHigh=true;

  var _ceil=Math_ceil;







  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] &&
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};

        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };

        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };

        // If debug is enabled register simple default logging callbacks for each Event.

        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }

        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };

        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;

        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });

        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;

        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;

          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }

          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));

              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');

              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }

              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }

              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'

              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }

              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);

              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;

              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }


          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };

          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);

          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }

          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;

          var handleOpen = function () {

            Module['websocket'].emit('open', sock.stream.fd);

            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };

          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer


            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }

            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };

          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g.
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }

          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;

          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }

          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }

          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }

          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }

          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }

          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }

          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;

          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.

          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);

              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;

              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g.
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }

          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);

          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }

          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }

          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }

          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }

          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);

              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }

          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };


          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }

          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }

  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }


      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }


  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];

          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }

      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }

          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }

          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }

          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];

          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }

              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }

              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }

              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }

              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);

                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }

                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }

                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');

                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();

                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }

              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }

              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();

              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }


  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;

  var _cos=Math_cos;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }


  Module["_bitshift64Shl"] = _bitshift64Shl;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _hip_set_debugf() {
  Module['printErr']('missing function: hip_set_debugf'); abort(-1);
  }

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _hip_decode1_unclipped() {
  Module['printErr']('missing function: hip_decode1_unclipped'); abort(-1);
  }

___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_vii": invoke_vii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_sin": _sin, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_VBR_encode_frame": _VBR_encode_frame, "_abort": _abort, "___setErrNo": ___setErrNo, "_vfprintf": _vfprintf, "_hip_set_debugf": _hip_set_debugf, "_floor": _floor, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "__exit": __exit, "_GetTitleGain": _GetTitleGain, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_fabsf": _fabsf, "_sbrk": _sbrk, "_atan": _atan, "_llvm_pow_f32": _llvm_pow_f32, "_InitGainAnalysis": _InitGainAnalysis, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_hip_decode_exit": _hip_decode_exit, "_sysconf": _sysconf, "_cos": _cos, "_mkport": _mkport, "_floorf": _floorf, "_hip_set_errorf": _hip_set_errorf, "__reallyNegative": __reallyNegative, "_write": _write, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_AnalyzeSamples": _AnalyzeSamples, "___errno_location": ___errno_location, "_log": _log, "_init_xrpow_core_sse": _init_xrpow_core_sse, "_hip_decode1_unclipped": _hip_decode1_unclipped, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_ceil": _ceil, "__formatString": __formatString, "_sqrt": _sqrt, "_hip_set_msgf": _hip_set_msgf, "_exit": _exit, "_hip_decode_init": _hip_decode_init, "_llvm_sqrt_f64": _llvm_sqrt_f64, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';

  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_vii=env.invoke_vii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _sin=env._sin;
  var _exp=env._exp;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _VBR_encode_frame=env._VBR_encode_frame;
  var _abort=env._abort;
  var ___setErrNo=env.___setErrNo;
  var _vfprintf=env._vfprintf;
  var _hip_set_debugf=env._hip_set_debugf;
  var _floor=env._floor;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var __exit=env.__exit;
  var _GetTitleGain=env._GetTitleGain;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _fabsf=env._fabsf;
  var _sbrk=env._sbrk;
  var _atan=env._atan;
  var _llvm_pow_f32=env._llvm_pow_f32;
  var _InitGainAnalysis=env._InitGainAnalysis;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _hip_decode_exit=env._hip_decode_exit;
  var _sysconf=env._sysconf;
  var _cos=env._cos;
  var _mkport=env._mkport;
  var _floorf=env._floorf;
  var _hip_set_errorf=env._hip_set_errorf;
  var __reallyNegative=env.__reallyNegative;
  var _write=env._write;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _AnalyzeSamples=env._AnalyzeSamples;
  var ___errno_location=env.___errno_location;
  var _log=env._log;
  var _init_xrpow_core_sse=env._init_xrpow_core_sse;
  var _hip_decode1_unclipped=env._hip_decode1_unclipped;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _ceil=env._ceil;
  var __formatString=env.__formatString;
  var _sqrt=env._sqrt;
  var _hip_set_msgf=env._hip_set_msgf;
  var _exit=env._exit;
  var _hip_decode_init=env._hip_decode_init;
  var _llvm_sqrt_f64=env._llvm_sqrt_f64;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _AddVbrFrame($gfc) {
 $gfc = $gfc|0;
 var $$pre$i = 0, $$pre2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 84744|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($gfc)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((83944 + ($3<<6)|0) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($gfc)) + 85784|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($gfc)) + 85760|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($5))|0;
 HEAP32[$9>>2] = $11;
 $12 = ((($gfc)) + 85764|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 $15 = ((($gfc)) + 85768|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($14|0)<($16|0);
 if ($17) {
  return;
 }
 $18 = ((($gfc)) + 85772|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($gfc)) + 85776|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($19|0)<($21|0);
 if ($22) {
  $23 = ((($gfc)) + 85780|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($19<<2)|0);
  HEAP32[$25>>2] = $11;
  $26 = HEAP32[$18>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$18>>2] = $27;
  HEAP32[$12>>2] = 0;
  $$pre$i = HEAP32[$20>>2]|0;
  $28 = $27;$30 = $$pre$i;
 } else {
  $28 = $19;$30 = $21;
 }
 $29 = ($28|0)==($30|0);
 if (!($29)) {
  return;
 }
 $31 = ($30|0)>(1);
 if ($31) {
  $32 = ((($gfc)) + 85780|0);
  $33 = HEAP32[$32>>2]|0;
  $i$01$i = 1;
  while(1) {
   $34 = (($33) + ($i$01$i<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($i$01$i|0) / 2)&-1;
   $37 = (($33) + ($36<<2)|0);
   HEAP32[$37>>2] = $35;
   $38 = (($i$01$i) + 2)|0;
   $39 = HEAP32[$20>>2]|0;
   $40 = ($38|0)<($39|0);
   if ($40) {
    $i$01$i = $38;
   } else {
    break;
   }
  }
  $$pre2$i = HEAP32[$18>>2]|0;
  $44 = $$pre2$i;
 } else {
  $44 = $30;
 }
 $41 = HEAP32[$15>>2]|0;
 $42 = $41 << 1;
 HEAP32[$15>>2] = $42;
 $43 = (($44|0) / 2)&-1;
 HEAP32[$18>>2] = $43;
 return;
}
function _InitVbrTag($gfp) {
 $gfp = $gfp|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $exitcond = 0, $i$02 = 0, $kbps_header$0 = 0, $kbps_header$1 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2896|0;
 $vararg_buffer = sp;
 $buffer = sp + 8|0;
 $0 = ((($gfp)) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $kbps_header$0 = 128;
 } else {
  $5 = ((($1)) + 64|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)<(16000);
  $$ = $7 ? 32 : 64;
  $kbps_header$0 = $$;
 }
 $8 = ((($1)) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = ((($1)) + 120|0);
  $12 = HEAP32[$11>>2]|0;
  $kbps_header$1 = $12;
 } else {
  $kbps_header$1 = $kbps_header$0;
 }
 $13 = ($3*72000)|0;
 $14 = (($13) + 72000)|0;
 $15 = Math_imul($14, $kbps_header$1)|0;
 $16 = ((($1)) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15|0) / ($17|0))&-1;
 $19 = ((($1)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 156)|0;
 $22 = ((($1)) + 85792|0);
 HEAP32[$22>>2] = $18;
 $23 = ($18|0)<($21|0);
 $24 = ($18|0)>(2880);
 $or$cond = $24 | $23;
 if ($or$cond) {
  $25 = ((($1)) + 156|0);
  HEAP32[$25>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = ((($1)) + 85784|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($1)) + 85788|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($1)) + 85760|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($1)) + 85764|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($1)) + 85768|0);
 HEAP32[$30>>2] = 1;
 $31 = ((($1)) + 85772|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($1)) + 85780|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 do {
  if ($34) {
   $35 = (_malloc(1600)|0);
   HEAP32[$32>>2] = $35;
   $36 = ($35|0)==(0|0);
   $37 = ((($1)) + 85776|0);
   if (!($36)) {
    HEAP32[$37>>2] = 400;
    break;
   }
   HEAP32[$37>>2] = 0;
   _lame_errorf($1,8,$vararg_buffer);
   $38 = ((($1)) + 156|0);
   HEAP32[$38>>2] = 0;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _memset(($buffer|0),0,2880)|0;
 _setLameTagFrameHeader($1,$buffer);
 $39 = HEAP32[$22>>2]|0;
 $40 = ($39|0)==(0);
 if (!($40)) {
  $i$02 = 0;
  while(1) {
   $41 = (($buffer) + ($i$02)|0);
   $42 = HEAP8[$41>>0]|0;
   _add_dummy_byte($1,$42,1);
   $43 = (($i$02) + 1)|0;
   $exitcond = ($43|0)==($39|0);
   if ($exitcond) {
    break;
   } else {
    $i$02 = $43;
   }
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _UpdateMusicCRC($crc,$buffer,$size) {
 $crc = $crc|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)>(0);
 if (!($0)) {
  return;
 }
 $$pre = HEAP16[$crc>>1]|0;
 $5 = $$pre;$i$01 = 0;
 while(1) {
  $1 = (($buffer) + ($i$01)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = $5&65535;
  $6 = $5 ^ $3;
  $7 = $4 >>> 8;
  $8 = $6&65535;
  $9 = $8 & 255;
  $10 = (48 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $7 ^ $11;
  $13 = $12&65535;
  HEAP16[$crc>>1] = $13;
  $14 = (($i$01) + 1)|0;
  $exitcond = ($14|0)==($size|0);
  if ($exitcond) {
   break;
  } else {
   $5 = $13;$i$01 = $14;
  }
 }
 return;
}
function _setLameTagFrameHeader($gfc,$buffer) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 var $$ = 0, $$masked = 0, $$masked1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bbyte$0 = 0;
 var $bitrate$0 = 0, $bitrate$1 = 0, $not$ = 0, $sext = 0, $sext2 = 0, $storemerge = 0, $storemerge$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$buffer>>0] = -1;
 $0 = ((($buffer)) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 3;
 $4 = $3 | 7;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = $4 << 1;
 $7 = ((($gfc)) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $not$ = ($8|0)>(15999);
 $9 = $not$&1;
 $10 = $6 | $9;
 $11 = $10&255;
 HEAP8[$0>>0] = $11;
 $12 = $10 << 1;
 $13 = ((($gfc)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $$masked = $12 & 62;
 $16 = $$masked | $15;
 $17 = $16 << 2;
 $18 = $17 | 1;
 $19 = $18&255;
 HEAP8[$0>>0] = $19;
 $20 = $18 << 1;
 $21 = ((($gfc)) + 160|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 $24 = $23&1;
 $25 = $20 | $24;
 $26 = $25&255;
 HEAP8[$0>>0] = $26;
 $27 = ((($buffer)) + 2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 4;
 $31 = ((($gfc)) + 84744|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & 15;
 $34 = $30 | $33;
 $35 = $34&255;
 HEAP8[$27>>0] = $35;
 $36 = $34 << 2;
 $37 = ((($gfc)) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 & 3;
 $$masked1 = $36 & 124;
 $40 = $$masked1 | $39;
 $41 = $40 << 1;
 $42 = $41&255;
 HEAP8[$27>>0] = $42;
 $43 = $40 << 2;
 $44 = ((($gfc)) + 172|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 & 1;
 $47 = $43 | $46;
 $48 = $47&255;
 HEAP8[$27>>0] = $48;
 $49 = ((($buffer)) + 3|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 << 2;
 $53 = ((($gfc)) + 180|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 & 3;
 $56 = $52 | $55;
 $57 = $56&255;
 HEAP8[$49>>0] = $57;
 $58 = $56 << 2;
 $59 = ((($gfc)) + 84756|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 & 3;
 $62 = $58 | $61;
 $63 = $62&255;
 HEAP8[$49>>0] = $63;
 $64 = $62 << 1;
 $65 = ((($gfc)) + 164|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 & 1;
 $68 = $64 | $67;
 $69 = $68&255;
 HEAP8[$49>>0] = $69;
 $70 = $68 << 1;
 $71 = ((($gfc)) + 168|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $72 & 1;
 $74 = $70 | $73;
 $75 = $74&255;
 HEAP8[$49>>0] = $75;
 $76 = $74 << 2;
 $77 = ((($gfc)) + 176|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $78 & 3;
 $80 = $76 | $79;
 $81 = $80&255;
 HEAP8[$49>>0] = $81;
 HEAP8[$buffer>>0] = -1;
 $82 = HEAP32[$13>>2]|0;
 $83 = ($82|0)==(1);
 if ($83) {
  $bitrate$0 = 128;
 } else {
  $84 = HEAP32[$7>>2]|0;
  $85 = ($84|0)<(16000);
  $$ = $85 ? 32 : 64;
  $bitrate$0 = $$;
 }
 $86 = ((($gfc)) + 104|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0);
 if ($88) {
  $89 = ((($gfc)) + 120|0);
  $90 = HEAP32[$89>>2]|0;
  $bitrate$1 = $90;
 } else {
  $bitrate$1 = $bitrate$0;
 }
 $91 = ((($gfc)) + 152|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[$7>>2]|0;
  $95 = (_BitrateIndex($bitrate$1,$82,$94)|0);
  $96 = $95 << 4;
  $97 = $96&255;
  $$pre = HEAP32[$13>>2]|0;
  $98 = $$pre;$bbyte$0 = $97;
 } else {
  $98 = $82;$bbyte$0 = 0;
 }
 $99 = ($98|0)==(1);
 $sext2 = $25 << 24;
 $sext = $sext2 >> 24;
 $100 = $sext & -15;
 if ($99) {
  $101 = $100 | 10;
  $102 = $101&255;
  HEAP8[$0>>0] = $102;
  $103 = HEAP8[$27>>0]|0;
  $104 = $103&255;
  $105 = $104 & 13;
  $106 = $bbyte$0 << 24 >> 24;
  $107 = $105 | $106;
  $storemerge$in = $107;
  $storemerge = $storemerge$in&255;
  HEAP8[$27>>0] = $storemerge;
  return;
 } else {
  $108 = $100 | 2;
  $109 = $108&255;
  HEAP8[$0>>0] = $109;
  $110 = HEAP8[$27>>0]|0;
  $111 = $110&255;
  $112 = $111 & 13;
  $113 = $bbyte$0&255;
  $114 = $112 | $113;
  $storemerge$in = $114;
  $storemerge = $storemerge$in&255;
  HEAP8[$27>>0] = $storemerge;
  return;
 }
}
function _getframebits($gfc) {
 $gfc = $gfc|0;
 var $$idx$val = 0, $$idx$val$pre = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bit_rate$0 = 0;
 var $bit_rate$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 16|0);
 $1 = ((($gfc)) + 84744|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $6 = ((($gfc)) + 120|0);
  $$idx$val$pre = HEAP32[$0>>2]|0;
  $$idx$val = $$idx$val$pre;$bit_rate$0$in = $6;
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((83944 + ($4<<6)|0) + ($2<<2)|0);
  $$idx$val = $4;$bit_rate$0$in = $5;
 }
 $bit_rate$0 = HEAP32[$bit_rate$0$in>>2]|0;
 $7 = ((($gfc)) + 84752|0);
 $8 = HEAP32[$7>>2]|0;
 $$idx1 = ((($gfc)) + 64|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $9 = ($$idx$val*72000)|0;
 $10 = (($9) + 72000)|0;
 $11 = Math_imul($10, $bit_rate$0)|0;
 $12 = (($11|0) / ($$idx1$val|0))&-1;
 $13 = (($12) + ($8))|0;
 $14 = $13 << 3;
 return ($14|0);
}
function _get_max_frame_buffer_size_by_constraint($cfg,$constraint) {
 $cfg = $cfg|0;
 $constraint = $constraint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cfg$idx2$val = 0, $cfg$idx3 = 0, $cfg$idx3$val = 0, $max_kbps$0 = 0, $max_kbps$0$in = 0, $maxmp3buf$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cfg)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(320);
 if ($2) {
  $3 = ($constraint|0)==(1);
  $cfg$idx2$val = HEAP32[$cfg>>2]|0;
  if ($3) {
   $cfg$idx3 = ((($cfg)) + 48|0);
   $cfg$idx3$val = HEAP32[$cfg$idx3>>2]|0;
   $4 = ($cfg$idx2$val*72000)|0;
   $5 = (($4) + 72000)|0;
   $6 = Math_imul($5, $1)|0;
   $7 = (($6|0) / ($cfg$idx3$val|0))&-1;
   $8 = $7 << 3;
   $maxmp3buf$0 = $8;
   return ($maxmp3buf$0|0);
  } else {
   $9 = ($cfg$idx2$val*7680)|0;
   $10 = (($9) + 7680)|0;
   $maxmp3buf$0 = $10;
   return ($maxmp3buf$0|0);
  }
 }
 $11 = HEAP32[$cfg>>2]|0;
 if ((($constraint|0) == 2)) {
  $22 = ($11*7680)|0;
  $23 = (($22) + 7680)|0;
  $maxmp3buf$0 = $23;
  return ($maxmp3buf$0|0);
 } else if ((($constraint|0) == 1)) {
  $12 = ((($cfg)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)<(16000);
  $15 = (((83944 + ($11<<6)|0)) + 32|0);
  $16 = (((83944 + ($11<<6)|0)) + 56|0);
  $max_kbps$0$in = $14 ? $15 : $16;
  $max_kbps$0 = HEAP32[$max_kbps$0$in>>2]|0;
  $17 = ($11*72000)|0;
  $18 = (($17) + 72000)|0;
  $19 = Math_imul($18, $max_kbps$0)|0;
  $20 = (($19|0) / ($13|0))&-1;
  $21 = $20 << 3;
  $maxmp3buf$0 = $21;
  return ($maxmp3buf$0|0);
 } else {
  $maxmp3buf$0 = 11520;
  return ($maxmp3buf$0|0);
 }
 return (0)|0;
}
function _CRC_writeheader($gfc,$header) {
 $gfc = $gfc|0;
 $header = $header|0;
 var $$$1$i = 0, $$$1$i10 = 0, $$$1$i2 = 0, $$$2$i = 0, $$$2$i11 = 0, $$$2$i3 = 0, $$$3$i = 0, $$$3$i12 = 0, $$$3$i4 = 0, $$$4$i = 0, $$$4$i13 = 0, $$$4$i5 = 0, $$$5$i = 0, $$$5$i14 = 0, $$$5$i6 = 0, $$$6$i = 0, $$$6$i15 = 0, $$$6$i7 = 0, $$$7$i = 0, $$$7$i16 = 0;
 var $$$7$i8 = 0, $$$i = 0, $$$i1 = 0, $$$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $crc$0$lcssa = 0, $crc$017 = 0, $i$018 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($header)) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 128;
 $4 = ($3|0)!=(0);
 $$$i = $4 ? 262140 : 196598;
 $5 = $2 << 10;
 $6 = $$$i ^ $5;
 $7 = $6 & 65536;
 $8 = ($7|0)==(0);
 $9 = $$$i ^ 32773;
 $$$1$i = $8 ? $$$i : $9;
 $10 = $2 << 11;
 $11 = $$$1$i << 1;
 $12 = $11 ^ $10;
 $13 = $12 & 65536;
 $14 = ($13|0)==(0);
 $15 = $11 ^ 32773;
 $$$2$i = $14 ? $11 : $15;
 $16 = $2 << 12;
 $17 = $$$2$i << 1;
 $18 = $17 ^ $16;
 $19 = $18 & 65536;
 $20 = ($19|0)==(0);
 $21 = $17 ^ 32773;
 $$$3$i = $20 ? $17 : $21;
 $22 = $2 << 13;
 $23 = $$$3$i << 1;
 $24 = $23 ^ $22;
 $25 = $24 & 65536;
 $26 = ($25|0)==(0);
 $27 = $23 ^ 32773;
 $$$4$i = $26 ? $23 : $27;
 $28 = $2 << 14;
 $29 = $$$4$i << 1;
 $30 = $29 ^ $28;
 $31 = $30 & 65536;
 $32 = ($31|0)==(0);
 $33 = $29 ^ 32773;
 $$$5$i = $32 ? $29 : $33;
 $34 = $2 << 15;
 $35 = $$$5$i << 1;
 $36 = $35 ^ $34;
 $37 = $36 & 65536;
 $38 = ($37|0)==(0);
 $39 = $35 ^ 32773;
 $$$6$i = $38 ? $35 : $39;
 $40 = $2 << 16;
 $41 = $$$6$i << 1;
 $42 = $41 ^ $40;
 $43 = $42 & 65536;
 $44 = ($43|0)==(0);
 $45 = $41 ^ 32773;
 $$$7$i = $44 ? $41 : $45;
 $46 = ((($header)) + 3|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $48 << 9;
 $50 = $$$7$i << 1;
 $51 = $50 ^ $49;
 $52 = $51 & 65536;
 $53 = ($52|0)==(0);
 $54 = $50 ^ 32773;
 $$$i9 = $53 ? $50 : $54;
 $55 = $48 << 10;
 $56 = $$$i9 << 1;
 $57 = $56 ^ $55;
 $58 = $57 & 65536;
 $59 = ($58|0)==(0);
 $60 = $56 ^ 32773;
 $$$1$i10 = $59 ? $56 : $60;
 $61 = $48 << 11;
 $62 = $$$1$i10 << 1;
 $63 = $62 ^ $61;
 $64 = $63 & 65536;
 $65 = ($64|0)==(0);
 $66 = $62 ^ 32773;
 $$$2$i11 = $65 ? $62 : $66;
 $67 = $48 << 12;
 $68 = $$$2$i11 << 1;
 $69 = $68 ^ $67;
 $70 = $69 & 65536;
 $71 = ($70|0)==(0);
 $72 = $68 ^ 32773;
 $$$3$i12 = $71 ? $68 : $72;
 $73 = $48 << 13;
 $74 = $$$3$i12 << 1;
 $75 = $74 ^ $73;
 $76 = $75 & 65536;
 $77 = ($76|0)==(0);
 $78 = $74 ^ 32773;
 $$$4$i13 = $77 ? $74 : $78;
 $79 = $48 << 14;
 $80 = $$$4$i13 << 1;
 $81 = $80 ^ $79;
 $82 = $81 & 65536;
 $83 = ($82|0)==(0);
 $84 = $80 ^ 32773;
 $$$5$i14 = $83 ? $80 : $84;
 $85 = $48 << 15;
 $86 = $$$5$i14 << 1;
 $87 = $86 ^ $85;
 $88 = $87 & 65536;
 $89 = ($88|0)==(0);
 $90 = $86 ^ 32773;
 $$$6$i15 = $89 ? $86 : $90;
 $91 = $48 << 16;
 $92 = $$$6$i15 << 1;
 $93 = $92 ^ $91;
 $94 = $93 & 65536;
 $95 = ($94|0)==(0);
 $96 = $92 ^ 32773;
 $$$7$i16 = $95 ? $92 : $96;
 $97 = ((($gfc)) + 24|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)>(6);
 if ($99) {
  $crc$017 = $$$7$i16;$i$018 = 6;
 } else {
  $crc$0$lcssa = $$$7$i16;
  $153 = $crc$0$lcssa >>> 8;
  $154 = $153&255;
  $155 = ((($header)) + 4|0);
  HEAP8[$155>>0] = $154;
  $156 = $crc$0$lcssa&255;
  $157 = ((($header)) + 5|0);
  HEAP8[$157>>0] = $156;
  return;
 }
 while(1) {
  $100 = (($header) + ($i$018)|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = $102 << 9;
  $104 = $crc$017 << 1;
  $105 = $103 ^ $104;
  $106 = $105 & 65536;
  $107 = ($106|0)==(0);
  $108 = $104 ^ 32773;
  $$$i1 = $107 ? $104 : $108;
  $109 = $102 << 10;
  $110 = $$$i1 << 1;
  $111 = $110 ^ $109;
  $112 = $111 & 65536;
  $113 = ($112|0)==(0);
  $114 = $110 ^ 32773;
  $$$1$i2 = $113 ? $110 : $114;
  $115 = $102 << 11;
  $116 = $$$1$i2 << 1;
  $117 = $116 ^ $115;
  $118 = $117 & 65536;
  $119 = ($118|0)==(0);
  $120 = $116 ^ 32773;
  $$$2$i3 = $119 ? $116 : $120;
  $121 = $102 << 12;
  $122 = $$$2$i3 << 1;
  $123 = $122 ^ $121;
  $124 = $123 & 65536;
  $125 = ($124|0)==(0);
  $126 = $122 ^ 32773;
  $$$3$i4 = $125 ? $122 : $126;
  $127 = $102 << 13;
  $128 = $$$3$i4 << 1;
  $129 = $128 ^ $127;
  $130 = $129 & 65536;
  $131 = ($130|0)==(0);
  $132 = $128 ^ 32773;
  $$$4$i5 = $131 ? $128 : $132;
  $133 = $102 << 14;
  $134 = $$$4$i5 << 1;
  $135 = $134 ^ $133;
  $136 = $135 & 65536;
  $137 = ($136|0)==(0);
  $138 = $134 ^ 32773;
  $$$5$i6 = $137 ? $134 : $138;
  $139 = $102 << 15;
  $140 = $$$5$i6 << 1;
  $141 = $140 ^ $139;
  $142 = $141 & 65536;
  $143 = ($142|0)==(0);
  $144 = $140 ^ 32773;
  $$$6$i7 = $143 ? $140 : $144;
  $145 = $102 << 16;
  $146 = $$$6$i7 << 1;
  $147 = $146 ^ $145;
  $148 = $147 & 65536;
  $149 = ($148|0)==(0);
  $150 = $146 ^ 32773;
  $$$7$i8 = $149 ? $146 : $150;
  $151 = (($i$018) + 1)|0;
  $152 = ($151|0)<($98|0);
  if ($152) {
   $crc$017 = $$$7$i8;$i$018 = $151;
  } else {
   $crc$0$lcssa = $$$7$i8;
   break;
  }
 }
 $153 = $crc$0$lcssa >>> 8;
 $154 = $153&255;
 $155 = ((($header)) + 4|0);
 HEAP8[$155>>0] = $154;
 $156 = $crc$0$lcssa&255;
 $157 = ((($header)) + 5|0);
 HEAP8[$157>>0] = $156;
 return;
}
function _flush_bitstream($gfc) {
 $gfc = $gfc|0;
 var $$$i = 0, $$1$i = 0, $$idx$val$i$i = 0, $$idx$val$pre$i$i = 0, $$idx1$i$i = 0, $$idx1$val$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bit_rate$0$i$i = 0, $bit_rate$0$in$i$i = 0, $flushbits$0$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($gfc)) + 52132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($gfc)) + 52128|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = ($3|0)==(0);
 $$$i = $5 ? 255 : $4;
 $6 = (((($gfc)) + 39840|0) + (($$$i*48)|0)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($gfc)) + 292|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 $11 = ($10|0)>(-1);
 if ($11) {
  $12 = (1 - ($1))|0;
  $13 = (($$$i) + ($12))|0;
  $14 = ($$$i|0)<($1|0);
  $15 = (($13) + 256)|0;
  $$1$i = $14 ? $15 : $13;
  $16 = $$1$i << 3;
  $17 = ((($gfc)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = Math_imul($16, $18)|0;
  $20 = (($10) - ($19))|0;
  $flushbits$0$i = $20;
 } else {
  $flushbits$0$i = $10;
 }
 $21 = ((($gfc)) + 16|0);
 $22 = ((($gfc)) + 84744|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  $27 = ((($gfc)) + 120|0);
  $$idx$val$pre$i$i = HEAP32[$21>>2]|0;
  $$idx$val$i$i = $$idx$val$pre$i$i;$bit_rate$0$in$i$i = $27;
 } else {
  $25 = HEAP32[$21>>2]|0;
  $26 = ((83944 + ($25<<6)|0) + ($23<<2)|0);
  $$idx$val$i$i = $25;$bit_rate$0$in$i$i = $26;
 }
 $bit_rate$0$i$i = HEAP32[$bit_rate$0$in$i$i>>2]|0;
 $28 = ((($gfc)) + 84752|0);
 $29 = HEAP32[$28>>2]|0;
 $$idx1$i$i = ((($gfc)) + 64|0);
 $$idx1$val$i$i = HEAP32[$$idx1$i$i>>2]|0;
 $30 = ($$idx$val$i$i*72000)|0;
 $31 = (($30) + 72000)|0;
 $32 = Math_imul($31, $bit_rate$0$i$i)|0;
 $33 = (($32|0) / ($$idx1$val$i$i|0))&-1;
 $34 = (($33) + ($29))|0;
 $35 = $34 << 3;
 $36 = (($35) + ($flushbits$0$i))|0;
 $37 = ($36|0)<(0);
 if ($37) {
  _lame_errorf($gfc,1072,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  _drain_into_ancillary($gfc,$36);
  $38 = ((($gfc)) + 52140|0);
  HEAP32[$38>>2] = 0;
  $39 = ((($gfc)) + 21312|0);
  HEAP32[$39>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _add_dummy_byte($gfc,$val,$n) {
 $gfc = $gfc|0;
 $val = $val|0;
 $n = $n|0;
 var $$0$$i = 0, $$01$i = 0, $$in = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  return;
 }
 $1 = $val&255;
 $2 = ((($gfc)) + 300|0);
 $3 = ((($gfc)) + 296|0);
 $4 = ((($gfc)) + 284|0);
 $5 = ((($gfc)) + 292|0);
 $$in = $n;
 while(1) {
  $$01$i = 8;
  while(1) {
   $8 = HEAP32[$2>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$2>>2] = 8;
    $10 = HEAP32[$3>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$3>>2] = $11;
    $12 = HEAP32[$4>>2]|0;
    $13 = (($12) + ($11)|0);
    HEAP8[$13>>0] = 0;
    $$pre$i = HEAP32[$2>>2]|0;
    $15 = $$pre$i;
   } else {
    $15 = $8;
   }
   $14 = ($$01$i|0)<($15|0);
   $$0$$i = $14 ? $$01$i : $15;
   $16 = (($$01$i) - ($$0$$i))|0;
   $17 = (($15) - ($$0$$i))|0;
   HEAP32[$2>>2] = $17;
   $18 = $1 >>> $16;
   $19 = $18 << $17;
   $20 = HEAP32[$3>>2]|0;
   $21 = HEAP32[$4>>2]|0;
   $22 = (($21) + ($20)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $19 | $24;
   $26 = $25&255;
   HEAP8[$22>>0] = $26;
   $27 = HEAP32[$5>>2]|0;
   $28 = (($27) + ($$0$$i))|0;
   HEAP32[$5>>2] = $28;
   $29 = ($16|0)>(0);
   if ($29) {
    $$01$i = $16;
   } else {
    $i$01 = 0;
    break;
   }
  }
  while(1) {
   $30 = (((($gfc)) + 39840|0) + (($i$01*48)|0)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 8)|0;
   HEAP32[$30>>2] = $32;
   $33 = (($i$01) + 1)|0;
   $exitcond = ($33|0)==(256);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $33;
   }
  }
  $6 = (($$in) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$in = $6;
  }
 }
 return;
}
function _format_bitstream($gfc) {
 $gfc = $gfc|0;
 var $$$i = 0, $$$i$i = 0, $$$i26$i = 0, $$$i7 = 0, $$$i8$i = 0, $$$i9$i = 0, $$0$$i$i = 0, $$0$$i$us$i = 0, $$0$$i107$i = 0, $$0$$i11$i = 0, $$0$$i115$i = 0, $$0$$i123$i = 0, $$0$$i131$i = 0, $$0$$i139$i = 0, $$0$$i14$i = 0, $$0$$i147$i = 0, $$0$$i155$i = 0, $$0$$i163$i = 0, $$0$$i171$i = 0, $$0$$i179$i = 0;
 var $$0$$i189$i = 0, $$0$$i19$i = 0, $$0$$i19$i9 = 0, $$0$$i199$i = 0, $$0$$i209$i = 0, $$0$$i219$i = 0, $$0$$i229$i = 0, $$0$$i239$i = 0, $$0$$i24$i = 0, $$0$$i249$i = 0, $$0$$i259$i = 0, $$0$$i269$i = 0, $$0$$i27$i = 0, $$0$$i279$i = 0, $$0$$i289$i = 0, $$0$$i299$i = 0, $$0$$i3$i = 0, $$0$$i30$us$i = 0, $$0$$i309$i = 0, $$0$$i319$i = 0;
 var $$0$$i329$i = 0, $$0$$i339$i = 0, $$0$$i349$i = 0, $$0$$i35$i = 0, $$0$$i359$i = 0, $$0$$i369$i = 0, $$0$$i379$i = 0, $$0$$i389$i = 0, $$0$$i399$1$i = 0, $$0$$i399$2$i = 0, $$0$$i399$3$i = 0, $$0$$i399$i = 0, $$0$$i409$i = 0, $$0$$i419$i = 0, $$0$$i429$i = 0, $$0$$i43$i = 0, $$0$$i439$i = 0, $$0$$i449$i = 0, $$0$$i459$i = 0, $$0$$i469$i = 0;
 var $$0$$i479$i = 0, $$0$$i489$i = 0, $$0$$i499$i = 0, $$0$$i509$i = 0, $$0$$i51$i = 0, $$0$$i519$i = 0, $$0$$i529$i = 0, $$0$$i539$i = 0, $$0$$i549$i = 0, $$0$$i559$i = 0, $$0$$i59$i = 0, $$0$$i6$i = 0, $$0$$i67$i = 0, $$0$$i75$i = 0, $$0$$i83$i = 0, $$0$$i91$i = 0, $$0$$i99$i = 0, $$01$i$us$i = 0, $$01$i12$i = 0, $$01$i17$i = 0;
 var $$01$i22$i = 0, $$01$i28$us$i = 0, $$01$i4$i = 0, $$02$i$i = 0, $$02$i1$i = 0, $$02$i105$i = 0, $$02$i113$i = 0, $$02$i121$i = 0, $$02$i129$i = 0, $$02$i137$i = 0, $$02$i145$i = 0, $$02$i153$i = 0, $$02$i161$i = 0, $$02$i169$i = 0, $$02$i17$i = 0, $$02$i177$i = 0, $$02$i187$i = 0, $$02$i197$i = 0, $$02$i207$i = 0, $$02$i217$i = 0;
 var $$02$i227$i = 0, $$02$i237$i = 0, $$02$i247$i = 0, $$02$i25$i = 0, $$02$i257$i = 0, $$02$i267$i = 0, $$02$i277$i = 0, $$02$i287$i = 0, $$02$i297$i = 0, $$02$i307$i = 0, $$02$i317$i = 0, $$02$i327$i = 0, $$02$i33$i = 0, $$02$i337$i = 0, $$02$i347$i = 0, $$02$i357$i = 0, $$02$i367$i = 0, $$02$i377$i = 0, $$02$i387$i = 0, $$02$i397$1$i = 0;
 var $$02$i397$2$i = 0, $$02$i397$3$i = 0, $$02$i397$i = 0, $$02$i407$i = 0, $$02$i41$i = 0, $$02$i417$i = 0, $$02$i427$i = 0, $$02$i437$i = 0, $$02$i447$i = 0, $$02$i457$i = 0, $$02$i467$i = 0, $$02$i477$i = 0, $$02$i487$i = 0, $$02$i49$i = 0, $$02$i497$i = 0, $$02$i507$i = 0, $$02$i517$i = 0, $$02$i527$i = 0, $$02$i537$i = 0, $$02$i547$i = 0;
 var $$02$i557$i = 0, $$02$i57$i = 0, $$02$i65$i = 0, $$02$i73$i = 0, $$02$i81$i = 0, $$02$i89$i = 0, $$02$i9$i = 0, $$02$i97$i = 0, $$1$i = 0, $$1$i10 = 0, $$2$us$i = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$pre$i = 0, $$idx$val$pre$i$i = 0, $$idx1$i = 0, $$idx1$val$i = 0, $$idx1$val$i$i = 0, $$lcssa401 = 0, $$lcssa402 = 0;
 var $$lcssa404 = 0, $$lcssa405 = 0, $$lcssa406 = 0, $$lcssa407 = 0, $$lcssa408 = 0, $$lcssa409 = 0, $$lcssa410 = 0, $$lcssa411 = 0, $$lcssa412 = 0, $$lcssa413 = 0, $$lcssa414 = 0, $$lcssa415 = 0, $$lcssa416 = 0, $$lcssa417 = 0, $$lcssa418 = 0, $$lcssa419 = 0, $$lcssa420 = 0, $$lcssa421 = 0, $$lcssa422 = 0, $$lcssa423 = 0;
 var $$lcssa424 = 0, $$lcssa427 = 0, $$lcssa428 = 0, $$lcssa429 = 0, $$lcssa430 = 0, $$lcssa432 = 0, $$lcssa433 = 0, $$lcssa434 = 0, $$lcssa435 = 0, $$lcssa436 = 0, $$lcssa437 = 0, $$lcssa438 = 0, $$lcssa439 = 0, $$lcssa440 = 0, $$lcssa441 = 0, $$lcssa442 = 0, $$lcssa443 = 0, $$lcssa444 = 0, $$lcssa445 = 0, $$lcssa446 = 0;
 var $$lcssa447 = 0, $$lcssa448 = 0, $$lcssa449 = 0, $$lcssa450 = 0, $$lcssa451 = 0, $$lcssa452 = 0, $$lcssa453 = 0, $$lcssa454 = 0, $$lcssa455 = 0, $$lcssa456 = 0, $$lcssa457 = 0, $$lcssa458 = 0, $$lcssa459 = 0, $$lcssa460 = 0, $$lcssa461 = 0, $$lcssa462 = 0, $$lcssa463 = 0, $$lcssa464 = 0, $$lcssa465 = 0, $$lcssa466 = 0;
 var $$lcssa467 = 0, $$lcssa468 = 0, $$lcssa469 = 0, $$lcssa470 = 0, $$lcssa471 = 0, $$phi$trans$insert705$i = 0, $$phi$trans$insert708$i = 0, $$phi$trans$insert711$i = 0, $$phi$trans$insert714$i = 0, $$phi$trans$insert717$i = 0, $$phi$trans$insert720$i = 0, $$phi$trans$insert723$i = 0, $$phi$trans$insert726$i = 0, $$phi$trans$insert729$i = 0, $$phi$trans$insert732$i = 0, $$phi$trans$insert736$i = 0, $$pn$i = 0, $$pn100$i = 0, $$pre = 0, $$pre$i = 0;
 var $$pre$i$i = 0, $$pre$i$i$lcssa = 0, $$pre$i$us$i = 0, $$pre$i1 = 0, $$pre$i101$i = 0, $$pre$i101$i$lcssa = 0, $$pre$i109$i = 0, $$pre$i109$i$lcssa = 0, $$pre$i117$i = 0, $$pre$i117$i$lcssa = 0, $$pre$i125$i = 0, $$pre$i125$i$lcssa = 0, $$pre$i13$i = 0, $$pre$i13$i$lcssa = 0, $$pre$i13$i8 = 0, $$pre$i133$i = 0, $$pre$i133$i$lcssa = 0, $$pre$i141$i = 0, $$pre$i141$i$lcssa = 0, $$pre$i149$i = 0;
 var $$pre$i149$i$lcssa = 0, $$pre$i157$i = 0, $$pre$i157$i$lcssa = 0, $$pre$i165$i = 0, $$pre$i165$i$lcssa = 0, $$pre$i173$i = 0, $$pre$i173$i$lcssa = 0, $$pre$i18$i = 0, $$pre$i181$i = 0, $$pre$i181$i$lcssa = 0, $$pre$i191$i = 0, $$pre$i191$i$lcssa = 0, $$pre$i201$i = 0, $$pre$i201$i$lcssa = 0, $$pre$i21$i = 0, $$pre$i21$i$lcssa = 0, $$pre$i211$i = 0, $$pre$i211$i$lcssa = 0, $$pre$i221$i = 0, $$pre$i221$i$lcssa = 0;
 var $$pre$i23$i = 0, $$pre$i231$i = 0, $$pre$i231$i$lcssa = 0, $$pre$i241$i = 0, $$pre$i241$i$lcssa = 0, $$pre$i251$i = 0, $$pre$i251$i$lcssa = 0, $$pre$i261$i = 0, $$pre$i261$i$lcssa = 0, $$pre$i281$i = 0, $$pre$i281$i$lcssa = 0, $$pre$i29$i = 0, $$pre$i29$i$lcssa = 0, $$pre$i29$us$i = 0, $$pre$i291$i = 0, $$pre$i291$i$lcssa = 0, $$pre$i301$i = 0, $$pre$i301$i$lcssa = 0, $$pre$i311$i = 0, $$pre$i311$i$lcssa = 0;
 var $$pre$i321$i = 0, $$pre$i321$i$lcssa = 0, $$pre$i331$i = 0, $$pre$i331$i$lcssa = 0, $$pre$i341$i = 0, $$pre$i341$i$lcssa = 0, $$pre$i351$i = 0, $$pre$i351$i$lcssa = 0, $$pre$i361$i = 0, $$pre$i361$i$lcssa = 0, $$pre$i37$i = 0, $$pre$i37$i$lcssa = 0, $$pre$i371$i = 0, $$pre$i371$i$lcssa = 0, $$pre$i381$i = 0, $$pre$i381$i$lcssa = 0, $$pre$i391$i = 0, $$pre$i391$i$lcssa = 0, $$pre$i401$1$i = 0, $$pre$i401$1$i$lcssa = 0;
 var $$pre$i401$2$i = 0, $$pre$i401$2$i$lcssa = 0, $$pre$i401$3$i = 0, $$pre$i401$3$i$lcssa = 0, $$pre$i401$i = 0, $$pre$i401$i$lcssa = 0, $$pre$i411$i = 0, $$pre$i411$i$lcssa = 0, $$pre$i421$i = 0, $$pre$i421$i$lcssa = 0, $$pre$i431$i = 0, $$pre$i431$i$lcssa = 0, $$pre$i45$i = 0, $$pre$i45$i$lcssa = 0, $$pre$i451$i = 0, $$pre$i451$i$lcssa = 0, $$pre$i461$i = 0, $$pre$i461$i$lcssa = 0, $$pre$i471$i = 0, $$pre$i471$i$lcssa = 0;
 var $$pre$i481$i = 0, $$pre$i481$i$lcssa = 0, $$pre$i491$i = 0, $$pre$i491$i$lcssa = 0, $$pre$i5$i = 0, $$pre$i5$i$lcssa = 0, $$pre$i5$i4 = 0, $$pre$i501$i = 0, $$pre$i501$i$lcssa = 0, $$pre$i511$i = 0, $$pre$i511$i$lcssa = 0, $$pre$i521$i = 0, $$pre$i521$i$lcssa = 0, $$pre$i53$i = 0, $$pre$i53$i$lcssa = 0, $$pre$i531$i = 0, $$pre$i531$i$lcssa = 0, $$pre$i541$i = 0, $$pre$i541$i$lcssa = 0, $$pre$i551$i = 0;
 var $$pre$i551$i$lcssa = 0, $$pre$i561$i = 0, $$pre$i561$i$lcssa = 0, $$pre$i61$i = 0, $$pre$i61$i$lcssa = 0, $$pre$i77$i = 0, $$pre$i77$i$lcssa = 0, $$pre$i85$i = 0, $$pre$i85$i$lcssa = 0, $$pre$i93$i = 0, $$pre$i93$i$lcssa = 0, $$pre$phiZ2D = 0, $$pre167 = 0, $$pre704$i = 0, $$pre706$i = 0, $$pre707$i = 0, $$pre709$i = 0, $$pre710$i = 0, $$pre712$i = 0, $$pre713$i = 0;
 var $$pre715$i = 0, $$pre716$i = 0, $$pre718$i = 0, $$pre719$i = 0, $$pre721$i = 0, $$pre722$i = 0, $$pre724$i = 0, $$pre725$i = 0, $$pre727$i = 0, $$pre728$i = 0, $$pre730$i = 0, $$pre731$i = 0, $$pre733$i = 0, $$pre734$i = 0, $$pre735$i = 0, $$pre737$i = 0, $$pre96$pre$i = 0, $$pre97$i = 0, $$pre97$pre$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0;
 var $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0;
 var $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0;
 var $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0;
 var $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0;
 var $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0;
 var $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0;
 var $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0;
 var $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0;
 var $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0;
 var $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0;
 var $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0;
 var $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0;
 var $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0;
 var $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0;
 var $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0;
 var $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0;
 var $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0;
 var $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0;
 var $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0;
 var $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0;
 var $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0;
 var $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0;
 var $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0;
 var $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0;
 var $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0;
 var $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0;
 var $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0;
 var $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0;
 var $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0;
 var $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0;
 var $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0;
 var $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0;
 var $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0;
 var $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0;
 var $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0;
 var $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bit_rate$0$i = 0, $bit_rate$0$i$i = 0, $bit_rate$0$in$i = 0, $bit_rate$0$in$i$i = 0, $ch$047$i = 0, $ch$0637$i = 0, $ch$1632$i = 0, $ch$179$i = 0, $ch$2638$i = 0, $data_bits$0$lcssa$i = 0, $data_bits$039$$i = 0, $data_bits$039$i = 0, $data_bits$039$us$i = 0, $data_bits$1$us$i = 0, $data_bits$2$lcssa$i = 0;
 var $data_bits$242$i = 0, $data_bits$3$i = 0, $data_bits$4$i = 0, $data_bits$5$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i6 = 0, $exitcond166 = 0, $exitcond93$i = 0, $exitcond94$i = 0, $exitcond95$i = 0, $flushbits$0$i = 0, $gr$054$i = 0, $gr$0634$i = 0, $i$067$i = 0, $i$091 = 0, $i$156$us$i = 0, $ptr$01$i$i = 0, $ptr$01$i10$i = 0, $ptr$01$i106$i = 0;
 var $ptr$01$i114$i = 0, $ptr$01$i122$i = 0, $ptr$01$i130$i = 0, $ptr$01$i138$i = 0, $ptr$01$i146$i = 0, $ptr$01$i154$i = 0, $ptr$01$i162$i = 0, $ptr$01$i170$i = 0, $ptr$01$i178$i = 0, $ptr$01$i18$i = 0, $ptr$01$i188$i = 0, $ptr$01$i198$i = 0, $ptr$01$i2$i = 0, $ptr$01$i208$i = 0, $ptr$01$i218$i = 0, $ptr$01$i228$i = 0, $ptr$01$i238$i = 0, $ptr$01$i248$i = 0, $ptr$01$i258$i = 0, $ptr$01$i26$i = 0;
 var $ptr$01$i268$i = 0, $ptr$01$i278$i = 0, $ptr$01$i288$i = 0, $ptr$01$i298$i = 0, $ptr$01$i308$i = 0, $ptr$01$i318$i = 0, $ptr$01$i328$i = 0, $ptr$01$i338$i = 0, $ptr$01$i34$i = 0, $ptr$01$i348$i = 0, $ptr$01$i358$i = 0, $ptr$01$i368$i = 0, $ptr$01$i378$i = 0, $ptr$01$i388$i = 0, $ptr$01$i398$1$i = 0, $ptr$01$i398$2$i = 0, $ptr$01$i398$3$i = 0, $ptr$01$i398$i = 0, $ptr$01$i408$i = 0, $ptr$01$i418$i = 0;
 var $ptr$01$i42$i = 0, $ptr$01$i428$i = 0, $ptr$01$i438$i = 0, $ptr$01$i448$i = 0, $ptr$01$i458$i = 0, $ptr$01$i468$i = 0, $ptr$01$i478$i = 0, $ptr$01$i488$i = 0, $ptr$01$i498$i = 0, $ptr$01$i50$i = 0, $ptr$01$i508$i = 0, $ptr$01$i518$i = 0, $ptr$01$i528$i = 0, $ptr$01$i538$i = 0, $ptr$01$i548$i = 0, $ptr$01$i558$i = 0, $ptr$01$i58$i = 0, $ptr$01$i66$i = 0, $ptr$01$i74$i = 0, $ptr$01$i82$i = 0;
 var $ptr$01$i90$i = 0, $ptr$01$i98$i = 0, $region2Start$0$i$i = 0, $region2Start$0$i10$i = 0, $scale_bits$076$i = 0, $scale_bits$1$lcssa$i = 0, $scale_bits$1$lcssa$i$lcssa = 0, $scale_bits$265$i = 0, $scale_bits$3$lcssa$i = 0, $scale_bits$3$lcssa$i$lcssa = 0, $scale_bits$4$i = 0, $sfb$0$lcssa$i = 0, $sfb$040$i = 0, $sfb$040$us$i = 0, $sfb$143$i = 0, $sfb$277$i = 0, $sfb$3$lcssa$i = 0, $sfb$369$i = 0, $sfb$466$i = 0, $sfb$5$lcssa$i = 0;
 var $sfb$558$us$i = 0, $sfb_partition$075$i = 0, $sfb_partition$164$i = 0, $smax$i = 0, $split62$i = 0, $split63$i = 0, $tot_bits$053$i = 0, $tot_bits$1$lcssa$i = 0, $tot_bits$146$i = 0, $tot_bits$278$i = 0, $tot_bits$3$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($gfc)) + 16|0);
 $1 = ((($gfc)) + 84744|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $6 = ((($gfc)) + 120|0);
  $$idx$val$pre$i = HEAP32[$0>>2]|0;
  $$idx$val$i = $$idx$val$pre$i;$bit_rate$0$in$i = $6;
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((83944 + ($4<<6)|0) + ($2<<2)|0);
  $$idx$val$i = $4;$bit_rate$0$in$i = $5;
 }
 $bit_rate$0$i = HEAP32[$bit_rate$0$in$i>>2]|0;
 $7 = ((($gfc)) + 84752|0);
 $8 = HEAP32[$7>>2]|0;
 $$idx1$i = ((($gfc)) + 64|0);
 $$idx1$val$i = HEAP32[$$idx1$i>>2]|0;
 $9 = ($$idx$val$i*72000)|0;
 $10 = (($9) + 72000)|0;
 $11 = Math_imul($10, $bit_rate$0$i)|0;
 $12 = (($11|0) / ($$idx1$val$i|0))&-1;
 $13 = (($12) + ($8))|0;
 $14 = $13 << 3;
 $15 = ((($gfc)) + 21320|0);
 $16 = HEAP32[$15>>2]|0;
 _drain_into_ancillary($gfc,$16);
 $17 = ((($gfc)) + 52128|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (((((($gfc)) + 39840|0) + (($18*48)|0)|0)) + 4|0);
 HEAP32[$19>>2] = 0;
 $20 = (((((($gfc)) + 39840|0) + (($18*48)|0)|0)) + 8|0);
 $21 = ((($gfc)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 _memset(($20|0),0,($22|0))|0;
 $23 = HEAP32[$$idx1$i>>2]|0;
 $24 = ($23|0)<(16000);
 $25 = HEAP32[$17>>2]|0;
 $26 = (((((($gfc)) + 39840|0) + (($25*48)|0)|0)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 if ($24) {
  $$02$i$i = 12;$37 = $25;$ptr$01$i$i = $27;
  while(1) {
   $28 = $ptr$01$i$i & 7;
   $29 = (8 - ($28))|0;
   $30 = ($$02$i$i|0)<($29|0);
   $$0$$i$i = $30 ? $$02$i$i : $29;
   $31 = (($$02$i$i) - ($$0$$i$i))|0;
   $32 = 4094 >>> $31;
   $33 = (($29) - ($$0$$i$i))|0;
   $34 = $32 << $33;
   $35 = $ptr$01$i$i >> 3;
   $36 = ((((((($gfc)) + 39840|0) + (($37*48)|0)|0)) + 8|0) + ($35)|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = $34 | $39;
   $41 = $40&255;
   HEAP8[$36>>0] = $41;
   $42 = (($$0$$i$i) + ($ptr$01$i$i))|0;
   $43 = ($31|0)>(0);
   $$pre$i$i = HEAP32[$17>>2]|0;
   if ($43) {
    $$02$i$i = $31;$37 = $$pre$i$i;$ptr$01$i$i = $42;
   } else {
    $$lcssa470 = $42;$$pre$i$i$lcssa = $$pre$i$i;
    break;
   }
  }
  $44 = (((((($gfc)) + 39840|0) + (($$pre$i$i$lcssa*48)|0)|0)) + 4|0);
  HEAP32[$44>>2] = $$lcssa470;
  $1787 = $$lcssa470;$1788 = $$pre$i$i$lcssa;
 } else {
  $$02$i1$i = 12;$54 = $25;$ptr$01$i2$i = $27;
  while(1) {
   $45 = $ptr$01$i2$i & 7;
   $46 = (8 - ($45))|0;
   $47 = ($$02$i1$i|0)<($46|0);
   $$0$$i3$i = $47 ? $$02$i1$i : $46;
   $48 = (($$02$i1$i) - ($$0$$i3$i))|0;
   $49 = 4095 >>> $48;
   $50 = (($46) - ($$0$$i3$i))|0;
   $51 = $49 << $50;
   $52 = $ptr$01$i2$i >> 3;
   $53 = ((((((($gfc)) + 39840|0) + (($54*48)|0)|0)) + 8|0) + ($52)|0);
   $55 = HEAP8[$53>>0]|0;
   $56 = $55&255;
   $57 = $51 | $56;
   $58 = $57&255;
   HEAP8[$53>>0] = $58;
   $59 = (($$0$$i3$i) + ($ptr$01$i2$i))|0;
   $60 = ($48|0)>(0);
   $$pre$i5$i = HEAP32[$17>>2]|0;
   if ($60) {
    $$02$i1$i = $48;$54 = $$pre$i5$i;$ptr$01$i2$i = $59;
   } else {
    $$lcssa471 = $59;$$pre$i5$i$lcssa = $$pre$i5$i;
    break;
   }
  }
  $61 = (((((($gfc)) + 39840|0) + (($$pre$i5$i$lcssa*48)|0)|0)) + 4|0);
  HEAP32[$61>>2] = $$lcssa471;
  $1787 = $$lcssa471;$1788 = $$pre$i5$i$lcssa;
 }
 $62 = ((($gfc)) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 $$02$i557$i = 1;$73 = $1788;$ptr$01$i558$i = $1787;
 while(1) {
  $64 = $ptr$01$i558$i & 7;
  $65 = (8 - ($64))|0;
  $66 = ($$02$i557$i|0)<($65|0);
  $$0$$i559$i = $66 ? $$02$i557$i : $65;
  $67 = (($$02$i557$i) - ($$0$$i559$i))|0;
  $68 = $63 >> $67;
  $69 = (($65) - ($$0$$i559$i))|0;
  $70 = $68 << $69;
  $71 = $ptr$01$i558$i >> 3;
  $72 = ((((((($gfc)) + 39840|0) + (($73*48)|0)|0)) + 8|0) + ($71)|0);
  $74 = HEAP8[$72>>0]|0;
  $75 = $74&255;
  $76 = $70 | $75;
  $77 = $76&255;
  HEAP8[$72>>0] = $77;
  $78 = (($$0$$i559$i) + ($ptr$01$i558$i))|0;
  $79 = ($67|0)>(0);
  $$pre$i561$i = HEAP32[$17>>2]|0;
  if ($79) {
   $$02$i557$i = $67;$73 = $$pre$i561$i;$ptr$01$i558$i = $78;
  } else {
   $$lcssa469 = $78;$$pre$i561$i$lcssa = $$pre$i561$i;
   break;
  }
 }
 $80 = (((((($gfc)) + 39840|0) + (($$pre$i561$i$lcssa*48)|0)|0)) + 4|0);
 HEAP32[$80>>2] = $$lcssa469;
 $$02$i547$i = 2;$90 = $$pre$i561$i$lcssa;$ptr$01$i548$i = $$lcssa469;
 while(1) {
  $81 = $ptr$01$i548$i & 7;
  $82 = (8 - ($81))|0;
  $83 = ($$02$i547$i|0)<($82|0);
  $$0$$i549$i = $83 ? $$02$i547$i : $82;
  $84 = (($$02$i547$i) - ($$0$$i549$i))|0;
  $85 = 1 >>> $84;
  $86 = (($82) - ($$0$$i549$i))|0;
  $87 = $85 << $86;
  $88 = $ptr$01$i548$i >> 3;
  $89 = ((((((($gfc)) + 39840|0) + (($90*48)|0)|0)) + 8|0) + ($88)|0);
  $91 = HEAP8[$89>>0]|0;
  $92 = $91&255;
  $93 = $87 | $92;
  $94 = $93&255;
  HEAP8[$89>>0] = $94;
  $95 = (($$0$$i549$i) + ($ptr$01$i548$i))|0;
  $96 = ($84|0)>(0);
  $$pre$i551$i = HEAP32[$17>>2]|0;
  if ($96) {
   $$02$i547$i = $84;$90 = $$pre$i551$i;$ptr$01$i548$i = $95;
  } else {
   $$lcssa468 = $95;$$pre$i551$i$lcssa = $$pre$i551$i;
   break;
  }
 }
 $97 = (((((($gfc)) + 39840|0) + (($$pre$i551$i$lcssa*48)|0)|0)) + 4|0);
 HEAP32[$97>>2] = $$lcssa468;
 $98 = ((($gfc)) + 160|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)==(0);
 $101 = $100&1;
 $$02$i537$i = 1;$111 = $$pre$i551$i$lcssa;$ptr$01$i538$i = $$lcssa468;
 while(1) {
  $102 = $ptr$01$i538$i & 7;
  $103 = (8 - ($102))|0;
  $104 = ($$02$i537$i|0)<($103|0);
  $$0$$i539$i = $104 ? $$02$i537$i : $103;
  $105 = (($$02$i537$i) - ($$0$$i539$i))|0;
  $106 = $101 >>> $105;
  $107 = (($103) - ($$0$$i539$i))|0;
  $108 = $106 << $107;
  $109 = $ptr$01$i538$i >> 3;
  $110 = ((((((($gfc)) + 39840|0) + (($111*48)|0)|0)) + 8|0) + ($109)|0);
  $112 = HEAP8[$110>>0]|0;
  $113 = $112&255;
  $114 = $108 | $113;
  $115 = $114&255;
  HEAP8[$110>>0] = $115;
  $116 = (($$0$$i539$i) + ($ptr$01$i538$i))|0;
  $117 = ($105|0)>(0);
  $$pre$i541$i = HEAP32[$17>>2]|0;
  if ($117) {
   $$02$i537$i = $105;$111 = $$pre$i541$i;$ptr$01$i538$i = $116;
  } else {
   $$lcssa467 = $116;$$pre$i541$i$lcssa = $$pre$i541$i;
   break;
  }
 }
 $118 = (((((($gfc)) + 39840|0) + (($$pre$i541$i$lcssa*48)|0)|0)) + 4|0);
 HEAP32[$118>>2] = $$lcssa467;
 $119 = HEAP32[$1>>2]|0;
 $$02$i527$i = 4;$129 = $$pre$i541$i$lcssa;$ptr$01$i528$i = $$lcssa467;
 while(1) {
  $120 = $ptr$01$i528$i & 7;
  $121 = (8 - ($120))|0;
  $122 = ($$02$i527$i|0)<($121|0);
  $$0$$i529$i = $122 ? $$02$i527$i : $121;
  $123 = (($$02$i527$i) - ($$0$$i529$i))|0;
  $124 = $119 >> $123;
  $125 = (($121) - ($$0$$i529$i))|0;
  $126 = $124 << $125;
  $127 = $ptr$01$i528$i >> 3;
  $128 = ((((((($gfc)) + 39840|0) + (($129*48)|0)|0)) + 8|0) + ($127)|0);
  $130 = HEAP8[$128>>0]|0;
  $131 = $130&255;
  $132 = $126 | $131;
  $133 = $132&255;
  HEAP8[$128>>0] = $133;
  $134 = (($$0$$i529$i) + ($ptr$01$i528$i))|0;
  $135 = ($123|0)>(0);
  $$pre$i531$i = HEAP32[$17>>2]|0;
  if ($135) {
   $$02$i527$i = $123;$129 = $$pre$i531$i;$ptr$01$i528$i = $134;
  } else {
   $$lcssa466 = $134;$$pre$i531$i$lcssa = $$pre$i531$i;
   break;
  }
 }
 $136 = (((((($gfc)) + 39840|0) + (($$pre$i531$i$lcssa*48)|0)|0)) + 4|0);
 HEAP32[$136>>2] = $$lcssa466;
 $137 = ((($gfc)) + 20|0);
 $138 = HEAP32[$137>>2]|0;
 $$02$i517$i = 2;$148 = $$pre$i531$i$lcssa;$ptr$01$i518$i = $$lcssa466;
 while(1) {
  $139 = $ptr$01$i518$i & 7;
  $140 = (8 - ($139))|0;
  $141 = ($$02$i517$i|0)<($140|0);
  $$0$$i519$i = $141 ? $$02$i517$i : $140;
  $142 = (($$02$i517$i) - ($$0$$i519$i))|0;
  $143 = $138 >> $142;
  $144 = (($140) - ($$0$$i519$i))|0;
  $145 = $143 << $144;
  $146 = $ptr$01$i518$i >> 3;
  $147 = ((((((($gfc)) + 39840|0) + (($148*48)|0)|0)) + 8|0) + ($146)|0);
  $149 = HEAP8[$147>>0]|0;
  $150 = $149&255;
  $151 = $145 | $150;
  $152 = $151&255;
  HEAP8[$147>>0] = $152;
  $153 = (($$0$$i519$i) + ($ptr$01$i518$i))|0;
  $154 = ($142|0)>(0);
  $$pre$i521$i = HEAP32[$17>>2]|0;
  if ($154) {
   $$02$i517$i = $142;$148 = $$pre$i521$i;$ptr$01$i518$i = $153;
  } else {
   $$lcssa465 = $153;$$pre$i521$i$lcssa = $$pre$i521$i;
   break;
  }
 }
 $155 = (((((($gfc)) + 39840|0) + (($$pre$i521$i$lcssa*48)|0)|0)) + 4|0);
 HEAP32[$155>>2] = $$lcssa465;
 $156 = HEAP32[$7>>2]|0;
 $$02$i507$i = 1;$166 = $$pre$i521$i$lcssa;$ptr$01$i508$i = $$lcssa465;
 while(1) {
  $157 = $ptr$01$i508$i & 7;
  $158 = (8 - ($157))|0;
  $159 = ($$02$i507$i|0)<($158|0);
  $$0$$i509$i = $159 ? $$02$i507$i : $158;
  $160 = (($$02$i507$i) - ($$0$$i509$i))|0;
  $161 = $156 >> $160;
  $162 = (($158) - ($$0$$i509$i))|0;
  $163 = $161 << $162;
  $164 = $ptr$01$i508$i >> 3;
  $165 = ((((((($gfc)) + 39840|0) + (($166*48)|0)|0)) + 8|0) + ($164)|0);
  $167 = HEAP8[$165>>0]|0;
  $168 = $167&255;
  $169 = $163 | $168;
  $170 = $169&255;
  HEAP8[$165>>0] = $170;
  $171 = (($$0$$i509$i) + ($ptr$01$i508$i))|0;
  $172 = ($160|0)>(0);
  $$pre$i511$i = HEAP32[$17>>2]|0;
  if ($172) {
   $$02$i507$i = $160;$166 = $$pre$i511$i;$ptr$01$i508$i = $171;
  } else {
   $$lcssa464 = $171;$$pre$i511$i$lcssa = $$pre$i511$i;
   break;
  }
 }
 $173 = (((((($gfc)) + 39840|0) + (($$pre$i511$i$lcssa*48)|0)|0)) + 4|0);
 HEAP32[$173>>2] = $$lcssa464;
 $174 = ((($gfc)) + 172|0);
 $175 = HEAP32[$174>>2]|0;
 $$02$i497$i = 1;$185 = $$pre$i511$i$lcssa;$ptr$01$i498$i = $$lcssa464;
 while(1) {
  $176 = $ptr$01$i498$i & 7;
  $177 = (8 - ($176))|0;
  $178 = ($$02$i497$i|0)<($177|0);
  $$0$$i499$i = $178 ? $$02$i497$i : $177;
  $179 = (($$02$i497$i) - ($$0$$i499$i))|0;
  $180 = $175 >> $179;
  $181 = (($177) - ($$0$$i499$i))|0;
  $182 = $180 << $181;
  $183 = $ptr$01$i498$i >> 3;
  $184 = ((((((($gfc)) + 39840|0) + (($185*48)|0)|0)) + 8|0) + ($183)|0);
  $186 = HEAP8[$184>>0]|0;
  $187 = $186&255;
  $188 = $182 | $187;
  $189 = $188&255;
  HEAP8[$184>>0] = $189;
  $190 = (($$0$$i499$i) + ($ptr$01$i498$i))|0;
  $191 = ($179|0)>(0);
  $$pre$i501$i = HEAP32[$17>>2]|0;
  if ($191) {
   $$02$i497$i = $179;$185 = $$pre$i501$i;$ptr$01$i498$i = $190;
  } else {
   $$lcssa463 = $190;$$pre$i501$i$lcssa = $$pre$i501$i;
   break;
  }
 }
 $192 = (((((($gfc)) + 39840|0) + (($$pre$i501$i$lcssa*48)|0)|0)) + 4|0);
 HEAP32[$192>>2] = $$lcssa463;
 $193 = ((($gfc)) + 180|0);
 $194 = HEAP32[$193>>2]|0;
 $$02$i487$i = 2;$204 = $$pre$i501$i$lcssa;$ptr$01$i488$i = $$lcssa463;
 while(1) {
  $195 = $ptr$01$i488$i & 7;
  $196 = (8 - ($195))|0;
  $197 = ($$02$i487$i|0)<($196|0);
  $$0$$i489$i = $197 ? $$02$i487$i : $196;
  $198 = (($$02$i487$i) - ($$0$$i489$i))|0;
  $199 = $194 >> $198;
  $200 = (($196) - ($$0$$i489$i))|0;
  $201 = $199 << $200;
  $202 = $ptr$01$i488$i >> 3;
  $203 = ((((((($gfc)) + 39840|0) + (($204*48)|0)|0)) + 8|0) + ($202)|0);
  $205 = HEAP8[$203>>0]|0;
  $206 = $205&255;
  $207 = $201 | $206;
  $208 = $207&255;
  HEAP8[$203>>0] = $208;
  $209 = (($$0$$i489$i) + ($ptr$01$i488$i))|0;
  $210 = ($198|0)>(0);
  $$pre$i491$i = HEAP32[$17>>2]|0;
  if ($210) {
   $$02$i487$i = $198;$204 = $$pre$i491$i;$ptr$01$i488$i = $209;
  } else {
   $$lcssa462 = $209;$$pre$i491$i$lcssa = $$pre$i491$i;
   break;
  }
 }
 $211 = (((((($gfc)) + 39840|0) + (($$pre$i491$i$lcssa*48)|0)|0)) + 4|0);
 HEAP32[$211>>2] = $$lcssa462;
 $212 = ((($gfc)) + 84756|0);
 $213 = HEAP32[$212>>2]|0;
 $$02$i477$i = 2;$223 = $$pre$i491$i$lcssa;$ptr$01$i478$i = $$lcssa462;
 while(1) {
  $214 = $ptr$01$i478$i & 7;
  $215 = (8 - ($214))|0;
  $216 = ($$02$i477$i|0)<($215|0);
  $$0$$i479$i = $216 ? $$02$i477$i : $215;
  $217 = (($$02$i477$i) - ($$0$$i479$i))|0;
  $218 = $213 >> $217;
  $219 = (($215) - ($$0$$i479$i))|0;
  $220 = $218 << $219;
  $221 = $ptr$01$i478$i >> 3;
  $222 = ((((((($gfc)) + 39840|0) + (($223*48)|0)|0)) + 8|0) + ($221)|0);
  $224 = HEAP8[$222>>0]|0;
  $225 = $224&255;
  $226 = $220 | $225;
  $227 = $226&255;
  HEAP8[$222>>0] = $227;
  $228 = (($$0$$i479$i) + ($ptr$01$i478$i))|0;
  $229 = ($217|0)>(0);
  $$pre$i481$i = HEAP32[$17>>2]|0;
  if ($229) {
   $$02$i477$i = $217;$223 = $$pre$i481$i;$ptr$01$i478$i = $228;
  } else {
   $$lcssa461 = $228;$$pre$i481$i$lcssa = $$pre$i481$i;
   break;
  }
 }
 $230 = (((((($gfc)) + 39840|0) + (($$pre$i481$i$lcssa*48)|0)|0)) + 4|0);
 HEAP32[$230>>2] = $$lcssa461;
 $231 = ((($gfc)) + 164|0);
 $232 = HEAP32[$231>>2]|0;
 $$02$i467$i = 1;$242 = $$pre$i481$i$lcssa;$ptr$01$i468$i = $$lcssa461;
 while(1) {
  $233 = $ptr$01$i468$i & 7;
  $234 = (8 - ($233))|0;
  $235 = ($$02$i467$i|0)<($234|0);
  $$0$$i469$i = $235 ? $$02$i467$i : $234;
  $236 = (($$02$i467$i) - ($$0$$i469$i))|0;
  $237 = $232 >> $236;
  $238 = (($234) - ($$0$$i469$i))|0;
  $239 = $237 << $238;
  $240 = $ptr$01$i468$i >> 3;
  $241 = ((((((($gfc)) + 39840|0) + (($242*48)|0)|0)) + 8|0) + ($240)|0);
  $243 = HEAP8[$241>>0]|0;
  $244 = $243&255;
  $245 = $239 | $244;
  $246 = $245&255;
  HEAP8[$241>>0] = $246;
  $247 = (($$0$$i469$i) + ($ptr$01$i468$i))|0;
  $248 = ($236|0)>(0);
  $$pre$i471$i = HEAP32[$17>>2]|0;
  if ($248) {
   $$02$i467$i = $236;$242 = $$pre$i471$i;$ptr$01$i468$i = $247;
  } else {
   $$lcssa460 = $247;$$pre$i471$i$lcssa = $$pre$i471$i;
   break;
  }
 }
 $249 = (((((($gfc)) + 39840|0) + (($$pre$i471$i$lcssa*48)|0)|0)) + 4|0);
 HEAP32[$249>>2] = $$lcssa460;
 $250 = ((($gfc)) + 168|0);
 $251 = HEAP32[$250>>2]|0;
 $$02$i457$i = 1;$261 = $$pre$i471$i$lcssa;$ptr$01$i458$i = $$lcssa460;
 while(1) {
  $252 = $ptr$01$i458$i & 7;
  $253 = (8 - ($252))|0;
  $254 = ($$02$i457$i|0)<($253|0);
  $$0$$i459$i = $254 ? $$02$i457$i : $253;
  $255 = (($$02$i457$i) - ($$0$$i459$i))|0;
  $256 = $251 >> $255;
  $257 = (($253) - ($$0$$i459$i))|0;
  $258 = $256 << $257;
  $259 = $ptr$01$i458$i >> 3;
  $260 = ((((((($gfc)) + 39840|0) + (($261*48)|0)|0)) + 8|0) + ($259)|0);
  $262 = HEAP8[$260>>0]|0;
  $263 = $262&255;
  $264 = $258 | $263;
  $265 = $264&255;
  HEAP8[$260>>0] = $265;
  $266 = (($$0$$i459$i) + ($ptr$01$i458$i))|0;
  $267 = ($255|0)>(0);
  $$pre$i461$i = HEAP32[$17>>2]|0;
  if ($267) {
   $$02$i457$i = $255;$261 = $$pre$i461$i;$ptr$01$i458$i = $266;
  } else {
   $$lcssa459 = $266;$$pre$i461$i$lcssa = $$pre$i461$i;
   break;
  }
 }
 $268 = (((((($gfc)) + 39840|0) + (($$pre$i461$i$lcssa*48)|0)|0)) + 4|0);
 HEAP32[$268>>2] = $$lcssa459;
 $269 = ((($gfc)) + 176|0);
 $270 = HEAP32[$269>>2]|0;
 $$02$i447$i = 2;$280 = $$pre$i461$i$lcssa;$ptr$01$i448$i = $$lcssa459;
 while(1) {
  $271 = $ptr$01$i448$i & 7;
  $272 = (8 - ($271))|0;
  $273 = ($$02$i447$i|0)<($272|0);
  $$0$$i449$i = $273 ? $$02$i447$i : $272;
  $274 = (($$02$i447$i) - ($$0$$i449$i))|0;
  $275 = $270 >> $274;
  $276 = (($272) - ($$0$$i449$i))|0;
  $277 = $275 << $276;
  $278 = $ptr$01$i448$i >> 3;
  $279 = ((((((($gfc)) + 39840|0) + (($280*48)|0)|0)) + 8|0) + ($278)|0);
  $281 = HEAP8[$279>>0]|0;
  $282 = $281&255;
  $283 = $277 | $282;
  $284 = $283&255;
  HEAP8[$279>>0] = $284;
  $285 = (($$0$$i449$i) + ($ptr$01$i448$i))|0;
  $286 = ($274|0)>(0);
  $$pre$i451$i = HEAP32[$17>>2]|0;
  if ($286) {
   $$02$i447$i = $274;$280 = $$pre$i451$i;$ptr$01$i448$i = $285;
  } else {
   $$lcssa458 = $285;$$pre$i451$i$lcssa = $$pre$i451$i;
   break;
  }
 }
 $287 = (((((($gfc)) + 39840|0) + (($$pre$i451$i$lcssa*48)|0)|0)) + 4|0);
 HEAP32[$287>>2] = $$lcssa458;
 $288 = HEAP32[$98>>2]|0;
 $289 = ($288|0)==(0);
 if ($289) {
  $1789 = $$lcssa458;
 } else {
  $$02$i437$i = 16;$ptr$01$i438$i = $$lcssa458;
  while(1) {
   $290 = $ptr$01$i438$i & 7;
   $291 = (8 - ($290))|0;
   $292 = ($$02$i437$i|0)<($291|0);
   $$0$$i439$i = $292 ? $$02$i437$i : $291;
   $293 = (($$02$i437$i) - ($$0$$i439$i))|0;
   $294 = (($$0$$i439$i) + ($ptr$01$i438$i))|0;
   $295 = ($293|0)>(0);
   if ($295) {
    $$02$i437$i = $293;$ptr$01$i438$i = $294;
   } else {
    $$lcssa457 = $294;
    break;
   }
  }
  HEAP32[$287>>2] = $$lcssa457;
  $1789 = $$lcssa457;
 }
 $296 = HEAP32[$62>>2]|0;
 $297 = ($296|0)==(1);
 $298 = ((($gfc)) + 21312|0);
 $299 = HEAP32[$298>>2]|0;
 do {
  if ($297) {
   $$02$i427$i = 9;$309 = $$pre$i451$i$lcssa;$ptr$01$i428$i = $1789;
   while(1) {
    $300 = $ptr$01$i428$i & 7;
    $301 = (8 - ($300))|0;
    $302 = ($$02$i427$i|0)<($301|0);
    $$0$$i429$i = $302 ? $$02$i427$i : $301;
    $303 = (($$02$i427$i) - ($$0$$i429$i))|0;
    $304 = $299 >> $303;
    $305 = (($301) - ($$0$$i429$i))|0;
    $306 = $304 << $305;
    $307 = $ptr$01$i428$i >> 3;
    $308 = ((((((($gfc)) + 39840|0) + (($309*48)|0)|0)) + 8|0) + ($307)|0);
    $310 = HEAP8[$308>>0]|0;
    $311 = $310&255;
    $312 = $306 | $311;
    $313 = $312&255;
    HEAP8[$308>>0] = $313;
    $314 = (($$0$$i429$i) + ($ptr$01$i428$i))|0;
    $315 = ($303|0)>(0);
    $$pre$i431$i = HEAP32[$17>>2]|0;
    if ($315) {
     $$02$i427$i = $303;$309 = $$pre$i431$i;$ptr$01$i428$i = $314;
    } else {
     $$lcssa434 = $314;$$pre$i431$i$lcssa = $$pre$i431$i;
     break;
    }
   }
   $316 = (((((($gfc)) + 39840|0) + (($$pre$i431$i$lcssa*48)|0)|0)) + 4|0);
   HEAP32[$316>>2] = $$lcssa434;
   $317 = ((($gfc)) + 72|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = ($318|0)==(2);
   $320 = ((($gfc)) + 21316|0);
   $321 = HEAP32[$320>>2]|0;
   if ($319) {
    $$02$i417$i = 3;$331 = $$pre$i431$i$lcssa;$ptr$01$i418$i = $$lcssa434;
    while(1) {
     $322 = $ptr$01$i418$i & 7;
     $323 = (8 - ($322))|0;
     $324 = ($$02$i417$i|0)<($323|0);
     $$0$$i419$i = $324 ? $$02$i417$i : $323;
     $325 = (($$02$i417$i) - ($$0$$i419$i))|0;
     $326 = $321 >> $325;
     $327 = (($323) - ($$0$$i419$i))|0;
     $328 = $326 << $327;
     $329 = $ptr$01$i418$i >> 3;
     $330 = ((((((($gfc)) + 39840|0) + (($331*48)|0)|0)) + 8|0) + ($329)|0);
     $332 = HEAP8[$330>>0]|0;
     $333 = $332&255;
     $334 = $328 | $333;
     $335 = $334&255;
     HEAP8[$330>>0] = $335;
     $336 = (($$0$$i419$i) + ($ptr$01$i418$i))|0;
     $337 = ($325|0)>(0);
     $$pre$i421$i = HEAP32[$17>>2]|0;
     if ($337) {
      $$02$i417$i = $325;$331 = $$pre$i421$i;$ptr$01$i418$i = $336;
     } else {
      $$lcssa432 = $336;$$pre$i421$i$lcssa = $$pre$i421$i;
      break;
     }
    }
    $338 = (((((($gfc)) + 39840|0) + (($$pre$i421$i$lcssa*48)|0)|0)) + 4|0);
    HEAP32[$338>>2] = $$lcssa432;
    $$pre735$i = $$lcssa432;$1790 = $$pre$i421$i$lcssa;
   } else {
    $$02$i407$i = 5;$348 = $$pre$i431$i$lcssa;$ptr$01$i408$i = $$lcssa434;
    while(1) {
     $339 = $ptr$01$i408$i & 7;
     $340 = (8 - ($339))|0;
     $341 = ($$02$i407$i|0)<($340|0);
     $$0$$i409$i = $341 ? $$02$i407$i : $340;
     $342 = (($$02$i407$i) - ($$0$$i409$i))|0;
     $343 = $321 >> $342;
     $344 = (($340) - ($$0$$i409$i))|0;
     $345 = $343 << $344;
     $346 = $ptr$01$i408$i >> 3;
     $347 = ((((((($gfc)) + 39840|0) + (($348*48)|0)|0)) + 8|0) + ($346)|0);
     $349 = HEAP8[$347>>0]|0;
     $350 = $349&255;
     $351 = $345 | $350;
     $352 = $351&255;
     HEAP8[$347>>0] = $352;
     $353 = (($$0$$i409$i) + ($ptr$01$i408$i))|0;
     $354 = ($342|0)>(0);
     $$pre$i411$i = HEAP32[$17>>2]|0;
     if ($354) {
      $$02$i407$i = $342;$348 = $$pre$i411$i;$ptr$01$i408$i = $353;
     } else {
      $$lcssa433 = $353;$$pre$i411$i$lcssa = $$pre$i411$i;
      break;
     }
    }
    $355 = (((((($gfc)) + 39840|0) + (($$pre$i411$i$lcssa*48)|0)|0)) + 4|0);
    HEAP32[$355>>2] = $$lcssa433;
    $$pre735$i = $$lcssa433;$1790 = $$pre$i411$i$lcssa;
   }
   $356 = HEAP32[$317>>2]|0;
   $357 = ($356|0)>(0);
   if ($357) {
    $1791 = $$pre735$i;$1792 = $1790;$ch$0637$i = 0;
    while(1) {
     $358 = (((($gfc)) + 21328|0) + ($ch$0637$i<<4)|0);
     $359 = HEAP32[$358>>2]|0;
     $$02$i397$i = 1;$369 = $1792;$ptr$01$i398$i = $1791;
     while(1) {
      $360 = $ptr$01$i398$i & 7;
      $361 = (8 - ($360))|0;
      $362 = ($$02$i397$i|0)<($361|0);
      $$0$$i399$i = $362 ? $$02$i397$i : $361;
      $363 = (($$02$i397$i) - ($$0$$i399$i))|0;
      $364 = $359 >> $363;
      $365 = (($361) - ($$0$$i399$i))|0;
      $366 = $364 << $365;
      $367 = $ptr$01$i398$i >> 3;
      $368 = ((((((($gfc)) + 39840|0) + (($369*48)|0)|0)) + 8|0) + ($367)|0);
      $370 = HEAP8[$368>>0]|0;
      $371 = $370&255;
      $372 = $366 | $371;
      $373 = $372&255;
      HEAP8[$368>>0] = $373;
      $374 = (($$0$$i399$i) + ($ptr$01$i398$i))|0;
      $375 = ($363|0)>(0);
      $$pre$i401$i = HEAP32[$17>>2]|0;
      if ($375) {
       $$02$i397$i = $363;$369 = $$pre$i401$i;$ptr$01$i398$i = $374;
      } else {
       $$lcssa427 = $374;$$pre$i401$i$lcssa = $$pre$i401$i;
       break;
      }
     }
     $376 = (((((($gfc)) + 39840|0) + (($$pre$i401$i$lcssa*48)|0)|0)) + 4|0);
     HEAP32[$376>>2] = $$lcssa427;
     $377 = (((((($gfc)) + 21328|0) + ($ch$0637$i<<4)|0)) + 4|0);
     $378 = HEAP32[$377>>2]|0;
     $$02$i397$1$i = 1;$1234 = $$pre$i401$i$lcssa;$ptr$01$i398$1$i = $$lcssa427;
     while(1) {
      $1225 = $ptr$01$i398$1$i & 7;
      $1226 = (8 - ($1225))|0;
      $1227 = ($$02$i397$1$i|0)<($1226|0);
      $$0$$i399$1$i = $1227 ? $$02$i397$1$i : $1226;
      $1228 = (($$02$i397$1$i) - ($$0$$i399$1$i))|0;
      $1229 = $378 >> $1228;
      $1230 = (($1226) - ($$0$$i399$1$i))|0;
      $1231 = $1229 << $1230;
      $1232 = $ptr$01$i398$1$i >> 3;
      $1233 = ((((((($gfc)) + 39840|0) + (($1234*48)|0)|0)) + 8|0) + ($1232)|0);
      $1235 = HEAP8[$1233>>0]|0;
      $1236 = $1235&255;
      $1237 = $1231 | $1236;
      $1238 = $1237&255;
      HEAP8[$1233>>0] = $1238;
      $1239 = (($$0$$i399$1$i) + ($ptr$01$i398$1$i))|0;
      $1240 = ($1228|0)>(0);
      $$pre$i401$1$i = HEAP32[$17>>2]|0;
      if ($1240) {
       $$02$i397$1$i = $1228;$1234 = $$pre$i401$1$i;$ptr$01$i398$1$i = $1239;
      } else {
       $$lcssa428 = $1239;$$pre$i401$1$i$lcssa = $$pre$i401$1$i;
       break;
      }
     }
     $1241 = (((((($gfc)) + 39840|0) + (($$pre$i401$1$i$lcssa*48)|0)|0)) + 4|0);
     HEAP32[$1241>>2] = $$lcssa428;
     $1242 = (((((($gfc)) + 21328|0) + ($ch$0637$i<<4)|0)) + 8|0);
     $1243 = HEAP32[$1242>>2]|0;
     $$02$i397$2$i = 1;$1253 = $$pre$i401$1$i$lcssa;$ptr$01$i398$2$i = $$lcssa428;
     while(1) {
      $1244 = $ptr$01$i398$2$i & 7;
      $1245 = (8 - ($1244))|0;
      $1246 = ($$02$i397$2$i|0)<($1245|0);
      $$0$$i399$2$i = $1246 ? $$02$i397$2$i : $1245;
      $1247 = (($$02$i397$2$i) - ($$0$$i399$2$i))|0;
      $1248 = $1243 >> $1247;
      $1249 = (($1245) - ($$0$$i399$2$i))|0;
      $1250 = $1248 << $1249;
      $1251 = $ptr$01$i398$2$i >> 3;
      $1252 = ((((((($gfc)) + 39840|0) + (($1253*48)|0)|0)) + 8|0) + ($1251)|0);
      $1254 = HEAP8[$1252>>0]|0;
      $1255 = $1254&255;
      $1256 = $1250 | $1255;
      $1257 = $1256&255;
      HEAP8[$1252>>0] = $1257;
      $1258 = (($$0$$i399$2$i) + ($ptr$01$i398$2$i))|0;
      $1259 = ($1247|0)>(0);
      $$pre$i401$2$i = HEAP32[$17>>2]|0;
      if ($1259) {
       $$02$i397$2$i = $1247;$1253 = $$pre$i401$2$i;$ptr$01$i398$2$i = $1258;
      } else {
       $$lcssa429 = $1258;$$pre$i401$2$i$lcssa = $$pre$i401$2$i;
       break;
      }
     }
     $1260 = (((((($gfc)) + 39840|0) + (($$pre$i401$2$i$lcssa*48)|0)|0)) + 4|0);
     HEAP32[$1260>>2] = $$lcssa429;
     $1261 = (((((($gfc)) + 21328|0) + ($ch$0637$i<<4)|0)) + 12|0);
     $1262 = HEAP32[$1261>>2]|0;
     $$02$i397$3$i = 1;$1272 = $$pre$i401$2$i$lcssa;$ptr$01$i398$3$i = $$lcssa429;
     while(1) {
      $1263 = $ptr$01$i398$3$i & 7;
      $1264 = (8 - ($1263))|0;
      $1265 = ($$02$i397$3$i|0)<($1264|0);
      $$0$$i399$3$i = $1265 ? $$02$i397$3$i : $1264;
      $1266 = (($$02$i397$3$i) - ($$0$$i399$3$i))|0;
      $1267 = $1262 >> $1266;
      $1268 = (($1264) - ($$0$$i399$3$i))|0;
      $1269 = $1267 << $1268;
      $1270 = $ptr$01$i398$3$i >> 3;
      $1271 = ((((((($gfc)) + 39840|0) + (($1272*48)|0)|0)) + 8|0) + ($1270)|0);
      $1273 = HEAP8[$1271>>0]|0;
      $1274 = $1273&255;
      $1275 = $1269 | $1274;
      $1276 = $1275&255;
      HEAP8[$1271>>0] = $1276;
      $1277 = (($$0$$i399$3$i) + ($ptr$01$i398$3$i))|0;
      $1278 = ($1266|0)>(0);
      $$pre$i401$3$i = HEAP32[$17>>2]|0;
      if ($1278) {
       $$02$i397$3$i = $1266;$1272 = $$pre$i401$3$i;$ptr$01$i398$3$i = $1277;
      } else {
       $$lcssa430 = $1277;$$pre$i401$3$i$lcssa = $$pre$i401$3$i;
       break;
      }
     }
     $1279 = (((((($gfc)) + 39840|0) + (($$pre$i401$3$i$lcssa*48)|0)|0)) + 4|0);
     HEAP32[$1279>>2] = $$lcssa430;
     $1280 = (($ch$0637$i) + 1)|0;
     $1281 = HEAP32[$317>>2]|0;
     $1282 = ($1280|0)<($1281|0);
     if ($1282) {
      $1791 = $$lcssa430;$1792 = $$pre$i401$3$i$lcssa;$ch$0637$i = $1280;
     } else {
      $379 = $1281;$381 = $$pre$i401$3$i$lcssa;$gr$0634$i = 0;
      break;
     }
    }
   } else {
    $379 = $356;$381 = $1790;$gr$0634$i = 0;
   }
   while(1) {
    $380 = ($379|0)>(0);
    if ($380) {
     $$phi$trans$insert736$i = (((((($gfc)) + 39840|0) + (($381*48)|0)|0)) + 4|0);
     $$pre737$i = HEAP32[$$phi$trans$insert736$i>>2]|0;
     $1795 = $$pre737$i;$1796 = $381;$ch$1632$i = 0;
     while(1) {
      $382 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4768|0);
      $383 = HEAP32[$382>>2]|0;
      $384 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4844|0);
      $385 = HEAP32[$384>>2]|0;
      $386 = (($385) + ($383))|0;
      $$02$i387$i = 12;$396 = $1796;$ptr$01$i388$i = $1795;
      while(1) {
       $387 = $ptr$01$i388$i & 7;
       $388 = (8 - ($387))|0;
       $389 = ($$02$i387$i|0)<($388|0);
       $$0$$i389$i = $389 ? $$02$i387$i : $388;
       $390 = (($$02$i387$i) - ($$0$$i389$i))|0;
       $391 = $386 >> $390;
       $392 = (($388) - ($$0$$i389$i))|0;
       $393 = $391 << $392;
       $394 = $ptr$01$i388$i >> 3;
       $395 = ((((((($gfc)) + 39840|0) + (($396*48)|0)|0)) + 8|0) + ($394)|0);
       $397 = HEAP8[$395>>0]|0;
       $398 = $397&255;
       $399 = $393 | $398;
       $400 = $399&255;
       HEAP8[$395>>0] = $400;
       $401 = (($$0$$i389$i) + ($ptr$01$i388$i))|0;
       $402 = ($390|0)>(0);
       $$pre$i391$i = HEAP32[$17>>2]|0;
       if ($402) {
        $$02$i387$i = $390;$396 = $$pre$i391$i;$ptr$01$i388$i = $401;
       } else {
        $$lcssa404 = $401;$$pre$i391$i$lcssa = $$pre$i391$i;
        break;
       }
      }
      $403 = (((((($gfc)) + 39840|0) + (($$pre$i391$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$403>>2] = $$lcssa404;
      $404 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4772|0);
      $405 = HEAP32[$404>>2]|0;
      $406 = (($405|0) / 2)&-1;
      $$02$i377$i = 9;$416 = $$pre$i391$i$lcssa;$ptr$01$i378$i = $$lcssa404;
      while(1) {
       $407 = $ptr$01$i378$i & 7;
       $408 = (8 - ($407))|0;
       $409 = ($$02$i377$i|0)<($408|0);
       $$0$$i379$i = $409 ? $$02$i377$i : $408;
       $410 = (($$02$i377$i) - ($$0$$i379$i))|0;
       $411 = $406 >> $410;
       $412 = (($408) - ($$0$$i379$i))|0;
       $413 = $411 << $412;
       $414 = $ptr$01$i378$i >> 3;
       $415 = ((((((($gfc)) + 39840|0) + (($416*48)|0)|0)) + 8|0) + ($414)|0);
       $417 = HEAP8[$415>>0]|0;
       $418 = $417&255;
       $419 = $413 | $418;
       $420 = $419&255;
       HEAP8[$415>>0] = $420;
       $421 = (($$0$$i379$i) + ($ptr$01$i378$i))|0;
       $422 = ($410|0)>(0);
       $$pre$i381$i = HEAP32[$17>>2]|0;
       if ($422) {
        $$02$i377$i = $410;$416 = $$pre$i381$i;$ptr$01$i378$i = $421;
       } else {
        $$lcssa405 = $421;$$pre$i381$i$lcssa = $$pre$i381$i;
        break;
       }
      }
      $423 = (((((($gfc)) + 39840|0) + (($$pre$i381$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$423>>2] = $$lcssa405;
      $424 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4780|0);
      $425 = HEAP32[$424>>2]|0;
      $$02$i367$i = 8;$435 = $$pre$i381$i$lcssa;$ptr$01$i368$i = $$lcssa405;
      while(1) {
       $426 = $ptr$01$i368$i & 7;
       $427 = (8 - ($426))|0;
       $428 = ($$02$i367$i|0)<($427|0);
       $$0$$i369$i = $428 ? $$02$i367$i : $427;
       $429 = (($$02$i367$i) - ($$0$$i369$i))|0;
       $430 = $425 >> $429;
       $431 = (($427) - ($$0$$i369$i))|0;
       $432 = $430 << $431;
       $433 = $ptr$01$i368$i >> 3;
       $434 = ((((((($gfc)) + 39840|0) + (($435*48)|0)|0)) + 8|0) + ($433)|0);
       $436 = HEAP8[$434>>0]|0;
       $437 = $436&255;
       $438 = $432 | $437;
       $439 = $438&255;
       HEAP8[$434>>0] = $439;
       $440 = (($$0$$i369$i) + ($ptr$01$i368$i))|0;
       $441 = ($429|0)>(0);
       $$pre$i371$i = HEAP32[$17>>2]|0;
       if ($441) {
        $$02$i367$i = $429;$435 = $$pre$i371$i;$ptr$01$i368$i = $440;
       } else {
        $$lcssa406 = $440;$$pre$i371$i$lcssa = $$pre$i371$i;
        break;
       }
      }
      $442 = (((((($gfc)) + 39840|0) + (($$pre$i371$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$442>>2] = $$lcssa406;
      $443 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4784|0);
      $444 = HEAP32[$443>>2]|0;
      $$02$i357$i = 4;$454 = $$pre$i371$i$lcssa;$ptr$01$i358$i = $$lcssa406;
      while(1) {
       $445 = $ptr$01$i358$i & 7;
       $446 = (8 - ($445))|0;
       $447 = ($$02$i357$i|0)<($446|0);
       $$0$$i359$i = $447 ? $$02$i357$i : $446;
       $448 = (($$02$i357$i) - ($$0$$i359$i))|0;
       $449 = $444 >> $448;
       $450 = (($446) - ($$0$$i359$i))|0;
       $451 = $449 << $450;
       $452 = $ptr$01$i358$i >> 3;
       $453 = ((((((($gfc)) + 39840|0) + (($454*48)|0)|0)) + 8|0) + ($452)|0);
       $455 = HEAP8[$453>>0]|0;
       $456 = $455&255;
       $457 = $451 | $456;
       $458 = $457&255;
       HEAP8[$453>>0] = $458;
       $459 = (($$0$$i359$i) + ($ptr$01$i358$i))|0;
       $460 = ($448|0)>(0);
       $$pre$i361$i = HEAP32[$17>>2]|0;
       if ($460) {
        $$02$i357$i = $448;$454 = $$pre$i361$i;$ptr$01$i358$i = $459;
       } else {
        $$lcssa407 = $459;$$pre$i361$i$lcssa = $$pre$i361$i;
        break;
       }
      }
      $461 = (((((($gfc)) + 39840|0) + (($$pre$i361$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$461>>2] = $$lcssa407;
      $462 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4788|0);
      $463 = HEAP32[$462>>2]|0;
      $464 = ($463|0)==(0);
      if ($464) {
       $$02$i267$i = 1;$ptr$01$i268$i = $$lcssa407;
       while(1) {
        $618 = $ptr$01$i268$i & 7;
        $619 = (8 - ($618))|0;
        $620 = ($$02$i267$i|0)<($619|0);
        $$0$$i269$i = $620 ? $$02$i267$i : $619;
        $621 = (($$02$i267$i) - ($$0$$i269$i))|0;
        $622 = (($$0$$i269$i) + ($ptr$01$i268$i))|0;
        $623 = ($621|0)>(0);
        if ($623) {
         $$02$i267$i = $621;$ptr$01$i268$i = $622;
        } else {
         $$lcssa416 = $622;
         break;
        }
       }
       HEAP32[$461>>2] = $$lcssa416;
       $624 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4796|0);
       $625 = HEAP32[$624>>2]|0;
       $626 = ($625|0)==(14);
       if ($626) {
        HEAP32[$624>>2] = 16;
        $$pre725$i = HEAP32[$17>>2]|0;
        $$phi$trans$insert726$i = (((((($gfc)) + 39840|0) + (($$pre725$i*48)|0)|0)) + 4|0);
        $$pre727$i = HEAP32[$$phi$trans$insert726$i>>2]|0;
        $1803 = $$pre727$i;$1804 = $$pre725$i;$632 = 16;
       } else {
        $1803 = $$lcssa416;$1804 = $$pre$i361$i$lcssa;$632 = $625;
       }
       $$02$i257$i = 5;$637 = $1804;$ptr$01$i258$i = $1803;
       while(1) {
        $627 = $ptr$01$i258$i & 7;
        $628 = (8 - ($627))|0;
        $629 = ($$02$i257$i|0)<($628|0);
        $$0$$i259$i = $629 ? $$02$i257$i : $628;
        $630 = (($$02$i257$i) - ($$0$$i259$i))|0;
        $631 = $632 >> $630;
        $633 = (($628) - ($$0$$i259$i))|0;
        $634 = $631 << $633;
        $635 = $ptr$01$i258$i >> 3;
        $636 = ((((((($gfc)) + 39840|0) + (($637*48)|0)|0)) + 8|0) + ($635)|0);
        $638 = HEAP8[$636>>0]|0;
        $639 = $638&255;
        $640 = $634 | $639;
        $641 = $640&255;
        HEAP8[$636>>0] = $641;
        $642 = (($$0$$i259$i) + ($ptr$01$i258$i))|0;
        $643 = ($630|0)>(0);
        $$pre$i261$i = HEAP32[$17>>2]|0;
        if ($643) {
         $$02$i257$i = $630;$637 = $$pre$i261$i;$ptr$01$i258$i = $642;
        } else {
         $$lcssa417 = $642;$$pre$i261$i$lcssa = $$pre$i261$i;
         break;
        }
       }
       $644 = (((((($gfc)) + 39840|0) + (($$pre$i261$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$644>>2] = $$lcssa417;
       $645 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4800|0);
       $646 = HEAP32[$645>>2]|0;
       $647 = ($646|0)==(14);
       if ($647) {
        HEAP32[$645>>2] = 16;
        $$pre728$i = HEAP32[$17>>2]|0;
        $$phi$trans$insert729$i = (((((($gfc)) + 39840|0) + (($$pre728$i*48)|0)|0)) + 4|0);
        $$pre730$i = HEAP32[$$phi$trans$insert729$i>>2]|0;
        $1805 = $$pre730$i;$1806 = $$pre728$i;$653 = 16;
       } else {
        $1805 = $$lcssa417;$1806 = $$pre$i261$i$lcssa;$653 = $646;
       }
       $$02$i247$i = 5;$658 = $1806;$ptr$01$i248$i = $1805;
       while(1) {
        $648 = $ptr$01$i248$i & 7;
        $649 = (8 - ($648))|0;
        $650 = ($$02$i247$i|0)<($649|0);
        $$0$$i249$i = $650 ? $$02$i247$i : $649;
        $651 = (($$02$i247$i) - ($$0$$i249$i))|0;
        $652 = $653 >> $651;
        $654 = (($649) - ($$0$$i249$i))|0;
        $655 = $652 << $654;
        $656 = $ptr$01$i248$i >> 3;
        $657 = ((((((($gfc)) + 39840|0) + (($658*48)|0)|0)) + 8|0) + ($656)|0);
        $659 = HEAP8[$657>>0]|0;
        $660 = $659&255;
        $661 = $655 | $660;
        $662 = $661&255;
        HEAP8[$657>>0] = $662;
        $663 = (($$0$$i249$i) + ($ptr$01$i248$i))|0;
        $664 = ($651|0)>(0);
        $$pre$i251$i = HEAP32[$17>>2]|0;
        if ($664) {
         $$02$i247$i = $651;$658 = $$pre$i251$i;$ptr$01$i248$i = $663;
        } else {
         $$lcssa418 = $663;$$pre$i251$i$lcssa = $$pre$i251$i;
         break;
        }
       }
       $665 = (((((($gfc)) + 39840|0) + (($$pre$i251$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$665>>2] = $$lcssa418;
       $666 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4804|0);
       $667 = HEAP32[$666>>2]|0;
       $668 = ($667|0)==(14);
       if ($668) {
        HEAP32[$666>>2] = 16;
        $$pre731$i = HEAP32[$17>>2]|0;
        $$phi$trans$insert732$i = (((((($gfc)) + 39840|0) + (($$pre731$i*48)|0)|0)) + 4|0);
        $$pre733$i = HEAP32[$$phi$trans$insert732$i>>2]|0;
        $1807 = $$pre733$i;$1808 = $$pre731$i;$674 = 16;
       } else {
        $1807 = $$lcssa418;$1808 = $$pre$i251$i$lcssa;$674 = $667;
       }
       $$02$i237$i = 5;$679 = $1808;$ptr$01$i238$i = $1807;
       while(1) {
        $669 = $ptr$01$i238$i & 7;
        $670 = (8 - ($669))|0;
        $671 = ($$02$i237$i|0)<($670|0);
        $$0$$i239$i = $671 ? $$02$i237$i : $670;
        $672 = (($$02$i237$i) - ($$0$$i239$i))|0;
        $673 = $674 >> $672;
        $675 = (($670) - ($$0$$i239$i))|0;
        $676 = $673 << $675;
        $677 = $ptr$01$i238$i >> 3;
        $678 = ((((((($gfc)) + 39840|0) + (($679*48)|0)|0)) + 8|0) + ($677)|0);
        $680 = HEAP8[$678>>0]|0;
        $681 = $680&255;
        $682 = $676 | $681;
        $683 = $682&255;
        HEAP8[$678>>0] = $683;
        $684 = (($$0$$i239$i) + ($ptr$01$i238$i))|0;
        $685 = ($672|0)>(0);
        $$pre$i241$i = HEAP32[$17>>2]|0;
        if ($685) {
         $$02$i237$i = $672;$679 = $$pre$i241$i;$ptr$01$i238$i = $684;
        } else {
         $$lcssa419 = $684;$$pre$i241$i$lcssa = $$pre$i241$i;
         break;
        }
       }
       $686 = (((((($gfc)) + 39840|0) + (($$pre$i241$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$686>>2] = $$lcssa419;
       $687 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4824|0);
       $688 = HEAP32[$687>>2]|0;
       $$02$i227$i = 4;$698 = $$pre$i241$i$lcssa;$ptr$01$i228$i = $$lcssa419;
       while(1) {
        $689 = $ptr$01$i228$i & 7;
        $690 = (8 - ($689))|0;
        $691 = ($$02$i227$i|0)<($690|0);
        $$0$$i229$i = $691 ? $$02$i227$i : $690;
        $692 = (($$02$i227$i) - ($$0$$i229$i))|0;
        $693 = $688 >> $692;
        $694 = (($690) - ($$0$$i229$i))|0;
        $695 = $693 << $694;
        $696 = $ptr$01$i228$i >> 3;
        $697 = ((((((($gfc)) + 39840|0) + (($698*48)|0)|0)) + 8|0) + ($696)|0);
        $699 = HEAP8[$697>>0]|0;
        $700 = $699&255;
        $701 = $695 | $700;
        $702 = $701&255;
        HEAP8[$697>>0] = $702;
        $703 = (($$0$$i229$i) + ($ptr$01$i228$i))|0;
        $704 = ($692|0)>(0);
        $$pre$i231$i = HEAP32[$17>>2]|0;
        if ($704) {
         $$02$i227$i = $692;$698 = $$pre$i231$i;$ptr$01$i228$i = $703;
        } else {
         $$lcssa420 = $703;$$pre$i231$i$lcssa = $$pre$i231$i;
         break;
        }
       }
       $705 = (((((($gfc)) + 39840|0) + (($$pre$i231$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$705>>2] = $$lcssa420;
       $706 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4828|0);
       $707 = HEAP32[$706>>2]|0;
       $$02$i217$i = 3;$717 = $$pre$i231$i$lcssa;$ptr$01$i218$i = $$lcssa420;
       while(1) {
        $708 = $ptr$01$i218$i & 7;
        $709 = (8 - ($708))|0;
        $710 = ($$02$i217$i|0)<($709|0);
        $$0$$i219$i = $710 ? $$02$i217$i : $709;
        $711 = (($$02$i217$i) - ($$0$$i219$i))|0;
        $712 = $707 >> $711;
        $713 = (($709) - ($$0$$i219$i))|0;
        $714 = $712 << $713;
        $715 = $ptr$01$i218$i >> 3;
        $716 = ((((((($gfc)) + 39840|0) + (($717*48)|0)|0)) + 8|0) + ($715)|0);
        $718 = HEAP8[$716>>0]|0;
        $719 = $718&255;
        $720 = $714 | $719;
        $721 = $720&255;
        HEAP8[$716>>0] = $721;
        $722 = (($$0$$i219$i) + ($ptr$01$i218$i))|0;
        $723 = ($711|0)>(0);
        $$pre$i221$i = HEAP32[$17>>2]|0;
        if ($723) {
         $$02$i217$i = $711;$717 = $$pre$i221$i;$ptr$01$i218$i = $722;
        } else {
         $$lcssa421 = $722;$$pre$i221$i$lcssa = $$pre$i221$i;
         break;
        }
       }
       $724 = (((((($gfc)) + 39840|0) + (($$pre$i221$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$724>>2] = $$lcssa421;
       $1801 = $$lcssa421;$1802 = $$pre$i221$i$lcssa;
      } else {
       $$02$i347$i = 1;$474 = $$pre$i361$i$lcssa;$ptr$01$i348$i = $$lcssa407;
       while(1) {
        $465 = $ptr$01$i348$i & 7;
        $466 = (8 - ($465))|0;
        $467 = ($$02$i347$i|0)<($466|0);
        $$0$$i349$i = $467 ? $$02$i347$i : $466;
        $468 = (($$02$i347$i) - ($$0$$i349$i))|0;
        $469 = 1 >>> $468;
        $470 = (($466) - ($$0$$i349$i))|0;
        $471 = $469 << $470;
        $472 = $ptr$01$i348$i >> 3;
        $473 = ((((((($gfc)) + 39840|0) + (($474*48)|0)|0)) + 8|0) + ($472)|0);
        $475 = HEAP8[$473>>0]|0;
        $476 = $475&255;
        $477 = $471 | $476;
        $478 = $477&255;
        HEAP8[$473>>0] = $478;
        $479 = (($$0$$i349$i) + ($ptr$01$i348$i))|0;
        $480 = ($468|0)>(0);
        $$pre$i351$i = HEAP32[$17>>2]|0;
        if ($480) {
         $$02$i347$i = $468;$474 = $$pre$i351$i;$ptr$01$i348$i = $479;
        } else {
         $$lcssa408 = $479;$$pre$i351$i$lcssa = $$pre$i351$i;
         break;
        }
       }
       $481 = (((((($gfc)) + 39840|0) + (($$pre$i351$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$481>>2] = $$lcssa408;
       $482 = HEAP32[$462>>2]|0;
       $$02$i337$i = 2;$492 = $$pre$i351$i$lcssa;$ptr$01$i338$i = $$lcssa408;
       while(1) {
        $483 = $ptr$01$i338$i & 7;
        $484 = (8 - ($483))|0;
        $485 = ($$02$i337$i|0)<($484|0);
        $$0$$i339$i = $485 ? $$02$i337$i : $484;
        $486 = (($$02$i337$i) - ($$0$$i339$i))|0;
        $487 = $482 >> $486;
        $488 = (($484) - ($$0$$i339$i))|0;
        $489 = $487 << $488;
        $490 = $ptr$01$i338$i >> 3;
        $491 = ((((((($gfc)) + 39840|0) + (($492*48)|0)|0)) + 8|0) + ($490)|0);
        $493 = HEAP8[$491>>0]|0;
        $494 = $493&255;
        $495 = $489 | $494;
        $496 = $495&255;
        HEAP8[$491>>0] = $496;
        $497 = (($$0$$i339$i) + ($ptr$01$i338$i))|0;
        $498 = ($486|0)>(0);
        $$pre$i341$i = HEAP32[$17>>2]|0;
        if ($498) {
         $$02$i337$i = $486;$492 = $$pre$i341$i;$ptr$01$i338$i = $497;
        } else {
         $$lcssa409 = $497;$$pre$i341$i$lcssa = $$pre$i341$i;
         break;
        }
       }
       $499 = (((((($gfc)) + 39840|0) + (($$pre$i341$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$499>>2] = $$lcssa409;
       $500 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4792|0);
       $501 = HEAP32[$500>>2]|0;
       $$02$i327$i = 1;$511 = $$pre$i341$i$lcssa;$ptr$01$i328$i = $$lcssa409;
       while(1) {
        $502 = $ptr$01$i328$i & 7;
        $503 = (8 - ($502))|0;
        $504 = ($$02$i327$i|0)<($503|0);
        $$0$$i329$i = $504 ? $$02$i327$i : $503;
        $505 = (($$02$i327$i) - ($$0$$i329$i))|0;
        $506 = $501 >> $505;
        $507 = (($503) - ($$0$$i329$i))|0;
        $508 = $506 << $507;
        $509 = $ptr$01$i328$i >> 3;
        $510 = ((((((($gfc)) + 39840|0) + (($511*48)|0)|0)) + 8|0) + ($509)|0);
        $512 = HEAP8[$510>>0]|0;
        $513 = $512&255;
        $514 = $508 | $513;
        $515 = $514&255;
        HEAP8[$510>>0] = $515;
        $516 = (($$0$$i329$i) + ($ptr$01$i328$i))|0;
        $517 = ($505|0)>(0);
        $$pre$i331$i = HEAP32[$17>>2]|0;
        if ($517) {
         $$02$i327$i = $505;$511 = $$pre$i331$i;$ptr$01$i328$i = $516;
        } else {
         $$lcssa410 = $516;$$pre$i331$i$lcssa = $$pre$i331$i;
         break;
        }
       }
       $518 = (((((($gfc)) + 39840|0) + (($$pre$i331$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$518>>2] = $$lcssa410;
       $519 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4796|0);
       $520 = HEAP32[$519>>2]|0;
       $521 = ($520|0)==(14);
       if ($521) {
        HEAP32[$519>>2] = 16;
        $$pre719$i = HEAP32[$17>>2]|0;
        $$phi$trans$insert720$i = (((((($gfc)) + 39840|0) + (($$pre719$i*48)|0)|0)) + 4|0);
        $$pre721$i = HEAP32[$$phi$trans$insert720$i>>2]|0;
        $1797 = $$pre721$i;$1798 = $$pre719$i;$527 = 16;
       } else {
        $1797 = $$lcssa410;$1798 = $$pre$i331$i$lcssa;$527 = $520;
       }
       $$02$i317$i = 5;$532 = $1798;$ptr$01$i318$i = $1797;
       while(1) {
        $522 = $ptr$01$i318$i & 7;
        $523 = (8 - ($522))|0;
        $524 = ($$02$i317$i|0)<($523|0);
        $$0$$i319$i = $524 ? $$02$i317$i : $523;
        $525 = (($$02$i317$i) - ($$0$$i319$i))|0;
        $526 = $527 >> $525;
        $528 = (($523) - ($$0$$i319$i))|0;
        $529 = $526 << $528;
        $530 = $ptr$01$i318$i >> 3;
        $531 = ((((((($gfc)) + 39840|0) + (($532*48)|0)|0)) + 8|0) + ($530)|0);
        $533 = HEAP8[$531>>0]|0;
        $534 = $533&255;
        $535 = $529 | $534;
        $536 = $535&255;
        HEAP8[$531>>0] = $536;
        $537 = (($$0$$i319$i) + ($ptr$01$i318$i))|0;
        $538 = ($525|0)>(0);
        $$pre$i321$i = HEAP32[$17>>2]|0;
        if ($538) {
         $$02$i317$i = $525;$532 = $$pre$i321$i;$ptr$01$i318$i = $537;
        } else {
         $$lcssa411 = $537;$$pre$i321$i$lcssa = $$pre$i321$i;
         break;
        }
       }
       $539 = (((((($gfc)) + 39840|0) + (($$pre$i321$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$539>>2] = $$lcssa411;
       $540 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4800|0);
       $541 = HEAP32[$540>>2]|0;
       $542 = ($541|0)==(14);
       if ($542) {
        HEAP32[$540>>2] = 16;
        $$pre722$i = HEAP32[$17>>2]|0;
        $$phi$trans$insert723$i = (((((($gfc)) + 39840|0) + (($$pre722$i*48)|0)|0)) + 4|0);
        $$pre724$i = HEAP32[$$phi$trans$insert723$i>>2]|0;
        $1799 = $$pre724$i;$1800 = $$pre722$i;$548 = 16;
       } else {
        $1799 = $$lcssa411;$1800 = $$pre$i321$i$lcssa;$548 = $541;
       }
       $$02$i307$i = 5;$553 = $1800;$ptr$01$i308$i = $1799;
       while(1) {
        $543 = $ptr$01$i308$i & 7;
        $544 = (8 - ($543))|0;
        $545 = ($$02$i307$i|0)<($544|0);
        $$0$$i309$i = $545 ? $$02$i307$i : $544;
        $546 = (($$02$i307$i) - ($$0$$i309$i))|0;
        $547 = $548 >> $546;
        $549 = (($544) - ($$0$$i309$i))|0;
        $550 = $547 << $549;
        $551 = $ptr$01$i308$i >> 3;
        $552 = ((((((($gfc)) + 39840|0) + (($553*48)|0)|0)) + 8|0) + ($551)|0);
        $554 = HEAP8[$552>>0]|0;
        $555 = $554&255;
        $556 = $550 | $555;
        $557 = $556&255;
        HEAP8[$552>>0] = $557;
        $558 = (($$0$$i309$i) + ($ptr$01$i308$i))|0;
        $559 = ($546|0)>(0);
        $$pre$i311$i = HEAP32[$17>>2]|0;
        if ($559) {
         $$02$i307$i = $546;$553 = $$pre$i311$i;$ptr$01$i308$i = $558;
        } else {
         $$lcssa412 = $558;$$pre$i311$i$lcssa = $$pre$i311$i;
         break;
        }
       }
       $560 = (((((($gfc)) + 39840|0) + (($$pre$i311$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$560>>2] = $$lcssa412;
       $561 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4808|0);
       $562 = HEAP32[$561>>2]|0;
       $$02$i297$i = 3;$572 = $$pre$i311$i$lcssa;$ptr$01$i298$i = $$lcssa412;
       while(1) {
        $563 = $ptr$01$i298$i & 7;
        $564 = (8 - ($563))|0;
        $565 = ($$02$i297$i|0)<($564|0);
        $$0$$i299$i = $565 ? $$02$i297$i : $564;
        $566 = (($$02$i297$i) - ($$0$$i299$i))|0;
        $567 = $562 >> $566;
        $568 = (($564) - ($$0$$i299$i))|0;
        $569 = $567 << $568;
        $570 = $ptr$01$i298$i >> 3;
        $571 = ((((((($gfc)) + 39840|0) + (($572*48)|0)|0)) + 8|0) + ($570)|0);
        $573 = HEAP8[$571>>0]|0;
        $574 = $573&255;
        $575 = $569 | $574;
        $576 = $575&255;
        HEAP8[$571>>0] = $576;
        $577 = (($$0$$i299$i) + ($ptr$01$i298$i))|0;
        $578 = ($566|0)>(0);
        $$pre$i301$i = HEAP32[$17>>2]|0;
        if ($578) {
         $$02$i297$i = $566;$572 = $$pre$i301$i;$ptr$01$i298$i = $577;
        } else {
         $$lcssa413 = $577;$$pre$i301$i$lcssa = $$pre$i301$i;
         break;
        }
       }
       $579 = (((((($gfc)) + 39840|0) + (($$pre$i301$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$579>>2] = $$lcssa413;
       $580 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4812|0);
       $581 = HEAP32[$580>>2]|0;
       $$02$i287$i = 3;$591 = $$pre$i301$i$lcssa;$ptr$01$i288$i = $$lcssa413;
       while(1) {
        $582 = $ptr$01$i288$i & 7;
        $583 = (8 - ($582))|0;
        $584 = ($$02$i287$i|0)<($583|0);
        $$0$$i289$i = $584 ? $$02$i287$i : $583;
        $585 = (($$02$i287$i) - ($$0$$i289$i))|0;
        $586 = $581 >> $585;
        $587 = (($583) - ($$0$$i289$i))|0;
        $588 = $586 << $587;
        $589 = $ptr$01$i288$i >> 3;
        $590 = ((((((($gfc)) + 39840|0) + (($591*48)|0)|0)) + 8|0) + ($589)|0);
        $592 = HEAP8[$590>>0]|0;
        $593 = $592&255;
        $594 = $588 | $593;
        $595 = $594&255;
        HEAP8[$590>>0] = $595;
        $596 = (($$0$$i289$i) + ($ptr$01$i288$i))|0;
        $597 = ($585|0)>(0);
        $$pre$i291$i = HEAP32[$17>>2]|0;
        if ($597) {
         $$02$i287$i = $585;$591 = $$pre$i291$i;$ptr$01$i288$i = $596;
        } else {
         $$lcssa414 = $596;$$pre$i291$i$lcssa = $$pre$i291$i;
         break;
        }
       }
       $598 = (((((($gfc)) + 39840|0) + (($$pre$i291$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$598>>2] = $$lcssa414;
       $599 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4816|0);
       $600 = HEAP32[$599>>2]|0;
       $$02$i277$i = 3;$610 = $$pre$i291$i$lcssa;$ptr$01$i278$i = $$lcssa414;
       while(1) {
        $601 = $ptr$01$i278$i & 7;
        $602 = (8 - ($601))|0;
        $603 = ($$02$i277$i|0)<($602|0);
        $$0$$i279$i = $603 ? $$02$i277$i : $602;
        $604 = (($$02$i277$i) - ($$0$$i279$i))|0;
        $605 = $600 >> $604;
        $606 = (($602) - ($$0$$i279$i))|0;
        $607 = $605 << $606;
        $608 = $ptr$01$i278$i >> 3;
        $609 = ((((((($gfc)) + 39840|0) + (($610*48)|0)|0)) + 8|0) + ($608)|0);
        $611 = HEAP8[$609>>0]|0;
        $612 = $611&255;
        $613 = $607 | $612;
        $614 = $613&255;
        HEAP8[$609>>0] = $614;
        $615 = (($$0$$i279$i) + ($ptr$01$i278$i))|0;
        $616 = ($604|0)>(0);
        $$pre$i281$i = HEAP32[$17>>2]|0;
        if ($616) {
         $$02$i277$i = $604;$610 = $$pre$i281$i;$ptr$01$i278$i = $615;
        } else {
         $$lcssa415 = $615;$$pre$i281$i$lcssa = $$pre$i281$i;
         break;
        }
       }
       $617 = (((((($gfc)) + 39840|0) + (($$pre$i281$i$lcssa*48)|0)|0)) + 4|0);
       HEAP32[$617>>2] = $$lcssa415;
       $1801 = $$lcssa415;$1802 = $$pre$i281$i$lcssa;
      }
      $725 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4832|0);
      $726 = HEAP32[$725>>2]|0;
      $$02$i207$i = 1;$736 = $1802;$ptr$01$i208$i = $1801;
      while(1) {
       $727 = $ptr$01$i208$i & 7;
       $728 = (8 - ($727))|0;
       $729 = ($$02$i207$i|0)<($728|0);
       $$0$$i209$i = $729 ? $$02$i207$i : $728;
       $730 = (($$02$i207$i) - ($$0$$i209$i))|0;
       $731 = $726 >> $730;
       $732 = (($728) - ($$0$$i209$i))|0;
       $733 = $731 << $732;
       $734 = $ptr$01$i208$i >> 3;
       $735 = ((((((($gfc)) + 39840|0) + (($736*48)|0)|0)) + 8|0) + ($734)|0);
       $737 = HEAP8[$735>>0]|0;
       $738 = $737&255;
       $739 = $733 | $738;
       $740 = $739&255;
       HEAP8[$735>>0] = $740;
       $741 = (($$0$$i209$i) + ($ptr$01$i208$i))|0;
       $742 = ($730|0)>(0);
       $$pre$i211$i = HEAP32[$17>>2]|0;
       if ($742) {
        $$02$i207$i = $730;$736 = $$pre$i211$i;$ptr$01$i208$i = $741;
       } else {
        $$lcssa422 = $741;$$pre$i211$i$lcssa = $$pre$i211$i;
        break;
       }
      }
      $743 = (((((($gfc)) + 39840|0) + (($$pre$i211$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$743>>2] = $$lcssa422;
      $744 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4836|0);
      $745 = HEAP32[$744>>2]|0;
      $$02$i197$i = 1;$755 = $$pre$i211$i$lcssa;$ptr$01$i198$i = $$lcssa422;
      while(1) {
       $746 = $ptr$01$i198$i & 7;
       $747 = (8 - ($746))|0;
       $748 = ($$02$i197$i|0)<($747|0);
       $$0$$i199$i = $748 ? $$02$i197$i : $747;
       $749 = (($$02$i197$i) - ($$0$$i199$i))|0;
       $750 = $745 >> $749;
       $751 = (($747) - ($$0$$i199$i))|0;
       $752 = $750 << $751;
       $753 = $ptr$01$i198$i >> 3;
       $754 = ((((((($gfc)) + 39840|0) + (($755*48)|0)|0)) + 8|0) + ($753)|0);
       $756 = HEAP8[$754>>0]|0;
       $757 = $756&255;
       $758 = $752 | $757;
       $759 = $758&255;
       HEAP8[$754>>0] = $759;
       $760 = (($$0$$i199$i) + ($ptr$01$i198$i))|0;
       $761 = ($749|0)>(0);
       $$pre$i201$i = HEAP32[$17>>2]|0;
       if ($761) {
        $$02$i197$i = $749;$755 = $$pre$i201$i;$ptr$01$i198$i = $760;
       } else {
        $$lcssa423 = $760;$$pre$i201$i$lcssa = $$pre$i201$i;
        break;
       }
      }
      $762 = (((((($gfc)) + 39840|0) + (($$pre$i201$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$762>>2] = $$lcssa423;
      $763 = ((((((($gfc)) + 304|0) + (($gr$0634$i*10504)|0)|0) + (($ch$1632$i*5252)|0)|0)) + 4840|0);
      $764 = HEAP32[$763>>2]|0;
      $$02$i187$i = 1;$774 = $$pre$i201$i$lcssa;$ptr$01$i188$i = $$lcssa423;
      while(1) {
       $765 = $ptr$01$i188$i & 7;
       $766 = (8 - ($765))|0;
       $767 = ($$02$i187$i|0)<($766|0);
       $$0$$i189$i = $767 ? $$02$i187$i : $766;
       $768 = (($$02$i187$i) - ($$0$$i189$i))|0;
       $769 = $764 >> $768;
       $770 = (($766) - ($$0$$i189$i))|0;
       $771 = $769 << $770;
       $772 = $ptr$01$i188$i >> 3;
       $773 = ((((((($gfc)) + 39840|0) + (($774*48)|0)|0)) + 8|0) + ($772)|0);
       $775 = HEAP8[$773>>0]|0;
       $776 = $775&255;
       $777 = $771 | $776;
       $778 = $777&255;
       HEAP8[$773>>0] = $778;
       $779 = (($$0$$i189$i) + ($ptr$01$i188$i))|0;
       $780 = ($768|0)>(0);
       $$pre$i191$i = HEAP32[$17>>2]|0;
       if ($780) {
        $$02$i187$i = $768;$774 = $$pre$i191$i;$ptr$01$i188$i = $779;
       } else {
        $$lcssa424 = $779;$$pre$i191$i$lcssa = $$pre$i191$i;
        break;
       }
      }
      $781 = (((((($gfc)) + 39840|0) + (($$pre$i191$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$781>>2] = $$lcssa424;
      $782 = (($ch$1632$i) + 1)|0;
      $783 = HEAP32[$317>>2]|0;
      $784 = ($782|0)<($783|0);
      if ($784) {
       $1795 = $$lcssa424;$1796 = $$pre$i191$i$lcssa;$ch$1632$i = $782;
      } else {
       $1793 = $$pre$i191$i$lcssa;$1794 = $783;
       break;
      }
     }
    } else {
     $1793 = $381;$1794 = $379;
    }
    $785 = (($gr$0634$i) + 1)|0;
    $exitcond$i = ($785|0)==(2);
    if ($exitcond$i) {
     $1213 = $1793;
     break;
    } else {
     $379 = $1794;$381 = $1793;$gr$0634$i = $785;
    }
   }
  } else {
   $$02$i177$i = 8;$795 = $$pre$i451$i$lcssa;$ptr$01$i178$i = $1789;
   while(1) {
    $786 = $ptr$01$i178$i & 7;
    $787 = (8 - ($786))|0;
    $788 = ($$02$i177$i|0)<($787|0);
    $$0$$i179$i = $788 ? $$02$i177$i : $787;
    $789 = (($$02$i177$i) - ($$0$$i179$i))|0;
    $790 = $299 >> $789;
    $791 = (($787) - ($$0$$i179$i))|0;
    $792 = $790 << $791;
    $793 = $ptr$01$i178$i >> 3;
    $794 = ((((((($gfc)) + 39840|0) + (($795*48)|0)|0)) + 8|0) + ($793)|0);
    $796 = HEAP8[$794>>0]|0;
    $797 = $796&255;
    $798 = $792 | $797;
    $799 = $798&255;
    HEAP8[$794>>0] = $799;
    $800 = (($$0$$i179$i) + ($ptr$01$i178$i))|0;
    $801 = ($789|0)>(0);
    $$pre$i181$i = HEAP32[$17>>2]|0;
    if ($801) {
     $$02$i177$i = $789;$795 = $$pre$i181$i;$ptr$01$i178$i = $800;
    } else {
     $$lcssa456 = $800;$$pre$i181$i$lcssa = $$pre$i181$i;
     break;
    }
   }
   $802 = (((((($gfc)) + 39840|0) + (($$pre$i181$i$lcssa*48)|0)|0)) + 4|0);
   HEAP32[$802>>2] = $$lcssa456;
   $803 = ((($gfc)) + 21316|0);
   $804 = HEAP32[$803>>2]|0;
   $805 = ((($gfc)) + 72|0);
   $806 = HEAP32[$805>>2]|0;
   $807 = ($806|0)>(0);
   if ($807) {
    $$02$i169$i = $806;$817 = $$pre$i181$i$lcssa;$ptr$01$i170$i = $$lcssa456;
   } else {
    HEAP32[$802>>2] = $$lcssa456;
    $1213 = $$pre$i181$i$lcssa;
    break;
   }
   while(1) {
    $808 = $ptr$01$i170$i & 7;
    $809 = (8 - ($808))|0;
    $810 = ($$02$i169$i|0)<($809|0);
    $$0$$i171$i = $810 ? $$02$i169$i : $809;
    $811 = (($$02$i169$i) - ($$0$$i171$i))|0;
    $812 = $804 >> $811;
    $813 = (($809) - ($$0$$i171$i))|0;
    $814 = $812 << $813;
    $815 = $ptr$01$i170$i >> 3;
    $816 = ((((((($gfc)) + 39840|0) + (($817*48)|0)|0)) + 8|0) + ($815)|0);
    $818 = HEAP8[$816>>0]|0;
    $819 = $818&255;
    $820 = $814 | $819;
    $821 = $820&255;
    HEAP8[$816>>0] = $821;
    $822 = (($$0$$i171$i) + ($ptr$01$i170$i))|0;
    $823 = ($811|0)>(0);
    $$pre$i173$i = HEAP32[$17>>2]|0;
    if ($823) {
     $$02$i169$i = $811;$817 = $$pre$i173$i;$ptr$01$i170$i = $822;
    } else {
     $$lcssa455 = $822;$$pre$i173$i$lcssa = $$pre$i173$i;
     break;
    }
   }
   $$pre$i = HEAP32[$805>>2]|0;
   $824 = (((((($gfc)) + 39840|0) + (($$pre$i173$i$lcssa*48)|0)|0)) + 4|0);
   HEAP32[$824>>2] = $$lcssa455;
   $825 = ($$pre$i|0)>(0);
   if ($825) {
    $1809 = $$lcssa455;$1810 = $$pre$i173$i$lcssa;$ch$2638$i = 0;
    while(1) {
     $826 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4768|0);
     $827 = HEAP32[$826>>2]|0;
     $828 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4844|0);
     $829 = HEAP32[$828>>2]|0;
     $830 = (($829) + ($827))|0;
     $$02$i161$i = 12;$840 = $1810;$ptr$01$i162$i = $1809;
     while(1) {
      $831 = $ptr$01$i162$i & 7;
      $832 = (8 - ($831))|0;
      $833 = ($$02$i161$i|0)<($832|0);
      $$0$$i163$i = $833 ? $$02$i161$i : $832;
      $834 = (($$02$i161$i) - ($$0$$i163$i))|0;
      $835 = $830 >> $834;
      $836 = (($832) - ($$0$$i163$i))|0;
      $837 = $835 << $836;
      $838 = $ptr$01$i162$i >> 3;
      $839 = ((((((($gfc)) + 39840|0) + (($840*48)|0)|0)) + 8|0) + ($838)|0);
      $841 = HEAP8[$839>>0]|0;
      $842 = $841&255;
      $843 = $837 | $842;
      $844 = $843&255;
      HEAP8[$839>>0] = $844;
      $845 = (($$0$$i163$i) + ($ptr$01$i162$i))|0;
      $846 = ($834|0)>(0);
      $$pre$i165$i = HEAP32[$17>>2]|0;
      if ($846) {
       $$02$i161$i = $834;$840 = $$pre$i165$i;$ptr$01$i162$i = $845;
      } else {
       $$lcssa435 = $845;$$pre$i165$i$lcssa = $$pre$i165$i;
       break;
      }
     }
     $847 = (((((($gfc)) + 39840|0) + (($$pre$i165$i$lcssa*48)|0)|0)) + 4|0);
     HEAP32[$847>>2] = $$lcssa435;
     $848 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4772|0);
     $849 = HEAP32[$848>>2]|0;
     $850 = (($849|0) / 2)&-1;
     $$02$i153$i = 9;$860 = $$pre$i165$i$lcssa;$ptr$01$i154$i = $$lcssa435;
     while(1) {
      $851 = $ptr$01$i154$i & 7;
      $852 = (8 - ($851))|0;
      $853 = ($$02$i153$i|0)<($852|0);
      $$0$$i155$i = $853 ? $$02$i153$i : $852;
      $854 = (($$02$i153$i) - ($$0$$i155$i))|0;
      $855 = $850 >> $854;
      $856 = (($852) - ($$0$$i155$i))|0;
      $857 = $855 << $856;
      $858 = $ptr$01$i154$i >> 3;
      $859 = ((((((($gfc)) + 39840|0) + (($860*48)|0)|0)) + 8|0) + ($858)|0);
      $861 = HEAP8[$859>>0]|0;
      $862 = $861&255;
      $863 = $857 | $862;
      $864 = $863&255;
      HEAP8[$859>>0] = $864;
      $865 = (($$0$$i155$i) + ($ptr$01$i154$i))|0;
      $866 = ($854|0)>(0);
      $$pre$i157$i = HEAP32[$17>>2]|0;
      if ($866) {
       $$02$i153$i = $854;$860 = $$pre$i157$i;$ptr$01$i154$i = $865;
      } else {
       $$lcssa436 = $865;$$pre$i157$i$lcssa = $$pre$i157$i;
       break;
      }
     }
     $867 = (((((($gfc)) + 39840|0) + (($$pre$i157$i$lcssa*48)|0)|0)) + 4|0);
     HEAP32[$867>>2] = $$lcssa436;
     $868 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4780|0);
     $869 = HEAP32[$868>>2]|0;
     $$02$i145$i = 8;$879 = $$pre$i157$i$lcssa;$ptr$01$i146$i = $$lcssa436;
     while(1) {
      $870 = $ptr$01$i146$i & 7;
      $871 = (8 - ($870))|0;
      $872 = ($$02$i145$i|0)<($871|0);
      $$0$$i147$i = $872 ? $$02$i145$i : $871;
      $873 = (($$02$i145$i) - ($$0$$i147$i))|0;
      $874 = $869 >> $873;
      $875 = (($871) - ($$0$$i147$i))|0;
      $876 = $874 << $875;
      $877 = $ptr$01$i146$i >> 3;
      $878 = ((((((($gfc)) + 39840|0) + (($879*48)|0)|0)) + 8|0) + ($877)|0);
      $880 = HEAP8[$878>>0]|0;
      $881 = $880&255;
      $882 = $876 | $881;
      $883 = $882&255;
      HEAP8[$878>>0] = $883;
      $884 = (($$0$$i147$i) + ($ptr$01$i146$i))|0;
      $885 = ($873|0)>(0);
      $$pre$i149$i = HEAP32[$17>>2]|0;
      if ($885) {
       $$02$i145$i = $873;$879 = $$pre$i149$i;$ptr$01$i146$i = $884;
      } else {
       $$lcssa437 = $884;$$pre$i149$i$lcssa = $$pre$i149$i;
       break;
      }
     }
     $886 = (((((($gfc)) + 39840|0) + (($$pre$i149$i$lcssa*48)|0)|0)) + 4|0);
     HEAP32[$886>>2] = $$lcssa437;
     $887 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4784|0);
     $888 = HEAP32[$887>>2]|0;
     $$02$i137$i = 9;$898 = $$pre$i149$i$lcssa;$ptr$01$i138$i = $$lcssa437;
     while(1) {
      $889 = $ptr$01$i138$i & 7;
      $890 = (8 - ($889))|0;
      $891 = ($$02$i137$i|0)<($890|0);
      $$0$$i139$i = $891 ? $$02$i137$i : $890;
      $892 = (($$02$i137$i) - ($$0$$i139$i))|0;
      $893 = $888 >> $892;
      $894 = (($890) - ($$0$$i139$i))|0;
      $895 = $893 << $894;
      $896 = $ptr$01$i138$i >> 3;
      $897 = ((((((($gfc)) + 39840|0) + (($898*48)|0)|0)) + 8|0) + ($896)|0);
      $899 = HEAP8[$897>>0]|0;
      $900 = $899&255;
      $901 = $895 | $900;
      $902 = $901&255;
      HEAP8[$897>>0] = $902;
      $903 = (($$0$$i139$i) + ($ptr$01$i138$i))|0;
      $904 = ($892|0)>(0);
      $$pre$i141$i = HEAP32[$17>>2]|0;
      if ($904) {
       $$02$i137$i = $892;$898 = $$pre$i141$i;$ptr$01$i138$i = $903;
      } else {
       $$lcssa438 = $903;$$pre$i141$i$lcssa = $$pre$i141$i;
       break;
      }
     }
     $905 = (((((($gfc)) + 39840|0) + (($$pre$i141$i$lcssa*48)|0)|0)) + 4|0);
     HEAP32[$905>>2] = $$lcssa438;
     $906 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4788|0);
     $907 = HEAP32[$906>>2]|0;
     $908 = ($907|0)==(0);
     if ($908) {
      $$02$i65$i = 1;$ptr$01$i66$i = $$lcssa438;
      while(1) {
       $1062 = $ptr$01$i66$i & 7;
       $1063 = (8 - ($1062))|0;
       $1064 = ($$02$i65$i|0)<($1063|0);
       $$0$$i67$i = $1064 ? $$02$i65$i : $1063;
       $1065 = (($$02$i65$i) - ($$0$$i67$i))|0;
       $1066 = (($$0$$i67$i) + ($ptr$01$i66$i))|0;
       $1067 = ($1065|0)>(0);
       if ($1067) {
        $$02$i65$i = $1065;$ptr$01$i66$i = $1066;
       } else {
        $$lcssa447 = $1066;
        break;
       }
      }
      HEAP32[$905>>2] = $$lcssa447;
      $1068 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4796|0);
      $1069 = HEAP32[$1068>>2]|0;
      $1070 = ($1069|0)==(14);
      if ($1070) {
       HEAP32[$1068>>2] = 16;
       $$pre710$i = HEAP32[$17>>2]|0;
       $$phi$trans$insert711$i = (((((($gfc)) + 39840|0) + (($$pre710$i*48)|0)|0)) + 4|0);
       $$pre712$i = HEAP32[$$phi$trans$insert711$i>>2]|0;
       $1076 = 16;$1817 = $$pre712$i;$1818 = $$pre710$i;
      } else {
       $1076 = $1069;$1817 = $$lcssa447;$1818 = $$pre$i141$i$lcssa;
      }
      $$02$i57$i = 5;$1081 = $1818;$ptr$01$i58$i = $1817;
      while(1) {
       $1071 = $ptr$01$i58$i & 7;
       $1072 = (8 - ($1071))|0;
       $1073 = ($$02$i57$i|0)<($1072|0);
       $$0$$i59$i = $1073 ? $$02$i57$i : $1072;
       $1074 = (($$02$i57$i) - ($$0$$i59$i))|0;
       $1075 = $1076 >> $1074;
       $1077 = (($1072) - ($$0$$i59$i))|0;
       $1078 = $1075 << $1077;
       $1079 = $ptr$01$i58$i >> 3;
       $1080 = ((((((($gfc)) + 39840|0) + (($1081*48)|0)|0)) + 8|0) + ($1079)|0);
       $1082 = HEAP8[$1080>>0]|0;
       $1083 = $1082&255;
       $1084 = $1078 | $1083;
       $1085 = $1084&255;
       HEAP8[$1080>>0] = $1085;
       $1086 = (($$0$$i59$i) + ($ptr$01$i58$i))|0;
       $1087 = ($1074|0)>(0);
       $$pre$i61$i = HEAP32[$17>>2]|0;
       if ($1087) {
        $$02$i57$i = $1074;$1081 = $$pre$i61$i;$ptr$01$i58$i = $1086;
       } else {
        $$lcssa448 = $1086;$$pre$i61$i$lcssa = $$pre$i61$i;
        break;
       }
      }
      $1088 = (((((($gfc)) + 39840|0) + (($$pre$i61$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$1088>>2] = $$lcssa448;
      $1089 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4800|0);
      $1090 = HEAP32[$1089>>2]|0;
      $1091 = ($1090|0)==(14);
      if ($1091) {
       HEAP32[$1089>>2] = 16;
       $$pre713$i = HEAP32[$17>>2]|0;
       $$phi$trans$insert714$i = (((((($gfc)) + 39840|0) + (($$pre713$i*48)|0)|0)) + 4|0);
       $$pre715$i = HEAP32[$$phi$trans$insert714$i>>2]|0;
       $1097 = 16;$1819 = $$pre715$i;$1820 = $$pre713$i;
      } else {
       $1097 = $1090;$1819 = $$lcssa448;$1820 = $$pre$i61$i$lcssa;
      }
      $$02$i49$i = 5;$1102 = $1820;$ptr$01$i50$i = $1819;
      while(1) {
       $1092 = $ptr$01$i50$i & 7;
       $1093 = (8 - ($1092))|0;
       $1094 = ($$02$i49$i|0)<($1093|0);
       $$0$$i51$i = $1094 ? $$02$i49$i : $1093;
       $1095 = (($$02$i49$i) - ($$0$$i51$i))|0;
       $1096 = $1097 >> $1095;
       $1098 = (($1093) - ($$0$$i51$i))|0;
       $1099 = $1096 << $1098;
       $1100 = $ptr$01$i50$i >> 3;
       $1101 = ((((((($gfc)) + 39840|0) + (($1102*48)|0)|0)) + 8|0) + ($1100)|0);
       $1103 = HEAP8[$1101>>0]|0;
       $1104 = $1103&255;
       $1105 = $1099 | $1104;
       $1106 = $1105&255;
       HEAP8[$1101>>0] = $1106;
       $1107 = (($$0$$i51$i) + ($ptr$01$i50$i))|0;
       $1108 = ($1095|0)>(0);
       $$pre$i53$i = HEAP32[$17>>2]|0;
       if ($1108) {
        $$02$i49$i = $1095;$1102 = $$pre$i53$i;$ptr$01$i50$i = $1107;
       } else {
        $$lcssa449 = $1107;$$pre$i53$i$lcssa = $$pre$i53$i;
        break;
       }
      }
      $1109 = (((((($gfc)) + 39840|0) + (($$pre$i53$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$1109>>2] = $$lcssa449;
      $1110 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4804|0);
      $1111 = HEAP32[$1110>>2]|0;
      $1112 = ($1111|0)==(14);
      if ($1112) {
       HEAP32[$1110>>2] = 16;
       $$pre716$i = HEAP32[$17>>2]|0;
       $$phi$trans$insert717$i = (((((($gfc)) + 39840|0) + (($$pre716$i*48)|0)|0)) + 4|0);
       $$pre718$i = HEAP32[$$phi$trans$insert717$i>>2]|0;
       $1118 = 16;$1821 = $$pre718$i;$1822 = $$pre716$i;
      } else {
       $1118 = $1111;$1821 = $$lcssa449;$1822 = $$pre$i53$i$lcssa;
      }
      $$02$i41$i = 5;$1123 = $1822;$ptr$01$i42$i = $1821;
      while(1) {
       $1113 = $ptr$01$i42$i & 7;
       $1114 = (8 - ($1113))|0;
       $1115 = ($$02$i41$i|0)<($1114|0);
       $$0$$i43$i = $1115 ? $$02$i41$i : $1114;
       $1116 = (($$02$i41$i) - ($$0$$i43$i))|0;
       $1117 = $1118 >> $1116;
       $1119 = (($1114) - ($$0$$i43$i))|0;
       $1120 = $1117 << $1119;
       $1121 = $ptr$01$i42$i >> 3;
       $1122 = ((((((($gfc)) + 39840|0) + (($1123*48)|0)|0)) + 8|0) + ($1121)|0);
       $1124 = HEAP8[$1122>>0]|0;
       $1125 = $1124&255;
       $1126 = $1120 | $1125;
       $1127 = $1126&255;
       HEAP8[$1122>>0] = $1127;
       $1128 = (($$0$$i43$i) + ($ptr$01$i42$i))|0;
       $1129 = ($1116|0)>(0);
       $$pre$i45$i = HEAP32[$17>>2]|0;
       if ($1129) {
        $$02$i41$i = $1116;$1123 = $$pre$i45$i;$ptr$01$i42$i = $1128;
       } else {
        $$lcssa450 = $1128;$$pre$i45$i$lcssa = $$pre$i45$i;
        break;
       }
      }
      $1130 = (((((($gfc)) + 39840|0) + (($$pre$i45$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$1130>>2] = $$lcssa450;
      $1131 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4824|0);
      $1132 = HEAP32[$1131>>2]|0;
      $$02$i33$i = 4;$1142 = $$pre$i45$i$lcssa;$ptr$01$i34$i = $$lcssa450;
      while(1) {
       $1133 = $ptr$01$i34$i & 7;
       $1134 = (8 - ($1133))|0;
       $1135 = ($$02$i33$i|0)<($1134|0);
       $$0$$i35$i = $1135 ? $$02$i33$i : $1134;
       $1136 = (($$02$i33$i) - ($$0$$i35$i))|0;
       $1137 = $1132 >> $1136;
       $1138 = (($1134) - ($$0$$i35$i))|0;
       $1139 = $1137 << $1138;
       $1140 = $ptr$01$i34$i >> 3;
       $1141 = ((((((($gfc)) + 39840|0) + (($1142*48)|0)|0)) + 8|0) + ($1140)|0);
       $1143 = HEAP8[$1141>>0]|0;
       $1144 = $1143&255;
       $1145 = $1139 | $1144;
       $1146 = $1145&255;
       HEAP8[$1141>>0] = $1146;
       $1147 = (($$0$$i35$i) + ($ptr$01$i34$i))|0;
       $1148 = ($1136|0)>(0);
       $$pre$i37$i = HEAP32[$17>>2]|0;
       if ($1148) {
        $$02$i33$i = $1136;$1142 = $$pre$i37$i;$ptr$01$i34$i = $1147;
       } else {
        $$lcssa451 = $1147;$$pre$i37$i$lcssa = $$pre$i37$i;
        break;
       }
      }
      $1149 = (((((($gfc)) + 39840|0) + (($$pre$i37$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$1149>>2] = $$lcssa451;
      $1150 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4828|0);
      $1151 = HEAP32[$1150>>2]|0;
      $$02$i25$i = 3;$1161 = $$pre$i37$i$lcssa;$ptr$01$i26$i = $$lcssa451;
      while(1) {
       $1152 = $ptr$01$i26$i & 7;
       $1153 = (8 - ($1152))|0;
       $1154 = ($$02$i25$i|0)<($1153|0);
       $$0$$i27$i = $1154 ? $$02$i25$i : $1153;
       $1155 = (($$02$i25$i) - ($$0$$i27$i))|0;
       $1156 = $1151 >> $1155;
       $1157 = (($1153) - ($$0$$i27$i))|0;
       $1158 = $1156 << $1157;
       $1159 = $ptr$01$i26$i >> 3;
       $1160 = ((((((($gfc)) + 39840|0) + (($1161*48)|0)|0)) + 8|0) + ($1159)|0);
       $1162 = HEAP8[$1160>>0]|0;
       $1163 = $1162&255;
       $1164 = $1158 | $1163;
       $1165 = $1164&255;
       HEAP8[$1160>>0] = $1165;
       $1166 = (($$0$$i27$i) + ($ptr$01$i26$i))|0;
       $1167 = ($1155|0)>(0);
       $$pre$i29$i = HEAP32[$17>>2]|0;
       if ($1167) {
        $$02$i25$i = $1155;$1161 = $$pre$i29$i;$ptr$01$i26$i = $1166;
       } else {
        $$lcssa452 = $1166;$$pre$i29$i$lcssa = $$pre$i29$i;
        break;
       }
      }
      $1168 = (((((($gfc)) + 39840|0) + (($$pre$i29$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$1168>>2] = $$lcssa452;
      $1815 = $$lcssa452;$1816 = $$pre$i29$i$lcssa;
     } else {
      $$02$i129$i = 1;$918 = $$pre$i141$i$lcssa;$ptr$01$i130$i = $$lcssa438;
      while(1) {
       $909 = $ptr$01$i130$i & 7;
       $910 = (8 - ($909))|0;
       $911 = ($$02$i129$i|0)<($910|0);
       $$0$$i131$i = $911 ? $$02$i129$i : $910;
       $912 = (($$02$i129$i) - ($$0$$i131$i))|0;
       $913 = 1 >>> $912;
       $914 = (($910) - ($$0$$i131$i))|0;
       $915 = $913 << $914;
       $916 = $ptr$01$i130$i >> 3;
       $917 = ((((((($gfc)) + 39840|0) + (($918*48)|0)|0)) + 8|0) + ($916)|0);
       $919 = HEAP8[$917>>0]|0;
       $920 = $919&255;
       $921 = $915 | $920;
       $922 = $921&255;
       HEAP8[$917>>0] = $922;
       $923 = (($$0$$i131$i) + ($ptr$01$i130$i))|0;
       $924 = ($912|0)>(0);
       $$pre$i133$i = HEAP32[$17>>2]|0;
       if ($924) {
        $$02$i129$i = $912;$918 = $$pre$i133$i;$ptr$01$i130$i = $923;
       } else {
        $$lcssa439 = $923;$$pre$i133$i$lcssa = $$pre$i133$i;
        break;
       }
      }
      $925 = (((((($gfc)) + 39840|0) + (($$pre$i133$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$925>>2] = $$lcssa439;
      $926 = HEAP32[$906>>2]|0;
      $$02$i121$i = 2;$936 = $$pre$i133$i$lcssa;$ptr$01$i122$i = $$lcssa439;
      while(1) {
       $927 = $ptr$01$i122$i & 7;
       $928 = (8 - ($927))|0;
       $929 = ($$02$i121$i|0)<($928|0);
       $$0$$i123$i = $929 ? $$02$i121$i : $928;
       $930 = (($$02$i121$i) - ($$0$$i123$i))|0;
       $931 = $926 >> $930;
       $932 = (($928) - ($$0$$i123$i))|0;
       $933 = $931 << $932;
       $934 = $ptr$01$i122$i >> 3;
       $935 = ((((((($gfc)) + 39840|0) + (($936*48)|0)|0)) + 8|0) + ($934)|0);
       $937 = HEAP8[$935>>0]|0;
       $938 = $937&255;
       $939 = $933 | $938;
       $940 = $939&255;
       HEAP8[$935>>0] = $940;
       $941 = (($$0$$i123$i) + ($ptr$01$i122$i))|0;
       $942 = ($930|0)>(0);
       $$pre$i125$i = HEAP32[$17>>2]|0;
       if ($942) {
        $$02$i121$i = $930;$936 = $$pre$i125$i;$ptr$01$i122$i = $941;
       } else {
        $$lcssa440 = $941;$$pre$i125$i$lcssa = $$pre$i125$i;
        break;
       }
      }
      $943 = (((((($gfc)) + 39840|0) + (($$pre$i125$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$943>>2] = $$lcssa440;
      $944 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4792|0);
      $945 = HEAP32[$944>>2]|0;
      $$02$i113$i = 1;$955 = $$pre$i125$i$lcssa;$ptr$01$i114$i = $$lcssa440;
      while(1) {
       $946 = $ptr$01$i114$i & 7;
       $947 = (8 - ($946))|0;
       $948 = ($$02$i113$i|0)<($947|0);
       $$0$$i115$i = $948 ? $$02$i113$i : $947;
       $949 = (($$02$i113$i) - ($$0$$i115$i))|0;
       $950 = $945 >> $949;
       $951 = (($947) - ($$0$$i115$i))|0;
       $952 = $950 << $951;
       $953 = $ptr$01$i114$i >> 3;
       $954 = ((((((($gfc)) + 39840|0) + (($955*48)|0)|0)) + 8|0) + ($953)|0);
       $956 = HEAP8[$954>>0]|0;
       $957 = $956&255;
       $958 = $952 | $957;
       $959 = $958&255;
       HEAP8[$954>>0] = $959;
       $960 = (($$0$$i115$i) + ($ptr$01$i114$i))|0;
       $961 = ($949|0)>(0);
       $$pre$i117$i = HEAP32[$17>>2]|0;
       if ($961) {
        $$02$i113$i = $949;$955 = $$pre$i117$i;$ptr$01$i114$i = $960;
       } else {
        $$lcssa441 = $960;$$pre$i117$i$lcssa = $$pre$i117$i;
        break;
       }
      }
      $962 = (((((($gfc)) + 39840|0) + (($$pre$i117$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$962>>2] = $$lcssa441;
      $963 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4796|0);
      $964 = HEAP32[$963>>2]|0;
      $965 = ($964|0)==(14);
      if ($965) {
       HEAP32[$963>>2] = 16;
       $$pre704$i = HEAP32[$17>>2]|0;
       $$phi$trans$insert705$i = (((((($gfc)) + 39840|0) + (($$pre704$i*48)|0)|0)) + 4|0);
       $$pre706$i = HEAP32[$$phi$trans$insert705$i>>2]|0;
       $1811 = $$pre706$i;$1812 = $$pre704$i;$971 = 16;
      } else {
       $1811 = $$lcssa441;$1812 = $$pre$i117$i$lcssa;$971 = $964;
      }
      $$02$i105$i = 5;$976 = $1812;$ptr$01$i106$i = $1811;
      while(1) {
       $966 = $ptr$01$i106$i & 7;
       $967 = (8 - ($966))|0;
       $968 = ($$02$i105$i|0)<($967|0);
       $$0$$i107$i = $968 ? $$02$i105$i : $967;
       $969 = (($$02$i105$i) - ($$0$$i107$i))|0;
       $970 = $971 >> $969;
       $972 = (($967) - ($$0$$i107$i))|0;
       $973 = $970 << $972;
       $974 = $ptr$01$i106$i >> 3;
       $975 = ((((((($gfc)) + 39840|0) + (($976*48)|0)|0)) + 8|0) + ($974)|0);
       $977 = HEAP8[$975>>0]|0;
       $978 = $977&255;
       $979 = $973 | $978;
       $980 = $979&255;
       HEAP8[$975>>0] = $980;
       $981 = (($$0$$i107$i) + ($ptr$01$i106$i))|0;
       $982 = ($969|0)>(0);
       $$pre$i109$i = HEAP32[$17>>2]|0;
       if ($982) {
        $$02$i105$i = $969;$976 = $$pre$i109$i;$ptr$01$i106$i = $981;
       } else {
        $$lcssa442 = $981;$$pre$i109$i$lcssa = $$pre$i109$i;
        break;
       }
      }
      $983 = (((((($gfc)) + 39840|0) + (($$pre$i109$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$983>>2] = $$lcssa442;
      $984 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4800|0);
      $985 = HEAP32[$984>>2]|0;
      $986 = ($985|0)==(14);
      if ($986) {
       HEAP32[$984>>2] = 16;
       $$pre707$i = HEAP32[$17>>2]|0;
       $$phi$trans$insert708$i = (((((($gfc)) + 39840|0) + (($$pre707$i*48)|0)|0)) + 4|0);
       $$pre709$i = HEAP32[$$phi$trans$insert708$i>>2]|0;
       $1813 = $$pre709$i;$1814 = $$pre707$i;$992 = 16;
      } else {
       $1813 = $$lcssa442;$1814 = $$pre$i109$i$lcssa;$992 = $985;
      }
      $$02$i97$i = 5;$997 = $1814;$ptr$01$i98$i = $1813;
      while(1) {
       $987 = $ptr$01$i98$i & 7;
       $988 = (8 - ($987))|0;
       $989 = ($$02$i97$i|0)<($988|0);
       $$0$$i99$i = $989 ? $$02$i97$i : $988;
       $990 = (($$02$i97$i) - ($$0$$i99$i))|0;
       $991 = $992 >> $990;
       $993 = (($988) - ($$0$$i99$i))|0;
       $994 = $991 << $993;
       $995 = $ptr$01$i98$i >> 3;
       $996 = ((((((($gfc)) + 39840|0) + (($997*48)|0)|0)) + 8|0) + ($995)|0);
       $998 = HEAP8[$996>>0]|0;
       $999 = $998&255;
       $1000 = $994 | $999;
       $1001 = $1000&255;
       HEAP8[$996>>0] = $1001;
       $1002 = (($$0$$i99$i) + ($ptr$01$i98$i))|0;
       $1003 = ($990|0)>(0);
       $$pre$i101$i = HEAP32[$17>>2]|0;
       if ($1003) {
        $$02$i97$i = $990;$997 = $$pre$i101$i;$ptr$01$i98$i = $1002;
       } else {
        $$lcssa443 = $1002;$$pre$i101$i$lcssa = $$pre$i101$i;
        break;
       }
      }
      $1004 = (((((($gfc)) + 39840|0) + (($$pre$i101$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$1004>>2] = $$lcssa443;
      $1005 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4808|0);
      $1006 = HEAP32[$1005>>2]|0;
      $$02$i89$i = 3;$1016 = $$pre$i101$i$lcssa;$ptr$01$i90$i = $$lcssa443;
      while(1) {
       $1007 = $ptr$01$i90$i & 7;
       $1008 = (8 - ($1007))|0;
       $1009 = ($$02$i89$i|0)<($1008|0);
       $$0$$i91$i = $1009 ? $$02$i89$i : $1008;
       $1010 = (($$02$i89$i) - ($$0$$i91$i))|0;
       $1011 = $1006 >> $1010;
       $1012 = (($1008) - ($$0$$i91$i))|0;
       $1013 = $1011 << $1012;
       $1014 = $ptr$01$i90$i >> 3;
       $1015 = ((((((($gfc)) + 39840|0) + (($1016*48)|0)|0)) + 8|0) + ($1014)|0);
       $1017 = HEAP8[$1015>>0]|0;
       $1018 = $1017&255;
       $1019 = $1013 | $1018;
       $1020 = $1019&255;
       HEAP8[$1015>>0] = $1020;
       $1021 = (($$0$$i91$i) + ($ptr$01$i90$i))|0;
       $1022 = ($1010|0)>(0);
       $$pre$i93$i = HEAP32[$17>>2]|0;
       if ($1022) {
        $$02$i89$i = $1010;$1016 = $$pre$i93$i;$ptr$01$i90$i = $1021;
       } else {
        $$lcssa444 = $1021;$$pre$i93$i$lcssa = $$pre$i93$i;
        break;
       }
      }
      $1023 = (((((($gfc)) + 39840|0) + (($$pre$i93$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$1023>>2] = $$lcssa444;
      $1024 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4812|0);
      $1025 = HEAP32[$1024>>2]|0;
      $$02$i81$i = 3;$1035 = $$pre$i93$i$lcssa;$ptr$01$i82$i = $$lcssa444;
      while(1) {
       $1026 = $ptr$01$i82$i & 7;
       $1027 = (8 - ($1026))|0;
       $1028 = ($$02$i81$i|0)<($1027|0);
       $$0$$i83$i = $1028 ? $$02$i81$i : $1027;
       $1029 = (($$02$i81$i) - ($$0$$i83$i))|0;
       $1030 = $1025 >> $1029;
       $1031 = (($1027) - ($$0$$i83$i))|0;
       $1032 = $1030 << $1031;
       $1033 = $ptr$01$i82$i >> 3;
       $1034 = ((((((($gfc)) + 39840|0) + (($1035*48)|0)|0)) + 8|0) + ($1033)|0);
       $1036 = HEAP8[$1034>>0]|0;
       $1037 = $1036&255;
       $1038 = $1032 | $1037;
       $1039 = $1038&255;
       HEAP8[$1034>>0] = $1039;
       $1040 = (($$0$$i83$i) + ($ptr$01$i82$i))|0;
       $1041 = ($1029|0)>(0);
       $$pre$i85$i = HEAP32[$17>>2]|0;
       if ($1041) {
        $$02$i81$i = $1029;$1035 = $$pre$i85$i;$ptr$01$i82$i = $1040;
       } else {
        $$lcssa445 = $1040;$$pre$i85$i$lcssa = $$pre$i85$i;
        break;
       }
      }
      $1042 = (((((($gfc)) + 39840|0) + (($$pre$i85$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$1042>>2] = $$lcssa445;
      $1043 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4816|0);
      $1044 = HEAP32[$1043>>2]|0;
      $$02$i73$i = 3;$1054 = $$pre$i85$i$lcssa;$ptr$01$i74$i = $$lcssa445;
      while(1) {
       $1045 = $ptr$01$i74$i & 7;
       $1046 = (8 - ($1045))|0;
       $1047 = ($$02$i73$i|0)<($1046|0);
       $$0$$i75$i = $1047 ? $$02$i73$i : $1046;
       $1048 = (($$02$i73$i) - ($$0$$i75$i))|0;
       $1049 = $1044 >> $1048;
       $1050 = (($1046) - ($$0$$i75$i))|0;
       $1051 = $1049 << $1050;
       $1052 = $ptr$01$i74$i >> 3;
       $1053 = ((((((($gfc)) + 39840|0) + (($1054*48)|0)|0)) + 8|0) + ($1052)|0);
       $1055 = HEAP8[$1053>>0]|0;
       $1056 = $1055&255;
       $1057 = $1051 | $1056;
       $1058 = $1057&255;
       HEAP8[$1053>>0] = $1058;
       $1059 = (($$0$$i75$i) + ($ptr$01$i74$i))|0;
       $1060 = ($1048|0)>(0);
       $$pre$i77$i = HEAP32[$17>>2]|0;
       if ($1060) {
        $$02$i73$i = $1048;$1054 = $$pre$i77$i;$ptr$01$i74$i = $1059;
       } else {
        $$lcssa446 = $1059;$$pre$i77$i$lcssa = $$pre$i77$i;
        break;
       }
      }
      $1061 = (((((($gfc)) + 39840|0) + (($$pre$i77$i$lcssa*48)|0)|0)) + 4|0);
      HEAP32[$1061>>2] = $$lcssa446;
      $1815 = $$lcssa446;$1816 = $$pre$i77$i$lcssa;
     }
     $1169 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4836|0);
     $1170 = HEAP32[$1169>>2]|0;
     $$02$i17$i = 1;$1180 = $1816;$ptr$01$i18$i = $1815;
     while(1) {
      $1171 = $ptr$01$i18$i & 7;
      $1172 = (8 - ($1171))|0;
      $1173 = ($$02$i17$i|0)<($1172|0);
      $$0$$i19$i = $1173 ? $$02$i17$i : $1172;
      $1174 = (($$02$i17$i) - ($$0$$i19$i))|0;
      $1175 = $1170 >> $1174;
      $1176 = (($1172) - ($$0$$i19$i))|0;
      $1177 = $1175 << $1176;
      $1178 = $ptr$01$i18$i >> 3;
      $1179 = ((((((($gfc)) + 39840|0) + (($1180*48)|0)|0)) + 8|0) + ($1178)|0);
      $1181 = HEAP8[$1179>>0]|0;
      $1182 = $1181&255;
      $1183 = $1177 | $1182;
      $1184 = $1183&255;
      HEAP8[$1179>>0] = $1184;
      $1185 = (($$0$$i19$i) + ($ptr$01$i18$i))|0;
      $1186 = ($1174|0)>(0);
      $$pre$i21$i = HEAP32[$17>>2]|0;
      if ($1186) {
       $$02$i17$i = $1174;$1180 = $$pre$i21$i;$ptr$01$i18$i = $1185;
      } else {
       $$lcssa453 = $1185;$$pre$i21$i$lcssa = $$pre$i21$i;
       break;
      }
     }
     $1187 = (((((($gfc)) + 39840|0) + (($$pre$i21$i$lcssa*48)|0)|0)) + 4|0);
     HEAP32[$1187>>2] = $$lcssa453;
     $1188 = (((((($gfc)) + 304|0) + (($ch$2638$i*5252)|0)|0)) + 4840|0);
     $1189 = HEAP32[$1188>>2]|0;
     $$02$i9$i = 1;$1199 = $$pre$i21$i$lcssa;$ptr$01$i10$i = $$lcssa453;
     while(1) {
      $1190 = $ptr$01$i10$i & 7;
      $1191 = (8 - ($1190))|0;
      $1192 = ($$02$i9$i|0)<($1191|0);
      $$0$$i11$i = $1192 ? $$02$i9$i : $1191;
      $1193 = (($$02$i9$i) - ($$0$$i11$i))|0;
      $1194 = $1189 >> $1193;
      $1195 = (($1191) - ($$0$$i11$i))|0;
      $1196 = $1194 << $1195;
      $1197 = $ptr$01$i10$i >> 3;
      $1198 = ((((((($gfc)) + 39840|0) + (($1199*48)|0)|0)) + 8|0) + ($1197)|0);
      $1200 = HEAP8[$1198>>0]|0;
      $1201 = $1200&255;
      $1202 = $1196 | $1201;
      $1203 = $1202&255;
      HEAP8[$1198>>0] = $1203;
      $1204 = (($$0$$i11$i) + ($ptr$01$i10$i))|0;
      $1205 = ($1193|0)>(0);
      $$pre$i13$i = HEAP32[$17>>2]|0;
      if ($1205) {
       $$02$i9$i = $1193;$1199 = $$pre$i13$i;$ptr$01$i10$i = $1204;
      } else {
       $$lcssa454 = $1204;$$pre$i13$i$lcssa = $$pre$i13$i;
       break;
      }
     }
     $1206 = (((((($gfc)) + 39840|0) + (($$pre$i13$i$lcssa*48)|0)|0)) + 4|0);
     HEAP32[$1206>>2] = $$lcssa454;
     $1207 = (($ch$2638$i) + 1)|0;
     $1208 = HEAP32[$805>>2]|0;
     $1209 = ($1207|0)<($1208|0);
     if ($1209) {
      $1809 = $$lcssa454;$1810 = $$pre$i13$i$lcssa;$ch$2638$i = $1207;
     } else {
      $1213 = $$pre$i13$i$lcssa;
      break;
     }
    }
   } else {
    $1213 = $$pre$i173$i$lcssa;
   }
  }
 } while(0);
 $1210 = HEAP32[$98>>2]|0;
 $1211 = ($1210|0)==(0);
 if ($1211) {
  $1215 = $1213;
 } else {
  $1212 = (((((($gfc)) + 39840|0) + (($1213*48)|0)|0)) + 8|0);
  _CRC_writeheader($gfc,$1212);
  $$pre734$i = HEAP32[$17>>2]|0;
  $1215 = $$pre734$i;
 }
 $1214 = (($1215) + 1)|0;
 $1216 = $1214 & 255;
 HEAP32[$17>>2] = $1216;
 $1217 = (((($gfc)) + 39840|0) + (($1215*48)|0)|0);
 $1218 = HEAP32[$1217>>2]|0;
 $1219 = (($1218) + ($14))|0;
 $1220 = (((($gfc)) + 39840|0) + (($1216*48)|0)|0);
 HEAP32[$1220>>2] = $1219;
 $1221 = HEAP32[$17>>2]|0;
 $1222 = ((($gfc)) + 52132|0);
 $1223 = HEAP32[$1222>>2]|0;
 $1224 = ($1221|0)==($1223|0);
 if ($1224) {
  _lame_errorf($gfc,1112,$vararg_buffer);
 }
 $1283 = HEAP32[$21>>2]|0;
 $1284 = $1283 << 3;
 $1285 = HEAP32[$62>>2]|0;
 $1286 = ($1285|0)==(1);
 $1287 = ((($gfc)) + 72|0);
 do {
  if ($1286) {
   $1295 = ((($gfc)) + 300|0);
   $1296 = ((($gfc)) + 296|0);
   $1297 = ((($gfc)) + 292|0);
   $1298 = ((($gfc)) + 284|0);
   $1299 = ((($gfc)) + 21464|0);
   $$pre$i1 = HEAP32[$1287>>2]|0;
   $1300 = $$pre$i1;$gr$054$i = 0;$tot_bits$053$i = 0;
   while(1) {
    $1301 = ($1300|0)>(0);
    if ($1301) {
     $ch$047$i = 0;$tot_bits$146$i = $tot_bits$053$i;
     while(1) {
      $1302 = ((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0);
      $1303 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4784|0);
      $1304 = HEAP32[$1303>>2]|0;
      $1305 = (88648 + ($1304<<2)|0);
      $1306 = HEAP32[$1305>>2]|0;
      $1307 = (88712 + ($1304<<2)|0);
      $1308 = HEAP32[$1307>>2]|0;
      $1309 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4868|0);
      $1310 = HEAP32[$1309>>2]|0;
      $1311 = ($1310|0)>(0);
      L269: do {
       if ($1311) {
        $1312 = ($1306|0)>(0);
        if ($1312) {
         $1824 = $1310;$data_bits$039$us$i = 0;$sfb$040$us$i = 0;
        } else {
         $data_bits$039$i = 0;$sfb$040$i = 0;
         while(1) {
          $1365 = (((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4608|0) + ($sfb$040$i<<2)|0);
          $1366 = HEAP32[$1365>>2]|0;
          $1367 = ($1366|0)==(-1);
          $1368 = $1367 ? 0 : $1306;
          $data_bits$039$$i = (($1368) + ($data_bits$039$i))|0;
          $1369 = (($sfb$040$i) + 1)|0;
          $exitcond166 = ($1369|0)==($1310|0);
          if ($exitcond166) {
           $data_bits$0$lcssa$i = $data_bits$039$$i;$sfb$0$lcssa$i = $1310;
           break L269;
          } else {
           $data_bits$039$i = $data_bits$039$$i;$sfb$040$i = $1369;
          }
         }
        }
        while(1) {
         $1313 = (((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4608|0) + ($sfb$040$us$i<<2)|0);
         $1314 = HEAP32[$1313>>2]|0;
         $1315 = ($1314|0)==(-1);
         if ($1315) {
          $1360 = $1824;$data_bits$1$us$i = $data_bits$039$us$i;
         } else {
          $$01$i$us$i = $1306;
          while(1) {
           $1316 = HEAP32[$1295>>2]|0;
           $1317 = ($1316|0)==(0);
           if ($1317) {
            HEAP32[$1295>>2] = 8;
            $1318 = HEAP32[$1296>>2]|0;
            $1319 = (($1318) + 1)|0;
            HEAP32[$1296>>2] = $1319;
            $1320 = HEAP32[$1222>>2]|0;
            $1321 = (((($gfc)) + 39840|0) + (($1320*48)|0)|0);
            $1322 = HEAP32[$1321>>2]|0;
            $1323 = HEAP32[$1297>>2]|0;
            $1324 = ($1322|0)==($1323|0);
            if ($1324) {
             $1325 = HEAP32[$1298>>2]|0;
             $1326 = (($1325) + ($1319)|0);
             $1327 = (((((($gfc)) + 39840|0) + (($1320*48)|0)|0)) + 8|0);
             $1328 = HEAP32[$21>>2]|0;
             _memcpy(($1326|0),($1327|0),($1328|0))|0;
             $1329 = HEAP32[$21>>2]|0;
             $1330 = HEAP32[$1296>>2]|0;
             $1331 = (($1330) + ($1329))|0;
             HEAP32[$1296>>2] = $1331;
             $1332 = $1329 << 3;
             $1333 = HEAP32[$1297>>2]|0;
             $1334 = (($1333) + ($1332))|0;
             HEAP32[$1297>>2] = $1334;
             $1335 = HEAP32[$1222>>2]|0;
             $1336 = (($1335) + 1)|0;
             $1337 = $1336 & 255;
             HEAP32[$1222>>2] = $1337;
             $1340 = $1331;
            } else {
             $1340 = $1319;
            }
            $1338 = HEAP32[$1298>>2]|0;
            $1339 = (($1338) + ($1340)|0);
            HEAP8[$1339>>0] = 0;
            $$pre$i$us$i = HEAP32[$1295>>2]|0;
            $1342 = $$pre$i$us$i;
           } else {
            $1342 = $1316;
           }
           $1341 = ($$01$i$us$i|0)<($1342|0);
           $$0$$i$us$i = $1341 ? $$01$i$us$i : $1342;
           $1343 = (($$01$i$us$i) - ($$0$$i$us$i))|0;
           $1344 = (($1342) - ($$0$$i$us$i))|0;
           HEAP32[$1295>>2] = $1344;
           $1345 = $1314 >> $1343;
           $1346 = $1345 << $1344;
           $1347 = HEAP32[$1296>>2]|0;
           $1348 = HEAP32[$1298>>2]|0;
           $1349 = (($1348) + ($1347)|0);
           $1350 = HEAP8[$1349>>0]|0;
           $1351 = $1350&255;
           $1352 = $1346 | $1351;
           $1353 = $1352&255;
           HEAP8[$1349>>0] = $1353;
           $1354 = HEAP32[$1297>>2]|0;
           $1355 = (($1354) + ($$0$$i$us$i))|0;
           HEAP32[$1297>>2] = $1355;
           $1356 = ($1343|0)>(0);
           if ($1356) {
            $$01$i$us$i = $1343;
           } else {
            break;
           }
          }
          $$pre96$pre$i = HEAP32[$1309>>2]|0;
          $1357 = (($data_bits$039$us$i) + ($1306))|0;
          $1360 = $$pre96$pre$i;$data_bits$1$us$i = $1357;
         }
         $1358 = (($sfb$040$us$i) + 1)|0;
         $1359 = ($1358|0)<($1360|0);
         if ($1359) {
          $1824 = $1360;$data_bits$039$us$i = $data_bits$1$us$i;$sfb$040$us$i = $1358;
         } else {
          $data_bits$0$lcssa$i = $data_bits$1$us$i;$sfb$0$lcssa$i = $1358;
          break;
         }
        }
       } else {
        $data_bits$0$lcssa$i = 0;$sfb$0$lcssa$i = 0;
       }
      } while(0);
      $1361 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4860|0);
      $1362 = HEAP32[$1361>>2]|0;
      $1363 = ($sfb$0$lcssa$i|0)<($1362|0);
      if ($1363) {
       $1364 = ($1308|0)>(0);
       $1825 = $1362;$data_bits$242$i = $data_bits$0$lcssa$i;$sfb$143$i = $sfb$0$lcssa$i;
       while(1) {
        $1370 = (((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4608|0) + ($sfb$143$i<<2)|0);
        $1371 = HEAP32[$1370>>2]|0;
        $1372 = ($1371|0)==(-1);
        if ($1372) {
         $1417 = $1825;$data_bits$3$i = $data_bits$242$i;
        } else {
         if ($1364) {
          $$01$i4$i = $1308;
          while(1) {
           $1373 = HEAP32[$1295>>2]|0;
           $1374 = ($1373|0)==(0);
           if ($1374) {
            HEAP32[$1295>>2] = 8;
            $1375 = HEAP32[$1296>>2]|0;
            $1376 = (($1375) + 1)|0;
            HEAP32[$1296>>2] = $1376;
            $1377 = HEAP32[$1222>>2]|0;
            $1378 = (((($gfc)) + 39840|0) + (($1377*48)|0)|0);
            $1379 = HEAP32[$1378>>2]|0;
            $1380 = HEAP32[$1297>>2]|0;
            $1381 = ($1379|0)==($1380|0);
            if ($1381) {
             $1382 = HEAP32[$1298>>2]|0;
             $1383 = (($1382) + ($1376)|0);
             $1384 = (((((($gfc)) + 39840|0) + (($1377*48)|0)|0)) + 8|0);
             $1385 = HEAP32[$21>>2]|0;
             _memcpy(($1383|0),($1384|0),($1385|0))|0;
             $1386 = HEAP32[$21>>2]|0;
             $1387 = HEAP32[$1296>>2]|0;
             $1388 = (($1387) + ($1386))|0;
             HEAP32[$1296>>2] = $1388;
             $1389 = $1386 << 3;
             $1390 = HEAP32[$1297>>2]|0;
             $1391 = (($1390) + ($1389))|0;
             HEAP32[$1297>>2] = $1391;
             $1392 = HEAP32[$1222>>2]|0;
             $1393 = (($1392) + 1)|0;
             $1394 = $1393 & 255;
             HEAP32[$1222>>2] = $1394;
             $1397 = $1388;
            } else {
             $1397 = $1376;
            }
            $1395 = HEAP32[$1298>>2]|0;
            $1396 = (($1395) + ($1397)|0);
            HEAP8[$1396>>0] = 0;
            $$pre$i5$i4 = HEAP32[$1295>>2]|0;
            $1399 = $$pre$i5$i4;
           } else {
            $1399 = $1373;
           }
           $1398 = ($$01$i4$i|0)<($1399|0);
           $$0$$i6$i = $1398 ? $$01$i4$i : $1399;
           $1400 = (($$01$i4$i) - ($$0$$i6$i))|0;
           $1401 = (($1399) - ($$0$$i6$i))|0;
           HEAP32[$1295>>2] = $1401;
           $1402 = $1371 >> $1400;
           $1403 = $1402 << $1401;
           $1404 = HEAP32[$1296>>2]|0;
           $1405 = HEAP32[$1298>>2]|0;
           $1406 = (($1405) + ($1404)|0);
           $1407 = HEAP8[$1406>>0]|0;
           $1408 = $1407&255;
           $1409 = $1403 | $1408;
           $1410 = $1409&255;
           HEAP8[$1406>>0] = $1410;
           $1411 = HEAP32[$1297>>2]|0;
           $1412 = (($1411) + ($$0$$i6$i))|0;
           HEAP32[$1297>>2] = $1412;
           $1413 = ($1400|0)>(0);
           if ($1413) {
            $$01$i4$i = $1400;
           } else {
            break;
           }
          }
          $$pre97$pre$i = HEAP32[$1361>>2]|0;
          $$pre97$i = $$pre97$pre$i;
         } else {
          $$pre97$i = $1825;
         }
         $1414 = (($data_bits$242$i) + ($1308))|0;
         $1417 = $$pre97$i;$data_bits$3$i = $1414;
        }
        $1415 = (($sfb$143$i) + 1)|0;
        $1416 = ($1415|0)<($1417|0);
        if ($1416) {
         $1825 = $1417;$data_bits$242$i = $data_bits$3$i;$sfb$143$i = $1415;
        } else {
         $data_bits$2$lcssa$i = $data_bits$3$i;
         break;
        }
       }
      } else {
       $data_bits$2$lcssa$i = $data_bits$0$lcssa$i;
      }
      $1418 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4788|0);
      $1419 = HEAP32[$1418>>2]|0;
      $1420 = ($1419|0)==(2);
      if ($1420) {
       $1421 = HEAP32[$1299>>2]|0;
       $1422 = ($1421*3)|0;
       $1423 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4772|0);
       $1424 = HEAP32[$1423>>2]|0;
       $1425 = ($1422|0)>($1424|0);
       $$$i8$i = $1425 ? $1424 : $1422;
       $1426 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4796|0);
       $1427 = HEAP32[$1426>>2]|0;
       $1428 = (_Huffmancode($gfc,$1427,0,$$$i8$i,$1302)|0);
       $1429 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4800|0);
       $1430 = HEAP32[$1429>>2]|0;
       $1431 = HEAP32[$1423>>2]|0;
       $1432 = (_Huffmancode($gfc,$1430,$$$i8$i,$1431,$1302)|0);
       $1433 = (($1432) + ($1428))|0;
       $$pn$i = $1433;
      } else {
       $1434 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4772|0);
       $1435 = HEAP32[$1434>>2]|0;
       $1436 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4824|0);
       $1437 = HEAP32[$1436>>2]|0;
       $1438 = (($1437) + 1)|0;
       $1439 = (((($gfc)) + 21360|0) + ($1438<<2)|0);
       $1440 = HEAP32[$1439>>2]|0;
       $1441 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4828|0);
       $1442 = HEAP32[$1441>>2]|0;
       $1443 = (($1437) + 2)|0;
       $1444 = (($1443) + ($1442))|0;
       $1445 = (((($gfc)) + 21360|0) + ($1444<<2)|0);
       $1446 = HEAP32[$1445>>2]|0;
       $1447 = ($1440|0)>($1435|0);
       $$$i9$i = $1447 ? $1435 : $1440;
       $1448 = ($1446|0)>($1435|0);
       $region2Start$0$i10$i = $1448 ? $1435 : $1446;
       $1449 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4796|0);
       $1450 = HEAP32[$1449>>2]|0;
       $1451 = (_Huffmancode($gfc,$1450,0,$$$i9$i,$1302)|0);
       $1452 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4800|0);
       $1453 = HEAP32[$1452>>2]|0;
       $1454 = (_Huffmancode($gfc,$1453,$$$i9$i,$region2Start$0$i10$i,$1302)|0);
       $1455 = (($1454) + ($1451))|0;
       $1456 = ((((((($gfc)) + 304|0) + (($gr$054$i*10504)|0)|0) + (($ch$047$i*5252)|0)|0)) + 4804|0);
       $1457 = HEAP32[$1456>>2]|0;
       $1458 = (_Huffmancode($gfc,$1457,$region2Start$0$i10$i,$1435,$1302)|0);
       $1459 = (($1455) + ($1458))|0;
       $$pn$i = $1459;
      }
      $1460 = (_huffman_coder_count1($gfc,$1302)|0);
      $data_bits$4$i = (($data_bits$2$lcssa$i) + ($tot_bits$146$i))|0;
      $1461 = (($data_bits$4$i) + ($$pn$i))|0;
      $1462 = (($1461) + ($1460))|0;
      $1463 = (($ch$047$i) + 1)|0;
      $1464 = HEAP32[$1287>>2]|0;
      $1465 = ($1463|0)<($1464|0);
      if ($1465) {
       $ch$047$i = $1463;$tot_bits$146$i = $1462;
      } else {
       $1823 = $1464;$tot_bits$1$lcssa$i = $1462;
       break;
      }
     }
    } else {
     $1823 = $1300;$tot_bits$1$lcssa$i = $tot_bits$053$i;
    }
    $1466 = (($gr$054$i) + 1)|0;
    $exitcond$i6 = ($1466|0)==(2);
    if ($exitcond$i6) {
     $$pre$phiZ2D = $1297;$tot_bits$3$i = $tot_bits$1$lcssa$i;
     break;
    } else {
     $1300 = $1823;$gr$054$i = $1466;$tot_bits$053$i = $tot_bits$1$lcssa$i;
    }
   }
  } else {
   $1288 = HEAP32[$1287>>2]|0;
   $1289 = ($1288|0)>(0);
   if (!($1289)) {
    $$pre167 = ((($gfc)) + 292|0);
    $$pre$phiZ2D = $$pre167;$tot_bits$3$i = 0;
    break;
   }
   $1290 = ((($gfc)) + 300|0);
   $1291 = ((($gfc)) + 296|0);
   $1292 = ((($gfc)) + 292|0);
   $1293 = ((($gfc)) + 284|0);
   $1294 = ((($gfc)) + 21464|0);
   $ch$179$i = 0;$tot_bits$278$i = 0;
   while(1) {
    $1467 = (((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0);
    $1468 = (((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4788|0);
    $1469 = HEAP32[$1468>>2]|0;
    $1470 = ($1469|0)==(2);
    $1471 = (((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 5188|0);
    if ($1470) {
     $scale_bits$076$i = 0;$sfb$277$i = 0;$sfb_partition$075$i = 0;
     while(1) {
      $1472 = HEAP32[$1471>>2]|0;
      $1473 = (($1472) + ($sfb_partition$075$i<<2)|0);
      $1474 = HEAP32[$1473>>2]|0;
      $1475 = (($1474|0) / 3)&-1;
      $1476 = ((((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 5192|0) + ($sfb_partition$075$i<<2)|0);
      $1477 = HEAP32[$1476>>2]|0;
      $1478 = ($1474|0)>(2);
      if ($1478) {
       $1479 = ($1477|0)>(0);
       $1480 = ($1475|0)>(1);
       $smax$i = $1480 ? $1475 : 1;
       $i$067$i = 0;$sfb$369$i = $sfb$277$i;
       while(1) {
        $1481 = ($sfb$369$i*3)|0;
        $1482 = ((((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4608|0) + ($1481<<2)|0);
        $1483 = HEAP32[$1482>>2]|0;
        $1484 = ($1483|0)>(0);
        $$$i7 = $1484 ? $1483 : 0;
        if ($1479) {
         $$01$i12$i = $1477;
         while(1) {
          $1485 = HEAP32[$1290>>2]|0;
          $1486 = ($1485|0)==(0);
          if ($1486) {
           HEAP32[$1290>>2] = 8;
           $1487 = HEAP32[$1291>>2]|0;
           $1488 = (($1487) + 1)|0;
           HEAP32[$1291>>2] = $1488;
           $1489 = HEAP32[$1222>>2]|0;
           $1490 = (((($gfc)) + 39840|0) + (($1489*48)|0)|0);
           $1491 = HEAP32[$1490>>2]|0;
           $1492 = HEAP32[$1292>>2]|0;
           $1493 = ($1491|0)==($1492|0);
           if ($1493) {
            $1494 = HEAP32[$1293>>2]|0;
            $1495 = (($1494) + ($1488)|0);
            $1496 = (((((($gfc)) + 39840|0) + (($1489*48)|0)|0)) + 8|0);
            $1497 = HEAP32[$21>>2]|0;
            _memcpy(($1495|0),($1496|0),($1497|0))|0;
            $1498 = HEAP32[$21>>2]|0;
            $1499 = HEAP32[$1291>>2]|0;
            $1500 = (($1499) + ($1498))|0;
            HEAP32[$1291>>2] = $1500;
            $1501 = $1498 << 3;
            $1502 = HEAP32[$1292>>2]|0;
            $1503 = (($1502) + ($1501))|0;
            HEAP32[$1292>>2] = $1503;
            $1504 = HEAP32[$1222>>2]|0;
            $1505 = (($1504) + 1)|0;
            $1506 = $1505 & 255;
            HEAP32[$1222>>2] = $1506;
            $1509 = $1500;
           } else {
            $1509 = $1488;
           }
           $1507 = HEAP32[$1293>>2]|0;
           $1508 = (($1507) + ($1509)|0);
           HEAP8[$1508>>0] = 0;
           $$pre$i13$i8 = HEAP32[$1290>>2]|0;
           $1511 = $$pre$i13$i8;
          } else {
           $1511 = $1485;
          }
          $1510 = ($$01$i12$i|0)<($1511|0);
          $$0$$i14$i = $1510 ? $$01$i12$i : $1511;
          $1512 = (($$01$i12$i) - ($$0$$i14$i))|0;
          $1513 = (($1511) - ($$0$$i14$i))|0;
          HEAP32[$1290>>2] = $1513;
          $1514 = $$$i7 >> $1512;
          $1515 = $1514 << $1513;
          $1516 = HEAP32[$1291>>2]|0;
          $1517 = HEAP32[$1293>>2]|0;
          $1518 = (($1517) + ($1516)|0);
          $1519 = HEAP8[$1518>>0]|0;
          $1520 = $1519&255;
          $1521 = $1515 | $1520;
          $1522 = $1521&255;
          HEAP8[$1518>>0] = $1522;
          $1523 = HEAP32[$1292>>2]|0;
          $1524 = (($1523) + ($$0$$i14$i))|0;
          HEAP32[$1292>>2] = $1524;
          $1525 = ($1512|0)>(0);
          if ($1525) {
           $$01$i12$i = $1512;
          } else {
           $$lcssa401 = $1524;
           break;
          }
         }
         $1526 = (($1481) + 1)|0;
         $1527 = ((((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4608|0) + ($1526<<2)|0);
         $1528 = HEAP32[$1527>>2]|0;
         $1529 = ($1528|0)>(0);
         $1530 = $1529 ? $1528 : 0;
         $$01$i17$i = $1477;$1539 = $$lcssa401;
         while(1) {
          $1531 = HEAP32[$1290>>2]|0;
          $1532 = ($1531|0)==(0);
          if ($1532) {
           HEAP32[$1290>>2] = 8;
           $1533 = HEAP32[$1291>>2]|0;
           $1534 = (($1533) + 1)|0;
           HEAP32[$1291>>2] = $1534;
           $1535 = HEAP32[$1222>>2]|0;
           $1536 = (((($gfc)) + 39840|0) + (($1535*48)|0)|0);
           $1537 = HEAP32[$1536>>2]|0;
           $1538 = ($1537|0)==($1539|0);
           if ($1538) {
            $1540 = HEAP32[$1293>>2]|0;
            $1541 = (($1540) + ($1534)|0);
            $1542 = (((((($gfc)) + 39840|0) + (($1535*48)|0)|0)) + 8|0);
            $1543 = HEAP32[$21>>2]|0;
            _memcpy(($1541|0),($1542|0),($1543|0))|0;
            $1544 = HEAP32[$21>>2]|0;
            $1545 = HEAP32[$1291>>2]|0;
            $1546 = (($1545) + ($1544))|0;
            HEAP32[$1291>>2] = $1546;
            $1547 = $1544 << 3;
            $1548 = HEAP32[$1292>>2]|0;
            $1549 = (($1548) + ($1547))|0;
            HEAP32[$1292>>2] = $1549;
            $1550 = HEAP32[$1222>>2]|0;
            $1551 = (($1550) + 1)|0;
            $1552 = $1551 & 255;
            HEAP32[$1222>>2] = $1552;
            $1555 = $1546;
           } else {
            $1555 = $1534;
           }
           $1553 = HEAP32[$1293>>2]|0;
           $1554 = (($1553) + ($1555)|0);
           HEAP8[$1554>>0] = 0;
           $$pre$i18$i = HEAP32[$1290>>2]|0;
           $1557 = $$pre$i18$i;
          } else {
           $1557 = $1531;
          }
          $1556 = ($$01$i17$i|0)<($1557|0);
          $$0$$i19$i9 = $1556 ? $$01$i17$i : $1557;
          $1558 = (($$01$i17$i) - ($$0$$i19$i9))|0;
          $1559 = (($1557) - ($$0$$i19$i9))|0;
          HEAP32[$1290>>2] = $1559;
          $1560 = $1530 >> $1558;
          $1561 = $1560 << $1559;
          $1562 = HEAP32[$1291>>2]|0;
          $1563 = HEAP32[$1293>>2]|0;
          $1564 = (($1563) + ($1562)|0);
          $1565 = HEAP8[$1564>>0]|0;
          $1566 = $1565&255;
          $1567 = $1561 | $1566;
          $1568 = $1567&255;
          HEAP8[$1564>>0] = $1568;
          $1569 = HEAP32[$1292>>2]|0;
          $1570 = (($1569) + ($$0$$i19$i9))|0;
          HEAP32[$1292>>2] = $1570;
          $1571 = ($1558|0)>(0);
          if ($1571) {
           $$01$i17$i = $1558;$1539 = $1570;
          } else {
           $$lcssa402 = $1570;
           break;
          }
         }
         $1572 = (($1481) + 2)|0;
         $1573 = ((((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4608|0) + ($1572<<2)|0);
         $1574 = HEAP32[$1573>>2]|0;
         $1575 = ($1574|0)>(0);
         $$1$i10 = $1575 ? $1574 : 0;
         $$01$i22$i = $1477;$1584 = $$lcssa402;
         while(1) {
          $1576 = HEAP32[$1290>>2]|0;
          $1577 = ($1576|0)==(0);
          if ($1577) {
           HEAP32[$1290>>2] = 8;
           $1578 = HEAP32[$1291>>2]|0;
           $1579 = (($1578) + 1)|0;
           HEAP32[$1291>>2] = $1579;
           $1580 = HEAP32[$1222>>2]|0;
           $1581 = (((($gfc)) + 39840|0) + (($1580*48)|0)|0);
           $1582 = HEAP32[$1581>>2]|0;
           $1583 = ($1582|0)==($1584|0);
           if ($1583) {
            $1585 = HEAP32[$1293>>2]|0;
            $1586 = (($1585) + ($1579)|0);
            $1587 = (((((($gfc)) + 39840|0) + (($1580*48)|0)|0)) + 8|0);
            $1588 = HEAP32[$21>>2]|0;
            _memcpy(($1586|0),($1587|0),($1588|0))|0;
            $1589 = HEAP32[$21>>2]|0;
            $1590 = HEAP32[$1291>>2]|0;
            $1591 = (($1590) + ($1589))|0;
            HEAP32[$1291>>2] = $1591;
            $1592 = $1589 << 3;
            $1593 = HEAP32[$1292>>2]|0;
            $1594 = (($1593) + ($1592))|0;
            HEAP32[$1292>>2] = $1594;
            $1595 = HEAP32[$1222>>2]|0;
            $1596 = (($1595) + 1)|0;
            $1597 = $1596 & 255;
            HEAP32[$1222>>2] = $1597;
            $1600 = $1591;
           } else {
            $1600 = $1579;
           }
           $1598 = HEAP32[$1293>>2]|0;
           $1599 = (($1598) + ($1600)|0);
           HEAP8[$1599>>0] = 0;
           $$pre$i23$i = HEAP32[$1290>>2]|0;
           $1602 = $$pre$i23$i;
          } else {
           $1602 = $1576;
          }
          $1601 = ($$01$i22$i|0)<($1602|0);
          $$0$$i24$i = $1601 ? $$01$i22$i : $1602;
          $1603 = (($$01$i22$i) - ($$0$$i24$i))|0;
          $1604 = (($1602) - ($$0$$i24$i))|0;
          HEAP32[$1290>>2] = $1604;
          $1605 = $$1$i10 >> $1603;
          $1606 = $1605 << $1604;
          $1607 = HEAP32[$1291>>2]|0;
          $1608 = HEAP32[$1293>>2]|0;
          $1609 = (($1608) + ($1607)|0);
          $1610 = HEAP8[$1609>>0]|0;
          $1611 = $1610&255;
          $1612 = $1606 | $1611;
          $1613 = $1612&255;
          HEAP8[$1609>>0] = $1613;
          $1614 = HEAP32[$1292>>2]|0;
          $1615 = (($1614) + ($$0$$i24$i))|0;
          HEAP32[$1292>>2] = $1615;
          $1616 = ($1603|0)>(0);
          if ($1616) {
           $$01$i22$i = $1603;$1584 = $1615;
          } else {
           break;
          }
         }
        }
        $1617 = (($i$067$i) + 1)|0;
        $1618 = (($sfb$369$i) + 1)|0;
        $1619 = ($1617|0)<($1475|0);
        if ($1619) {
         $i$067$i = $1617;$sfb$369$i = $1618;
        } else {
         break;
        }
       }
       $1620 = ($1477*3)|0;
       $1621 = Math_imul($1620, $smax$i)|0;
       $1622 = (($smax$i) + ($sfb$277$i))|0;
       $1623 = (($1621) + ($scale_bits$076$i))|0;
       $scale_bits$1$lcssa$i = $1623;$sfb$3$lcssa$i = $1622;
      } else {
       $scale_bits$1$lcssa$i = $scale_bits$076$i;$sfb$3$lcssa$i = $sfb$277$i;
      }
      $1624 = (($sfb_partition$075$i) + 1)|0;
      $exitcond95$i = ($1624|0)==(4);
      if ($exitcond95$i) {
       $scale_bits$1$lcssa$i$lcssa = $scale_bits$1$lcssa$i;
       break;
      } else {
       $scale_bits$076$i = $scale_bits$1$lcssa$i;$sfb$277$i = $sfb$3$lcssa$i;$sfb_partition$075$i = $1624;
      }
     }
     $1625 = HEAP32[$1294>>2]|0;
     $1626 = ($1625*3)|0;
     $1627 = (((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4772|0);
     $1628 = HEAP32[$1627>>2]|0;
     $1629 = ($1626|0)>($1628|0);
     $$$i26$i = $1629 ? $1628 : $1626;
     $1630 = (((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4796|0);
     $1631 = HEAP32[$1630>>2]|0;
     $1632 = (_Huffmancode($gfc,$1631,0,$$$i26$i,$1467)|0);
     $1633 = (((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4800|0);
     $1634 = HEAP32[$1633>>2]|0;
     $1635 = HEAP32[$1627>>2]|0;
     $1636 = (_Huffmancode($gfc,$1634,$$$i26$i,$1635,$1467)|0);
     $1637 = (($1636) + ($1632))|0;
     $data_bits$5$i = $1637;$scale_bits$4$i = $scale_bits$1$lcssa$i$lcssa;
    } else {
     $scale_bits$265$i = 0;$sfb$466$i = 0;$sfb_partition$164$i = 0;
     while(1) {
      $1638 = HEAP32[$1471>>2]|0;
      $1639 = (($1638) + ($sfb_partition$164$i<<2)|0);
      $1640 = HEAP32[$1639>>2]|0;
      $1641 = ((((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 5192|0) + ($sfb_partition$164$i<<2)|0);
      $1642 = HEAP32[$1641>>2]|0;
      $1643 = ($1640|0)>(0);
      if ($1643) {
       $1644 = ($1642|0)>(0);
       if ($1644) {
        $i$156$us$i = 0;$sfb$558$us$i = $sfb$466$i;
        while(1) {
         $1645 = ((((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4608|0) + ($sfb$558$us$i<<2)|0);
         $1646 = HEAP32[$1645>>2]|0;
         $1647 = ($1646|0)>(0);
         $$2$us$i = $1647 ? $1646 : 0;
         $$01$i28$us$i = $1642;
         while(1) {
          $1648 = HEAP32[$1290>>2]|0;
          $1649 = ($1648|0)==(0);
          if ($1649) {
           HEAP32[$1290>>2] = 8;
           $1650 = HEAP32[$1291>>2]|0;
           $1651 = (($1650) + 1)|0;
           HEAP32[$1291>>2] = $1651;
           $1652 = HEAP32[$1222>>2]|0;
           $1653 = (((($gfc)) + 39840|0) + (($1652*48)|0)|0);
           $1654 = HEAP32[$1653>>2]|0;
           $1655 = HEAP32[$1292>>2]|0;
           $1656 = ($1654|0)==($1655|0);
           if ($1656) {
            $1657 = HEAP32[$1293>>2]|0;
            $1658 = (($1657) + ($1651)|0);
            $1659 = (((((($gfc)) + 39840|0) + (($1652*48)|0)|0)) + 8|0);
            $1660 = HEAP32[$21>>2]|0;
            _memcpy(($1658|0),($1659|0),($1660|0))|0;
            $1661 = HEAP32[$21>>2]|0;
            $1662 = HEAP32[$1291>>2]|0;
            $1663 = (($1662) + ($1661))|0;
            HEAP32[$1291>>2] = $1663;
            $1664 = $1661 << 3;
            $1665 = HEAP32[$1292>>2]|0;
            $1666 = (($1665) + ($1664))|0;
            HEAP32[$1292>>2] = $1666;
            $1667 = HEAP32[$1222>>2]|0;
            $1668 = (($1667) + 1)|0;
            $1669 = $1668 & 255;
            HEAP32[$1222>>2] = $1669;
            $1672 = $1663;
           } else {
            $1672 = $1651;
           }
           $1670 = HEAP32[$1293>>2]|0;
           $1671 = (($1670) + ($1672)|0);
           HEAP8[$1671>>0] = 0;
           $$pre$i29$us$i = HEAP32[$1290>>2]|0;
           $1674 = $$pre$i29$us$i;
          } else {
           $1674 = $1648;
          }
          $1673 = ($$01$i28$us$i|0)<($1674|0);
          $$0$$i30$us$i = $1673 ? $$01$i28$us$i : $1674;
          $1675 = (($$01$i28$us$i) - ($$0$$i30$us$i))|0;
          $1676 = (($1674) - ($$0$$i30$us$i))|0;
          HEAP32[$1290>>2] = $1676;
          $1677 = $$2$us$i >> $1675;
          $1678 = $1677 << $1676;
          $1679 = HEAP32[$1291>>2]|0;
          $1680 = HEAP32[$1293>>2]|0;
          $1681 = (($1680) + ($1679)|0);
          $1682 = HEAP8[$1681>>0]|0;
          $1683 = $1682&255;
          $1684 = $1678 | $1683;
          $1685 = $1684&255;
          HEAP8[$1681>>0] = $1685;
          $1686 = HEAP32[$1292>>2]|0;
          $1687 = (($1686) + ($$0$$i30$us$i))|0;
          HEAP32[$1292>>2] = $1687;
          $1688 = ($1675|0)>(0);
          if ($1688) {
           $$01$i28$us$i = $1675;
          } else {
           break;
          }
         }
         $1689 = (($i$156$us$i) + 1)|0;
         $1690 = (($sfb$558$us$i) + 1)|0;
         $exitcond93$i = ($1689|0)==($1640|0);
         if ($exitcond93$i) {
          break;
         } else {
          $i$156$us$i = $1689;$sfb$558$us$i = $1690;
         }
        }
       }
       $$pn100$i = Math_imul($1642, $1640)|0;
       $split63$i = (($$pn100$i) + ($scale_bits$265$i))|0;
       $split62$i = (($1640) + ($sfb$466$i))|0;
       $scale_bits$3$lcssa$i = $split63$i;$sfb$5$lcssa$i = $split62$i;
      } else {
       $scale_bits$3$lcssa$i = $scale_bits$265$i;$sfb$5$lcssa$i = $sfb$466$i;
      }
      $1691 = (($sfb_partition$164$i) + 1)|0;
      $exitcond94$i = ($1691|0)==(4);
      if ($exitcond94$i) {
       $scale_bits$3$lcssa$i$lcssa = $scale_bits$3$lcssa$i;
       break;
      } else {
       $scale_bits$265$i = $scale_bits$3$lcssa$i;$sfb$466$i = $sfb$5$lcssa$i;$sfb_partition$164$i = $1691;
      }
     }
     $1692 = (((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4772|0);
     $1693 = HEAP32[$1692>>2]|0;
     $1694 = (((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4824|0);
     $1695 = HEAP32[$1694>>2]|0;
     $1696 = (($1695) + 1)|0;
     $1697 = (((($gfc)) + 21360|0) + ($1696<<2)|0);
     $1698 = HEAP32[$1697>>2]|0;
     $1699 = (((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4828|0);
     $1700 = HEAP32[$1699>>2]|0;
     $1701 = (($1695) + 2)|0;
     $1702 = (($1701) + ($1700))|0;
     $1703 = (((($gfc)) + 21360|0) + ($1702<<2)|0);
     $1704 = HEAP32[$1703>>2]|0;
     $1705 = ($1698|0)>($1693|0);
     $$$i$i = $1705 ? $1693 : $1698;
     $1706 = ($1704|0)>($1693|0);
     $region2Start$0$i$i = $1706 ? $1693 : $1704;
     $1707 = (((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4796|0);
     $1708 = HEAP32[$1707>>2]|0;
     $1709 = (_Huffmancode($gfc,$1708,0,$$$i$i,$1467)|0);
     $1710 = (((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4800|0);
     $1711 = HEAP32[$1710>>2]|0;
     $1712 = (_Huffmancode($gfc,$1711,$$$i$i,$region2Start$0$i$i,$1467)|0);
     $1713 = (($1712) + ($1709))|0;
     $1714 = (((((($gfc)) + 304|0) + (($ch$179$i*5252)|0)|0)) + 4804|0);
     $1715 = HEAP32[$1714>>2]|0;
     $1716 = (_Huffmancode($gfc,$1715,$region2Start$0$i$i,$1693,$1467)|0);
     $1717 = (($1713) + ($1716))|0;
     $data_bits$5$i = $1717;$scale_bits$4$i = $scale_bits$3$lcssa$i$lcssa;
    }
    $1718 = (_huffman_coder_count1($gfc,$1467)|0);
    $1719 = (($scale_bits$4$i) + ($tot_bits$278$i))|0;
    $1720 = (($1719) + ($data_bits$5$i))|0;
    $1721 = (($1720) + ($1718))|0;
    $1722 = (($ch$179$i) + 1)|0;
    $1723 = HEAP32[$1287>>2]|0;
    $1724 = ($1722|0)<($1723|0);
    if ($1724) {
     $ch$179$i = $1722;$tot_bits$278$i = $1721;
    } else {
     $$pre$phiZ2D = $1292;$tot_bits$3$i = $1721;
     break;
    }
   }
  }
 } while(0);
 $1725 = (($tot_bits$3$i) + ($1284))|0;
 $1726 = ((($gfc)) + 21324|0);
 $1727 = HEAP32[$1726>>2]|0;
 _drain_into_ancillary($gfc,$1727);
 $1728 = HEAP32[$1726>>2]|0;
 $1729 = (($1725) + ($1728))|0;
 $1730 = (($14) - ($1729))|0;
 $1731 = (($1730|0) / 8)&-1;
 $1732 = HEAP32[$298>>2]|0;
 $1733 = (($1732) + ($1731))|0;
 HEAP32[$298>>2] = $1733;
 $1734 = HEAP32[$1222>>2]|0;
 $1735 = HEAP32[$17>>2]|0;
 $1736 = (($1735) + -1)|0;
 $1737 = ($1735|0)==(0);
 $$$i = $1737 ? 255 : $1736;
 $1738 = (((($gfc)) + 39840|0) + (($$$i*48)|0)|0);
 $1739 = HEAP32[$1738>>2]|0;
 $1740 = HEAP32[$$pre$phiZ2D>>2]|0;
 $1741 = (($1739) - ($1740))|0;
 $1742 = ($1741|0)>(-1);
 if ($1742) {
  $1743 = (1 - ($1734))|0;
  $1744 = (($$$i) + ($1743))|0;
  $1745 = ($$$i|0)<($1734|0);
  $1746 = (($1744) + 256)|0;
  $$1$i = $1745 ? $1746 : $1744;
  $1747 = $$1$i << 3;
  $1748 = HEAP32[$21>>2]|0;
  $1749 = Math_imul($1747, $1748)|0;
  $1750 = (($1741) - ($1749))|0;
  $flushbits$0$i = $1750;
 } else {
  $flushbits$0$i = $1741;
 }
 $1751 = HEAP32[$1>>2]|0;
 $1752 = ($1751|0)==(0);
 if ($1752) {
  $1755 = ((($gfc)) + 120|0);
  $$idx$val$pre$i$i = HEAP32[$0>>2]|0;
  $$idx$val$i$i = $$idx$val$pre$i$i;$bit_rate$0$in$i$i = $1755;
 } else {
  $1753 = HEAP32[$0>>2]|0;
  $1754 = ((83944 + ($1753<<6)|0) + ($1751<<2)|0);
  $$idx$val$i$i = $1753;$bit_rate$0$in$i$i = $1754;
 }
 $bit_rate$0$i$i = HEAP32[$bit_rate$0$in$i$i>>2]|0;
 $1756 = HEAP32[$7>>2]|0;
 $$idx1$val$i$i = HEAP32[$$idx1$i>>2]|0;
 $1757 = ($$idx$val$i$i*72000)|0;
 $1758 = (($1757) + 72000)|0;
 $1759 = Math_imul($1758, $bit_rate$0$i$i)|0;
 $1760 = (($1759|0) / ($$idx1$val$i$i|0))&-1;
 $1761 = (($1760) + ($1756))|0;
 $1762 = $1761 << 3;
 $1763 = (($1762) + ($flushbits$0$i))|0;
 $1764 = ($1763|0)<(0);
 if ($1764) {
  _lame_errorf($gfc,1072,$vararg_buffer1);
 }
 $1765 = ((($gfc)) + 52140|0);
 $1766 = HEAP32[$1765>>2]|0;
 $1767 = ($1763|0)==($1766|0);
 if ($1767) {
  $1771 = $1763;
 } else {
  _lame_errorf($gfc,1168,$vararg_buffer3);
  $$pre = HEAP32[$1765>>2]|0;
  $1771 = $$pre;
 }
 $1768 = HEAP32[$298>>2]|0;
 $1769 = $1768 << 3;
 $1770 = ($1769|0)==($1771|0);
 if (!($1770)) {
  $1772 = HEAP32[$1726>>2]|0;
  $1773 = HEAP32[$15>>2]|0;
  $1774 = HEAP32[$21>>2]|0;
  $1775 = $1774 << 3;
  $1776 = (($1729) - ($1772))|0;
  $1777 = (($1776) - ($1775))|0;
  $1778 = (($1729|0) % 8)&-1;
  HEAP32[$vararg_buffer5>>2] = $1769;
  $vararg_ptr7 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $1771;
  $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $1772;
  $vararg_ptr9 = ((($vararg_buffer5)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $1773;
  $vararg_ptr10 = ((($vararg_buffer5)) + 16|0);
  HEAP32[$vararg_ptr10>>2] = $1775;
  $vararg_ptr11 = ((($vararg_buffer5)) + 20|0);
  HEAP32[$vararg_ptr11>>2] = $1777;
  $vararg_ptr12 = ((($vararg_buffer5)) + 24|0);
  HEAP32[$vararg_ptr12>>2] = $1729;
  $vararg_ptr13 = ((($vararg_buffer5)) + 28|0);
  HEAP32[$vararg_ptr13>>2] = $1778;
  $vararg_ptr14 = ((($vararg_buffer5)) + 32|0);
  HEAP32[$vararg_ptr14>>2] = $14;
  _lame_errorf($gfc,1224,$vararg_buffer5);
  _lame_errorf($gfc,1504,$vararg_buffer15);
  _lame_errorf($gfc,1560,$vararg_buffer17);
  _lame_errorf($gfc,1640,$vararg_buffer19);
  _lame_errorf($gfc,1680,$vararg_buffer21);
  $1779 = HEAP32[$298>>2]|0;
  $1780 = $1779 << 3;
  HEAP32[$1765>>2] = $1780;
 }
 $1781 = HEAP32[$$pre$phiZ2D>>2]|0;
 $1782 = ($1781|0)>(1000000000);
 if ($1782) {
  $i$091 = 0;
 } else {
  STACKTOP = sp;return 0;
 }
 while(1) {
  $1783 = (((($gfc)) + 39840|0) + (($i$091*48)|0)|0);
  $1784 = HEAP32[$1783>>2]|0;
  $1785 = (($1784) - ($1781))|0;
  HEAP32[$1783>>2] = $1785;
  $1786 = (($i$091) + 1)|0;
  $exitcond = ($1786|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i$091 = $1786;
  }
 }
 HEAP32[$$pre$phiZ2D>>2] = 0;
 STACKTOP = sp;return 0;
}
function _copy_buffer($gfc,$buffer,$size,$mp3data) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 $size = $size|0;
 $mp3data = $mp3data|0;
 var $$$i = 0, $$0 = 0, $$pre$i = 0.0, $$pre8$i = 0.0, $$pre8$i$lcssa = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0;
 var $exitcond7$i = 0, $i$03$i = 0, $i$14$i = 0, $mp3_in$06$i = 0, $or$cond$i = 0, $pcm_buf$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 9216|0;
 $pcm_buf$i = sp;
 $0 = ((($gfc)) + 296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ($1|0)<(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($size|0)==(0);
 $5 = ($1|0)<($size|0);
 $or$cond$i = $4 | $5;
 if (!($or$cond$i)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($gfc)) + 284|0);
 $7 = HEAP32[$6>>2]|0;
 _memcpy(($buffer|0),($7|0),($2|0))|0;
 HEAP32[$0>>2] = -1;
 $8 = ((($gfc)) + 300|0);
 HEAP32[$8>>2] = 0;
 $9 = ($mp3data|0)==(0);
 if ($9) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($gfc)) + 85752|0);
 _UpdateMusicCRC($10,$buffer,$2);
 $11 = ((($gfc)) + 85788|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($2))|0;
 HEAP32[$11>>2] = $13;
 $14 = ((($gfc)) + 136|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ((($gfc)) + 85808|0);
 $18 = ((($pcm_buf$i)) + 4608|0);
 $19 = ((($gfc)) + 132|0);
 $20 = ((($gfc)) + 128|0);
 $21 = ((($gfc)) + 85676|0);
 $22 = ((($gfc)) + 72|0);
 $23 = ((($gfc)) + 85684|0);
 $mp3_in$06$i = $2;
 while(1) {
  $24 = HEAP32[$17>>2]|0;
  $25 = (_hip_decode1_unclipped(($24|0),($buffer|0),($mp3_in$06$i|0),($pcm_buf$i|0),($18|0))|0);
  $26 = ($25|0)==(-1);
  $$$i = $26 ? 0 : $25;
  $27 = ($$$i|0)>(0);
  if ($27) {
   $28 = HEAP32[$19>>2]|0;
   $29 = ($28|0)==(0);
   if (!($29)) {
    $$pre$i = +HEAPF32[$23>>2];
    $33 = $$pre$i;$i$03$i = 0;
    while(1) {
     $30 = (($pcm_buf$i) + ($i$03$i<<2)|0);
     $31 = +HEAPF32[$30>>2];
     $32 = $31 > $33;
     if ($32) {
      HEAPF32[$23>>2] = $31;
      $$pre8$i = $31;
     } else {
      $34 = -$31;
      $35 = $33 < $34;
      if ($35) {
       HEAPF32[$23>>2] = $34;
       $$pre8$i = $34;
      } else {
       $$pre8$i = $33;
      }
     }
     $36 = (($i$03$i) + 1)|0;
     $exitcond$i = ($36|0)==($$$i|0);
     if ($exitcond$i) {
      $$pre8$i$lcssa = $$pre8$i;
      break;
     } else {
      $33 = $$pre8$i;$i$03$i = $36;
     }
    }
    $37 = HEAP32[$22>>2]|0;
    $38 = ($37|0)>(1);
    if ($38) {
     $42 = $$pre8$i$lcssa;$i$14$i = 0;
     while(1) {
      $39 = (((($pcm_buf$i)) + 4608|0) + ($i$14$i<<2)|0);
      $40 = +HEAPF32[$39>>2];
      $41 = $40 > $42;
      if ($41) {
       HEAPF32[$23>>2] = $40;
       $53 = $40;
      } else {
       $43 = -$40;
       $44 = $42 < $43;
       if ($44) {
        HEAPF32[$23>>2] = $43;
        $53 = $43;
       } else {
        $53 = $42;
       }
      }
      $45 = (($i$14$i) + 1)|0;
      $exitcond7$i = ($45|0)==($$$i|0);
      if ($exitcond7$i) {
       break;
      } else {
       $42 = $53;$i$14$i = $45;
      }
     }
    }
   }
   $46 = HEAP32[$20>>2]|0;
   $47 = ($46|0)==(0);
   if (!($47)) {
    $48 = HEAP32[$21>>2]|0;
    $49 = HEAP32[$22>>2]|0;
    $50 = (_AnalyzeSamples(($48|0),($pcm_buf$i|0),($18|0),($$$i|0),($49|0))|0);
    $51 = ($50|0)==(0);
    if ($51) {
     label = 24;
     break;
    }
   }
  }
  $52 = ($$$i|0)==(0);
  if ($52) {
   label = 23;
   break;
  } else {
   $mp3_in$06$i = 0;
  }
 }
 if ((label|0) == 23) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 24) {
  $$0 = -6;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _init_bit_stream_w($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 52132|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($gfc)) + 52128|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($gfc)) + 39840|0);
 HEAP32[$2>>2] = 0;
 $3 = (_malloc(147456)|0);
 $4 = ((($gfc)) + 284|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($gfc)) + 288|0);
 HEAP32[$5>>2] = 147456;
 $6 = ((($gfc)) + 296|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($gfc)) + 300|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($gfc)) + 292|0);
 HEAP32[$8>>2] = 0;
 return;
}
function _drain_into_ancillary($gfc,$remainingBits) {
 $gfc = $gfc|0;
 $remainingBits = $remainingBits|0;
 var $$0$$i = 0, $$0$$i11 = 0, $$0$$i15 = 0, $$0$$i19 = 0, $$0$$i3 = 0, $$0$$i7 = 0, $$01$i = 0, $$01$i1 = 0, $$01$i13 = 0, $$01$i17 = 0, $$01$i5 = 0, $$01$i9 = 0, $$428 = 0, $$5$ph = 0, $$5$ph30 = 0, $$526 = 0, $$lcssa42 = 0, $$lcssa43 = 0, $$lcssa44 = 0, $$pre = 0;
 var $$pre$i = 0, $$pre$i10 = 0, $$pre$i14 = 0, $$pre$i18 = 0, $$pre$i2 = 0, $$pre$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$027 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($remainingBits|0)>(7);
 if ($0) {
  $10 = ((($gfc)) + 300|0);
  $11 = ((($gfc)) + 296|0);
  $12 = ((($gfc)) + 52132|0);
  $13 = ((($gfc)) + 292|0);
  $14 = ((($gfc)) + 284|0);
  $15 = ((($gfc)) + 24|0);
  $$01$i = 8;
  while(1) {
   $16 = HEAP32[$10>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    HEAP32[$10>>2] = 8;
    $18 = HEAP32[$11>>2]|0;
    $19 = (($18) + 1)|0;
    HEAP32[$11>>2] = $19;
    $20 = HEAP32[$12>>2]|0;
    $21 = (((($gfc)) + 39840|0) + (($20*48)|0)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$13>>2]|0;
    $24 = ($22|0)==($23|0);
    if ($24) {
     $25 = HEAP32[$14>>2]|0;
     $26 = (($25) + ($19)|0);
     $27 = (((((($gfc)) + 39840|0) + (($20*48)|0)|0)) + 8|0);
     $28 = HEAP32[$15>>2]|0;
     _memcpy(($26|0),($27|0),($28|0))|0;
     $29 = HEAP32[$15>>2]|0;
     $30 = HEAP32[$11>>2]|0;
     $31 = (($30) + ($29))|0;
     HEAP32[$11>>2] = $31;
     $32 = $29 << 3;
     $33 = HEAP32[$13>>2]|0;
     $34 = (($33) + ($32))|0;
     HEAP32[$13>>2] = $34;
     $35 = HEAP32[$12>>2]|0;
     $36 = (($35) + 1)|0;
     $37 = $36 & 255;
     HEAP32[$12>>2] = $37;
     $40 = $31;
    } else {
     $40 = $19;
    }
    $38 = HEAP32[$14>>2]|0;
    $39 = (($38) + ($40)|0);
    HEAP8[$39>>0] = 0;
    $$pre$i = HEAP32[$10>>2]|0;
    $42 = $$pre$i;
   } else {
    $42 = $16;
   }
   $41 = ($$01$i|0)<($42|0);
   $$0$$i = $41 ? $$01$i : $42;
   $43 = (($$01$i) - ($$0$$i))|0;
   $44 = (($42) - ($$0$$i))|0;
   HEAP32[$10>>2] = $44;
   $45 = 76 >>> $43;
   $46 = $45 << $44;
   $47 = HEAP32[$11>>2]|0;
   $48 = HEAP32[$14>>2]|0;
   $49 = (($48) + ($47)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = $46 | $51;
   $53 = $52&255;
   HEAP8[$49>>0] = $53;
   $54 = HEAP32[$13>>2]|0;
   $55 = (($54) + ($$0$$i))|0;
   HEAP32[$13>>2] = $55;
   $56 = ($43|0)>(0);
   if ($56) {
    $$01$i = $43;
   } else {
    $$lcssa44 = $55;
    break;
   }
  }
  $57 = (($remainingBits) + -8)|0;
  $58 = ($57|0)>(7);
  if ($58) {
   $$01$i17 = 8;$67 = $$lcssa44;
   while(1) {
    $59 = HEAP32[$10>>2]|0;
    $60 = ($59|0)==(0);
    if ($60) {
     HEAP32[$10>>2] = 8;
     $61 = HEAP32[$11>>2]|0;
     $62 = (($61) + 1)|0;
     HEAP32[$11>>2] = $62;
     $63 = HEAP32[$12>>2]|0;
     $64 = (((($gfc)) + 39840|0) + (($63*48)|0)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)==($67|0);
     if ($66) {
      $68 = HEAP32[$14>>2]|0;
      $69 = (($68) + ($62)|0);
      $70 = (((((($gfc)) + 39840|0) + (($63*48)|0)|0)) + 8|0);
      $71 = HEAP32[$15>>2]|0;
      _memcpy(($69|0),($70|0),($71|0))|0;
      $72 = HEAP32[$15>>2]|0;
      $73 = HEAP32[$11>>2]|0;
      $74 = (($73) + ($72))|0;
      HEAP32[$11>>2] = $74;
      $75 = $72 << 3;
      $76 = HEAP32[$13>>2]|0;
      $77 = (($76) + ($75))|0;
      HEAP32[$13>>2] = $77;
      $78 = HEAP32[$12>>2]|0;
      $79 = (($78) + 1)|0;
      $80 = $79 & 255;
      HEAP32[$12>>2] = $80;
      $83 = $74;
     } else {
      $83 = $62;
     }
     $81 = HEAP32[$14>>2]|0;
     $82 = (($81) + ($83)|0);
     HEAP8[$82>>0] = 0;
     $$pre$i18 = HEAP32[$10>>2]|0;
     $85 = $$pre$i18;
    } else {
     $85 = $59;
    }
    $84 = ($$01$i17|0)<($85|0);
    $$0$$i19 = $84 ? $$01$i17 : $85;
    $86 = (($$01$i17) - ($$0$$i19))|0;
    $87 = (($85) - ($$0$$i19))|0;
    HEAP32[$10>>2] = $87;
    $88 = 65 >>> $86;
    $89 = $88 << $87;
    $90 = HEAP32[$11>>2]|0;
    $91 = HEAP32[$14>>2]|0;
    $92 = (($91) + ($90)|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = $89 | $94;
    $96 = $95&255;
    HEAP8[$92>>0] = $96;
    $97 = HEAP32[$13>>2]|0;
    $98 = (($97) + ($$0$$i19))|0;
    HEAP32[$13>>2] = $98;
    $99 = ($86|0)>(0);
    if ($99) {
     $$01$i17 = $86;$67 = $98;
    } else {
     $$lcssa43 = $98;
     break;
    }
   }
   $100 = (($remainingBits) + -16)|0;
   $101 = ($100|0)>(7);
   if ($101) {
    $$01$i13 = 8;$110 = $$lcssa43;
    while(1) {
     $102 = HEAP32[$10>>2]|0;
     $103 = ($102|0)==(0);
     if ($103) {
      HEAP32[$10>>2] = 8;
      $104 = HEAP32[$11>>2]|0;
      $105 = (($104) + 1)|0;
      HEAP32[$11>>2] = $105;
      $106 = HEAP32[$12>>2]|0;
      $107 = (((($gfc)) + 39840|0) + (($106*48)|0)|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ($108|0)==($110|0);
      if ($109) {
       $111 = HEAP32[$14>>2]|0;
       $112 = (($111) + ($105)|0);
       $113 = (((((($gfc)) + 39840|0) + (($106*48)|0)|0)) + 8|0);
       $114 = HEAP32[$15>>2]|0;
       _memcpy(($112|0),($113|0),($114|0))|0;
       $115 = HEAP32[$15>>2]|0;
       $116 = HEAP32[$11>>2]|0;
       $117 = (($116) + ($115))|0;
       HEAP32[$11>>2] = $117;
       $118 = $115 << 3;
       $119 = HEAP32[$13>>2]|0;
       $120 = (($119) + ($118))|0;
       HEAP32[$13>>2] = $120;
       $121 = HEAP32[$12>>2]|0;
       $122 = (($121) + 1)|0;
       $123 = $122 & 255;
       HEAP32[$12>>2] = $123;
       $126 = $117;
      } else {
       $126 = $105;
      }
      $124 = HEAP32[$14>>2]|0;
      $125 = (($124) + ($126)|0);
      HEAP8[$125>>0] = 0;
      $$pre$i14 = HEAP32[$10>>2]|0;
      $128 = $$pre$i14;
     } else {
      $128 = $102;
     }
     $127 = ($$01$i13|0)<($128|0);
     $$0$$i15 = $127 ? $$01$i13 : $128;
     $129 = (($$01$i13) - ($$0$$i15))|0;
     $130 = (($128) - ($$0$$i15))|0;
     HEAP32[$10>>2] = $130;
     $131 = 77 >>> $129;
     $132 = $131 << $130;
     $133 = HEAP32[$11>>2]|0;
     $134 = HEAP32[$14>>2]|0;
     $135 = (($134) + ($133)|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136&255;
     $138 = $132 | $137;
     $139 = $138&255;
     HEAP8[$135>>0] = $139;
     $140 = HEAP32[$13>>2]|0;
     $141 = (($140) + ($$0$$i15))|0;
     HEAP32[$13>>2] = $141;
     $142 = ($129|0)>(0);
     if ($142) {
      $$01$i13 = $129;$110 = $141;
     } else {
      $$lcssa42 = $141;
      break;
     }
    }
    $143 = (($remainingBits) + -24)|0;
    $144 = ($143|0)>(7);
    if ($144) {
     $$01$i9 = 8;$153 = $$lcssa42;
     while(1) {
      $145 = HEAP32[$10>>2]|0;
      $146 = ($145|0)==(0);
      if ($146) {
       HEAP32[$10>>2] = 8;
       $147 = HEAP32[$11>>2]|0;
       $148 = (($147) + 1)|0;
       HEAP32[$11>>2] = $148;
       $149 = HEAP32[$12>>2]|0;
       $150 = (((($gfc)) + 39840|0) + (($149*48)|0)|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ($151|0)==($153|0);
       if ($152) {
        $154 = HEAP32[$14>>2]|0;
        $155 = (($154) + ($148)|0);
        $156 = (((((($gfc)) + 39840|0) + (($149*48)|0)|0)) + 8|0);
        $157 = HEAP32[$15>>2]|0;
        _memcpy(($155|0),($156|0),($157|0))|0;
        $158 = HEAP32[$15>>2]|0;
        $159 = HEAP32[$11>>2]|0;
        $160 = (($159) + ($158))|0;
        HEAP32[$11>>2] = $160;
        $161 = $158 << 3;
        $162 = HEAP32[$13>>2]|0;
        $163 = (($162) + ($161))|0;
        HEAP32[$13>>2] = $163;
        $164 = HEAP32[$12>>2]|0;
        $165 = (($164) + 1)|0;
        $166 = $165 & 255;
        HEAP32[$12>>2] = $166;
        $169 = $160;
       } else {
        $169 = $148;
       }
       $167 = HEAP32[$14>>2]|0;
       $168 = (($167) + ($169)|0);
       HEAP8[$168>>0] = 0;
       $$pre$i10 = HEAP32[$10>>2]|0;
       $171 = $$pre$i10;
      } else {
       $171 = $145;
      }
      $170 = ($$01$i9|0)<($171|0);
      $$0$$i11 = $170 ? $$01$i9 : $171;
      $172 = (($$01$i9) - ($$0$$i11))|0;
      $173 = (($171) - ($$0$$i11))|0;
      HEAP32[$10>>2] = $173;
      $174 = 69 >>> $172;
      $175 = $174 << $173;
      $176 = HEAP32[$11>>2]|0;
      $177 = HEAP32[$14>>2]|0;
      $178 = (($177) + ($176)|0);
      $179 = HEAP8[$178>>0]|0;
      $180 = $179&255;
      $181 = $175 | $180;
      $182 = $181&255;
      HEAP8[$178>>0] = $182;
      $183 = HEAP32[$13>>2]|0;
      $184 = (($183) + ($$0$$i11))|0;
      HEAP32[$13>>2] = $184;
      $185 = ($172|0)>(0);
      if ($185) {
       $$01$i9 = $172;$153 = $184;
      } else {
       break;
      }
     }
     $186 = (($remainingBits) + -32)|0;
     $187 = ($186|0)>(31);
     if ($187) {
      $188 = (_get_lame_short_version()|0);
      $189 = (_strlen(($188|0))|0);
      $190 = ($189|0)>(0);
      if ($190) {
       $$428 = $186;$i$027 = 0;
       while(1) {
        $191 = (($188) + ($i$027)|0);
        $192 = HEAP8[$191>>0]|0;
        $193 = $192 << 24 >> 24;
        $$01$i5 = 8;
        while(1) {
         $194 = HEAP32[$10>>2]|0;
         $195 = ($194|0)==(0);
         if ($195) {
          HEAP32[$10>>2] = 8;
          $196 = HEAP32[$11>>2]|0;
          $197 = (($196) + 1)|0;
          HEAP32[$11>>2] = $197;
          $198 = HEAP32[$12>>2]|0;
          $199 = (((($gfc)) + 39840|0) + (($198*48)|0)|0);
          $200 = HEAP32[$199>>2]|0;
          $201 = HEAP32[$13>>2]|0;
          $202 = ($200|0)==($201|0);
          if ($202) {
           $203 = HEAP32[$14>>2]|0;
           $204 = (($203) + ($197)|0);
           $205 = (((((($gfc)) + 39840|0) + (($198*48)|0)|0)) + 8|0);
           $206 = HEAP32[$15>>2]|0;
           _memcpy(($204|0),($205|0),($206|0))|0;
           $207 = HEAP32[$15>>2]|0;
           $208 = HEAP32[$11>>2]|0;
           $209 = (($208) + ($207))|0;
           HEAP32[$11>>2] = $209;
           $210 = $207 << 3;
           $211 = HEAP32[$13>>2]|0;
           $212 = (($211) + ($210))|0;
           HEAP32[$13>>2] = $212;
           $213 = HEAP32[$12>>2]|0;
           $214 = (($213) + 1)|0;
           $215 = $214 & 255;
           HEAP32[$12>>2] = $215;
           $218 = $209;
          } else {
           $218 = $197;
          }
          $216 = HEAP32[$14>>2]|0;
          $217 = (($216) + ($218)|0);
          HEAP8[$217>>0] = 0;
          $$pre$i6 = HEAP32[$10>>2]|0;
          $220 = $$pre$i6;
         } else {
          $220 = $194;
         }
         $219 = ($$01$i5|0)<($220|0);
         $$0$$i7 = $219 ? $$01$i5 : $220;
         $221 = (($$01$i5) - ($$0$$i7))|0;
         $222 = (($220) - ($$0$$i7))|0;
         HEAP32[$10>>2] = $222;
         $223 = $193 >> $221;
         $224 = $223 << $222;
         $225 = HEAP32[$11>>2]|0;
         $226 = HEAP32[$14>>2]|0;
         $227 = (($226) + ($225)|0);
         $228 = HEAP8[$227>>0]|0;
         $229 = $228&255;
         $230 = $224 | $229;
         $231 = $230&255;
         HEAP8[$227>>0] = $231;
         $232 = HEAP32[$13>>2]|0;
         $233 = (($232) + ($$0$$i7))|0;
         HEAP32[$13>>2] = $233;
         $234 = ($221|0)>(0);
         if ($234) {
          $$01$i5 = $221;
         } else {
          break;
         }
        }
        $235 = (($$428) + -8)|0;
        $236 = (($i$027) + 1)|0;
        $237 = (_strlen(($188|0))|0);
        $238 = ($236|0)<($237|0);
        $239 = ($235|0)>(7);
        $240 = $239 & $238;
        if ($240) {
         $$428 = $235;$i$027 = $236;
        } else {
         $$5$ph = $235;
         label = 2;
         break;
        }
       }
      } else {
       $$5$ph30 = $186;
      }
     } else {
      $$5$ph = $186;
      label = 2;
     }
    } else {
     $$5$ph = $143;
     label = 2;
    }
   } else {
    $$5$ph = $100;
    label = 2;
   }
  } else {
   $$5$ph = $57;
   label = 2;
  }
 } else {
  $$5$ph = $remainingBits;
  label = 2;
 }
 if ((label|0) == 2) {
  $1 = ($$5$ph|0)>(0);
  if ($1) {
   $$5$ph30 = $$5$ph;
  } else {
   return;
  }
 }
 $2 = ((($gfc)) + 52136|0);
 $3 = ((($gfc)) + 300|0);
 $4 = ((($gfc)) + 296|0);
 $5 = ((($gfc)) + 52132|0);
 $6 = ((($gfc)) + 292|0);
 $7 = ((($gfc)) + 284|0);
 $8 = ((($gfc)) + 24|0);
 $9 = ((($gfc)) + 144|0);
 $$pre = HEAP32[$2>>2]|0;
 $$526 = $$5$ph30;$271 = $$pre;
 while(1) {
  $$01$i1 = 1;
  while(1) {
   $241 = HEAP32[$3>>2]|0;
   $242 = ($241|0)==(0);
   if ($242) {
    HEAP32[$3>>2] = 8;
    $243 = HEAP32[$4>>2]|0;
    $244 = (($243) + 1)|0;
    HEAP32[$4>>2] = $244;
    $245 = HEAP32[$5>>2]|0;
    $246 = (((($gfc)) + 39840|0) + (($245*48)|0)|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = HEAP32[$6>>2]|0;
    $249 = ($247|0)==($248|0);
    if ($249) {
     $250 = HEAP32[$7>>2]|0;
     $251 = (($250) + ($244)|0);
     $252 = (((((($gfc)) + 39840|0) + (($245*48)|0)|0)) + 8|0);
     $253 = HEAP32[$8>>2]|0;
     _memcpy(($251|0),($252|0),($253|0))|0;
     $254 = HEAP32[$8>>2]|0;
     $255 = HEAP32[$4>>2]|0;
     $256 = (($255) + ($254))|0;
     HEAP32[$4>>2] = $256;
     $257 = $254 << 3;
     $258 = HEAP32[$6>>2]|0;
     $259 = (($258) + ($257))|0;
     HEAP32[$6>>2] = $259;
     $260 = HEAP32[$5>>2]|0;
     $261 = (($260) + 1)|0;
     $262 = $261 & 255;
     HEAP32[$5>>2] = $262;
     $265 = $256;
    } else {
     $265 = $244;
    }
    $263 = HEAP32[$7>>2]|0;
    $264 = (($263) + ($265)|0);
    HEAP8[$264>>0] = 0;
    $$pre$i2 = HEAP32[$3>>2]|0;
    $267 = $$pre$i2;
   } else {
    $267 = $241;
   }
   $266 = ($$01$i1|0)<($267|0);
   $$0$$i3 = $266 ? $$01$i1 : $267;
   $268 = (($$01$i1) - ($$0$$i3))|0;
   $269 = (($267) - ($$0$$i3))|0;
   HEAP32[$3>>2] = $269;
   $270 = $271 >> $268;
   $272 = $270 << $269;
   $273 = HEAP32[$4>>2]|0;
   $274 = HEAP32[$7>>2]|0;
   $275 = (($274) + ($273)|0);
   $276 = HEAP8[$275>>0]|0;
   $277 = $276&255;
   $278 = $272 | $277;
   $279 = $278&255;
   HEAP8[$275>>0] = $279;
   $280 = HEAP32[$6>>2]|0;
   $281 = (($280) + ($$0$$i3))|0;
   HEAP32[$6>>2] = $281;
   $282 = ($268|0)>(0);
   if ($282) {
    $$01$i1 = $268;
   } else {
    break;
   }
  }
  $283 = HEAP32[$9>>2]|0;
  $284 = ($283|0)==(0);
  $285 = $284&1;
  $286 = HEAP32[$2>>2]|0;
  $287 = $285 ^ $286;
  HEAP32[$2>>2] = $287;
  $288 = (($$526) + -1)|0;
  $289 = ($$526|0)>(1);
  if ($289) {
   $$526 = $288;$271 = $287;
  } else {
   break;
  }
 }
 return;
}
function _Huffmancode($gfc,$tableindex,$start,$end,$gi) {
 $gfc = $gfc|0;
 $tableindex = $tableindex|0;
 $start = $start|0;
 $end = $end|0;
 $gi = $gi|0;
 var $$0 = 0, $$0$$i = 0, $$0$$i4 = 0, $$01$i = 0, $$01$i2 = 0, $$pre$i = 0, $$pre$i3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$015 = 0, $cbits$0 = 0, $cbits$1 = 0, $ext$0 = 0, $ext$1 = 0, $ext$2 = 0, $ext$4 = 0;
 var $ext$410 = 0, $ext$5 = 0, $ext$6 = 0, $i$016 = 0, $or$cond = 0, $x1$0 = 0, $x1$1 = 0, $x1$111 = 0, $x1$112 = 0, $x2$113 = 0, $x2$114 = 0, $xbits$0 = 0, $xbits$2 = 0, $xbits$26 = 0, $xbits$27 = 0, $xlen$0 = 0, $xlen$08 = 0, $xlen$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (82272 + ($tableindex<<4)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($tableindex|0)!=(0);
 $3 = ($start|0)<($end|0);
 $or$cond = $2 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ($tableindex>>>0)>(15);
 $5 = $1&65535;
 $6 = (((82272 + ($tableindex<<4)|0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (((82272 + ($tableindex<<4)|0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($gfc)) + 300|0);
 $11 = ((($gfc)) + 296|0);
 $12 = ((($gfc)) + 52132|0);
 $13 = ((($gfc)) + 292|0);
 $14 = ((($gfc)) + 284|0);
 $15 = ((($gfc)) + 24|0);
 $bits$015 = 0;$i$016 = $start;
 while(1) {
  $16 = (((($gi)) + 2304|0) + ($i$016<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($i$016) + 1)|0;
  $19 = (((($gi)) + 2304|0) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)==(0);
  if ($21) {
   $cbits$0 = 0;$ext$1 = 0;
  } else {
   $22 = (($gi) + ($i$016<<2)|0);
   $23 = +HEAPF32[$22>>2];
   $24 = $23 < 0.0;
   $ext$0 = $24&1;
   $cbits$0 = -1;$ext$1 = $ext$0;
  }
  if ($4) {
   $25 = ($17>>>0)>(14);
   if ($25) {
    $26 = $17 << 1;
    $27 = (($26) + 131042)|0;
    $28 = $27 & 131070;
    $29 = $ext$1 | $28;
    $ext$2 = $29;$x1$0 = 15;$xbits$0 = $5;
   } else {
    $ext$2 = $ext$1;$x1$0 = $17;$xbits$0 = 0;
   }
   $30 = ($20>>>0)>(14);
   if ($30) {
    $31 = (($20) + 65521)|0;
    $32 = $ext$2 << $1;
    $33 = $31 & 65535;
    $34 = $32 | $33;
    $35 = $xbits$0&65535;
    $36 = (($35) + ($1))|0;
    $37 = $36&65535;
    $ext$410 = $34;$x1$111 = $x1$0;$x2$113 = 15;$xbits$26 = $37;$xlen$08 = 16;
    label = 11;
   } else {
    $ext$4 = $ext$2;$x1$1 = $x1$0;$xbits$2 = $xbits$0;$xlen$0 = 16;
    label = 10;
   }
  } else {
   $ext$4 = $ext$1;$x1$1 = $17;$xbits$2 = 0;$xlen$0 = $1;
   label = 10;
  }
  if ((label|0) == 10) {
   label = 0;
   $38 = ($20|0)==(0);
   if ($38) {
    $cbits$1 = $cbits$0;$ext$6 = $ext$4;$x1$112 = $x1$1;$x2$114 = 0;$xbits$27 = $xbits$2;$xlen$09 = $xlen$0;
   } else {
    $ext$410 = $ext$4;$x1$111 = $x1$1;$x2$113 = $20;$xbits$26 = $xbits$2;$xlen$08 = $xlen$0;
    label = 11;
   }
  }
  if ((label|0) == 11) {
   label = 0;
   $39 = $ext$410 << 1;
   $40 = (($gi) + ($18<<2)|0);
   $41 = +HEAPF32[$40>>2];
   $42 = $41 < 0.0;
   $43 = $42&1;
   $ext$5 = $43 | $39;
   $44 = (($cbits$0) + -1)<<16>>16;
   $cbits$1 = $44;$ext$6 = $ext$5;$x1$112 = $x1$111;$x2$114 = $x2$113;$xbits$27 = $xbits$26;$xlen$09 = $xlen$08;
  }
  $45 = Math_imul($xlen$09, $x1$112)|0;
  $46 = (($45) + ($x2$114))|0;
  $47 = $cbits$1 << 16 >> 16;
  $48 = $xbits$27&65535;
  $49 = (($48) - ($47))|0;
  $50 = (($7) + ($46)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (($52) + ($47))|0;
  $54 = (($9) + ($46<<1)|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $57 = ($53|0)>(0);
  if ($57) {
   $$01$i = $53;
   while(1) {
    $58 = HEAP32[$10>>2]|0;
    $59 = ($58|0)==(0);
    if ($59) {
     HEAP32[$10>>2] = 8;
     $60 = HEAP32[$11>>2]|0;
     $61 = (($60) + 1)|0;
     HEAP32[$11>>2] = $61;
     $62 = HEAP32[$12>>2]|0;
     $63 = (((($gfc)) + 39840|0) + (($62*48)|0)|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = HEAP32[$13>>2]|0;
     $66 = ($64|0)==($65|0);
     if ($66) {
      $67 = HEAP32[$14>>2]|0;
      $68 = (($67) + ($61)|0);
      $69 = (((((($gfc)) + 39840|0) + (($62*48)|0)|0)) + 8|0);
      $70 = HEAP32[$15>>2]|0;
      _memcpy(($68|0),($69|0),($70|0))|0;
      $71 = HEAP32[$15>>2]|0;
      $72 = HEAP32[$11>>2]|0;
      $73 = (($72) + ($71))|0;
      HEAP32[$11>>2] = $73;
      $74 = $71 << 3;
      $75 = HEAP32[$13>>2]|0;
      $76 = (($75) + ($74))|0;
      HEAP32[$13>>2] = $76;
      $77 = HEAP32[$12>>2]|0;
      $78 = (($77) + 1)|0;
      $79 = $78 & 255;
      HEAP32[$12>>2] = $79;
      $82 = $73;
     } else {
      $82 = $61;
     }
     $80 = HEAP32[$14>>2]|0;
     $81 = (($80) + ($82)|0);
     HEAP8[$81>>0] = 0;
     $$pre$i = HEAP32[$10>>2]|0;
     $84 = $$pre$i;
    } else {
     $84 = $58;
    }
    $83 = ($$01$i|0)<($84|0);
    $$0$$i = $83 ? $$01$i : $84;
    $85 = (($$01$i) - ($$0$$i))|0;
    $86 = (($84) - ($$0$$i))|0;
    HEAP32[$10>>2] = $86;
    $87 = $56 >>> $85;
    $88 = $87 << $86;
    $89 = HEAP32[$11>>2]|0;
    $90 = HEAP32[$14>>2]|0;
    $91 = (($90) + ($89)|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $94 = $88 | $93;
    $95 = $94&255;
    HEAP8[$91>>0] = $95;
    $96 = HEAP32[$13>>2]|0;
    $97 = (($96) + ($$0$$i))|0;
    HEAP32[$13>>2] = $97;
    $98 = ($85|0)>(0);
    if ($98) {
     $$01$i = $85;
    } else {
     break;
    }
   }
  }
  $99 = $49 & 65535;
  $100 = ($99|0)==(0);
  if (!($100)) {
   $$01$i2 = $99;
   while(1) {
    $101 = HEAP32[$10>>2]|0;
    $102 = ($101|0)==(0);
    if ($102) {
     HEAP32[$10>>2] = 8;
     $103 = HEAP32[$11>>2]|0;
     $104 = (($103) + 1)|0;
     HEAP32[$11>>2] = $104;
     $105 = HEAP32[$12>>2]|0;
     $106 = (((($gfc)) + 39840|0) + (($105*48)|0)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = HEAP32[$13>>2]|0;
     $109 = ($107|0)==($108|0);
     if ($109) {
      $110 = HEAP32[$14>>2]|0;
      $111 = (($110) + ($104)|0);
      $112 = (((((($gfc)) + 39840|0) + (($105*48)|0)|0)) + 8|0);
      $113 = HEAP32[$15>>2]|0;
      _memcpy(($111|0),($112|0),($113|0))|0;
      $114 = HEAP32[$15>>2]|0;
      $115 = HEAP32[$11>>2]|0;
      $116 = (($115) + ($114))|0;
      HEAP32[$11>>2] = $116;
      $117 = $114 << 3;
      $118 = HEAP32[$13>>2]|0;
      $119 = (($118) + ($117))|0;
      HEAP32[$13>>2] = $119;
      $120 = HEAP32[$12>>2]|0;
      $121 = (($120) + 1)|0;
      $122 = $121 & 255;
      HEAP32[$12>>2] = $122;
      $125 = $116;
     } else {
      $125 = $104;
     }
     $123 = HEAP32[$14>>2]|0;
     $124 = (($123) + ($125)|0);
     HEAP8[$124>>0] = 0;
     $$pre$i3 = HEAP32[$10>>2]|0;
     $127 = $$pre$i3;
    } else {
     $127 = $101;
    }
    $126 = ($$01$i2|0)<($127|0);
    $$0$$i4 = $126 ? $$01$i2 : $127;
    $128 = (($$01$i2) - ($$0$$i4))|0;
    $129 = (($127) - ($$0$$i4))|0;
    HEAP32[$10>>2] = $129;
    $130 = $ext$6 >> $128;
    $131 = $130 << $129;
    $132 = HEAP32[$11>>2]|0;
    $133 = HEAP32[$14>>2]|0;
    $134 = (($133) + ($132)|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = $131 | $136;
    $138 = $137&255;
    HEAP8[$134>>0] = $138;
    $139 = HEAP32[$13>>2]|0;
    $140 = (($139) + ($$0$$i4))|0;
    HEAP32[$13>>2] = $140;
    $141 = ($128|0)>(0);
    if ($141) {
     $$01$i2 = $128;
    } else {
     break;
    }
   }
  }
  $142 = (($99) + ($bits$015))|0;
  $143 = (($142) + ($53))|0;
  $144 = (($i$016) + 2)|0;
  $145 = ($144|0)<($end|0);
  if ($145) {
   $bits$015 = $143;$i$016 = $144;
  } else {
   $$0 = $143;
   break;
  }
 }
 return ($$0|0);
}
function _huffman_coder_count1($gfc,$gi) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 var $$0$$i = 0, $$01$i = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$0$lcssa = 0, $bits$02 = 0, $huffbits$0 = 0, $huffbits$1 = 0, $huffbits$2 = 0, $huffbits$3 = 0, $i$01 = 0;
 var $ix$03 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$3 = 0, $xr$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gi)) + 4840|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 32)|0;
 $3 = ((($gi)) + 4772|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($gi)) + 4776|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($4))|0;
 $8 = ($7|0)>(3);
 if (!($8)) {
  $bits$0$lcssa = 0;
  return ($bits$0$lcssa|0);
 }
 $9 = (($7|0) / 4)&-1;
 $10 = (($gi) + ($4<<2)|0);
 $11 = (((($gi)) + 2304|0) + ($4<<2)|0);
 $12 = (((82272 + ($2<<4)|0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (((82272 + ($2<<4)|0)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($gfc)) + 300|0);
 $17 = ((($gfc)) + 296|0);
 $18 = ((($gfc)) + 52132|0);
 $19 = ((($gfc)) + 292|0);
 $20 = ((($gfc)) + 284|0);
 $21 = ((($gfc)) + 24|0);
 $bits$02 = 0;$i$01 = $9;$ix$03 = $11;$xr$04 = $10;
 while(1) {
  $22 = HEAP32[$ix$03>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $huffbits$0 = 0;$p$0 = 0;
  } else {
   $24 = +HEAPF32[$xr$04>>2];
   $25 = $24 < 0.0;
   if ($25) {
    $huffbits$0 = 1;$p$0 = 8;
   } else {
    $huffbits$0 = 0;$p$0 = 8;
   }
  }
  $26 = ((($ix$03)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  if ($28) {
   $huffbits$1 = $huffbits$0;$p$1 = $p$0;
  } else {
   $29 = $p$0 | 4;
   $30 = $huffbits$0 << 1;
   $31 = ((($xr$04)) + 4|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $32 < 0.0;
   if ($33) {
    $34 = $30 | 1;
    $huffbits$1 = $34;$p$1 = $29;
   } else {
    $huffbits$1 = $30;$p$1 = $29;
   }
  }
  $35 = ((($ix$03)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0);
  if ($37) {
   $huffbits$2 = $huffbits$1;$p$2 = $p$1;
  } else {
   $38 = (($p$1) + 2)|0;
   $39 = $huffbits$1 << 1;
   $40 = ((($xr$04)) + 8|0);
   $41 = +HEAPF32[$40>>2];
   $42 = $41 < 0.0;
   if ($42) {
    $43 = $39 | 1;
    $huffbits$2 = $43;$p$2 = $38;
   } else {
    $huffbits$2 = $39;$p$2 = $38;
   }
  }
  $44 = ((($ix$03)) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0);
  if ($46) {
   $huffbits$3 = $huffbits$2;$p$3 = $p$2;
  } else {
   $47 = (($p$2) + 1)|0;
   $48 = $huffbits$2 << 1;
   $49 = ((($xr$04)) + 12|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $50 < 0.0;
   if ($51) {
    $52 = $48 | 1;
    $huffbits$3 = $52;$p$3 = $47;
   } else {
    $huffbits$3 = $48;$p$3 = $47;
   }
  }
  $53 = ((($ix$03)) + 16|0);
  $54 = ((($xr$04)) + 16|0);
  $55 = (($13) + ($p$3<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&65535;
  $58 = (($57) + ($huffbits$3))|0;
  $59 = (($15) + ($p$3)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = ($60<<24>>24)==(0);
  if ($61) {
   $105 = 0;
  } else {
   $62 = $60&255;
   $$01$i = $62;
   while(1) {
    $63 = HEAP32[$16>>2]|0;
    $64 = ($63|0)==(0);
    if ($64) {
     HEAP32[$16>>2] = 8;
     $65 = HEAP32[$17>>2]|0;
     $66 = (($65) + 1)|0;
     HEAP32[$17>>2] = $66;
     $67 = HEAP32[$18>>2]|0;
     $68 = (((($gfc)) + 39840|0) + (($67*48)|0)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = HEAP32[$19>>2]|0;
     $71 = ($69|0)==($70|0);
     if ($71) {
      $72 = HEAP32[$20>>2]|0;
      $73 = (($72) + ($66)|0);
      $74 = (((((($gfc)) + 39840|0) + (($67*48)|0)|0)) + 8|0);
      $75 = HEAP32[$21>>2]|0;
      _memcpy(($73|0),($74|0),($75|0))|0;
      $76 = HEAP32[$21>>2]|0;
      $77 = HEAP32[$17>>2]|0;
      $78 = (($77) + ($76))|0;
      HEAP32[$17>>2] = $78;
      $79 = $76 << 3;
      $80 = HEAP32[$19>>2]|0;
      $81 = (($80) + ($79))|0;
      HEAP32[$19>>2] = $81;
      $82 = HEAP32[$18>>2]|0;
      $83 = (($82) + 1)|0;
      $84 = $83 & 255;
      HEAP32[$18>>2] = $84;
      $87 = $78;
     } else {
      $87 = $66;
     }
     $85 = HEAP32[$20>>2]|0;
     $86 = (($85) + ($87)|0);
     HEAP8[$86>>0] = 0;
     $$pre$i = HEAP32[$16>>2]|0;
     $89 = $$pre$i;
    } else {
     $89 = $63;
    }
    $88 = ($$01$i|0)<($89|0);
    $$0$$i = $88 ? $$01$i : $89;
    $90 = (($$01$i) - ($$0$$i))|0;
    $91 = (($89) - ($$0$$i))|0;
    HEAP32[$16>>2] = $91;
    $92 = $58 >> $90;
    $93 = $92 << $91;
    $94 = HEAP32[$17>>2]|0;
    $95 = HEAP32[$20>>2]|0;
    $96 = (($95) + ($94)|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = $93 | $98;
    $100 = $99&255;
    HEAP8[$96>>0] = $100;
    $101 = HEAP32[$19>>2]|0;
    $102 = (($101) + ($$0$$i))|0;
    HEAP32[$19>>2] = $102;
    $103 = ($90|0)>(0);
    if ($103) {
     $$01$i = $90;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$59>>0]|0;
   $105 = $$pre;
  }
  $104 = $105&255;
  $106 = (($104) + ($bits$02))|0;
  $107 = (($i$01) + -1)|0;
  $108 = ($i$01|0)>(1);
  if ($108) {
   $bits$02 = $106;$i$01 = $107;$ix$03 = $53;$xr$04 = $54;
  } else {
   $bits$0$lcssa = $106;
   break;
  }
 }
 return ($bits$0$lcssa|0);
}
function _lame_encode_mp3_frame($gfc,$inbuf_l,$inbuf_r,$mp3buf,$mp3buf_size) {
 $gfc = $gfc|0;
 $inbuf_l = $inbuf_l|0;
 $inbuf_r = $inbuf_r|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $$$i = 0, $$0 = 0, $$lcssa = 0, $$lcssa116 = 0.0, $$lcssa117 = 0, $$lcssa118 = 0.0, $$lcssa118$lcssa = 0.0, $$lcssa119 = 0.0, $$lcssa119$lcssa = 0.0, $$lcssa121 = 0, $$pn$i = 0.0, $$pn1$i = 0.0, $$pre = 0, $$pre$i = 0, $$pre$i2 = 0, $$pre$i4 = 0, $$pre$phi$iZ2D = 0, $$pre10$i = 0, $$pre6$i = 0, $$pre92 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $blocktype = 0, $bufp = 0, $ch$02$i = 0, $ch$02$i8 = 0, $ch$069 = 0, $ch$173 = 0, $ch$254$us = 0, $ch$349 = 0, $ch$439$us = 0, $ch$533$us = 0, $ch$632 = 0, $exitcond = 0, $exitcond86 = 0, $exitcond91 = 0, $f$0$lcssa = 0.0, $f$045$us = 0.0, $f$140$us = 0.0, $gr$03$i = 0, $gr$03$i6 = 0;
 var $gr$076 = 0, $gr$161$us = 0, $gr$252 = 0, $gr$343$us = 0, $gr$435$us = 0, $gr2_max$0$i = 0.0, $i$06$i = 0, $inbuf = 0, $j$030 = 0, $j$07$i = 0, $j$1$i = 0, $j$131 = 0, $masking_LR = 0, $masking_MS = 0, $masking_MS$sink = 0, $max_pow$0$i = 0.0, $max_pow$1$i = 0.0, $ms_ener_ratio = 0, $or$cond = 0, $or$cond101 = 0;
 var $pe = 0, $pe_MS = 0, $primebuff0$i = 0, $primebuff1$i = 0, $sum_pe_LR$064$us = 0.0, $sum_pe_LR$156$us = 0.0, $sum_pe_MS$063$us = 0.0, $sum_pe_MS$155$us = 0.0, $tot_ener = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 20112|0;
 $primebuff0$i = sp + 12056|0;
 $primebuff1$i = sp + 4000|0;
 $masking_LR = sp + 2048|0;
 $masking_MS = sp + 96|0;
 $inbuf = sp + 88|0;
 $tot_ener = sp + 56|0;
 $ms_ener_ratio = sp + 8|0;
 $pe = sp + 40|0;
 $pe_MS = sp + 24|0;
 $bufp = sp;
 $blocktype = sp + 16|0;
 $0 = $ms_ener_ratio;
 $1 = $0;
 HEAP32[$1>>2] = 1056964608;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 1056964608;
 ;HEAP32[$pe>>2]=0|0;HEAP32[$pe+4>>2]=0|0;HEAP32[$pe+8>>2]=0|0;HEAP32[$pe+12>>2]=0|0;
 ;HEAP32[$pe_MS>>2]=0|0;HEAP32[$pe_MS+4>>2]=0|0;HEAP32[$pe_MS+8>>2]=0|0;HEAP32[$pe_MS+12>>2]=0|0;
 HEAP32[$inbuf>>2] = $inbuf_l;
 $4 = ((($inbuf)) + 4|0);
 HEAP32[$4>>2] = $inbuf_r;
 $5 = ((($gfc)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($gfc)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9*576)|0;
  HEAP32[$5>>2] = 1;
  _memset(($primebuff0$i|0),0,8056)|0;
  _memset(($primebuff1$i|0),0,8056)|0;
  $11 = (($10) + 862)|0;
  $12 = ($11|0)>(0);
  if ($12) {
   $13 = ((($gfc)) + 72|0);
   $i$06$i = 0;$j$07$i = 0;
   while(1) {
    $16 = ($i$06$i|0)<($10|0);
    if ($16) {
     $17 = (($primebuff0$i) + ($i$06$i<<2)|0);
     HEAPF32[$17>>2] = 0.0;
     $18 = HEAP32[$13>>2]|0;
     $19 = ($18|0)==(2);
     if ($19) {
      $20 = (($primebuff1$i) + ($i$06$i<<2)|0);
      HEAPF32[$20>>2] = 0.0;
      $j$1$i = $j$07$i;
     } else {
      $j$1$i = $j$07$i;
     }
    } else {
     $21 = (($inbuf_l) + ($j$07$i<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($primebuff0$i) + ($i$06$i<<2)|0);
     HEAP32[$23>>2] = $22;
     $24 = HEAP32[$13>>2]|0;
     $25 = ($24|0)==(2);
     if ($25) {
      $26 = (($inbuf_r) + ($j$07$i<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = (($primebuff1$i) + ($i$06$i<<2)|0);
      HEAP32[$28>>2] = $27;
     }
     $29 = (($j$07$i) + 1)|0;
     $j$1$i = $29;
    }
    $30 = (($i$06$i) + 1)|0;
    $exitcond91 = ($30|0)==($11|0);
    if ($exitcond91) {
     break;
    } else {
     $i$06$i = $30;$j$07$i = $j$1$i;
    }
   }
  }
  $14 = ($9|0)>(0);
  if ($14) {
   $15 = ((($gfc)) + 72|0);
   $$pre$i = HEAP32[$15>>2]|0;
   $31 = $$pre$i;$415 = $9;$gr$03$i = 0;
   while(1) {
    $32 = ($31|0)>(0);
    if ($32) {
     $ch$02$i = 0;
     while(1) {
      $33 = ((((((($gfc)) + 304|0) + (($gr$03$i*10504)|0)|0) + (($ch$02$i*5252)|0)|0)) + 4788|0);
      HEAP32[$33>>2] = 2;
      $34 = (($ch$02$i) + 1)|0;
      $35 = HEAP32[$15>>2]|0;
      $36 = ($34|0)<($35|0);
      if ($36) {
       $ch$02$i = $34;
      } else {
       $$lcssa121 = $35;
       break;
      }
     }
     $$pre10$i = HEAP32[$8>>2]|0;
     $39 = $$pre10$i;$416 = $$lcssa121;
    } else {
     $39 = $415;$416 = $31;
    }
    $37 = (($gr$03$i) + 1)|0;
    $38 = ($37|0)<($39|0);
    if ($38) {
     $31 = $416;$415 = $39;$gr$03$i = $37;
    } else {
     break;
    }
   }
  }
  _mdct_sub48($gfc,$primebuff0$i,$primebuff1$i);
 }
 $40 = ((($gfc)) + 84752|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($gfc)) + 39832|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($gfc)) + 39836|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - ($42))|0;
 HEAP32[$43>>2] = $45;
 $46 = ($45|0)<(0);
 if ($46) {
  $47 = ((($gfc)) + 64|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($45))|0;
  HEAP32[$43>>2] = $49;
  HEAP32[$40>>2] = 1;
 }
 $50 = $bufp;
 $51 = $50;
 HEAP32[$51>>2] = 0;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = 0;
 $54 = ((($gfc)) + 76|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)>(0);
 L30: do {
  if ($56) {
   $57 = ((($gfc)) + 72|0);
   $58 = ((($gfc)) + 180|0);
   $gr$076 = 0;
   while(1) {
    $59 = HEAP32[$57>>2]|0;
    $60 = ($59|0)>(0);
    if ($60) {
     $61 = ($gr$076*576)|0;
     $62 = (($61) + 304)|0;
     $ch$069 = 0;
     while(1) {
      $63 = (($inbuf) + ($ch$069<<2)|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = (($64) + ($62<<2)|0);
      $66 = (($bufp) + ($ch$069<<2)|0);
      HEAP32[$66>>2] = $65;
      $67 = (($ch$069) + 1)|0;
      $68 = ($67|0)<($59|0);
      if ($68) {
       $ch$069 = $67;
      } else {
       break;
      }
     }
    }
    $69 = (($pe) + ($gr$076<<3)|0);
    $70 = (($pe_MS) + ($gr$076<<3)|0);
    $71 = (($tot_ener) + ($gr$076<<4)|0);
    $72 = (_L3psycho_anal_vbr($gfc,$bufp,$gr$076,$masking_LR,$masking_MS,$69,$70,$71,$blocktype)|0);
    $73 = ($72|0)==(0);
    if (!($73)) {
     $$0 = -4;
     break;
    }
    $74 = HEAP32[$58>>2]|0;
    $75 = ($74|0)==(1);
    if ($75) {
     $76 = (((($tot_ener) + ($gr$076<<4)|0)) + 8|0);
     $77 = +HEAPF32[$76>>2];
     $78 = (((($tot_ener) + ($gr$076<<4)|0)) + 12|0);
     $79 = +HEAPF32[$78>>2];
     $80 = $79 + $77;
     $81 = (($ms_ener_ratio) + ($gr$076<<2)|0);
     HEAPF32[$81>>2] = $80;
     $82 = $80 > 0.0;
     if ($82) {
      $83 = $79 / $80;
      HEAPF32[$81>>2] = $83;
     }
    }
    $84 = HEAP32[$57>>2]|0;
    $85 = ($84|0)>(0);
    if ($85) {
     $ch$173 = 0;
     while(1) {
      $86 = (($blocktype) + ($ch$173<<2)|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ((((((($gfc)) + 304|0) + (($gr$076*10504)|0)|0) + (($ch$173*5252)|0)|0)) + 4788|0);
      HEAP32[$88>>2] = $87;
      $89 = ((((((($gfc)) + 304|0) + (($gr$076*10504)|0)|0) + (($ch$173*5252)|0)|0)) + 4792|0);
      HEAP32[$89>>2] = 0;
      $90 = (($ch$173) + 1)|0;
      $91 = ($90|0)<($84|0);
      if ($91) {
       $ch$173 = $90;
      } else {
       break;
      }
     }
    }
    $92 = (($gr$076) + 1)|0;
    $93 = HEAP32[$54>>2]|0;
    $94 = ($92|0)<($93|0);
    if ($94) {
     $gr$076 = $92;
    } else {
     $111 = $93;
     break L30;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $111 = $55;
  }
 } while(0);
 $95 = ((($gfc)) + 85796|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)==(0);
 do {
  if ($98) {
   $99 = ((($96)) + 8|0);
   HEAPF32[$99>>2] = 1.0;
  } else {
   $100 = ((($gfc)) + 27804|0);
   $101 = +HEAPF32[$100>>2];
   $102 = ((($gfc)) + 27812|0);
   $103 = +HEAPF32[$102>>2];
   $104 = ((($gfc)) + 72|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($105|0)==(2);
   if ($106) {
    $107 = ((($gfc)) + 27808|0);
    $108 = +HEAPF32[$107>>2];
    $109 = ((($gfc)) + 27816|0);
    $110 = +HEAPF32[$109>>2];
    $$pn$i = $108;$$pn1$i = $110;
   } else {
    $$pn$i = $101;$$pn1$i = $103;
   }
   $gr2_max$0$i = $103 + $$pn1$i;
   $max_pow$0$i = $101 + $$pn$i;
   $112 = ($111|0)==(2);
   $113 = $max_pow$0$i > $gr2_max$0$i;
   $114 = $113 ? $max_pow$0$i : $gr2_max$0$i;
   $max_pow$1$i = $112 ? $114 : $max_pow$0$i;
   $115 = ((($96)) + 4|0);
   $116 = +HEAPF32[$115>>2];
   $117 = $116 * 0.5;
   $118 = $117 * $max_pow$1$i;
   $119 = $118 > 0.03125;
   if ($119) {
    $120 = ((($96)) + 8|0);
    $121 = +HEAPF32[$120>>2];
    $122 = !($121 >= 1.0);
    if ($122) {
     $123 = ((($96)) + 12|0);
     $124 = +HEAPF32[$123>>2];
     $125 = $121 < $124;
     if ($125) {
      HEAPF32[$120>>2] = $124;
      $$pre$phi$iZ2D = $123;
     } else {
      $$pre$phi$iZ2D = $123;
     }
    } else {
     HEAPF32[$120>>2] = 1.0;
     $$pre$i2 = ((($96)) + 12|0);
     $$pre$phi$iZ2D = $$pre$i2;
    }
    HEAPF32[$$pre$phi$iZ2D>>2] = 1.0;
    break;
   }
   $126 = $118;
   $127 = $126 * 31.98;
   $128 = $127 + 6.2500000000000001E-4;
   $129 = $128;
   $130 = ((($96)) + 8|0);
   $131 = +HEAPF32[$130>>2];
   $132 = !($131 >= $129);
   do {
    if ($132) {
     $140 = ((($96)) + 12|0);
     $141 = +HEAPF32[$140>>2];
     $142 = !($141 >= $129);
     if (!($142)) {
      HEAPF32[$130>>2] = $129;
      break;
     }
     $143 = $131 < $141;
     if ($143) {
      HEAPF32[$130>>2] = $141;
     }
    } else {
     $133 = $129;
     $134 = $133 * 0.074999999999999997;
     $135 = $134 + 0.92500000000000004;
     $136 = $131;
     $137 = $136 * $135;
     $138 = $137;
     HEAPF32[$130>>2] = $138;
     $139 = $138 < $129;
     if ($139) {
      HEAPF32[$130>>2] = $129;
     }
    }
   } while(0);
   $144 = ((($96)) + 12|0);
   HEAPF32[$144>>2] = $129;
  }
 } while(0);
 $145 = HEAP32[$inbuf>>2]|0;
 _mdct_sub48($gfc,$145,$inbuf_r);
 $146 = ((($gfc)) + 84756|0);
 HEAP32[$146>>2] = 0;
 $147 = ((($gfc)) + 80|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)==(0);
 do {
  if ($149) {
   $150 = ((($gfc)) + 180|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = ($151|0)==(1);
   if ($152) {
    $153 = HEAP32[$54>>2]|0;
    $154 = ($153|0)>(0);
    if ($154) {
     $155 = ((($gfc)) + 72|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)>(0);
     if ($157) {
      $gr$161$us = 0;$sum_pe_LR$064$us = 0.0;$sum_pe_MS$063$us = 0.0;
      while(1) {
       $ch$254$us = 0;$sum_pe_LR$156$us = $sum_pe_LR$064$us;$sum_pe_MS$155$us = $sum_pe_MS$063$us;
       while(1) {
        $160 = ((($pe_MS) + ($gr$161$us<<3)|0) + ($ch$254$us<<2)|0);
        $161 = +HEAPF32[$160>>2];
        $162 = $161 + $sum_pe_MS$155$us;
        $163 = ((($pe) + ($gr$161$us<<3)|0) + ($ch$254$us<<2)|0);
        $164 = +HEAPF32[$163>>2];
        $165 = $164 + $sum_pe_LR$156$us;
        $166 = (($ch$254$us) + 1)|0;
        $167 = ($166|0)<($156|0);
        if ($167) {
         $ch$254$us = $166;$sum_pe_LR$156$us = $165;$sum_pe_MS$155$us = $162;
        } else {
         $$lcssa118 = $162;$$lcssa119 = $165;
         break;
        }
       }
       $158 = (($gr$161$us) + 1)|0;
       $159 = ($158|0)<($153|0);
       if ($159) {
        $gr$161$us = $158;$sum_pe_LR$064$us = $$lcssa119;$sum_pe_MS$063$us = $$lcssa118;
       } else {
        $$lcssa118$lcssa = $$lcssa118;$$lcssa119$lcssa = $$lcssa119;
        break;
       }
      }
      $168 = !($$lcssa118$lcssa <= $$lcssa119$lcssa);
      if ($168) {
       $180 = 0;
       break;
      }
     }
    }
    $169 = (($153) + -1)|0;
    $170 = ((($gfc)) + 5092|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ((($gfc)) + 10344|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = ($171|0)==($173|0);
    if ($174) {
     $175 = (((((($gfc)) + 304|0) + (($169*10504)|0)|0)) + 4788|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (((((($gfc)) + 304|0) + (($169*10504)|0)|0)) + 10040|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ($176|0)==($178|0);
     if ($179) {
      HEAP32[$146>>2] = 2;
      $180 = 1;
     } else {
      $180 = 0;
     }
    } else {
     $180 = 0;
    }
   } else {
    $180 = 0;
   }
  } else {
   HEAP32[$146>>2] = 2;
   $180 = 1;
  }
 } while(0);
 $masking_MS$sink = $180 ? $masking_MS : $masking_LR;
 $181 = $180 ? $pe_MS : $pe;
 $182 = ((($gfc)) + 140|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = ($183|0)==(0);
 if (!($184)) {
  $185 = ((($gfc)) + 85804|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ($186|0)==(0|0);
  if (!($187)) {
   $188 = HEAP32[$54>>2]|0;
   $189 = ($188|0)>(0);
   if ($189) {
    $190 = ((($gfc)) + 72|0);
    $$pre = HEAP32[$190>>2]|0;
    $191 = $$pre;$417 = $188;$gr$252 = 0;
    while(1) {
     $192 = ($191|0)>(0);
     if ($192) {
      $193 = (($ms_ener_ratio) + ($gr$252<<2)|0);
      $194 = +HEAPF32[$193>>2];
      $195 = $194;
      $ch$349 = 0;
      while(1) {
       $196 = HEAP32[$185>>2]|0;
       $197 = (((($196)) + 90904|0) + ($gr$252<<3)|0);
       HEAPF64[$197>>3] = 0.0;
       $198 = (((($196)) + 90920|0) + ($gr$252<<3)|0);
       HEAPF64[$198>>3] = $195;
       $199 = ((((((($gfc)) + 304|0) + (($gr$252*10504)|0)|0) + (($ch$349*5252)|0)|0)) + 4788|0);
       $200 = HEAP32[$199>>2]|0;
       $201 = ((((($196)) + 203288|0) + ($gr$252<<3)|0) + ($ch$349<<2)|0);
       HEAP32[$201>>2] = $200;
       $202 = ((($181) + ($gr$252<<3)|0) + ($ch$349<<2)|0);
       $203 = +HEAPF32[$202>>2];
       $204 = $203;
       $205 = ((((($196)) + 189240|0) + ($gr$252<<5)|0) + ($ch$349<<3)|0);
       HEAPF64[$205>>3] = $204;
       $206 = ((((($196)) + 54040|0) + (($gr$252*9216)|0)|0) + (($ch$349*4608)|0)|0);
       $207 = ((((($gfc)) + 304|0) + (($gr$252*10504)|0)|0) + (($ch$349*5252)|0)|0);
       _memcpy(($206|0),($207|0),2304)|0;
       $208 = HEAP32[$146>>2]|0;
       $209 = ($208|0)==(2);
       if ($209) {
        $210 = (($ch$349) + 2)|0;
        $211 = HEAP32[$185>>2]|0;
        $212 = ((((($211)) + 197144|0) + ($gr$252<<5)|0) + ($210<<3)|0);
        $213 = +HEAPF64[$212>>3];
        $214 = ((((($211)) + 197144|0) + ($gr$252<<5)|0) + ($ch$349<<3)|0);
        HEAPF64[$214>>3] = $213;
        $215 = ((((($211)) + 123704|0) + ($gr$252<<15)|0) + ($ch$349<<13)|0);
        $216 = ((((($211)) + 123704|0) + ($gr$252<<15)|0) + ($210<<13)|0);
        _memcpy(($215|0),($216|0),8192)|0;
       }
       $217 = (($ch$349) + 1)|0;
       $218 = HEAP32[$190>>2]|0;
       $219 = ($217|0)<($218|0);
       if ($219) {
        $ch$349 = $217;
       } else {
        $$lcssa117 = $218;
        break;
       }
      }
      $$pre92 = HEAP32[$54>>2]|0;
      $222 = $$pre92;$418 = $$lcssa117;
     } else {
      $222 = $417;$418 = $191;
     }
     $220 = (($gr$252) + 1)|0;
     $221 = ($220|0)<($222|0);
     if ($221) {
      $191 = $418;$417 = $222;$gr$252 = $220;
     } else {
      break;
     }
    }
   }
  }
 }
 $223 = ((($gfc)) + 104|0);
 $224 = HEAP32[$223>>2]|0;
 if ((($224|0) == 3) | (($224|0) == 0)) {
  $225 = ((($gfc)) + 39760|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = ((($gfc)) + 39756|0);
  HEAP32[$227>>2] = $226;
  $228 = ((($gfc)) + 39764|0);
  $229 = HEAP32[$228>>2]|0;
  HEAP32[$225>>2] = $229;
  $230 = ((($gfc)) + 39768|0);
  $231 = HEAP32[$230>>2]|0;
  HEAP32[$228>>2] = $231;
  $232 = ((($gfc)) + 39772|0);
  $233 = HEAP32[$232>>2]|0;
  HEAP32[$230>>2] = $233;
  $234 = ((($gfc)) + 39776|0);
  $235 = HEAP32[$234>>2]|0;
  HEAP32[$232>>2] = $235;
  $236 = ((($gfc)) + 39780|0);
  $237 = HEAP32[$236>>2]|0;
  HEAP32[$234>>2] = $237;
  $238 = ((($gfc)) + 39784|0);
  $239 = HEAP32[$238>>2]|0;
  HEAP32[$236>>2] = $239;
  $240 = ((($gfc)) + 39788|0);
  $241 = HEAP32[$240>>2]|0;
  HEAP32[$238>>2] = $241;
  $242 = ((($gfc)) + 39792|0);
  $243 = HEAP32[$242>>2]|0;
  HEAP32[$240>>2] = $243;
  $244 = ((($gfc)) + 39796|0);
  $245 = HEAP32[$244>>2]|0;
  HEAP32[$242>>2] = $245;
  $246 = ((($gfc)) + 39800|0);
  $247 = HEAP32[$246>>2]|0;
  HEAP32[$244>>2] = $247;
  $248 = ((($gfc)) + 39804|0);
  $249 = HEAP32[$248>>2]|0;
  HEAP32[$246>>2] = $249;
  $250 = ((($gfc)) + 39808|0);
  $251 = HEAP32[$250>>2]|0;
  HEAP32[$248>>2] = $251;
  $252 = ((($gfc)) + 39812|0);
  $253 = HEAP32[$252>>2]|0;
  HEAP32[$250>>2] = $253;
  $254 = ((($gfc)) + 39816|0);
  $255 = HEAP32[$254>>2]|0;
  HEAP32[$252>>2] = $255;
  $256 = ((($gfc)) + 39820|0);
  $257 = HEAP32[$256>>2]|0;
  HEAP32[$254>>2] = $257;
  $258 = ((($gfc)) + 39824|0);
  $259 = HEAP32[$258>>2]|0;
  HEAP32[$256>>2] = $259;
  $260 = ((($gfc)) + 39828|0);
  $261 = HEAP32[$260>>2]|0;
  HEAP32[$258>>2] = $261;
  $262 = HEAP32[$54>>2]|0;
  $263 = ($262|0)>(0);
  $264 = (HEAP32[tempDoublePtr>>2]=$245,+HEAPF32[tempDoublePtr>>2]);
  $265 = (HEAP32[tempDoublePtr>>2]=$226,+HEAPF32[tempDoublePtr>>2]);
  $266 = (HEAP32[tempDoublePtr>>2]=$229,+HEAPF32[tempDoublePtr>>2]);
  $267 = (HEAP32[tempDoublePtr>>2]=$261,+HEAPF32[tempDoublePtr>>2]);
  $268 = (HEAP32[tempDoublePtr>>2]=$231,+HEAPF32[tempDoublePtr>>2]);
  $269 = (HEAP32[tempDoublePtr>>2]=$259,+HEAPF32[tempDoublePtr>>2]);
  $270 = (HEAP32[tempDoublePtr>>2]=$233,+HEAPF32[tempDoublePtr>>2]);
  $271 = (HEAP32[tempDoublePtr>>2]=$257,+HEAPF32[tempDoublePtr>>2]);
  $272 = (HEAP32[tempDoublePtr>>2]=$235,+HEAPF32[tempDoublePtr>>2]);
  $273 = (HEAP32[tempDoublePtr>>2]=$255,+HEAPF32[tempDoublePtr>>2]);
  $274 = (HEAP32[tempDoublePtr>>2]=$237,+HEAPF32[tempDoublePtr>>2]);
  $275 = (HEAP32[tempDoublePtr>>2]=$253,+HEAPF32[tempDoublePtr>>2]);
  $276 = (HEAP32[tempDoublePtr>>2]=$239,+HEAPF32[tempDoublePtr>>2]);
  $277 = (HEAP32[tempDoublePtr>>2]=$251,+HEAPF32[tempDoublePtr>>2]);
  $278 = (HEAP32[tempDoublePtr>>2]=$241,+HEAPF32[tempDoublePtr>>2]);
  $279 = (HEAP32[tempDoublePtr>>2]=$249,+HEAPF32[tempDoublePtr>>2]);
  $280 = (HEAP32[tempDoublePtr>>2]=$243,+HEAPF32[tempDoublePtr>>2]);
  $281 = (HEAP32[tempDoublePtr>>2]=$247,+HEAPF32[tempDoublePtr>>2]);
  $282 = ((($gfc)) + 72|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = ($283|0)>(0);
  $or$cond = $263 & $284;
  if ($or$cond) {
   $f$045$us = 0.0;$gr$343$us = 0;
   while(1) {
    $ch$439$us = 0;$f$140$us = $f$045$us;
    while(1) {
     $287 = ((($181) + ($gr$343$us<<3)|0) + ($ch$439$us<<2)|0);
     $288 = +HEAPF32[$287>>2];
     $289 = $288 + $f$140$us;
     $290 = (($ch$439$us) + 1)|0;
     $291 = ($290|0)<($283|0);
     if ($291) {
      $ch$439$us = $290;$f$140$us = $289;
     } else {
      $$lcssa116 = $289;
      break;
     }
    }
    $285 = (($gr$343$us) + 1)|0;
    $286 = ($285|0)<($262|0);
    if ($286) {
     $f$045$us = $$lcssa116;$gr$343$us = $285;
    } else {
     $f$0$lcssa = $$lcssa116;
     break;
    }
   }
  } else {
   $f$0$lcssa = 0.0;
  }
  HEAPF32[$260>>2] = $f$0$lcssa;
  $292 = $f$0$lcssa + $265;
  $293 = $292 * -0.10394349694252014;
  $294 = $293 + $264;
  $295 = $267 + $266;
  $296 = $295 * -0.18920649588108063;
  $297 = $296 + $294;
  $298 = $269 + $268;
  $299 = $298 * -0.21623599529266357;
  $300 = $299 + $297;
  $301 = $271 + $270;
  $302 = $301 * -0.15591500699520111;
  $303 = $302 + $300;
  $304 = $273 + $272;
  $305 = $304 * 3.8980449615198001E-17;
  $306 = $305 + $303;
  $307 = $275 + $274;
  $308 = $307 * 0.23387250304222107;
  $309 = $308 + $306;
  $310 = $277 + $276;
  $311 = $310 * 0.50454998016357422;
  $312 = $311 + $309;
  $313 = $279 + $278;
  $314 = $313 * 0.75682497024536133;
  $315 = $314 + $312;
  $316 = $281 + $280;
  $317 = $316 * 0.93549001216888427;
  $318 = $317 + $315;
  $319 = ($262*3350)|0;
  $320 = Math_imul($319, $283)|0;
  $321 = (+($320|0));
  $322 = $321 / $318;
  $323 = ($283|0)>(0);
  $or$cond101 = $263 & $323;
  if ($or$cond101) {
   $gr$435$us = 0;
   while(1) {
    $ch$533$us = 0;
    while(1) {
     $326 = ((($181) + ($gr$435$us<<3)|0) + ($ch$533$us<<2)|0);
     $327 = +HEAPF32[$326>>2];
     $328 = $327 * $322;
     HEAPF32[$326>>2] = $328;
     $329 = (($ch$533$us) + 1)|0;
     $330 = ($329|0)<($283|0);
     if ($330) {
      $ch$533$us = $329;
     } else {
      break;
     }
    }
    $324 = (($gr$435$us) + 1)|0;
    $325 = ($324|0)<($262|0);
    if ($325) {
     $gr$435$us = $324;
    } else {
     break;
    }
   }
  }
 }
 $331 = ((($gfc)) + 85812|0);
 $332 = HEAP32[$331>>2]|0;
 FUNCTION_TABLE_viiii[$332 & 7]($gfc,$181,$ms_ener_ratio,$masking_MS$sink);
 (_format_bitstream($gfc)|0);
 $333 = (_copy_buffer($gfc,$mp3buf,$mp3buf_size,1)|0);
 $334 = ((($gfc)) + 156|0);
 $335 = HEAP32[$334>>2]|0;
 $336 = ($335|0)==(0);
 if (!($336)) {
  _AddVbrFrame($gfc);
 }
 $337 = HEAP32[$182>>2]|0;
 $338 = ($337|0)==(0);
 if (!($338)) {
  $339 = ((($gfc)) + 85804|0);
  $340 = HEAP32[$339>>2]|0;
  $341 = ($340|0)==(0|0);
  if (!($341)) {
   $342 = HEAP32[$54>>2]|0;
   $343 = ($342*576)|0;
   $344 = ((($gfc)) + 72|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = ($345|0)>(0);
   if ($346) {
    $ch$632 = 0;
    while(1) {
     $j$030 = 0;
     while(1) {
      $349 = (($j$030) + ($343))|0;
      $350 = ((((($340)) + 24|0) + (($ch$632*12800)|0)|0) + ($349<<3)|0);
      $351 = +HEAPF64[$350>>3];
      $352 = ((((($340)) + 24|0) + (($ch$632*12800)|0)|0) + ($j$030<<3)|0);
      HEAPF64[$352>>3] = $351;
      $353 = (($j$030) + 1)|0;
      $exitcond = ($353|0)==(272);
      if ($exitcond) {
       break;
      } else {
       $j$030 = $353;
      }
     }
     $347 = (($inbuf) + ($ch$632<<2)|0);
     $348 = HEAP32[$347>>2]|0;
     $j$131 = 272;
     while(1) {
      $354 = (($j$131) + -272)|0;
      $355 = (($348) + ($354<<2)|0);
      $356 = +HEAPF32[$355>>2];
      $357 = $356;
      $358 = ((((($340)) + 24|0) + (($ch$632*12800)|0)|0) + ($j$131<<3)|0);
      HEAPF64[$358>>3] = $357;
      $359 = (($j$131) + 1)|0;
      $exitcond86 = ($359|0)==(1600);
      if ($exitcond86) {
       break;
      } else {
       $j$131 = $359;
      }
     }
     $360 = (($ch$632) + 1)|0;
     $361 = ($360|0)<($345|0);
     if ($361) {
      $ch$632 = $360;
     } else {
      break;
     }
    }
   }
   $362 = ((($gfc)) + 84908|0);
   HEAPF32[$362>>2] = 1.0;
   _set_frame_pinfo($gfc,$masking_MS$sink);
  }
 }
 $363 = ((($gfc)) + 84748|0);
 $364 = HEAP32[$363>>2]|0;
 $365 = (($364) + 1)|0;
 HEAP32[$363>>2] = $365;
 $366 = ((($gfc)) + 84744|0);
 $367 = HEAP32[$366>>2]|0;
 $368 = (((((($gfc)) + 84040|0) + (($367*20)|0)|0)) + 16|0);
 $369 = HEAP32[$368>>2]|0;
 $370 = (($369) + 1)|0;
 HEAP32[$368>>2] = $370;
 $371 = ((($gfc)) + 84356|0);
 $372 = HEAP32[$371>>2]|0;
 $373 = (($372) + 1)|0;
 HEAP32[$371>>2] = $373;
 $374 = ((($gfc)) + 72|0);
 $375 = HEAP32[$374>>2]|0;
 $376 = ($375|0)==(2);
 if ($376) {
  $377 = HEAP32[$146>>2]|0;
  $378 = HEAP32[$366>>2]|0;
  $379 = ((((($gfc)) + 84040|0) + (($378*20)|0)|0) + ($377<<2)|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = (($380) + 1)|0;
  HEAP32[$379>>2] = $381;
  $382 = HEAP32[$146>>2]|0;
  $383 = (((($gfc)) + 84340|0) + ($382<<2)|0);
  $384 = HEAP32[$383>>2]|0;
  $385 = (($384) + 1)|0;
  HEAP32[$383>>2] = $385;
 }
 $386 = HEAP32[$54>>2]|0;
 $387 = ($386|0)>(0);
 if (!($387)) {
  $$0 = $333;
  STACKTOP = sp;return ($$0|0);
 }
 $388 = ((($gfc)) + 84740|0);
 $$pre$i4 = HEAP32[$374>>2]|0;
 $389 = $$pre$i4;$419 = $386;$gr$03$i6 = 0;
 while(1) {
  $390 = ($389|0)>(0);
  if ($390) {
   $ch$02$i8 = 0;
   while(1) {
    $391 = ((((((($gfc)) + 304|0) + (($gr$03$i6*10504)|0)|0) + (($ch$02$i8*5252)|0)|0)) + 4788|0);
    $392 = HEAP32[$391>>2]|0;
    $393 = ((((((($gfc)) + 304|0) + (($gr$03$i6*10504)|0)|0) + (($ch$02$i8*5252)|0)|0)) + 4792|0);
    $394 = HEAP32[$393>>2]|0;
    $395 = ($394|0)==(0);
    $$$i = $395 ? $392 : 4;
    $396 = HEAP32[$366>>2]|0;
    $397 = ((((($gfc)) + 84360|0) + (($396*24)|0)|0) + ($$$i<<2)|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = (($398) + 1)|0;
    HEAP32[$397>>2] = $399;
    $400 = HEAP32[$366>>2]|0;
    $401 = (((((($gfc)) + 84360|0) + (($400*24)|0)|0)) + 20|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = (($402) + 1)|0;
    HEAP32[$401>>2] = $403;
    $404 = (((($gfc)) + 84720|0) + ($$$i<<2)|0);
    $405 = HEAP32[$404>>2]|0;
    $406 = (($405) + 1)|0;
    HEAP32[$404>>2] = $406;
    $407 = HEAP32[$388>>2]|0;
    $408 = (($407) + 1)|0;
    HEAP32[$388>>2] = $408;
    $409 = (($ch$02$i8) + 1)|0;
    $410 = HEAP32[$374>>2]|0;
    $411 = ($409|0)<($410|0);
    if ($411) {
     $ch$02$i8 = $409;
    } else {
     $$lcssa = $410;
     break;
    }
   }
   $$pre6$i = HEAP32[$54>>2]|0;
   $414 = $$pre6$i;$420 = $$lcssa;
  } else {
   $414 = $419;$420 = $389;
  }
  $412 = (($gr$03$i6) + 1)|0;
  $413 = ($412|0)<($414|0);
  if ($413) {
   $389 = $420;$419 = $414;$gr$03$i6 = $412;
  } else {
   $$0 = $333;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fft_short($gfc,$x_real,$chn,$buffer) {
 $gfc = $gfc|0;
 $x_real = $x_real|0;
 $chn = $chn|0;
 $buffer = $buffer|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $b$01 = 0, $exitcond = 0, $indvars$iv = 0, $j$0 = 0, $scevgep = 0, $sext = 0, $x$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($buffer) + ($chn<<2)|0);
 $1 = ((($gfc)) + 85820|0);
 $b$01 = 0;$indvars$iv = $x_real;
 while(1) {
  $2 = (((($x_real) + ($b$01<<10)|0)) + 512|0);
  $3 = (($b$01) + 1)|0;
  $sext = Math_imul($3, 12582912)|0;
  $4 = $sext >> 16;
  $$pre = HEAP32[$0>>2]|0;
  $j$0 = 31;$x$0 = $2;
  while(1) {
   $5 = $j$0 << 2;
   $6 = (1720 + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = (1848 + ($8<<2)|0);
   $10 = +HEAPF32[$9>>2];
   $11 = (($8) + ($4))|0;
   $12 = (($$pre) + ($11<<2)|0);
   $13 = +HEAPF32[$12>>2];
   $14 = $13 * $10;
   $15 = (127 - ($8))|0;
   $16 = (1848 + ($15<<2)|0);
   $17 = +HEAPF32[$16>>2];
   $18 = (($11) + 128)|0;
   $19 = (($$pre) + ($18<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $20 * $17;
   $22 = $14 - $21;
   $23 = $21 + $14;
   $24 = (($8) + 64)|0;
   $25 = (1848 + ($24<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = (($11) + 64)|0;
   $28 = (($$pre) + ($27<<2)|0);
   $29 = +HEAPF32[$28>>2];
   $30 = $29 * $26;
   $31 = (63 - ($8))|0;
   $32 = (1848 + ($31<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $34 = (($11) + 192)|0;
   $35 = (($$pre) + ($34<<2)|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $36 * $33;
   $38 = $30 - $37;
   $39 = $37 + $30;
   $40 = ((($x$0)) + -16|0);
   $41 = $39 + $23;
   HEAPF32[$40>>2] = $41;
   $42 = $23 - $39;
   $43 = ((($x$0)) + -8|0);
   HEAPF32[$43>>2] = $42;
   $44 = $38 + $22;
   $45 = ((($x$0)) + -12|0);
   HEAPF32[$45>>2] = $44;
   $46 = $22 - $38;
   $47 = ((($x$0)) + -4|0);
   HEAPF32[$47>>2] = $46;
   $48 = (($8) + 1)|0;
   $49 = (1848 + ($48<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = (($11) + 1)|0;
   $52 = (($$pre) + ($51<<2)|0);
   $53 = +HEAPF32[$52>>2];
   $54 = $53 * $50;
   $55 = (126 - ($8))|0;
   $56 = (1848 + ($55<<2)|0);
   $57 = +HEAPF32[$56>>2];
   $58 = (($11) + 129)|0;
   $59 = (($$pre) + ($58<<2)|0);
   $60 = +HEAPF32[$59>>2];
   $61 = $60 * $57;
   $62 = $54 - $61;
   $63 = $61 + $54;
   $64 = (($8) + 65)|0;
   $65 = (1848 + ($64<<2)|0);
   $66 = +HEAPF32[$65>>2];
   $67 = (($11) + 65)|0;
   $68 = (($$pre) + ($67<<2)|0);
   $69 = +HEAPF32[$68>>2];
   $70 = $69 * $66;
   $71 = (62 - ($8))|0;
   $72 = (1848 + ($71<<2)|0);
   $73 = +HEAPF32[$72>>2];
   $74 = (($11) + 193)|0;
   $75 = (($$pre) + ($74<<2)|0);
   $76 = +HEAPF32[$75>>2];
   $77 = $76 * $73;
   $78 = $70 - $77;
   $79 = $77 + $70;
   $80 = $79 + $63;
   $81 = ((($x$0)) + 496|0);
   HEAPF32[$81>>2] = $80;
   $82 = $63 - $79;
   $83 = ((($x$0)) + 504|0);
   HEAPF32[$83>>2] = $82;
   $84 = $78 + $62;
   $85 = ((($x$0)) + 500|0);
   HEAPF32[$85>>2] = $84;
   $86 = $62 - $78;
   $87 = ((($x$0)) + 508|0);
   HEAPF32[$87>>2] = $86;
   $88 = (($j$0) + -1)|0;
   $89 = ($j$0|0)>(0);
   if ($89) {
    $j$0 = $88;$x$0 = $40;
   } else {
    break;
   }
  }
  $90 = HEAP32[$1>>2]|0;
  FUNCTION_TABLE_vii[$90 & 3]($indvars$iv,128);
  $scevgep = ((($indvars$iv)) + 1024|0);
  $exitcond = ($3|0)==(3);
  if ($exitcond) {
   break;
  } else {
   $b$01 = $3;$indvars$iv = $scevgep;
  }
 }
 return;
}
function _fft_long($gfc,$x,$chn,$buffer) {
 $gfc = $gfc|0;
 $x = $x|0;
 $chn = $chn|0;
 $buffer = $buffer|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0;
 var $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0.0, $9 = 0.0, $jj$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($x)) + 2048|0);
 $1 = (($buffer) + ($chn<<2)|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $0;$jj$0 = 127;
 while(1) {
  $2 = (1720 + ($jj$0)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (2360 + ($4<<2)|0);
  $6 = +HEAPF32[$5>>2];
  $7 = (($$pre) + ($4<<2)|0);
  $8 = +HEAPF32[$7>>2];
  $9 = $8 * $6;
  $10 = $4 | 512;
  $11 = (2360 + ($10<<2)|0);
  $12 = +HEAPF32[$11>>2];
  $13 = (($$pre) + ($10<<2)|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $14 * $12;
  $16 = $9 - $15;
  $17 = $15 + $9;
  $18 = $4 | 256;
  $19 = (2360 + ($18<<2)|0);
  $20 = +HEAPF32[$19>>2];
  $21 = (($$pre) + ($18<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $22 * $20;
  $24 = $4 | 768;
  $25 = (2360 + ($24<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $27 = (($$pre) + ($24<<2)|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $28 * $26;
  $30 = $23 - $29;
  $31 = $29 + $23;
  $32 = ((($$0)) + -16|0);
  $33 = $31 + $17;
  HEAPF32[$32>>2] = $33;
  $34 = $17 - $31;
  $35 = ((($$0)) + -8|0);
  HEAPF32[$35>>2] = $34;
  $36 = $30 + $16;
  $37 = ((($$0)) + -12|0);
  HEAPF32[$37>>2] = $36;
  $38 = $16 - $30;
  $39 = ((($$0)) + -4|0);
  HEAPF32[$39>>2] = $38;
  $40 = (($4) + 1)|0;
  $41 = (2360 + ($40<<2)|0);
  $42 = +HEAPF32[$41>>2];
  $43 = (($$pre) + ($40<<2)|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $44 * $42;
  $46 = (($4) + 513)|0;
  $47 = (2360 + ($46<<2)|0);
  $48 = +HEAPF32[$47>>2];
  $49 = (($$pre) + ($46<<2)|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $50 * $48;
  $52 = $45 - $51;
  $53 = $51 + $45;
  $54 = (($4) + 257)|0;
  $55 = (2360 + ($54<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $57 = (($$pre) + ($54<<2)|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $58 * $56;
  $60 = (($4) + 769)|0;
  $61 = (2360 + ($60<<2)|0);
  $62 = +HEAPF32[$61>>2];
  $63 = (($$pre) + ($60<<2)|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $64 * $62;
  $66 = $59 - $65;
  $67 = $65 + $59;
  $68 = $67 + $53;
  $69 = ((($$0)) + 2032|0);
  HEAPF32[$69>>2] = $68;
  $70 = $53 - $67;
  $71 = ((($$0)) + 2040|0);
  HEAPF32[$71>>2] = $70;
  $72 = $66 + $52;
  $73 = ((($$0)) + 2036|0);
  HEAPF32[$73>>2] = $72;
  $74 = $52 - $66;
  $75 = ((($$0)) + 2044|0);
  HEAPF32[$75>>2] = $74;
  $76 = (($jj$0) + -1)|0;
  $77 = ($jj$0|0)>(0);
  if ($77) {
   $$0 = $32;$jj$0 = $76;
  } else {
   break;
  }
 }
 $78 = ((($gfc)) + 85820|0);
 $79 = HEAP32[$78>>2]|0;
 FUNCTION_TABLE_vii[$79 & 3]($x,512);
 return;
}
function _init_fft($gfc) {
 $gfc = $gfc|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $exitcond3 = 0, $i$02 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$02 = 0;
 while(1) {
  $0 = (+($i$02|0));
  $1 = $0 + 0.5;
  $2 = $1 * 0.0061359231515425647;
  $3 = (+Math_cos((+$2)));
  $4 = $3 * 0.5;
  $5 = 0.41999999999999998 - $4;
  $6 = $1 * 0.012271846303085129;
  $7 = (+Math_cos((+$6)));
  $8 = $7 * 0.080000000000000002;
  $9 = $5 + $8;
  $10 = $9;
  $11 = (2360 + ($i$02<<2)|0);
  HEAPF32[$11>>2] = $10;
  $12 = (($i$02) + 1)|0;
  $exitcond3 = ($12|0)==(1024);
  if ($exitcond3) {
   $i$11 = 0;
   break;
  } else {
   $i$02 = $12;
  }
 }
 while(1) {
  $13 = (+($i$11|0));
  $14 = $13 + 0.5;
  $15 = $14 * 0.024543692606170259;
  $16 = (+Math_cos((+$15)));
  $17 = 1.0 - $16;
  $18 = $17 * 0.5;
  $19 = $18;
  $20 = (1848 + ($i$11<<2)|0);
  HEAPF32[$20>>2] = $19;
  $21 = (($i$11) + 1)|0;
  $exitcond = ($21|0)==(128);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $21;
  }
 }
 $22 = ((($gfc)) + 85820|0);
 HEAP32[$22>>2] = 1;
 return;
}
function _fht($fz,$n) {
 $fz = $fz|0;
 $n = $n|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0;
 var $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $c1$02 = 0.0, $fi$0 = 0, $fi$1 = 0, $gi$0 = 0, $gi$1 = 0, $i$01 = 0, $k4$0 = 0, $s1$03 = 0.0, $tri$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 1;
 $1 = (($fz) + ($0<<2)|0);
 $k4$0 = 4;$tri$0 = 6456;
 while(1) {
  $2 = $k4$0 >> 1;
  $3 = $k4$0 << 1;
  $4 = ($k4$0*3)|0;
  $5 = $k4$0 << 2;
  $6 = (($fz) + ($2<<2)|0);
  $fi$0 = $fz;$gi$0 = $6;
  while(1) {
   $7 = +HEAPF32[$fi$0>>2];
   $8 = (($fi$0) + ($k4$0<<2)|0);
   $9 = +HEAPF32[$8>>2];
   $10 = $7 - $9;
   $11 = $9 + $7;
   $12 = (($fi$0) + ($3<<2)|0);
   $13 = +HEAPF32[$12>>2];
   $14 = (($fi$0) + ($4<<2)|0);
   $15 = +HEAPF32[$14>>2];
   $16 = $13 - $15;
   $17 = $15 + $13;
   $18 = $11 - $17;
   HEAPF32[$12>>2] = $18;
   $19 = $17 + $11;
   HEAPF32[$fi$0>>2] = $19;
   $20 = $10 - $16;
   HEAPF32[$14>>2] = $20;
   $21 = $16 + $10;
   HEAPF32[$8>>2] = $21;
   $22 = +HEAPF32[$gi$0>>2];
   $23 = (($gi$0) + ($k4$0<<2)|0);
   $24 = +HEAPF32[$23>>2];
   $25 = $22 - $24;
   $26 = $24 + $22;
   $27 = (($gi$0) + ($4<<2)|0);
   $28 = +HEAPF32[$27>>2];
   $29 = $28;
   $30 = $29 * 1.4142135623730951;
   $31 = $30;
   $32 = (($gi$0) + ($3<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $34 = $33;
   $35 = $34 * 1.4142135623730951;
   $36 = $35;
   $37 = $26 - $36;
   HEAPF32[$32>>2] = $37;
   $38 = $36 + $26;
   HEAPF32[$gi$0>>2] = $38;
   $39 = $25 - $31;
   HEAPF32[$27>>2] = $39;
   $40 = $31 + $25;
   HEAPF32[$23>>2] = $40;
   $41 = (($gi$0) + ($5<<2)|0);
   $42 = (($fi$0) + ($5<<2)|0);
   $43 = ($42>>>0)<($1>>>0);
   if ($43) {
    $fi$0 = $42;$gi$0 = $41;
   } else {
    break;
   }
  }
  $44 = ((($tri$0)) + 4|0);
  $45 = ($k4$0|0)>(2);
  if ($45) {
   $46 = +HEAPF32[$44>>2];
   $47 = +HEAPF32[$tri$0>>2];
   $c1$02 = $47;$i$01 = 1;$s1$03 = $46;
   while(1) {
    $48 = $s1$03 * 2.0;
    $49 = $48 * $s1$03;
    $50 = 1.0 - $49;
    $51 = $48 * $c1$02;
    $52 = (($fz) + ($i$01<<2)|0);
    $$sum = (($k4$0) - ($i$01))|0;
    $53 = (($fz) + ($$sum<<2)|0);
    $fi$1 = $52;$gi$1 = $53;
    while(1) {
     $54 = (($fi$1) + ($k4$0<<2)|0);
     $55 = +HEAPF32[$54>>2];
     $56 = $55 * $51;
     $57 = (($gi$1) + ($k4$0<<2)|0);
     $58 = +HEAPF32[$57>>2];
     $59 = $58 * $50;
     $60 = $56 - $59;
     $61 = $55 * $50;
     $62 = $58 * $51;
     $63 = $62 + $61;
     $64 = +HEAPF32[$fi$1>>2];
     $65 = $64 - $63;
     $66 = $63 + $64;
     $67 = +HEAPF32[$gi$1>>2];
     $68 = $67 - $60;
     $69 = $67 + $60;
     $70 = (($fi$1) + ($4<<2)|0);
     $71 = +HEAPF32[$70>>2];
     $72 = $71 * $51;
     $73 = (($gi$1) + ($4<<2)|0);
     $74 = +HEAPF32[$73>>2];
     $75 = $74 * $50;
     $76 = $72 - $75;
     $77 = $71 * $50;
     $78 = $74 * $51;
     $79 = $78 + $77;
     $80 = (($fi$1) + ($3<<2)|0);
     $81 = +HEAPF32[$80>>2];
     $82 = $81 - $79;
     $83 = $79 + $81;
     $84 = (($gi$1) + ($3<<2)|0);
     $85 = +HEAPF32[$84>>2];
     $86 = $85 - $76;
     $87 = $85 + $76;
     $88 = $83 * $s1$03;
     $89 = $86 * $c1$02;
     $90 = $88 - $89;
     $91 = $83 * $c1$02;
     $92 = $86 * $s1$03;
     $93 = $91 + $92;
     $94 = $66 - $93;
     HEAPF32[$80>>2] = $94;
     $95 = $93 + $66;
     HEAPF32[$fi$1>>2] = $95;
     $96 = $68 - $90;
     HEAPF32[$73>>2] = $96;
     $97 = $90 + $68;
     HEAPF32[$57>>2] = $97;
     $98 = $87 * $c1$02;
     $99 = $82 * $s1$03;
     $100 = $98 - $99;
     $101 = $87 * $s1$03;
     $102 = $82 * $c1$02;
     $103 = $101 + $102;
     $104 = $69 - $103;
     HEAPF32[$84>>2] = $104;
     $105 = $103 + $69;
     HEAPF32[$gi$1>>2] = $105;
     $106 = $65 - $100;
     HEAPF32[$70>>2] = $106;
     $107 = $100 + $65;
     HEAPF32[$54>>2] = $107;
     $108 = (($gi$1) + ($5<<2)|0);
     $109 = (($fi$1) + ($5<<2)|0);
     $110 = ($109>>>0)<($1>>>0);
     if ($110) {
      $fi$1 = $109;$gi$1 = $108;
     } else {
      break;
     }
    }
    $111 = +HEAPF32[$tri$0>>2];
    $112 = $111 * $c1$02;
    $113 = +HEAPF32[$44>>2];
    $114 = $113 * $s1$03;
    $115 = $112 - $114;
    $116 = $113 * $c1$02;
    $117 = $111 * $s1$03;
    $118 = $116 + $117;
    $119 = (($i$01) + 1)|0;
    $120 = ($119|0)<($2|0);
    if ($120) {
     $c1$02 = $115;$i$01 = $119;$s1$03 = $118;
    } else {
     break;
    }
   }
  }
  $121 = ((($tri$0)) + 8|0);
  $122 = ($5|0)<($0|0);
  if ($122) {
   $k4$0 = $5;$tri$0 = $121;
  } else {
   break;
  }
 }
 return;
}
function _lame_get_id3v2_tag($gfp,$buffer,$size) {
 $gfp = $gfp|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $$$i = 0, $$$i$i = 0, $$$i$i29 = 0, $$0 = 0, $$0$be$i$i = 0, $$0$i = 0, $$0$i$off0$i$i = 0, $$0$i$off0$i$i18 = 0, $$0$i$off0$i$i66 = 0, $$0$i$off0$i22$i = 0, $$0$i$off0$i30$i = 0, $$0$i$off0$i35$i = 0, $$0$i$off0$i8$i = 0, $$0$i$off0$i8$i47 = 0, $$0$i$off0$i836$i = 0, $$0$i$off0$i841$i = 0, $$0$i$off0$v$i$i = 0, $$0$i$off0$v$i$i17 = 0, $$0$i$off0$v$i$i65 = 0, $$0$i$off0$v$i21$i = 0;
 var $$0$i$off0$v$i29$i = 0, $$0$i$off0$v$i34$i = 0, $$0$i$off0$v$i7$i = 0, $$0$i$off0$v$i7$i46 = 0, $$0$i$off0$v$i735$i = 0, $$0$i$off0$v$i740$i = 0, $$0$i$off8$i$i = 0, $$0$i$off8$i$i20 = 0, $$0$i$off8$i$i68 = 0, $$0$i$off8$i10$i = 0, $$0$i$off8$i10$i49 = 0, $$0$i$off8$i1038$i = 0, $$0$i$off8$i1043$i = 0, $$0$i$off8$i24$i = 0, $$0$i$off8$i32$i = 0, $$0$i$off8$i37$i = 0, $$0$i$off8$v$i$i = 0, $$0$i$off8$v$i$i19 = 0, $$0$i$off8$v$i$i67 = 0, $$0$i$off8$v$i9$i = 0;
 var $$0$i$off8$v$i9$i48 = 0, $$0$i23 = 0, $$0$i3$i$i = 0, $$0$i3$off$i$i = 0, $$0$i53 = 0, $$0$sum$i = 0, $$0$sum30$i = 0, $$0$sum45$i = 0, $$01$ph8$i$i = 0, $$010$i25$i = 0, $$010$i33$i = 0, $$010$i339$i = 0, $$010$i344$i = 0, $$010$i38$i = 0, $$014$i$i = 0, $$014$i$i25 = 0, $$014$i$i56 = 0, $$014$i19$i = 0, $$014$i19$i36 = 0, $$014$i7$i = 0;
 var $$015$i$i = 0, $$02$lcssa$i12$i = 0, $$02$lcssa$i24$i = 0, $$02$ph7$i$i = 0, $$023$i$i = 0, $$023$i$i26 = 0, $$023$i$i57 = 0, $$023$i20$i = 0, $$023$i20$i37 = 0, $$023$i8$i = 0, $$048$i = 0, $$05$i$i = 0, $$05$i$i24 = 0, $$05$i$i55 = 0, $$05$i18$i = 0, $$05$i18$i35 = 0, $$05$i6$i = 0, $$0511$i = 0, $$06$i$i = 0, $$06$lcssa$i = 0;
 var $$0610$i = 0, $$09$i = 0, $$1$i16$i = 0, $$1$i5$i = 0, $$17$i = 0, $$idx$val = 0, $$idx9 = 0, $$idx9$val = 0, $$in$i$i = 0, $$lobit = 0, $$lobit85 = 0, $$pn = 0, $$pn$i = 0, $$pn$i14 = 0, $$pn$i62 = 0, $$pn40$i = 0, $$pn46$i = 0, $$pre$i$i = 0, $$pre$i$i15 = 0, $$pre$i$i63 = 0;
 var $$pre$i12$i = 0, $$pre$i12$i44 = 0, $$sink$i = 0, $$sum$i = 0, $$sum$i12 = 0, $$sum$i39 = 0, $$sum15$i = 0, $$sum26$i = 0, $$sum26$pn$i = 0, $$sum27$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $albumart_mime$0$ph = 0, $albumart_mime$1 = 0, $buffer$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i10 = 0, $cond$i$i32 = 0, $cond$i73 = 0, $cond$i75 = 0, $cond1$i = 0, $cond1$i$i = 0, $cond1$i$i34 = 0, $cond1$i77 = 0, $extract5$i$i = 0, $extract5$i$i16 = 0;
 var $extract5$i$i64 = 0, $extract5$i20$i = 0, $extract5$i28$i = 0, $extract5$i33$i = 0, $extract5$i6$i = 0, $extract5$i6$i45 = 0, $extract5$i634$i = 0, $extract5$i639$i = 0, $n$0$i = 0, $n$0$i$i = 0, $n$0$i$i33 = 0, $n$0$i76 = 0, $n$1$i = 0, $n$1$i$i = 0, $n$1$i$i11 = 0, $n$2$i$i = 0, $node$096 = 0, $node2$093 = 0, $notlhs = 0, $notrhs = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond3$i = 0, $or$cond5 = 0, $or$cond7$not = 0, $or$cond82 = 0, $p$091 = 0, $p$1 = 0, $p$2 = 0, $p$3 = 0, $phitmp$i = 0, $phitmp$i41 = 0, $phitmp18$i = 0, $phitmp19$i = 0, $phitmp31$i = 0, $phitmp32$i = 0, $playlength_ms$0$i = 0, $scevgep$i = 0, $scevgep$i$i = 0, $scevgep$i$i30 = 0;
 var $scevgep$i$i70 = 0, $scevgep$i1$i = 0, $scevgep$i1$i59 = 0, $scevgep$i10$i = 0, $scevgep$i14$i = 0, $scevgep$i14$i51 = 0, $scevgep$i14$sum$i = 0, $scevgep$i14$sum27$i = 0, $scevgep$i2$i = 0, $scevgep$i22$i = 0, $scevgep$i22$i40 = 0, $scevgep$i22$sum$i = 0, $scevgep$i4$i = 0, $tag_size$0 = 0, $tag_size$195 = 0, $tag_size$2 = 0, $tag_size$3 = 0, $tag_size$4 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $vararg_buffer = sp;
 $buffer$i = sp + 8|0;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ((($gfp)) + 288|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $$idx9 = ((($2)) + 85696|0);
 $$idx9$val = HEAP32[$$idx9>>2]|0;
 $$lobit = $$idx9$val & 4;
 $4 = ($$lobit|0)==(0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = $$idx9$val & 10;
 $6 = ((($2)) + 85704|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $22 = 0;
 } else {
  $9 = (_strlen(($7|0))|0);
  $22 = $9;
 }
 $10 = ((($2)) + 85708|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $24 = 0;
 } else {
  $13 = (_strlen(($11|0))|0);
  $24 = $13;
 }
 $14 = ((($2)) + 85712|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $26 = 0;
 } else {
  $17 = (_strlen(($15|0))|0);
  $26 = $17;
 }
 $18 = ((($2)) + 85716|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $28 = 0;
 } else {
  $21 = (_strlen(($19|0))|0);
  $28 = $21;
 }
 $23 = ($22>>>0)>(30);
 $25 = ($24>>>0)>(30);
 $or$cond = $23 | $25;
 $27 = ($26>>>0)>(30);
 $or$cond3 = $or$cond | $27;
 $29 = ($28>>>0)>(30);
 $or$cond5 = $or$cond3 | $29;
 if (!($or$cond5)) {
  $30 = ((($2)) + 85720|0);
  $31 = HEAP32[$30>>2]|0;
  $notlhs = ($31|0)==(0);
  $notrhs = ($28>>>0)<(29);
  $or$cond7$not = $notrhs | $notlhs;
  $32 = ($5|0)==(0);
  $or$cond82 = $32 & $or$cond7$not;
  if ($or$cond82) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $33 = ((($gfp)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(-1);
 if (!($35)) {
  $36 = (+($34>>>0));
  $37 = $36 * 1000.0;
  $38 = ((($2)) + 60|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (+($39|0));
  $41 = $37 / $40;
  $42 = $41 > 4294967295.0;
  if ($42) {
   $playlength_ms$0$i = -1;
  } else {
   $43 = $41 < 0.0;
   if ($43) {
    $playlength_ms$0$i = 0;
   } else {
    $44 = (~~(($41))>>>0);
    $playlength_ms$0$i = $44;
   }
  }
  HEAP32[$vararg_buffer>>2] = $playlength_ms$0$i;
  (_sprintf($buffer$i,6496,$vararg_buffer)|0);
  $45 = HEAP32[$1>>2]|0;
  $46 = ($45|0)==(0|0);
  if (!($46)) {
   $47 = ((($45)) + 85696|0);
   $48 = HEAP32[$47>>2]|0;
   (_id3v2_add_latin1($gfp,1414284622,6488,0,$buffer$i)|0);
   HEAP32[$47>>2] = $48;
  }
 }
 $49 = ((($2)) + 85728|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 do {
  if ($51) {
   $albumart_mime$1 = 0;$tag_size$0 = 10;
  } else {
   $52 = ((($2)) + 85732|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0);
   if ($54) {
    $albumart_mime$1 = 0;$tag_size$0 = 10;
   } else {
    $55 = ((($2)) + 85740|0);
    $56 = HEAP32[$55>>2]|0;
    if ((($56|0) == 2)) {
     $albumart_mime$0$ph = 6504;
    } else if ((($56|0) == 3)) {
     $albumart_mime$0$ph = 6520;
    } else if ((($56|0) == 1)) {
     $albumart_mime$0$ph = 6536;
    } else {
     $albumart_mime$1 = 0;$tag_size$0 = 10;
     break;
    }
    $57 = (_strlen(($albumart_mime$0$ph|0))|0);
    $58 = (($57) + 24)|0;
    $59 = (($58) + ($53))|0;
    $albumart_mime$1 = $albumart_mime$0$ph;$tag_size$0 = $59;
   }
  }
 } while(0);
 $60 = ((($2)) + 85744|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0|0);
 if ($62) {
  $tag_size$3 = $tag_size$0;
 } else {
  $node$096 = $61;$tag_size$195 = $tag_size$0;
  while(1) {
   $63 = ((($node$096)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   do {
    if ((($64|0) == 1431520594) | (($64|0) == 1129270605)) {
     $65 = ((($node$096)) + 20|0);
     $66 = HEAP32[$65>>2]|0;
     $cond$i75 = ($66|0)==(1);
     $67 = ((($node$096)) + 16|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $68 << 1;
     $70 = (($69) + 16)|0;
     $71 = (($68) + 15)|0;
     $n$0$i76 = $cond$i75 ? $70 : $71;
     $72 = ((($node$096)) + 32|0);
     $73 = HEAP32[$72>>2]|0;
     $cond1$i77 = ($73|0)==(1);
     $74 = ((($node$096)) + 28|0);
     $75 = HEAP32[$74>>2]|0;
     if ($cond1$i77) {
      $77 = $75 << 1;
      $78 = (($n$0$i76) + ($77))|0;
      $$pn = $78;
      break;
     } else {
      $76 = (($n$0$i76) + ($75))|0;
      $$pn = $76;
      break;
     }
    } else {
     $79 = $64 & -16777216;
     if (!((($79|0) == 0) | (($79|0) == 1459617792))) {
      $96 = ((($node$096)) + 32|0);
      $97 = HEAP32[$96>>2]|0;
      $cond$i = ($97|0)==(1);
      $98 = ((($node$096)) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($99|0)!=(0);
      $101 = ((($node$096)) + 28|0);
      $102 = HEAP32[$101>>2]|0;
      if ($cond$i) {
       $105 = $99 << 1;
       $106 = (($105) + 13)|0;
       $n$1$i = $100 ? $106 : 11;
       $107 = $102 << 1;
       $108 = (($n$1$i) + ($107))|0;
       $$pn = $108;
       break;
      } else {
       $103 = (($99) + 12)|0;
       $$$i = $100 ? $103 : 11;
       $104 = (($$$i) + ($102))|0;
       $$pn = $104;
       break;
      }
     }
     $80 = ((($node$096)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==(0);
     do {
      if ($82) {
       $n$0$i = 10;
      } else {
       $83 = ((($node$096)) + 20|0);
       $84 = HEAP32[$83>>2]|0;
       $cond$i73 = ($84|0)==(1);
       if ($cond$i73) {
        $86 = $81 << 1;
        $87 = (($86) + 13)|0;
        $n$0$i = $87;
        break;
       } else {
        $85 = (($81) + 12)|0;
        $n$0$i = $85;
        break;
       }
      }
     } while(0);
     $88 = ((($node$096)) + 28|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($89|0)==(0);
     if ($90) {
      $$pn = $n$0$i;
     } else {
      $91 = ((($node$096)) + 32|0);
      $92 = HEAP32[$91>>2]|0;
      $cond1$i = ($92|0)==(1);
      if ($cond1$i) {
       $94 = (($n$0$i) + -1)|0;
       $95 = (($94) + ($89))|0;
       $$pn = $95;
       break;
      } else {
       $93 = (($89) + ($n$0$i))|0;
       $$pn = $93;
       break;
      }
     }
    }
   } while(0);
   $tag_size$2 = (($$pn) + ($tag_size$195))|0;
   $109 = HEAP32[$node$096>>2]|0;
   $110 = ($109|0)==(0|0);
   if ($110) {
    $tag_size$3 = $tag_size$2;
    break;
   } else {
    $node$096 = $109;$tag_size$195 = $tag_size$2;
   }
  }
 }
 $$idx$val = HEAP32[$$idx9>>2]|0;
 $$lobit85 = $$idx$val & 32;
 $111 = ($$lobit85|0)==(0);
 if ($111) {
  $tag_size$4 = $tag_size$3;
 } else {
  $112 = ((($2)) + 85736|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($113) + ($tag_size$3))|0;
  $tag_size$4 = $114;
 }
 $115 = ($tag_size$4>>>0)>($size>>>0);
 if ($115) {
  $$0 = $tag_size$4;
  STACKTOP = sp;return ($$0|0);
 }
 $116 = ($buffer|0)==(0|0);
 if ($116) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $117 = ((($buffer)) + 1|0);
 HEAP8[$buffer>>0] = 73;
 $118 = ((($buffer)) + 2|0);
 HEAP8[$117>>0] = 68;
 $119 = ((($buffer)) + 3|0);
 HEAP8[$118>>0] = 51;
 $120 = ((($buffer)) + 4|0);
 HEAP8[$119>>0] = 3;
 $121 = ((($buffer)) + 5|0);
 HEAP8[$120>>0] = 0;
 $122 = ((($buffer)) + 6|0);
 HEAP8[$121>>0] = 0;
 $123 = (($tag_size$4) + -10)|0;
 $124 = $123 >>> 21;
 $125 = $124 & 127;
 $126 = $125&255;
 $127 = ((($buffer)) + 7|0);
 HEAP8[$122>>0] = $126;
 $128 = $123 >>> 14;
 $129 = $128 & 127;
 $130 = $129&255;
 $131 = ((($buffer)) + 8|0);
 HEAP8[$127>>0] = $130;
 $132 = $123 >>> 7;
 $133 = $132 & 127;
 $134 = $133&255;
 $135 = ((($buffer)) + 9|0);
 HEAP8[$131>>0] = $134;
 $136 = $123 & 127;
 $137 = $136&255;
 $138 = ((($buffer)) + 10|0);
 HEAP8[$135>>0] = $137;
 $139 = HEAP32[$60>>2]|0;
 $140 = ($139|0)==(0|0);
 if ($140) {
  $p$2 = $138;
 } else {
  $node2$093 = $139;$p$091 = $138;
  while(1) {
   $141 = ((($node2$093)) + 4|0);
   $142 = HEAP32[$141>>2]|0;
   do {
    if ((($142|0) == 1431520594) | (($142|0) == 1129270605)) {
     $143 = ((($node2$093)) + 20|0);
     $144 = HEAP32[$143>>2]|0;
     $cond$i$i32 = ($144|0)==(1);
     $145 = ((($node2$093)) + 16|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = $146 << 1;
     $148 = (($147) + 16)|0;
     $149 = (($146) + 15)|0;
     $n$0$i$i33 = $cond$i$i32 ? $148 : $149;
     $150 = ((($node2$093)) + 32|0);
     $151 = HEAP32[$150>>2]|0;
     $cond1$i$i34 = ($151|0)==(1);
     $152 = ((($node2$093)) + 28|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = $cond1$i$i34&1;
     $$sink$i = $153 << $154;
     $155 = (($$sink$i) + ($n$0$i$i33))|0;
     $156 = ($155>>>0)>(10);
     if ($156) {
      $157 = $142&255;
      $158 = ((($p$091)) + 3|0);
      HEAP8[$158>>0] = $157;
      $159 = $142 >>> 8;
      $160 = $159&255;
      $161 = ((($p$091)) + 2|0);
      HEAP8[$161>>0] = $160;
      $162 = $142 >>> 16;
      $163 = $162&255;
      $164 = ((($p$091)) + 1|0);
      HEAP8[$164>>0] = $163;
      $165 = $142 >>> 24;
      $166 = $165&255;
      HEAP8[$p$091>>0] = $166;
      $167 = ((($p$091)) + 4|0);
      $168 = (($155) + -10)|0;
      $169 = $168&255;
      $170 = ((($p$091)) + 7|0);
      HEAP8[$170>>0] = $169;
      $171 = $168 >>> 8;
      $172 = $171&255;
      $173 = ((($p$091)) + 6|0);
      HEAP8[$173>>0] = $172;
      $174 = $168 >>> 16;
      $175 = $174&255;
      $176 = ((($p$091)) + 5|0);
      HEAP8[$176>>0] = $175;
      $177 = $168 >>> 24;
      $178 = $177&255;
      HEAP8[$167>>0] = $178;
      $179 = ((($p$091)) + 8|0);
      $180 = ((($p$091)) + 9|0);
      HEAP8[$179>>0] = 0;
      $181 = ((($p$091)) + 10|0);
      HEAP8[$180>>0] = 0;
      $182 = ((($node2$093)) + 24|0);
      $183 = HEAP32[$150>>2]|0;
      $184 = ($183|0)==(1);
      $185 = $184&1;
      $186 = ((($p$091)) + 11|0);
      HEAP8[$181>>0] = $185;
      $187 = ((($node2$093)) + 8|0);
      $188 = HEAP8[$187>>0]|0;
      $189 = ((($p$091)) + 12|0);
      HEAP8[$186>>0] = $188;
      $190 = ((($node2$093)) + 9|0);
      $191 = HEAP8[$190>>0]|0;
      $192 = ((($p$091)) + 13|0);
      HEAP8[$189>>0] = $191;
      $193 = ((($node2$093)) + 10|0);
      $194 = HEAP8[$193>>0]|0;
      $195 = ((($p$091)) + 14|0);
      HEAP8[$192>>0] = $194;
      $196 = ((($node2$093)) + 12|0);
      $197 = HEAP32[$143>>2]|0;
      $198 = ($197|0)==(1);
      if ($198) {
       $207 = HEAP32[$196>>2]|0;
       $208 = HEAP32[$145>>2]|0;
       $209 = ($208|0)==(0);
       if ($209) {
        $$1$i16$i = $195;$224 = 15;$514 = 16;
       } else {
        $210 = HEAP16[$207>>1]|0;
        $211 = ($210<<16>>16)==(-2);
        $212 = $208 << 1;
        $213 = (($208) + -1)|0;
        $extract5$i639$i = ($210&65535) >>> 8;
        $$0$i$off0$v$i740$i = $211 ? $extract5$i639$i : $210;
        $$0$i$off0$i841$i = $$0$i$off0$v$i740$i&255;
        $214 = $extract5$i639$i&255;
        $$0$i$off8$i1043$i = $211 ? -2 : $214;
        $215 = ((($p$091)) + 15|0);
        HEAP8[$195>>0] = $$0$i$off0$i841$i;
        HEAP8[$215>>0] = $$0$i$off8$i1043$i;
        $216 = ($213|0)==(0);
        if (!($216)) {
         $$010$i344$i = $195;$$pn46$i = $207;$220 = $213;
         while(1) {
          $217 = ((($$pn46$i)) + 2|0);
          $218 = ((($$010$i344$i)) + 2|0);
          $$pre$i12$i44 = HEAP16[$217>>1]|0;
          $219 = (($220) + -1)|0;
          $extract5$i6$i45 = ($$pre$i12$i44&65535) >>> 8;
          $$0$i$off0$v$i7$i46 = $211 ? $extract5$i6$i45 : $$pre$i12$i44;
          $$0$i$off0$i8$i47 = $$0$i$off0$v$i7$i46&255;
          $$0$i$off8$v$i9$i48 = $211 ? $$pre$i12$i44 : $extract5$i6$i45;
          $$0$i$off8$i10$i49 = $$0$i$off8$v$i9$i48&255;
          $221 = ((($$010$i344$i)) + 3|0);
          HEAP8[$218>>0] = $$0$i$off0$i8$i47;
          HEAP8[$221>>0] = $$0$i$off8$i10$i49;
          $222 = ($219|0)==(0);
          if ($222) {
           break;
          } else {
           $$010$i344$i = $218;$$pn46$i = $217;$220 = $219;
          }
         }
        }
        $$sum27$i = (($212) + 14)|0;
        $scevgep$i14$i51 = (($p$091) + ($$sum27$i)|0);
        $phitmp31$i = (($212) + 15)|0;
        $phitmp32$i = (($212) + 16)|0;
        $$1$i16$i = $scevgep$i14$i51;$224 = $phitmp31$i;$514 = $phitmp32$i;
       }
       $223 = (($p$091) + ($224)|0);
       HEAP8[$$1$i16$i>>0] = 0;
       HEAP8[$223>>0] = 0;
       $$sum26$pn$i = $514;
      } else {
       $199 = HEAP32[$145>>2]|0;
       $200 = ($199|0)==(0);
       if ($200) {
        $$02$lcssa$i24$i = $195;$513 = 15;
       } else {
        $201 = HEAP32[$196>>2]|0;
        $$014$i19$i36 = $201;$$023$i20$i37 = $195;$$05$i18$i35 = $199;
        while(1) {
         $202 = (($$05$i18$i35) + -1)|0;
         $203 = ((($$014$i19$i36)) + 1|0);
         $204 = HEAP8[$$014$i19$i36>>0]|0;
         $205 = ((($$023$i20$i37)) + 1|0);
         HEAP8[$$023$i20$i37>>0] = $204;
         $206 = ($202|0)==(0);
         if ($206) {
          break;
         } else {
          $$014$i19$i36 = $203;$$023$i20$i37 = $205;$$05$i18$i35 = $202;
         }
        }
        $$sum$i39 = (($199) + 14)|0;
        $scevgep$i22$i40 = (($p$091) + ($$sum$i39)|0);
        $phitmp$i41 = (($199) + 15)|0;
        $$02$lcssa$i24$i = $scevgep$i22$i40;$513 = $phitmp$i41;
       }
       HEAP8[$$02$lcssa$i24$i>>0] = 0;
       $$sum26$pn$i = $513;
      }
      $$0$i53 = (($p$091) + ($$sum26$pn$i)|0);
      $225 = HEAP32[$150>>2]|0;
      $226 = ($225|0)==(1);
      if ($226) {
       $235 = HEAP32[$182>>2]|0;
       $236 = HEAP32[$152>>2]|0;
       $237 = ($236|0)==(0);
       if ($237) {
        $p$1 = $$0$i53;
        break;
       }
       $238 = HEAP16[$235>>1]|0;
       $239 = ($238<<16>>16)==(-2);
       $240 = $236 << 1;
       $241 = (($236) + -1)|0;
       $extract5$i33$i = ($238&65535) >>> 8;
       $$0$i$off0$v$i34$i = $239 ? $extract5$i33$i : $238;
       $$0$i$off0$i35$i = $$0$i$off0$v$i34$i&255;
       $242 = $extract5$i33$i&255;
       $$0$i$off8$i37$i = $239 ? -2 : $242;
       $$0$sum45$i = (($$sum26$pn$i) + 1)|0;
       $243 = (($p$091) + ($$0$sum45$i)|0);
       HEAP8[$$0$i53>>0] = $$0$i$off0$i35$i;
       HEAP8[$243>>0] = $$0$i$off8$i37$i;
       $244 = ($241|0)==(0);
       if (!($244)) {
        $$010$i38$i = $$0$i53;$$pn$i62 = $235;$248 = $241;
        while(1) {
         $245 = ((($$pn$i62)) + 2|0);
         $246 = ((($$010$i38$i)) + 2|0);
         $$pre$i$i63 = HEAP16[$245>>1]|0;
         $247 = (($248) + -1)|0;
         $extract5$i$i64 = ($$pre$i$i63&65535) >>> 8;
         $$0$i$off0$v$i$i65 = $239 ? $extract5$i$i64 : $$pre$i$i63;
         $$0$i$off0$i$i66 = $$0$i$off0$v$i$i65&255;
         $$0$i$off8$v$i$i67 = $239 ? $$pre$i$i63 : $extract5$i$i64;
         $$0$i$off8$i$i68 = $$0$i$off8$v$i$i67&255;
         $249 = ((($$010$i38$i)) + 3|0);
         HEAP8[$246>>0] = $$0$i$off0$i$i66;
         HEAP8[$249>>0] = $$0$i$off8$i$i68;
         $250 = ($247|0)==(0);
         if ($250) {
          break;
         } else {
          $$010$i38$i = $246;$$pn$i62 = $245;$248 = $247;
         }
        }
       }
       $$0$sum30$i = (($240) + ($$sum26$pn$i))|0;
       $scevgep$i$i70 = (($p$091) + ($$0$sum30$i)|0);
       $p$1 = $scevgep$i$i70;
       break;
      } else {
       $227 = HEAP32[$152>>2]|0;
       $228 = ($227|0)==(0);
       if ($228) {
        $p$1 = $$0$i53;
        break;
       }
       $229 = HEAP32[$182>>2]|0;
       $$014$i$i56 = $229;$$023$i$i57 = $$0$i53;$$05$i$i55 = $227;
       while(1) {
        $230 = (($$05$i$i55) + -1)|0;
        $231 = ((($$014$i$i56)) + 1|0);
        $232 = HEAP8[$$014$i$i56>>0]|0;
        $233 = ((($$023$i$i57)) + 1|0);
        HEAP8[$$023$i$i57>>0] = $232;
        $234 = ($230|0)==(0);
        if ($234) {
         break;
        } else {
         $$014$i$i56 = $231;$$023$i$i57 = $233;$$05$i$i55 = $230;
        }
       }
       $$0$sum$i = (($227) + ($$sum26$pn$i))|0;
       $scevgep$i1$i59 = (($p$091) + ($$0$sum$i)|0);
       $p$1 = $scevgep$i1$i59;
       break;
      }
     } else {
      $p$1 = $p$091;
     }
    } else {
     $251 = $142 & -16777216;
     if (!((($251|0) == 0) | (($251|0) == 1459617792))) {
      $365 = ((($node2$093)) + 32|0);
      $366 = HEAP32[$365>>2]|0;
      $cond$i$i = ($366|0)==(1);
      $367 = ((($node2$093)) + 16|0);
      $368 = HEAP32[$367>>2]|0;
      $369 = ($368|0)!=(0);
      $370 = ((($node2$093)) + 28|0);
      $371 = HEAP32[$370>>2]|0;
      if ($cond$i$i) {
       $374 = $368 << 1;
       $375 = (($374) + 13)|0;
       $n$1$i$i = $369 ? $375 : 11;
       $376 = $371 << 1;
       $377 = (($n$1$i$i) + ($376))|0;
       $n$2$i$i = $377;
      } else {
       $372 = (($368) + 12)|0;
       $$$i$i = $369 ? $372 : 11;
       $373 = (($$$i$i) + ($371))|0;
       $n$2$i$i = $373;
      }
      $378 = ($n$2$i$i>>>0)>(10);
      if (!($378)) {
       $p$1 = $p$091;
       break;
      }
      $379 = $142&255;
      $380 = ((($p$091)) + 3|0);
      HEAP8[$380>>0] = $379;
      $381 = $142 >>> 8;
      $382 = $381&255;
      $383 = ((($p$091)) + 2|0);
      HEAP8[$383>>0] = $382;
      $384 = $142 >>> 16;
      $385 = $384&255;
      $386 = ((($p$091)) + 1|0);
      HEAP8[$386>>0] = $385;
      $387 = $142 >>> 24;
      $388 = $387&255;
      HEAP8[$p$091>>0] = $388;
      $389 = ((($p$091)) + 4|0);
      $390 = (($n$2$i$i) + -10)|0;
      $391 = $390&255;
      $392 = ((($p$091)) + 7|0);
      HEAP8[$392>>0] = $391;
      $393 = $390 >>> 8;
      $394 = $393&255;
      $395 = ((($p$091)) + 6|0);
      HEAP8[$395>>0] = $394;
      $396 = $390 >>> 16;
      $397 = $396&255;
      $398 = ((($p$091)) + 5|0);
      HEAP8[$398>>0] = $397;
      $399 = $390 >>> 24;
      $400 = $399&255;
      HEAP8[$389>>0] = $400;
      $401 = ((($p$091)) + 8|0);
      $402 = ((($p$091)) + 9|0);
      HEAP8[$401>>0] = 0;
      $403 = ((($p$091)) + 10|0);
      HEAP8[$402>>0] = 0;
      $404 = ((($node2$093)) + 24|0);
      $405 = HEAP32[$365>>2]|0;
      $406 = ($405|0)==(1);
      $407 = $406&1;
      $408 = ((($p$091)) + 11|0);
      HEAP8[$403>>0] = $407;
      $409 = HEAP32[$367>>2]|0;
      $410 = ($409|0)==(0);
      do {
       if ($410) {
        $$0$i = $408;
       } else {
        $411 = ((($node2$093)) + 20|0);
        $412 = HEAP32[$411>>2]|0;
        $413 = ($412|0)==(1);
        $414 = ((($node2$093)) + 12|0);
        if ($413) {
         $422 = HEAP32[$414>>2]|0;
         $423 = HEAP16[$422>>1]|0;
         $424 = ($423<<16>>16)==(-2);
         $425 = $409 << 1;
         $426 = (($409) + -1)|0;
         $extract5$i634$i = ($423&65535) >>> 8;
         $$0$i$off0$v$i735$i = $424 ? $extract5$i634$i : $423;
         $$0$i$off0$i836$i = $$0$i$off0$v$i735$i&255;
         $427 = $extract5$i634$i&255;
         $$0$i$off8$i1038$i = $424 ? -2 : $427;
         $428 = ((($p$091)) + 12|0);
         HEAP8[$408>>0] = $$0$i$off0$i836$i;
         HEAP8[$428>>0] = $$0$i$off8$i1038$i;
         $429 = ($426|0)==(0);
         if (!($429)) {
          $$010$i339$i = $408;$$pn40$i = $422;$433 = $426;
          while(1) {
           $430 = ((($$pn40$i)) + 2|0);
           $431 = ((($$010$i339$i)) + 2|0);
           $$pre$i12$i = HEAP16[$430>>1]|0;
           $432 = (($433) + -1)|0;
           $extract5$i6$i = ($$pre$i12$i&65535) >>> 8;
           $$0$i$off0$v$i7$i = $424 ? $extract5$i6$i : $$pre$i12$i;
           $$0$i$off0$i8$i = $$0$i$off0$v$i7$i&255;
           $$0$i$off8$v$i9$i = $424 ? $$pre$i12$i : $extract5$i6$i;
           $$0$i$off8$i10$i = $$0$i$off8$v$i9$i&255;
           $434 = ((($$010$i339$i)) + 3|0);
           HEAP8[$431>>0] = $$0$i$off0$i8$i;
           HEAP8[$434>>0] = $$0$i$off8$i10$i;
           $435 = ($432|0)==(0);
           if ($435) {
            break;
           } else {
            $$010$i339$i = $431;$$pn40$i = $430;$433 = $432;
           }
          }
         }
         $$sum26$i = (($425) + 11)|0;
         $scevgep$i14$i = (($p$091) + ($$sum26$i)|0);
         $scevgep$i14$sum$i = (($425) + 12)|0;
         $436 = (($p$091) + ($scevgep$i14$sum$i)|0);
         HEAP8[$scevgep$i14$i>>0] = 0;
         $scevgep$i14$sum27$i = (($425) + 13)|0;
         $437 = (($p$091) + ($scevgep$i14$sum27$i)|0);
         HEAP8[$436>>0] = 0;
         $$0$i = $437;
         break;
        } else {
         $415 = HEAP32[$414>>2]|0;
         $$014$i19$i = $415;$$023$i20$i = $408;$$05$i18$i = $409;
         while(1) {
          $416 = (($$05$i18$i) + -1)|0;
          $417 = ((($$014$i19$i)) + 1|0);
          $418 = HEAP8[$$014$i19$i>>0]|0;
          $419 = ((($$023$i20$i)) + 1|0);
          HEAP8[$$023$i20$i>>0] = $418;
          $420 = ($416|0)==(0);
          if ($420) {
           break;
          } else {
           $$014$i19$i = $417;$$023$i20$i = $419;$$05$i18$i = $416;
          }
         }
         $$sum$i = (($409) + 11)|0;
         $scevgep$i22$i = (($p$091) + ($$sum$i)|0);
         $scevgep$i22$sum$i = (($409) + 12)|0;
         $421 = (($p$091) + ($scevgep$i22$sum$i)|0);
         HEAP8[$scevgep$i22$i>>0] = 0;
         $$0$i = $421;
         break;
        }
       }
      } while(0);
      $438 = HEAP32[$365>>2]|0;
      $439 = ($438|0)==(1);
      if ($439) {
       $448 = HEAP32[$404>>2]|0;
       $449 = HEAP32[$370>>2]|0;
       $450 = ($449|0)==(0);
       if ($450) {
        $p$1 = $$0$i;
        break;
       }
       $451 = HEAP16[$448>>1]|0;
       $452 = ($451<<16>>16)==(-2);
       $453 = $449 << 1;
       $454 = (($449) + -1)|0;
       $extract5$i28$i = ($451&65535) >>> 8;
       $$0$i$off0$v$i29$i = $452 ? $extract5$i28$i : $451;
       $$0$i$off0$i30$i = $$0$i$off0$v$i29$i&255;
       $455 = $extract5$i28$i&255;
       $$0$i$off8$i32$i = $452 ? -2 : $455;
       $456 = ((($$0$i)) + 1|0);
       HEAP8[$$0$i>>0] = $$0$i$off0$i30$i;
       HEAP8[$456>>0] = $$0$i$off8$i32$i;
       $457 = ($454|0)==(0);
       if (!($457)) {
        $$010$i33$i = $$0$i;$$pn$i = $448;$461 = $454;
        while(1) {
         $458 = ((($$pn$i)) + 2|0);
         $459 = ((($$010$i33$i)) + 2|0);
         $$pre$i$i = HEAP16[$458>>1]|0;
         $460 = (($461) + -1)|0;
         $extract5$i$i = ($$pre$i$i&65535) >>> 8;
         $$0$i$off0$v$i$i = $452 ? $extract5$i$i : $$pre$i$i;
         $$0$i$off0$i$i = $$0$i$off0$v$i$i&255;
         $$0$i$off8$v$i$i = $452 ? $$pre$i$i : $extract5$i$i;
         $$0$i$off8$i$i = $$0$i$off8$v$i$i&255;
         $462 = ((($$010$i33$i)) + 3|0);
         HEAP8[$459>>0] = $$0$i$off0$i$i;
         HEAP8[$462>>0] = $$0$i$off8$i$i;
         $463 = ($460|0)==(0);
         if ($463) {
          break;
         } else {
          $$010$i33$i = $459;$$pn$i = $458;$461 = $460;
         }
        }
       }
       $scevgep$i$i = (($$0$i) + ($453)|0);
       $p$1 = $scevgep$i$i;
       break;
      } else {
       $440 = HEAP32[$370>>2]|0;
       $441 = ($440|0)==(0);
       if ($441) {
        $p$1 = $$0$i;
        break;
       }
       $442 = HEAP32[$404>>2]|0;
       $$014$i$i = $442;$$023$i$i = $$0$i;$$05$i$i = $440;
       while(1) {
        $443 = (($$05$i$i) + -1)|0;
        $444 = ((($$014$i$i)) + 1|0);
        $445 = HEAP8[$$014$i$i>>0]|0;
        $446 = ((($$023$i$i)) + 1|0);
        HEAP8[$$023$i$i>>0] = $445;
        $447 = ($443|0)==(0);
        if ($447) {
         break;
        } else {
         $$014$i$i = $444;$$023$i$i = $446;$$05$i$i = $443;
        }
       }
       $scevgep$i1$i = (($$0$i) + ($440)|0);
       $p$1 = $scevgep$i1$i;
       break;
      }
     }
     $252 = ((($node2$093)) + 16|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = ($253|0)==(0);
     do {
      if ($254) {
       $n$0$i$i = 10;
      } else {
       $255 = ((($node2$093)) + 20|0);
       $256 = HEAP32[$255>>2]|0;
       $cond$i$i10 = ($256|0)==(1);
       if ($cond$i$i10) {
        $258 = $253 << 1;
        $259 = (($258) + 13)|0;
        $n$0$i$i = $259;
        break;
       } else {
        $257 = (($253) + 12)|0;
        $n$0$i$i = $257;
        break;
       }
      }
     } while(0);
     $260 = ((($node2$093)) + 28|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = ($261|0)==(0);
     do {
      if ($262) {
       $n$1$i$i11 = $n$0$i$i;
      } else {
       $263 = ((($node2$093)) + 32|0);
       $264 = HEAP32[$263>>2]|0;
       $cond1$i$i = ($264|0)==(1);
       if ($cond1$i$i) {
        $266 = (($n$0$i$i) + -1)|0;
        $267 = (($266) + ($261))|0;
        $n$1$i$i11 = $267;
        break;
       } else {
        $265 = (($261) + ($n$0$i$i))|0;
        $n$1$i$i11 = $265;
        break;
       }
      }
     } while(0);
     $268 = ($n$1$i$i11>>>0)>(10);
     if (!($268)) {
      $p$1 = $p$091;
      break;
     }
     $269 = $142&255;
     $270 = ((($p$091)) + 3|0);
     HEAP8[$270>>0] = $269;
     $271 = $142 >>> 8;
     $272 = $271&255;
     $273 = ((($p$091)) + 2|0);
     HEAP8[$273>>0] = $272;
     $274 = $142 >>> 16;
     $275 = $274&255;
     $276 = ((($p$091)) + 1|0);
     HEAP8[$276>>0] = $275;
     $277 = $142 >>> 24;
     $278 = $277&255;
     HEAP8[$p$091>>0] = $278;
     $279 = ((($p$091)) + 4|0);
     $280 = (($n$1$i$i11) + -10)|0;
     $281 = $280&255;
     $282 = ((($p$091)) + 7|0);
     HEAP8[$282>>0] = $281;
     $283 = $280 >>> 8;
     $284 = $283&255;
     $285 = ((($p$091)) + 6|0);
     HEAP8[$285>>0] = $284;
     $286 = $280 >>> 16;
     $287 = $286&255;
     $288 = ((($p$091)) + 5|0);
     HEAP8[$288>>0] = $287;
     $289 = $280 >>> 24;
     $290 = $289&255;
     HEAP8[$279>>0] = $290;
     $291 = ((($p$091)) + 8|0);
     $292 = ((($p$091)) + 9|0);
     HEAP8[$291>>0] = 0;
     $293 = ((($p$091)) + 10|0);
     HEAP8[$292>>0] = 0;
     $294 = HEAP32[$252>>2]|0;
     $295 = ($294|0)==(0);
     do {
      if ($295) {
       $$0$i23 = $293;
      } else {
       $296 = ((($node2$093)) + 20|0);
       $297 = HEAP32[$296>>2]|0;
       $298 = ($297|0)==(1);
       $299 = $298&1;
       $300 = ((($p$091)) + 11|0);
       HEAP8[$293>>0] = $299;
       $301 = HEAP32[$296>>2]|0;
       $302 = ($301|0)==(1);
       $303 = ((($node2$093)) + 12|0);
       if ($302) {
        $314 = HEAP32[$303>>2]|0;
        $315 = HEAP32[$252>>2]|0;
        $316 = ($315|0)==(0);
        if ($316) {
         $$1$i5$i = $300;$331 = 12;$333 = 13;
        } else {
         $317 = HEAP16[$314>>1]|0;
         $318 = ($317<<16>>16)==(-2);
         $319 = $315 << 1;
         $320 = (($315) + -1)|0;
         $extract5$i20$i = ($317&65535) >>> 8;
         $$0$i$off0$v$i21$i = $318 ? $extract5$i20$i : $317;
         $$0$i$off0$i22$i = $$0$i$off0$v$i21$i&255;
         $321 = $extract5$i20$i&255;
         $$0$i$off8$i24$i = $318 ? -2 : $321;
         $322 = ((($p$091)) + 12|0);
         HEAP8[$300>>0] = $$0$i$off0$i22$i;
         HEAP8[$322>>0] = $$0$i$off8$i24$i;
         $323 = ($320|0)==(0);
         if (!($323)) {
          $$010$i25$i = $300;$$pn$i14 = $314;$327 = $320;
          while(1) {
           $324 = ((($$pn$i14)) + 2|0);
           $325 = ((($$010$i25$i)) + 2|0);
           $$pre$i$i15 = HEAP16[$324>>1]|0;
           $326 = (($327) + -1)|0;
           $extract5$i$i16 = ($$pre$i$i15&65535) >>> 8;
           $$0$i$off0$v$i$i17 = $318 ? $extract5$i$i16 : $$pre$i$i15;
           $$0$i$off0$i$i18 = $$0$i$off0$v$i$i17&255;
           $$0$i$off8$v$i$i19 = $318 ? $$pre$i$i15 : $extract5$i$i16;
           $$0$i$off8$i$i20 = $$0$i$off8$v$i$i19&255;
           $328 = ((($$010$i25$i)) + 3|0);
           HEAP8[$325>>0] = $$0$i$off0$i$i18;
           HEAP8[$328>>0] = $$0$i$off8$i$i20;
           $329 = ($326|0)==(0);
           if ($329) {
            break;
           } else {
            $$010$i25$i = $325;$$pn$i14 = $324;$327 = $326;
           }
          }
         }
         $$sum15$i = (($319) + 11)|0;
         $scevgep$i4$i = (($p$091) + ($$sum15$i)|0);
         $phitmp18$i = (($319) + 12)|0;
         $phitmp19$i = (($319) + 13)|0;
         $$1$i5$i = $scevgep$i4$i;$331 = $phitmp18$i;$333 = $phitmp19$i;
        }
        $330 = (($p$091) + ($331)|0);
        HEAP8[$$1$i5$i>>0] = 0;
        $332 = (($p$091) + ($333)|0);
        HEAP8[$330>>0] = 0;
        $$0$i23 = $332;
        break;
       } else {
        $304 = HEAP32[$252>>2]|0;
        $305 = ($304|0)==(0);
        if ($305) {
         $$02$lcssa$i12$i = $300;$313 = 12;
        } else {
         $306 = HEAP32[$303>>2]|0;
         $$014$i7$i = $306;$$023$i8$i = $300;$$05$i6$i = $304;
         while(1) {
          $307 = (($$05$i6$i) + -1)|0;
          $308 = ((($$014$i7$i)) + 1|0);
          $309 = HEAP8[$$014$i7$i>>0]|0;
          $310 = ((($$023$i8$i)) + 1|0);
          HEAP8[$$023$i8$i>>0] = $309;
          $311 = ($307|0)==(0);
          if ($311) {
           break;
          } else {
           $$014$i7$i = $308;$$023$i8$i = $310;$$05$i6$i = $307;
          }
         }
         $$sum$i12 = (($304) + 11)|0;
         $scevgep$i10$i = (($p$091) + ($$sum$i12)|0);
         $phitmp$i = (($304) + 12)|0;
         $$02$lcssa$i12$i = $scevgep$i10$i;$313 = $phitmp$i;
        }
        $312 = (($p$091) + ($313)|0);
        HEAP8[$$02$lcssa$i12$i>>0] = 0;
        $$0$i23 = $312;
        break;
       }
      }
     } while(0);
     $334 = ((($node2$093)) + 24|0);
     $335 = ((($node2$093)) + 32|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = ($336|0)==(1);
     if (!($337)) {
      $338 = HEAP32[$260>>2]|0;
      $339 = ($338|0)==(0);
      if ($339) {
       $p$1 = $$0$i23;
       break;
      }
      $340 = HEAP32[$334>>2]|0;
      $$014$i$i25 = $340;$$023$i$i26 = $$0$i23;$$05$i$i24 = $338;
      while(1) {
       $341 = (($$05$i$i24) + -1)|0;
       $342 = ((($$014$i$i25)) + 1|0);
       $343 = HEAP8[$$014$i$i25>>0]|0;
       $344 = ((($$023$i$i26)) + 1|0);
       HEAP8[$$023$i$i26>>0] = $343;
       $345 = ($341|0)==(0);
       if ($345) {
        break;
       } else {
        $$014$i$i25 = $342;$$023$i$i26 = $344;$$05$i$i24 = $341;
       }
      }
      $scevgep$i2$i = (($$0$i23) + ($338)|0);
      $p$1 = $scevgep$i2$i;
      break;
     }
     $346 = HEAP32[$334>>2]|0;
     $347 = HEAP32[$260>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $p$1 = $$0$i23;
      break;
     }
     $349 = HEAP16[$346>>1]|0;
     if ((($349<<16>>16) == -257) | (($349<<16>>16) == -2)) {
      $350 = ((($346)) + 2|0);
      $351 = (($347) + -1)|0;
      $352 = ($351|0)==(0);
      if ($352) {
       $p$1 = $$0$i23;
       break;
      } else {
       $$01$ph8$i$i = $350;$$02$ph7$i$i = $351;
      }
     } else {
      $$01$ph8$i$i = $346;$$02$ph7$i$i = $347;
     }
     $353 = ($349<<16>>16)==(-2);
     $$015$i$i = $$01$ph8$i$i;$$06$i$i = $$0$i23;$$in$i$i = $$02$ph7$i$i;
     while(1) {
      $354 = (($$in$i$i) + -1)|0;
      $355 = ((($$015$i$i)) + 2|0);
      $356 = HEAP16[$$015$i$i>>1]|0;
      if ($353) {
       $357 = $356&65535;
       $358 = $357 << 8;
       $359 = $357 >>> 8;
       $360 = $358 | $359;
       $361 = $360&65535;
       $$0$i3$i$i = $361;
      } else {
       $$0$i3$i$i = $356;
      }
      $$0$i3$off$i$i = (($$0$i3$i$i) + -32)<<16>>16;
      $362 = ($$0$i3$off$i$i&65535)>(223);
      $363 = $$0$i3$i$i&255;
      $$$i$i29 = $362 ? 32 : $363;
      $$0$be$i$i = ((($$06$i$i)) + 1|0);
      HEAP8[$$06$i$i>>0] = $$$i$i29;
      $364 = ($354|0)==(0);
      if ($364) {
       break;
      } else {
       $$015$i$i = $355;$$06$i$i = $$0$be$i$i;$$in$i$i = $354;
      }
     }
     $scevgep$i$i30 = (($$0$i23) + ($$02$ph7$i$i)|0);
     $p$1 = $scevgep$i$i30;
    }
   } while(0);
   $464 = HEAP32[$node2$093>>2]|0;
   $465 = ($464|0)==(0|0);
   if ($465) {
    $p$2 = $p$1;
    break;
   } else {
    $node2$093 = $464;$p$091 = $p$1;
   }
  }
 }
 $466 = ($albumart_mime$1|0)==(0|0);
 if ($466) {
  $p$3 = $p$2;
 } else {
  $467 = HEAP32[$49>>2]|0;
  $468 = ((($2)) + 85732|0);
  $469 = HEAP32[$468>>2]|0;
  $470 = ($467|0)!=(0|0);
  $471 = ($469|0)!=(0);
  $or$cond3$i = $470 & $471;
  if ($or$cond3$i) {
   $472 = ((($p$2)) + 3|0);
   HEAP8[$472>>0] = 67;
   $473 = ((($p$2)) + 2|0);
   HEAP8[$473>>0] = 73;
   $474 = ((($p$2)) + 1|0);
   HEAP8[$474>>0] = 80;
   HEAP8[$p$2>>0] = 65;
   $475 = ((($p$2)) + 4|0);
   $476 = (_strlen(($albumart_mime$1|0))|0);
   $477 = (($469) + 4)|0;
   $478 = (($477) + ($476))|0;
   $479 = $478&255;
   $480 = ((($p$2)) + 7|0);
   HEAP8[$480>>0] = $479;
   $481 = $478 >>> 8;
   $482 = $481&255;
   $483 = ((($p$2)) + 6|0);
   HEAP8[$483>>0] = $482;
   $484 = $478 >>> 16;
   $485 = $484&255;
   $486 = ((($p$2)) + 5|0);
   HEAP8[$486>>0] = $485;
   $487 = $478 >>> 24;
   $488 = $487&255;
   HEAP8[$475>>0] = $488;
   $489 = ((($p$2)) + 8|0);
   $490 = ((($p$2)) + 9|0);
   HEAP8[$489>>0] = 0;
   $491 = ((($p$2)) + 10|0);
   HEAP8[$490>>0] = 0;
   $492 = ((($p$2)) + 11|0);
   HEAP8[$491>>0] = 0;
   $493 = HEAP8[$albumart_mime$1>>0]|0;
   $494 = ($493<<24>>24)==(0);
   if ($494) {
    $$06$lcssa$i = $492;
   } else {
    $$0511$i = $albumart_mime$1;$$0610$i = $492;$497 = $493;
    while(1) {
     $495 = ((($$0511$i)) + 1|0);
     $496 = ((($$0610$i)) + 1|0);
     HEAP8[$$0610$i>>0] = $497;
     $498 = HEAP8[$495>>0]|0;
     $499 = ($498<<24>>24)==(0);
     if ($499) {
      $$06$lcssa$i = $496;
      break;
     } else {
      $$0511$i = $495;$$0610$i = $496;$497 = $498;
     }
    }
   }
   $500 = ((($$06$lcssa$i)) + 1|0);
   HEAP8[$$06$lcssa$i>>0] = 0;
   $501 = ((($$06$lcssa$i)) + 2|0);
   HEAP8[$500>>0] = 0;
   HEAP8[$501>>0] = 0;
   $502 = ((($$06$lcssa$i)) + 3|0);
   $$048$i = $467;$$09$i = $469;$$17$i = $502;
   while(1) {
    $503 = (($$09$i) + -1)|0;
    $504 = ((($$048$i)) + 1|0);
    $505 = HEAP8[$$048$i>>0]|0;
    $506 = ((($$17$i)) + 1|0);
    HEAP8[$$17$i>>0] = $505;
    $507 = ($503|0)==(0);
    if ($507) {
     break;
    } else {
     $$048$i = $504;$$09$i = $503;$$17$i = $506;
    }
   }
   $508 = (($469) + 3)|0;
   $scevgep$i = (($$06$lcssa$i) + ($508)|0);
   $p$3 = $scevgep$i;
  } else {
   $p$3 = $p$2;
  }
 }
 $509 = $p$3;
 $510 = $buffer;
 $511 = (($tag_size$4) + ($510))|0;
 $512 = (($511) - ($509))|0;
 _memset(($p$3|0),0,($512|0))|0;
 $$0 = $tag_size$4;
 STACKTOP = sp;return ($$0|0);
}
function _id3tag_write_v2($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gfp)) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $$idx1 = ((($1)) + 85696|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $2 = $$idx1$val & 5;
 $3 = ($2|0)==(1);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_lame_get_id3v2_tag($gfp,0,0)|0);
 $5 = (_calloc($4,1)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = -1;
  return ($$0|0);
 }
 $7 = (_lame_get_id3v2_tag($gfp,$5,$4)|0);
 $8 = ($7>>>0)>($4>>>0);
 if ($8) {
  _free($5);
  $$0 = -1;
  return ($$0|0);
 }
 $9 = ($7|0)==(0);
 if (!($9)) {
  $i$03 = 0;
  while(1) {
   $10 = (($5) + ($i$03)|0);
   $11 = HEAP8[$10>>0]|0;
   _add_dummy_byte($1,$11,1);
   $12 = (($i$03) + 1)|0;
   $exitcond = ($12|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $i$03 = $12;
   }
  }
 }
 _free($5);
 $$0 = $7;
 return ($$0|0);
}
function _lame_get_id3v1_tag($gfp,$buffer,$size) {
 $gfp = $gfp|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i10 = 0, $$0$lcssa$i19 = 0, $$0$lcssa$i28 = 0, $$0$lcssa$i37 = 0, $$0$ph8$i = 0, $$0$ph8$i13 = 0, $$0$ph8$i22 = 0, $$0$ph8$i31 = 0, $$0$ph8$i4 = 0, $$02$ph7$i = 0, $$02$ph7$i14 = 0, $$02$ph7$i23 = 0, $$02$ph7$i32 = 0, $$02$ph7$i5 = 0, $$05$i = 0, $$05$i$lcssa = 0, $$05$i17 = 0, $$05$i17$lcssa = 0;
 var $$05$i212 = 0, $$05$i26 = 0, $$05$i26$lcssa = 0, $$05$i35 = 0, $$05$i35$lcssa = 0, $$05$i8 = 0, $$05$i8$lcssa = 0, $$idx2 = 0, $$idx2$val = 0, $$in$i = 0, $$in$i12 = 0, $$in$i21 = 0, $$in$i3 = 0, $$in$i30 = 0, $$in10$i = 0, $$in10$i16 = 0, $$in10$i25 = 0, $$in10$i34 = 0, $$in10$i7 = 0, $$lcssa = 0;
 var $$lcssa214 = 0, $$lcssa218 = 0, $$lcssa220 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$lcssa236 = 0, $$lcssa238 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, $p$0 = 0, $vararg_buffer = 0, $year = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $year = sp + 4|0;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($size>>>0)<(128);
 if ($1) {
  $$0 = 128;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($gfp)) + 288|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = ($buffer|0)==(0|0);
 $or$cond = $5 | $4;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $$idx2 = ((($3)) + 85696|0);
 $$idx2$val = HEAP32[$$idx2>>2]|0;
 $6 = $$idx2$val & 9;
 $7 = ($6|0)==(1);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = $$idx2$val << 1;
 $9 = $8 & 32;
 $10 = ((($buffer)) + 1|0);
 HEAP8[$buffer>>0] = 84;
 $11 = ((($buffer)) + 2|0);
 HEAP8[$10>>0] = 65;
 $12 = ((($buffer)) + 3|0);
 HEAP8[$11>>0] = 71;
 $13 = ((($3)) + 85704|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $9&255;
 $$0$ph8$i31 = $12;$$02$ph7$i32 = $14;$$in$i30 = 30;
 L13: while(1) {
  $16 = ($$02$ph7$i32|0)==(0|0);
  $$05$i35 = $$0$ph8$i31;$$in10$i34 = $$in$i30;
  while(1) {
   $17 = (($$in10$i34) + -1)|0;
   if (!($16)) {
    $18 = HEAP8[$$02$ph7$i32>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if (!($19)) {
     $$05$i35$lcssa = $$05$i35;$$lcssa236 = $17;$$lcssa238 = $18;
     break;
    }
   }
   $23 = ((($$05$i35)) + 1|0);
   HEAP8[$$05$i35>>0] = $15;
   $24 = ($17|0)==(0);
   if ($24) {
    $$0$lcssa$i37 = $23;
    break L13;
   } else {
    $$05$i35 = $23;$$in10$i34 = $17;
   }
  }
  $20 = ((($$02$ph7$i32)) + 1|0);
  $21 = ((($$05$i35$lcssa)) + 1|0);
  HEAP8[$$05$i35$lcssa>>0] = $$lcssa238;
  $22 = ($$lcssa236|0)==(0);
  if ($22) {
   $$0$lcssa$i37 = $21;
   break;
  } else {
   $$0$ph8$i31 = $21;$$02$ph7$i32 = $20;$$in$i30 = $$lcssa236;
  }
 }
 $25 = ((($3)) + 85708|0);
 $26 = HEAP32[$25>>2]|0;
 $$0$ph8$i22 = $$0$lcssa$i37;$$02$ph7$i23 = $26;$$in$i21 = 30;
 L22: while(1) {
  $27 = ($$02$ph7$i23|0)==(0|0);
  $$05$i26 = $$0$ph8$i22;$$in10$i25 = $$in$i21;
  while(1) {
   $28 = (($$in10$i25) + -1)|0;
   if (!($27)) {
    $29 = HEAP8[$$02$ph7$i23>>0]|0;
    $30 = ($29<<24>>24)==(0);
    if (!($30)) {
     $$05$i26$lcssa = $$05$i26;$$lcssa230 = $28;$$lcssa232 = $29;
     break;
    }
   }
   $34 = ((($$05$i26)) + 1|0);
   HEAP8[$$05$i26>>0] = $15;
   $35 = ($28|0)==(0);
   if ($35) {
    $$0$lcssa$i28 = $34;
    break L22;
   } else {
    $$05$i26 = $34;$$in10$i25 = $28;
   }
  }
  $31 = ((($$02$ph7$i23)) + 1|0);
  $32 = ((($$05$i26$lcssa)) + 1|0);
  HEAP8[$$05$i26$lcssa>>0] = $$lcssa232;
  $33 = ($$lcssa230|0)==(0);
  if ($33) {
   $$0$lcssa$i28 = $32;
   break;
  } else {
   $$0$ph8$i22 = $32;$$02$ph7$i23 = $31;$$in$i21 = $$lcssa230;
  }
 }
 $36 = ((($3)) + 85712|0);
 $37 = HEAP32[$36>>2]|0;
 $$0$ph8$i13 = $$0$lcssa$i28;$$02$ph7$i14 = $37;$$in$i12 = 30;
 L31: while(1) {
  $38 = ($$02$ph7$i14|0)==(0|0);
  $$05$i17 = $$0$ph8$i13;$$in10$i16 = $$in$i12;
  while(1) {
   $39 = (($$in10$i16) + -1)|0;
   if (!($38)) {
    $40 = HEAP8[$$02$ph7$i14>>0]|0;
    $41 = ($40<<24>>24)==(0);
    if (!($41)) {
     $$05$i17$lcssa = $$05$i17;$$lcssa224 = $39;$$lcssa226 = $40;
     break;
    }
   }
   $45 = ((($$05$i17)) + 1|0);
   HEAP8[$$05$i17>>0] = $15;
   $46 = ($39|0)==(0);
   if ($46) {
    $$0$lcssa$i19 = $45;
    break L31;
   } else {
    $$05$i17 = $45;$$in10$i16 = $39;
   }
  }
  $42 = ((($$02$ph7$i14)) + 1|0);
  $43 = ((($$05$i17$lcssa)) + 1|0);
  HEAP8[$$05$i17$lcssa>>0] = $$lcssa226;
  $44 = ($$lcssa224|0)==(0);
  if ($44) {
   $$0$lcssa$i19 = $43;
   break;
  } else {
   $$0$ph8$i13 = $43;$$02$ph7$i14 = $42;$$in$i12 = $$lcssa224;
  }
 }
 $47 = ((($3)) + 85700|0);
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$vararg_buffer>>2] = $48;
 (_sprintf($year,6552,$vararg_buffer)|0);
 $49 = HEAP32[$47>>2]|0;
 $50 = ($49|0)!=(0);
 $51 = $50 ? $year : 0;
 $$0$ph8$i4 = $$0$lcssa$i19;$$02$ph7$i5 = $51;$$in$i3 = 4;
 L40: while(1) {
  $52 = ($$02$ph7$i5|0)==(0|0);
  $$05$i8 = $$0$ph8$i4;$$in10$i7 = $$in$i3;
  while(1) {
   $53 = (($$in10$i7) + -1)|0;
   if (!($52)) {
    $54 = HEAP8[$$02$ph7$i5>>0]|0;
    $55 = ($54<<24>>24)==(0);
    if (!($55)) {
     $$05$i8$lcssa = $$05$i8;$$lcssa218 = $53;$$lcssa220 = $54;
     break;
    }
   }
   $59 = ((($$05$i8)) + 1|0);
   HEAP8[$$05$i8>>0] = $15;
   $60 = ($53|0)==(0);
   if ($60) {
    $$0$lcssa$i10 = $59;
    break L40;
   } else {
    $$05$i8 = $59;$$in10$i7 = $53;
   }
  }
  $56 = ((($$02$ph7$i5)) + 1|0);
  $57 = ((($$05$i8$lcssa)) + 1|0);
  HEAP8[$$05$i8$lcssa>>0] = $$lcssa220;
  $58 = ($$lcssa218|0)==(0);
  if ($58) {
   $$0$lcssa$i10 = $57;
   break;
  } else {
   $$0$ph8$i4 = $57;$$02$ph7$i5 = $56;$$in$i3 = $$lcssa218;
  }
 }
 $61 = ((($3)) + 85716|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($3)) + 85720|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0);
 $66 = $65 ? 28 : 30;
 $$0$ph8$i = $$0$lcssa$i10;$$02$ph7$i = $62;$$in$i = $66;
 L49: while(1) {
  $67 = ($$02$ph7$i|0)==(0|0);
  $$05$i = $$0$ph8$i;$$in10$i = $$in$i;
  while(1) {
   $68 = (($$in10$i) + -1)|0;
   if (!($67)) {
    $69 = HEAP8[$$02$ph7$i>>0]|0;
    $70 = ($69<<24>>24)==(0);
    if (!($70)) {
     $$05$i$lcssa = $$05$i;$$lcssa = $68;$$lcssa214 = $69;
     break;
    }
   }
   $74 = ((($$05$i)) + 1|0);
   HEAP8[$$05$i>>0] = $15;
   $75 = ($68|0)==(0);
   if ($75) {
    $$0$lcssa$i = $74;$$05$i212 = $$05$i;
    break L49;
   } else {
    $$05$i = $74;$$in10$i = $68;
   }
  }
  $71 = ((($$02$ph7$i)) + 1|0);
  $72 = ((($$05$i$lcssa)) + 1|0);
  HEAP8[$$05$i$lcssa>>0] = $$lcssa214;
  $73 = ($$lcssa|0)==(0);
  if ($73) {
   $$0$lcssa$i = $72;$$05$i212 = $$05$i$lcssa;
   break;
  } else {
   $$0$ph8$i = $72;$$02$ph7$i = $71;$$in$i = $$lcssa;
  }
 }
 $76 = HEAP32[$63>>2]|0;
 $77 = ($76|0)==(0);
 if ($77) {
  $p$0 = $$0$lcssa$i;
 } else {
  $78 = ((($$05$i212)) + 2|0);
  HEAP8[$$0$lcssa$i>>0] = 0;
  $79 = HEAP32[$63>>2]|0;
  $80 = $79&255;
  $81 = ((($$05$i212)) + 3|0);
  HEAP8[$78>>0] = $80;
  $p$0 = $81;
 }
 $82 = ((($3)) + 85724|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83&255;
 HEAP8[$p$0>>0] = $84;
 $$0 = 128;
 STACKTOP = sp;return ($$0|0);
}
function _id3tag_write_v1($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $i$01 = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $tag = sp;
 $0 = ((($gfp)) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lame_get_id3v1_tag($gfp,$tag,128)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3>>>0)>(127);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $5 = (($tag) + ($i$01)|0);
  $6 = HEAP8[$5>>0]|0;
  _add_dummy_byte($1,$6,1);
  $7 = (($i$01) + 1)|0;
  $exitcond = ($7|0)==($2|0);
  if ($exitcond) {
   $$0 = $2;
   break;
  } else {
   $i$01 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _id3v2_add_latin1($gfp,$frame_id,$lang,$desc,$text) {
 $gfp = $gfp|0;
 $frame_id = $frame_id|0;
 $lang = $lang|0;
 $desc = $desc|0;
 $text = $text|0;
 var $$0 = 0, $$0$i = 0, $$0$i2 = 0, $$0$i9 = 0, $$in$i = 0, $$lcssa = 0, $$lcssa84 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0$lcssa$ph$i = 0, $i$01$i = 0, $n$0$i = 0, $n$0$i$lcssa = 0, $n$0$i7 = 0, $n$0$i7$lcssa = 0, $node$0 = 0, $node$0$i = 0, $node$0$i14 = 0, $node$0$i14$us = 0, $node$0$us = 0;
 var $node$01$i = 0, $node$01$i11 = 0, $node$01$i11$us = 0, $node$02$i = 0, $node$02$i12 = 0, $node$02$i12$us = 0, $node$1 = 0, $node$2 = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = -255;
  return ($$0|0);
 }
 $1 = ((($gfp)) + 288|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -255;
  return ($$0|0);
 }
 $4 = ((($2)) + 85744|0);
 $node$01$i = HEAP32[$4>>2]|0;
 $5 = ($node$01$i|0)==(0|0);
 L7: do {
  if ($5) {
   $$0$i = 0;
  } else {
   $node$02$i = $node$01$i;
   while(1) {
    $6 = ((($node$02$i)) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==($frame_id|0);
    if ($8) {
     $$0$i = $node$02$i;
     break L7;
    }
    $node$0$i = HEAP32[$node$02$i>>2]|0;
    $9 = ($node$0$i|0)==(0|0);
    if ($9) {
     $$0$i = 0;
     break;
    } else {
     $node$02$i = $node$0$i;
    }
   }
  }
 } while(0);
 L12: do {
  if ((($frame_id|0) == 1347570006) | (($frame_id|0) == 1196575044) | (($frame_id|0) == 1162756946) | (($frame_id|0) == 1279872587) | (($frame_id|0) == 1095061059) | (($frame_id|0) == 1346588244) | (($frame_id|0) == 1195724610) | (($frame_id|0) == 1095780675) | (($frame_id|0) == 1398361172) | (($frame_id|0) == 1129270605) | (($frame_id|0) == 1465407576) | (($frame_id|0) == 1415075928)) {
   $10 = ($$0$i|0)==(0|0);
   if ($10) {
    label = 25;
   } else {
    $11 = ($desc|0)==(0|0);
    if ($11) {
     $node$0$us = $$0$i;
     L16: while(1) {
      $12 = ((($node$0$us)) + 8|0);
      $13 = (_isSameLang($12,$lang)|0);
      $14 = ($13|0)==(0);
      if (!($14)) {
       $15 = ((($node$0$us)) + 16|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = ($16|0)==(0);
       if ($17) {
        $node$2 = $node$0$us;
        break L12;
       }
      }
      $node$01$i11$us = HEAP32[$node$0$us>>2]|0;
      $18 = ($node$01$i11$us|0)==(0|0);
      if ($18) {
       label = 25;
       break L12;
      } else {
       $node$02$i12$us = $node$01$i11$us;
      }
      while(1) {
       $19 = ((($node$02$i12$us)) + 4|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = ($20|0)==($frame_id|0);
       if ($21) {
        $node$0$us = $node$02$i12$us;
        continue L16;
       }
       $node$0$i14$us = HEAP32[$node$02$i12$us>>2]|0;
       $22 = ($node$0$i14$us|0)==(0|0);
       if ($22) {
        label = 25;
        break L12;
       } else {
        $node$02$i12$us = $node$0$i14$us;
       }
      }
     }
    } else {
     $node$0 = $$0$i;
    }
    L24: while(1) {
     $23 = ((($node$0)) + 8|0);
     $24 = (_isSameLang($23,$lang)|0);
     $25 = ($24|0)==(0);
     L26: do {
      if (!($25)) {
       $26 = ((($node$0)) + 20|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(1);
       $29 = ((($node$0)) + 16|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)==(0);
       if ($28) {
        if ($31) {
         $node$2 = $node$0;
         break L12;
        } else {
         break;
        }
       }
       if ($31) {
        $node$2 = $node$0;
        break L12;
       }
       $32 = ((($node$0)) + 12|0);
       $33 = HEAP32[$32>>2]|0;
       $i$01$i = 0;
       while(1) {
        $36 = (($33) + ($i$01$i)|0);
        $37 = HEAP8[$36>>0]|0;
        $38 = (($desc) + ($i$01$i)|0);
        $39 = HEAP8[$38>>0]|0;
        $40 = ($37<<24>>24)==($39<<24>>24);
        $34 = (($i$01$i) + 1)|0;
        if (!($40)) {
         break L26;
        }
        $35 = ($34>>>0)<($30>>>0);
        if ($35) {
         $i$01$i = $34;
        } else {
         $node$1 = $node$0;
         label = 24;
         break L12;
        }
       }
      }
     } while(0);
     $41 = ($node$0|0)==(0|0);
     $$in$i = $41 ? $4 : $node$0;
     $node$01$i11 = HEAP32[$$in$i>>2]|0;
     $42 = ($node$01$i11|0)==(0|0);
     if ($42) {
      label = 25;
      break L12;
     } else {
      $node$02$i12 = $node$01$i11;
     }
     while(1) {
      $43 = ((($node$02$i12)) + 4|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==($frame_id|0);
      if ($45) {
       $node$0 = $node$02$i12;
       continue L24;
      }
      $node$0$i14 = HEAP32[$node$02$i12>>2]|0;
      $46 = ($node$0$i14|0)==(0|0);
      if ($46) {
       label = 25;
       break L12;
      } else {
       $node$02$i12 = $node$0$i14;
      }
     }
    }
   }
  } else {
   $node$1 = $$0$i;
   label = 24;
  }
 } while(0);
 if ((label|0) == 24) {
  $47 = ($node$1|0)==(0|0);
  if ($47) {
   label = 25;
  } else {
   $node$2 = $node$1;
  }
 }
 if ((label|0) == 25) {
  $48 = (_calloc(1,36)|0);
  $49 = ($48|0)==(0|0);
  if ($49) {
   $$0 = -254;
   return ($$0|0);
  }
  $50 = ((($2)) + 85748|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(0|0);
  if ($52) {
   label = 28;
  } else {
   $53 = HEAP32[$4>>2]|0;
   $54 = ($53|0)==(0|0);
   if ($54) {
    label = 28;
   } else {
    HEAP32[$51>>2] = $48;
   }
  }
  if ((label|0) == 28) {
   HEAP32[$4>>2] = $48;
  }
  HEAP32[$50>>2] = $48;
  $node$2 = $48;
 }
 $55 = ((($node$2)) + 4|0);
 HEAP32[$55>>2] = $frame_id;
 $56 = ((($node$2)) + 8|0);
 $57 = ($lang|0)==(0|0);
 do {
  if ($57) {
   label = 33;
  } else {
   $58 = HEAP8[$lang>>0]|0;
   $59 = ($58<<24>>24)==(0);
   if ($59) {
    label = 33;
   } else {
    HEAP8[$56>>0] = $58;
    $66 = HEAP8[$lang>>0]|0;
    $67 = ($66<<24>>24)==(0);
    if ($67) {
     $i$0$lcssa$ph$i = 1;
    } else {
     $68 = ((($lang)) + 1|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = ((($node$2)) + 9|0);
     HEAP8[$70>>0] = $69;
     $71 = HEAP8[$lang>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $i$0$lcssa$ph$i = 2;
     } else {
      $62 = ((($lang)) + 2|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = ((($node$2)) + 10|0);
      HEAP8[$64>>0] = $63;
      break;
     }
    }
    $scevgep$i = (((($node$2)) + 8|0) + ($i$0$lcssa$ph$i)|0);
    $65 = $i$0$lcssa$ph$i ^ 3;
    _memset(($scevgep$i|0),32,($65|0))|0;
   }
  }
 } while(0);
 if ((label|0) == 33) {
  HEAP8[$56>>0] = 88;
  $60 = ((($node$2)) + 9|0);
  HEAP8[$60>>0] = 88;
  $61 = ((($node$2)) + 10|0);
  HEAP8[$61>>0] = 88;
 }
 $73 = ((($node$2)) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 _free($74);
 HEAP32[$73>>2] = 0;
 $75 = ($desc|0)==(0|0);
 if ($75) {
  $$0$i9 = 0;
 } else {
  $n$0$i7 = 0;
  while(1) {
   $76 = (($desc) + ($n$0$i7)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = ($77<<24>>24)==(0);
   $79 = (($n$0$i7) + 1)|0;
   if ($78) {
    $$lcssa84 = $79;$n$0$i7$lcssa = $n$0$i7;
    break;
   } else {
    $n$0$i7 = $79;
   }
  }
  $80 = ($n$0$i7$lcssa|0)==(0);
  if ($80) {
   $$0$i9 = 0;
  } else {
   $81 = (_calloc($$lcssa84,1)|0);
   HEAP32[$73>>2] = $81;
   $82 = ($81|0)==(0|0);
   if ($82) {
    $$0$i9 = 0;
   } else {
    _memcpy(($81|0),($desc|0),($n$0$i7$lcssa|0))|0;
    $83 = (($81) + ($n$0$i7$lcssa)|0);
    HEAP8[$83>>0] = 0;
    $$0$i9 = $n$0$i7$lcssa;
   }
  }
 }
 $84 = ((($node$2)) + 16|0);
 HEAP32[$84>>2] = $$0$i9;
 $85 = ((($node$2)) + 20|0);
 HEAP32[$85>>2] = 0;
 $86 = ((($node$2)) + 24|0);
 $87 = HEAP32[$86>>2]|0;
 _free($87);
 HEAP32[$86>>2] = 0;
 $88 = ($text|0)==(0|0);
 if ($88) {
  $$0$i2 = 0;
 } else {
  $n$0$i = 0;
  while(1) {
   $89 = (($text) + ($n$0$i)|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = ($90<<24>>24)==(0);
   $92 = (($n$0$i) + 1)|0;
   if ($91) {
    $$lcssa = $92;$n$0$i$lcssa = $n$0$i;
    break;
   } else {
    $n$0$i = $92;
   }
  }
  $93 = ($n$0$i$lcssa|0)==(0);
  if ($93) {
   $$0$i2 = 0;
  } else {
   $94 = (_calloc($$lcssa,1)|0);
   HEAP32[$86>>2] = $94;
   $95 = ($94|0)==(0|0);
   if ($95) {
    $$0$i2 = 0;
   } else {
    _memcpy(($94|0),($text|0),($n$0$i$lcssa|0))|0;
    $96 = (($94) + ($n$0$i$lcssa)|0);
    HEAP8[$96>>0] = 0;
    $$0$i2 = $n$0$i$lcssa;
   }
  }
 }
 $97 = ((($node$2)) + 28|0);
 HEAP32[$97>>2] = $$0$i2;
 $98 = ((($node$2)) + 32|0);
 HEAP32[$98>>2] = 0;
 $99 = ((($2)) + 85696|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $100 | 3;
 HEAP32[$99>>2] = $101;
 $$0 = 0;
 return ($$0|0);
}
function _isSameLang($l1,$l2) {
 $l1 = $l1|0;
 $l2 = $l2|0;
 var $$ = 0, $$$1 = 0, $$$2 = 0, $$5 = 0, $$mask = 0, $$mask$1 = 0, $$mask$2 = 0, $$unshifted = 0, $$unshifted$1 = 0, $$unshifted$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$0 = 0, $b$0$1 = 0, $b$0$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l2|0)==(0|0);
 if ($0) {
  $11 = 88;$23 = 88;$35 = 88;
 } else {
  $1 = HEAP8[$l2>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $11 = 88;$23 = 88;$35 = 88;
  } else {
   $3 = ((($l2)) + 1|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = ((($l2)) + 2|0);
   $6 = HEAP8[$5>>0]|0;
   $11 = $1;$23 = $4;$35 = $6;
  }
 }
 $7 = HEAP8[$l1>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = (_tolower($8)|0);
 $10 = $11 << 24 >> 24;
 $12 = (_tolower($10)|0);
 $13 = $9&255;
 $14 = ($13<<24>>24)<(32);
 $$ = $14 ? 32 : $9;
 $15 = $12&255;
 $16 = ($15<<24>>24)<(32);
 $b$0 = $16 ? 32 : $12;
 $$unshifted = $b$0 ^ $$;
 $$mask = $$unshifted & 255;
 $17 = ($$mask|0)==(0);
 if (!($17)) {
  return 0;
 }
 $18 = ((($l1)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = (_tolower($20)|0);
 $22 = $23 << 24 >> 24;
 $24 = (_tolower($22)|0);
 $25 = $21&255;
 $26 = ($25<<24>>24)<(32);
 $$$1 = $26 ? 32 : $21;
 $27 = $24&255;
 $28 = ($27<<24>>24)<(32);
 $b$0$1 = $28 ? 32 : $24;
 $$unshifted$1 = $b$0$1 ^ $$$1;
 $$mask$1 = $$unshifted$1 & 255;
 $29 = ($$mask$1|0)==(0);
 if ($29) {
  $30 = ((($l1)) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = (_tolower($32)|0);
  $34 = $35 << 24 >> 24;
  $36 = (_tolower($34)|0);
  $37 = $33&255;
  $38 = ($37<<24>>24)<(32);
  $$$2 = $38 ? 32 : $33;
  $39 = $36&255;
  $40 = ($39<<24>>24)<(32);
  $b$0$2 = $40 ? 32 : $36;
  $$unshifted$2 = $b$0$2 ^ $$$2;
  $$mask$2 = $$unshifted$2 & 255;
  $41 = ($$mask$2|0)==(0);
  $$5 = $41&1;
  return ($$5|0);
 } else {
  return 0;
 }
 return (0)|0;
}
function _is_lame_global_flags_valid($gfp) {
 $gfp = $gfp|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[$gfp>>2]|0;
 $2 = ($1|0)==(-487877);
 $$ = $2&1;
 $$0 = $$;
 return ($$0|0);
}
function _lame_init_params($gfp) {
 $gfp = $gfp|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i13 = 0, $$1$i = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$30 = 0, $$5 = 0, $$6 = 0, $$9 = 0, $$lcssa = 0, $$lcssa113 = 0.0, $$lcssa114 = 0.0, $$phi$trans$insert56 = 0, $$phi$trans$insert64 = 0, $$phi$trans$insert77 = 0, $$pr$i = 0.0, $$pre = 0;
 var $$pre$i = 0.0, $$pre57 = 0, $$pre58 = 0, $$pre59 = 0.0, $$pre60 = 0, $$pre63 = 0, $$pre65 = 0, $$pre67 = 0, $$pre69 = 0, $$pre69$1 = 0, $$pre69$10 = 0, $$pre69$11 = 0, $$pre69$12 = 0, $$pre69$13 = 0, $$pre69$14 = 0, $$pre69$15 = 0, $$pre69$16 = 0, $$pre69$17 = 0, $$pre69$2 = 0, $$pre69$3 = 0;
 var $$pre69$4 = 0, $$pre69$5 = 0, $$pre69$6 = 0, $$pre69$7 = 0, $$pre69$8 = 0, $$pre69$9 = 0, $$pre70 = 0, $$pre70$1 = 0, $$pre70$10 = 0, $$pre70$11 = 0, $$pre70$12 = 0, $$pre70$13 = 0, $$pre70$14 = 0, $$pre70$15 = 0, $$pre70$16 = 0, $$pre70$17 = 0, $$pre70$2 = 0, $$pre70$3 = 0, $$pre70$4 = 0, $$pre70$5 = 0;
 var $$pre70$6 = 0, $$pre70$7 = 0, $$pre70$8 = 0, $$pre70$9 = 0, $$pre72 = 0, $$pre74 = 0, $$pre75 = 0, $$pre78 = 0, $$sink = 0.0, $$sink54 = 0, $$sink55 = 0, $$storemerge = 0, $$storemerge91 = 0, $$suggested_samplefreq$0$i = 0, $$suggested_samplefreq$2$i = 0, $$suggested_samplefreq$4$i = 0, $$suggested_samplefreq$6$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0.0, $1062 = 0.0, $1063 = 0.0, $1064 = 0.0, $1065 = 0.0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0.0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0.0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0.0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0.0, $11 = 0, $110 = 0, $1100 = 0.0, $1101 = 0, $1102 = 0.0, $1103 = 0.0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0;
 var $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
 var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0.0, $1133 = 0, $1134 = 0, $1135 = 0.0, $1136 = 0.0, $1137 = 0, $1138 = 0, $1139 = 0.0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0.0, $1143 = 0.0;
 var $1144 = 0, $1145 = 0, $1146 = 0.0, $1147 = 0, $1148 = 0, $1149 = 0.0, $115 = 0, $1150 = 0.0, $1151 = 0, $1152 = 0, $1153 = 0.0, $1154 = 0, $1155 = 0, $1156 = 0.0, $1157 = 0.0, $1158 = 0.0, $1159 = 0, $116 = 0, $1160 = 0.0, $1161 = 0;
 var $1162 = 0.0, $1163 = 0.0, $1164 = 0, $1165 = 0.0, $1166 = 0.0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0.0, $1172 = 0.0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
 var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0;
 var $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0;
 var $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0.0;
 var $433 = 0.0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0;
 var $488 = 0.0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0.0;
 var $505 = 0, $506 = 0, $507 = 0.0, $508 = 0.0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0, $54 = 0, $540 = 0.0;
 var $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0.0, $549 = 0, $55 = 0, $550 = 0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0, $557 = 0.0, $558 = 0.0, $559 = 0.0;
 var $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0, $566 = 0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0.0, $763 = 0, $764 = 0, $765 = 0, $766 = 0.0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0.0, $771 = 0, $772 = 0, $773 = 0, $774 = 0.0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0.0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0.0, $783 = 0, $784 = 0, $785 = 0, $786 = 0.0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0.0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0.0, $795 = 0, $796 = 0, $797 = 0, $798 = 0.0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0.0, $803 = 0, $804 = 0, $805 = 0, $806 = 0.0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0.0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0.0, $815 = 0, $816 = 0, $817 = 0, $818 = 0.0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0.0, $823 = 0, $824 = 0, $825 = 0, $826 = 0.0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0.0, $831 = 0, $832 = 0, $833 = 0, $834 = 0.0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0.0, $899 = 0.0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0.0, $902 = 0.0, $903 = 0.0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $band$011$i = 0, $band$18$i = 0, $band$27$i = 0, $exitcond$i = 0, $exitcond14$i = 0, $exitcond15$i = 0, $fabsf = 0.0, $fc1$0$i = 0.0, $fc2$0$i = 0.0, $highpass_band$010$i = 0, $highpass_band$1$i = 0, $highpass_band$1$i$lcssa = 0;
 var $i$040 = 0, $i$040$lcssa = 0, $lowpass_band$0$minband$0$i = 0, $lowpass_band$013$i = 0, $lowpass_band$1$i = 0, $lowpass_band$1$i$lcssa = 0, $m10$sroa$0$0 = 0.0, $m10$sroa$22$0 = 0.0, $m10$sroa$8$0 = 0.0, $maxband$09$i = 0, $maxband$1$i = 0, $maxband$1$i$lcssa = 0, $minband$012$i = 0, $minband$1$i = 0, $minband$1$i$lcssa = 0, $or$cond = 0, $or$cond$i = 0, $or$cond17$i = 0, $or$cond4$i = 0, $storemerge$i = 0.0;
 var $storemerge$in$i = 0.0, $storemerge$in$in$i = 0.0, $storemerge$in$in$in$i = 0.0, $storemerge1 = 0.0, $storemerge2 = 0.0, $storemerge3 = 0.0, $storemerge4 = 0.0, $suggested_samplefreq$0$i = 0, $suggested_samplefreq$2$i = 0, $suggested_samplefreq$4$i = 0, $suggested_samplefreq$6$i = 0, $suggested_samplefreq$8$i = 0, $switch = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($gfp)) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 HEAP32[$1>>2] = 0;
 $3 = ((($gfp)) + 180|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 124|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($gfp)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 140|0);
 HEAP32[$8>>2] = $7;
 $9 = ($7|0)==(0);
 if (!($9)) {
  $10 = ((($gfp)) + 36|0);
  HEAP32[$10>>2] = 0;
 }
 $11 = ((($1)) + 85804|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = ((($gfp)) + 36|0);
  HEAP32[$14>>2] = 0;
 }
 $15 = ((($gfp)) + 272|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($1)) + 85828|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($gfp)) + 276|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 85832|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($gfp)) + 280|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($1)) + 85836|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($gfp)) + 296|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 if ($26) {
  $34 = ((($1)) + 85756|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & -3;
  HEAP32[$34>>2] = $36;
  $48 = $36;
 } else {
  $27 = (_has_3DNow()|0);
  $28 = ((($1)) + 85756|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $27 << 1;
  $31 = $30 & 2;
  $32 = $29 & -3;
  $33 = $32 | $31;
  HEAP32[$28>>2] = $33;
  $48 = $33;
 }
 $37 = ((($gfp)) + 292|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0);
 if ($39) {
  $46 = ((($1)) + 85756|0);
  $47 = $48 & -2;
  HEAP32[$46>>2] = $47;
  $67 = $47;
 } else {
  $40 = (_has_MMX()|0);
  $41 = ((($1)) + 85756|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $40 & 1;
  $44 = $42 & -2;
  $45 = $44 | $43;
  HEAP32[$41>>2] = $45;
  $67 = $45;
 }
 $49 = ((($gfp)) + 300|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0);
 if ($51) {
  $65 = ((($1)) + 85756|0);
  $66 = $67 & -13;
  HEAP32[$65>>2] = $66;
 } else {
  $52 = (_has_SSE()|0);
  $53 = ((($1)) + 85756|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $52 << 2;
  $56 = $55 & 4;
  $57 = $54 & -5;
  $58 = $57 | $56;
  HEAP32[$53>>2] = $58;
  $59 = (_has_SSE2()|0);
  $60 = HEAP32[$53>>2]|0;
  $61 = $59 << 3;
  $62 = $61 & 8;
  $63 = $60 & -9;
  $64 = $63 | $62;
  HEAP32[$53>>2] = $64;
 }
 $68 = ((($1)) + 85796|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)==(0|0);
 if ($70) {
  $71 = (_calloc(1,2772)|0);
  HEAP32[$68>>2] = $71;
  $72 = ($71|0)==(0|0);
  if ($72) {
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $73 = ((($1)) + 85676|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)==(0|0);
 if ($75) {
  $76 = (_calloc(1,134792)|0);
  HEAP32[$73>>2] = $76;
  $77 = ($76|0)==(0|0);
  if ($77) {
   _freegfc($1);
   HEAP32[$0>>2] = 0;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $78 = ((($gfp)) + 120|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($1)) + 160|0);
 HEAP32[$80>>2] = $79;
 $81 = ((($gfp)) + 104|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($1)) + 164|0);
 HEAP32[$83>>2] = $82;
 $84 = ((($gfp)) + 108|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ((($1)) + 168|0);
 HEAP32[$86>>2] = $85;
 $87 = ((($gfp)) + 112|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ((($1)) + 172|0);
 HEAP32[$89>>2] = $88;
 $90 = ((($gfp)) + 116|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ((($1)) + 176|0);
 HEAP32[$92>>2] = $91;
 $93 = ((($gfp)) + 8|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($1)) + 68|0);
 HEAP32[$95>>2] = $94;
 $96 = ($94|0)==(1);
 $97 = ((($gfp)) + 48|0);
 if ($96) {
  HEAP32[$97>>2] = 3;
  $98 = ((($1)) + 72|0);
  HEAP32[$98>>2] = 1;
  $1205 = $98;$1206 = 1;
  label = 23;
 } else {
  $$pre = HEAP32[$97>>2]|0;
  $99 = ($$pre|0)==(3);
  $100 = $99 ? 1 : 2;
  $101 = ((($1)) + 72|0);
  HEAP32[$101>>2] = $100;
  if ($99) {
   $1205 = $101;$1206 = $100;
   label = 23;
  } else {
   $$phi$trans$insert56 = ((($gfp)) + 52|0);
   $$pre57 = HEAP32[$$phi$trans$insert56>>2]|0;
   $104 = $$pre57;$1207 = $100;$142 = $101;
  }
 }
 if ((label|0) == 23) {
  $102 = ((($gfp)) + 52|0);
  HEAP32[$102>>2] = 0;
  $104 = 0;$1207 = $1206;$142 = $1205;
 }
 $103 = ((($1)) + 80|0);
 HEAP32[$103>>2] = $104;
 $105 = ((($gfp)) + 156|0);
 $106 = HEAP32[$105>>2]|0;
 if ((($106|0) == 4) | (($106|0) == 1)) {
  label = 29;
 } else if ((($106|0) == 0)) {
  $107 = ((($gfp)) + 168|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ($108|0)==(128);
  if (!($109)) {
   $110 = ((($gfp)) + 96|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111|0)==(0);
   if ($112) {
    HEAP32[$110>>2] = $108;
   }
  }
  $117 = ((($gfp)) + 56|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($1)) + 152|0);
  HEAP32[$119>>2] = $118;
  $120 = ((($gfp)) + 96|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($121|0)==(0);
  do {
   if ($122) {
    $123 = ((($gfp)) + 100|0);
    $124 = +HEAPF32[$123>>2];
    $fabsf = (+Math_abs((+$124)));
    $125 = $fabsf;
    $126 = ($124 != $124) | (0.0 != 0.0) |($124 == 0.0);
    if ($126) {
     $129 = $124 == 0.0;
     if (!($129)) {
      break;
     }
    } else {
     $127 = $125 * 9.9999999747524271E-7;
     $128 = !($125 <= $127);
     if ($128) {
      break;
     }
    }
    HEAPF32[$123>>2] = 11.024999618530273;
   }
  } while(0);
  $130 = ((($gfp)) + 100|0);
  $131 = +HEAPF32[$130>>2];
  $132 = $131 > 0.0;
  if ($132) {
   $133 = ((($gfp)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($134|0)==(0);
   if ($135) {
    $136 = ((($gfp)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (+($137|0));
    $139 = $138 * 0.96999999999999997;
    $140 = (~~(($139)));
    $141 = (_map2MP3Frequency($140)|0);
    HEAP32[$133>>2] = $141;
    $$pre58 = HEAP32[$142>>2]|0;
    $$pre59 = +HEAPF32[$130>>2];
    $144 = $141;$146 = $$pre58;$149 = $$pre59;
   } else {
    $144 = $134;$146 = $1207;$149 = $131;
   }
   $143 = $144 << 4;
   $145 = Math_imul($143, $146)|0;
   $147 = (+($145|0));
   $148 = $149;
   $150 = $148 * 1000.0;
   $151 = $147 / $150;
   $152 = (~~(($151)));
   HEAP32[$120>>2] = $152;
   $153 = (_SmpFrqIndex($144,$2)|0);
   $154 = ((($1)) + 20|0);
   HEAP32[$154>>2] = $153;
   $155 = HEAP32[$119>>2]|0;
   $156 = ($155|0)==(0);
   if ($156) {
    $157 = HEAP32[$120>>2]|0;
    $158 = HEAP32[$2>>2]|0;
    $159 = HEAP32[$133>>2]|0;
    $160 = (_FindNearestBitrate($157,$158,$159)|0);
    HEAP32[$120>>2] = $160;
    $580 = $119;
   } else {
    $580 = $119;
   }
  } else {
   $580 = $119;
  }
 } else {
  $113 = ((($gfp)) + 56|0);
  HEAP32[$113>>2] = 0;
  label = 29;
 }
 if ((label|0) == 29) {
  $114 = ((($gfp)) + 56|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ((($1)) + 152|0);
  HEAP32[$116>>2] = $115;
  $580 = $116;
 }
 $161 = ((($gfp)) + 16|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)==(0);
 L57: do {
  if ($163) {
   $179 = HEAP32[$105>>2]|0;
   if ((($179|0) == 4) | (($179|0) == 1)) {
    $180 = ((($gfp)) + 164|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = (+($181|0));
    $183 = ((($gfp)) + 160|0);
    $184 = +HEAPF32[$183>>2];
    $185 = $182 + $184;
    $186 = ((($gfp)) + 12|0);
    $187 = HEAP32[$186>>2]|0;
    $i$040 = 2;
    while(1) {
     $188 = (6560 + (($i$040*24)|0)|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = ($187|0)==($189|0);
     if ($190) {
      $191 = (((6560 + (($i$040*24)|0)|0)) + 4|0);
      $192 = +HEAPF32[$191>>2];
      $193 = $185 < $192;
      if ($193) {
       $194 = $185 / $192;
       $195 = $194;
       $196 = (((6560 + (($i$040*24)|0)|0)) + 12|0);
       $197 = +HEAPF32[$196>>2];
       $198 = $197;
       $199 = $198 * $195;
       $200 = (~~(($199)));
       HEAP32[$180>>2] = $200;
       $201 = (+($200|0));
       $202 = $199 - $201;
       $203 = $202;
       HEAPF32[$183>>2] = $203;
      }
     }
     $204 = ($187|0)<($189|0);
     if (!($204)) {
      $205 = (((6560 + (($i$040*24)|0)|0)) + 4|0);
      $206 = +HEAPF32[$205>>2];
      $207 = !($206 <= $185);
      if (!($207)) {
       $208 = (((6560 + (($i$040*24)|0)|0)) + 8|0);
       $209 = +HEAPF32[$208>>2];
       $210 = $185 < $209;
       if ($210) {
        $$lcssa = $189;$$lcssa113 = $206;$$lcssa114 = $209;$i$040$lcssa = $i$040;
        break;
       }
      }
     }
     $229 = (($i$040) + 1)|0;
     $230 = ($229|0)<(9);
     if ($230) {
      $i$040 = $229;
     } else {
      $1208 = $162;
      break L57;
     }
    }
    $211 = $$lcssa114 - $$lcssa113;
    $212 = (((6560 + (($i$040$lcssa*24)|0)|0)) + 16|0);
    $213 = +HEAPF32[$212>>2];
    $214 = (((6560 + (($i$040$lcssa*24)|0)|0)) + 12|0);
    $215 = +HEAPF32[$214>>2];
    $216 = $213 - $215;
    $217 = $185 - $$lcssa113;
    $218 = $216 * $217;
    $219 = $218 / $211;
    $220 = $219 + $215;
    $221 = $220;
    $222 = (~~(($220)));
    HEAP32[$180>>2] = $222;
    $223 = (+($222|0));
    $224 = $221 - $223;
    $225 = $224;
    HEAPF32[$183>>2] = $225;
    HEAP32[$161>>2] = $$lcssa;
    $226 = ((($gfp)) + 184|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = ($227|0)==(0);
    if ($228) {
     HEAP32[$226>>2] = -1;
     $1208 = $$lcssa;
    } else {
     $1208 = $$lcssa;
    }
   } else {
    $1208 = 0;
   }
  } else {
   $164 = ($162|0)<(16000);
   if ($164) {
    $165 = ((($gfp)) + 168|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)>(8);
    $$ = $167 ? $166 : 8;
    $168 = ($$|0)<(64);
    $169 = $168 ? $$ : 64;
    HEAP32[$165>>2] = $169;
    $1208 = $162;
    break;
   }
   $170 = ($162|0)<(32000);
   $171 = ((($gfp)) + 168|0);
   $172 = HEAP32[$171>>2]|0;
   if ($170) {
    $173 = ($172|0)>(8);
    $$5 = $173 ? $172 : 8;
    $174 = ($$5|0)<(160);
    $175 = $174 ? $$5 : 160;
    HEAP32[$171>>2] = $175;
    $1208 = $162;
    break;
   } else {
    $176 = ($172|0)>(32);
    $$6 = $176 ? $172 : 32;
    $177 = ($$6|0)<(320);
    $178 = $177 ? $$6 : 320;
    HEAP32[$171>>2] = $178;
    $1208 = $162;
    break;
   }
  }
 } while(0);
 $231 = ((($gfp)) + 184|0);
 $232 = HEAP32[$231>>2]|0;
 $233 = ($232|0)==(0);
 if ($233) {
  $234 = HEAP32[$105>>2]|0;
  switch ($234|0) {
  case 0:  {
   $235 = ((($gfp)) + 96|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = $236&65535;
   $238 = (_nearestBitrateFullIndex($237)|0);
   $239 = (((6776 + ($238<<3)|0)) + 4|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = (+($240|0));
   $301 = $241;
   break;
  }
  case 3:  {
   $242 = ((($gfp)) + 168|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = $243&65535;
   $245 = (_nearestBitrateFullIndex($244)|0);
   $246 = (((6776 + ($245<<3)|0)) + 4|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = (+($247|0));
   $301 = $248;
   break;
  }
  case 2:  {
   $249 = ((($gfp)) + 164|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = ($250>>>0)<(10);
   if ($251) {
    $252 = (6912 + ($250<<2)|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (+($253|0));
    $255 = (($250) + 1)|0;
    $256 = (6912 + ($255<<2)|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = (+($257|0));
    $259 = ((($gfp)) + 160|0);
    $260 = +HEAPF32[$259>>2];
    $261 = $260;
    $262 = $258 - $254;
    $263 = $262 * $261;
    $264 = $263 + $254;
    $301 = $264;
   } else {
    $301 = 19500.0;
   }
   break;
  }
  case 1: case 4:  {
   $265 = ((($gfp)) + 164|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = ($266>>>0)<(10);
   if ($267) {
    $268 = (6960 + ($266<<2)|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = (+($269|0));
    $271 = (($266) + 1)|0;
    $272 = (6960 + ($271<<2)|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = (+($273|0));
    $275 = ((($gfp)) + 160|0);
    $276 = +HEAPF32[$275>>2];
    $277 = $276;
    $278 = $274 - $270;
    $279 = $278 * $277;
    $280 = $279 + $270;
    $301 = $280;
   } else {
    $301 = 21500.0;
   }
   break;
  }
  default: {
   $281 = ((($gfp)) + 164|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = ($282>>>0)<(10);
   if ($283) {
    $284 = (7008 + ($282<<2)|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = (+($285|0));
    $287 = (($282) + 1)|0;
    $288 = (7008 + ($287<<2)|0);
    $289 = HEAP32[$288>>2]|0;
    $290 = (+($289|0));
    $291 = ((($gfp)) + 160|0);
    $292 = +HEAPF32[$291>>2];
    $293 = $292;
    $294 = $290 - $286;
    $295 = $294 * $293;
    $296 = $295 + $286;
    $301 = $296;
   } else {
    $301 = 19500.0;
   }
  }
  }
  $297 = HEAP32[$97>>2]|0;
  $298 = ($297|0)==(3);
  if ($298) {
   $299 = HEAP32[$105>>2]|0;
   if ((($299|0) == 3) | (($299|0) == 0)) {
    $300 = $301 * 1.5;
    $303 = $300;
   } else {
    $303 = $301;
   }
  } else {
   $303 = $301;
  }
  $302 = (~~(($303)));
  HEAP32[$231>>2] = $302;
  $$pre60 = HEAP32[$161>>2]|0;
  $304 = $$pre60;$307 = $302;
 } else {
  $304 = $1208;$307 = $232;
 }
 $305 = ($304|0)==(0);
 if ($305) {
  $306 = $307 << 1;
  $308 = ((($gfp)) + 12|0);
  $309 = HEAP32[$308>>2]|0;
  $310 = ($306|0)>($309|0);
  if ($310) {
   $311 = (($309|0) / 2)&-1;
   HEAP32[$231>>2] = $311;
   $321 = $311;
  } else {
   $321 = $307;
  }
  $312 = ($309|0)>(47999);
  do {
   if ($312) {
    $suggested_samplefreq$0$i = 48000;
   } else {
    $313 = ($309|0)>(44099);
    if ($313) {
     $suggested_samplefreq$0$i = 44100;
    } else {
     $314 = ($309|0)>(31999);
     if ($314) {
      $suggested_samplefreq$0$i = 32000;
     } else {
      $315 = ($309|0)>(23999);
      if ($315) {
       $suggested_samplefreq$0$i = 24000;
      } else {
       $316 = ($309|0)>(22049);
       if ($316) {
        $suggested_samplefreq$0$i = 22050;
       } else {
        $317 = ($309|0)>(15999);
        if ($317) {
         $suggested_samplefreq$0$i = 16000;
        } else {
         $318 = ($309|0)>(11999);
         if ($318) {
          $suggested_samplefreq$0$i = 12000;
          break;
         }
         $319 = ($309|0)>(11024);
         if ($319) {
          $suggested_samplefreq$0$i = 11025;
          break;
         }
         $320 = ($309|0)>(7999);
         $$$i = $320 ? 8000 : 44100;
         $suggested_samplefreq$0$i = $$$i;
        }
       }
      }
     }
    }
   }
  } while(0);
  $322 = ($321|0)==(-1);
  do {
   if ($322) {
    $$0$i13 = $suggested_samplefreq$0$i;
   } else {
    $323 = ($321|0)<(15961);
    $$suggested_samplefreq$0$i = $323 ? 44100 : $suggested_samplefreq$0$i;
    $324 = ($321|0)<(15251);
    $suggested_samplefreq$2$i = $324 ? 32000 : $$suggested_samplefreq$0$i;
    $325 = ($321|0)<(11221);
    $$suggested_samplefreq$2$i = $325 ? 24000 : $suggested_samplefreq$2$i;
    $326 = ($321|0)<(9971);
    $suggested_samplefreq$4$i = $326 ? 22050 : $$suggested_samplefreq$2$i;
    $327 = ($321|0)<(7231);
    $$suggested_samplefreq$4$i = $327 ? 16000 : $suggested_samplefreq$4$i;
    $328 = ($321|0)<(5421);
    $suggested_samplefreq$6$i = $328 ? 12000 : $$suggested_samplefreq$4$i;
    $329 = ($321|0)<(4511);
    $$suggested_samplefreq$6$i = $329 ? 11025 : $suggested_samplefreq$6$i;
    $330 = ($321|0)<(3971);
    $suggested_samplefreq$8$i = $330 ? 8000 : $$suggested_samplefreq$6$i;
    $331 = ($suggested_samplefreq$8$i|0)>($309|0);
    if ($331) {
     $332 = ($309|0)>(44100);
     if ($332) {
      $$0$i13 = 48000;
     } else {
      $333 = ($309|0)>(32000);
      if ($333) {
       $$0$i13 = 44100;
      } else {
       $334 = ($309|0)>(24000);
       if ($334) {
        $$0$i13 = 32000;
       } else {
        $335 = ($309|0)>(22050);
        if ($335) {
         $$0$i13 = 24000;
         break;
        }
        $336 = ($309|0)>(16000);
        if ($336) {
         $$0$i13 = 22050;
         break;
        }
        $337 = ($309|0)>(12000);
        if ($337) {
         $$0$i13 = 16000;
         break;
        }
        $338 = ($309|0)>(11025);
        if ($338) {
         $$0$i13 = 12000;
         break;
        }
        $339 = ($309|0)>(8000);
        $$1$i = $339 ? 11025 : 8000;
        $$0$i13 = $$1$i;
       }
      }
     }
    } else {
     $$0$i13 = $suggested_samplefreq$8$i;
    }
   }
  } while(0);
  HEAP32[$161>>2] = $$0$i13;
  $341 = $321;$344 = $$0$i13;
 } else {
  $341 = $307;$344 = $304;
 }
 $340 = HEAP32[$105>>2]|0;
 do {
  if ((($340|0) == 4) | (($340|0) == 1)) {
   $342 = ($341|0)>(24000);
   $$9 = $342 ? 24000 : $341;
   $343 = (($344|0) / 2)&-1;
   $345 = ($343|0)<($$9|0);
   $$storemerge91 = $345 ? $343 : $$9;
   HEAP32[$231>>2] = $$storemerge91;
   $346 = ($340|0)==(3);
   if ($346) {
    label = 98;
   }
  } else {
   $347 = ($341|0)>(20500);
   $$10 = $347 ? 20500 : $341;
   $348 = (($344|0) / 2)&-1;
   $349 = ($348|0)<($$10|0);
   $$storemerge = $349 ? $348 : $$10;
   HEAP32[$231>>2] = $$storemerge;
   if ((($340|0) == 3)) {
    label = 98;
    break;
   } else if (!((($340|0) == 0))) {
    break;
   }
   $350 = $344 << 4;
   $351 = HEAP32[$142>>2]|0;
   $352 = Math_imul($350, $351)|0;
   $353 = (+($352|0));
   $354 = ((($gfp)) + 96|0);
   $355 = HEAP32[$354>>2]|0;
   $356 = (+($355|0));
   $357 = $356 * 1000.0;
   $358 = $353 / $357;
   $359 = $358;
   $360 = ((($gfp)) + 100|0);
   HEAPF32[$360>>2] = $359;
  }
 } while(0);
 if ((label|0) == 98) {
  $361 = $344 << 4;
  $362 = HEAP32[$142>>2]|0;
  $363 = Math_imul($361, $362)|0;
  $364 = (+($363|0));
  $365 = ((($gfp)) + 168|0);
  $366 = HEAP32[$365>>2]|0;
  $367 = (+($366|0));
  $368 = $367 * 1000.0;
  $369 = $364 / $368;
  $370 = $369;
  $371 = ((($gfp)) + 100|0);
  HEAPF32[$371>>2] = $370;
 }
 $372 = ((($gfp)) + 36|0);
 $373 = HEAP32[$372>>2]|0;
 $374 = ($373|0)==(0);
 $375 = ((($gfp)) + 60|0);
 if ($374) {
  HEAP32[$375>>2] = 0;
  $376 = ((($gfp)) + 64|0);
  HEAP32[$376>>2] = 0;
  $377 = ((($1)) + 132|0);
  HEAP32[$377>>2] = 0;
  $378 = ((($1)) + 128|0);
  HEAP32[$378>>2] = 0;
  $379 = ((($1)) + 136|0);
  HEAP32[$379>>2] = 0;
 } else {
  $$pre63 = HEAP32[$375>>2]|0;
  $$phi$trans$insert64 = ((($gfp)) + 64|0);
  $$pre65 = HEAP32[$$phi$trans$insert64>>2]|0;
  $380 = ((($1)) + 128|0);
  HEAP32[$380>>2] = $$pre63;
  $381 = ((($1)) + 136|0);
  HEAP32[$381>>2] = $$pre65;
  $382 = ($$pre65|0)==(0);
  if ($382) {
   $1209 = 0;
  } else {
   $383 = ((($1)) + 132|0);
   HEAP32[$383>>2] = 1;
   $1209 = $$pre65;
  }
  $384 = ($$pre63|0)==(0);
  do {
   if ($384) {
    $388 = $1209;
   } else {
    $385 = HEAP32[$73>>2]|0;
    $386 = (_InitGainAnalysis(($385|0),($344|0))|0);
    $387 = ($386|0)==(0);
    if (!($387)) {
     $$pre67 = HEAP32[$381>>2]|0;
     $388 = $$pre67;
     break;
    }
    _freegfc($1);
    HEAP32[$0>>2] = 0;
    $$0 = -6;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $389 = ($388|0)==(0);
  if (!($389)) {
   $390 = ((($gfp)) + 40|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = ($391|0)==(0);
   if ($392) {
    $393 = ((($1)) + 85808|0);
    $394 = HEAP32[$393>>2]|0;
    $395 = ($394|0)==(0|0);
    if (!($395)) {
     (_hip_decode_exit(($394|0))|0);
    }
    $396 = (_hip_decode_init()|0);
    HEAP32[$393>>2] = $396;
    $397 = HEAP32[$21>>2]|0;
    _hip_set_errorf(($396|0),($397|0));
    $398 = HEAP32[$393>>2]|0;
    $399 = HEAP32[$18>>2]|0;
    _hip_set_debugf(($398|0),($399|0));
    $400 = HEAP32[$393>>2]|0;
    $401 = HEAP32[$15>>2]|0;
    _hip_set_msgf(($400|0),($401|0));
   }
  }
 }
 $402 = ((($gfp)) + 128|0);
 $403 = HEAP32[$402>>2]|0;
 $404 = ((($1)) + 144|0);
 HEAP32[$404>>2] = $403;
 $405 = HEAP32[$231>>2]|0;
 $406 = ((($1)) + 52|0);
 HEAP32[$406>>2] = $405;
 $407 = ((($gfp)) + 188|0);
 $408 = HEAP32[$407>>2]|0;
 $409 = ((($1)) + 56|0);
 HEAP32[$409>>2] = $408;
 $410 = ((($gfp)) + 12|0);
 $411 = HEAP32[$410>>2]|0;
 $412 = ((($1)) + 60|0);
 HEAP32[$412>>2] = $411;
 $413 = HEAP32[$161>>2]|0;
 $414 = ((($1)) + 64|0);
 HEAP32[$414>>2] = $413;
 $415 = ($413|0)<(24001);
 $416 = $415 ? 1 : 2;
 $417 = ((($1)) + 76|0);
 HEAP32[$417>>2] = $416;
 $418 = ((($1)) + 84760|0);
 HEAP32[$418>>2] = 576;
 $419 = HEAP32[$105>>2]|0;
 if ((($419|0) == 4) | (($419|0) == 2) | (($419|0) == 1)) {
  $420 = ((($gfp)) + 164|0);
  $421 = HEAP32[$420>>2]|0;
  $422 = (7056 + ($421<<2)|0);
  $423 = HEAP32[$422>>2]|0;
  $424 = ((($gfp)) + 100|0);
  HEAP32[$424>>2] = $423;
 } else if ((($419|0) == 3)) {
  $425 = $413 << 4;
  $426 = HEAP32[$142>>2]|0;
  $427 = Math_imul($425, $426)|0;
  $428 = (+($427|0));
  $429 = ((($gfp)) + 168|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = (+($430|0));
  $432 = $431 * 1000.0;
  $433 = $428 / $432;
  $434 = $433;
  $435 = ((($gfp)) + 100|0);
  HEAPF32[$435>>2] = $434;
 } else {
  $436 = $413 << 4;
  $437 = HEAP32[$142>>2]|0;
  $438 = Math_imul($436, $437)|0;
  $439 = (+($438|0));
  $440 = ((($gfp)) + 96|0);
  $441 = HEAP32[$440>>2]|0;
  $442 = (+($441|0));
  $443 = $442 * 1000.0;
  $444 = $439 / $443;
  $445 = $444;
  $446 = ((($gfp)) + 100|0);
  HEAPF32[$446>>2] = $445;
 }
 $447 = HEAP32[$97>>2]|0;
 $448 = ($447|0)==(4);
 if ($448) {
  HEAP32[$97>>2] = 1;
  $450 = 1;
 } else {
  $450 = $447;
 }
 $449 = ((($1)) + 180|0);
 HEAP32[$449>>2] = $450;
 $451 = ($408|0)>(0);
 if ($451) {
  $452 = (+($408|0));
  $453 = $452 * 2.0;
  $454 = $453;
  $455 = ((($1)) + 256|0);
  HEAPF32[$455>>2] = $454;
  $456 = ((($gfp)) + 196|0);
  $457 = HEAP32[$456>>2]|0;
  $458 = ($457|0)>(-1);
  if ($458) {
   $459 = (($408) + ($457))|0;
   $460 = (+($459|0));
   $461 = $460 * 2.0;
   $462 = $461;
   $$sink = $462;
  } else {
   $$sink = $454;
  }
  $463 = ((($1)) + 260|0);
  $464 = (+($413|0));
  $465 = $454 / $464;
  HEAPF32[$455>>2] = $465;
  $466 = $$sink / $464;
  HEAPF32[$463>>2] = $466;
  $507 = $466;
 } else {
  $467 = ((($1)) + 256|0);
  HEAPF32[$467>>2] = 0.0;
  $468 = ((($1)) + 260|0);
  HEAPF32[$468>>2] = 0.0;
  $507 = 0.0;
 }
 $469 = ((($1)) + 248|0);
 HEAPF32[$469>>2] = 0.0;
 $470 = ((($1)) + 252|0);
 HEAPF32[$470>>2] = 0.0;
 $471 = ($405|0)>(0);
 $472 = (($413|0) / 2)&-1;
 $473 = ($405|0)<($472|0);
 $or$cond = $471 & $473;
 if ($or$cond) {
  $474 = (+($405|0));
  $475 = $474 * 2.0;
  $476 = $475;
  HEAPF32[$470>>2] = $476;
  $477 = ((($gfp)) + 192|0);
  $478 = HEAP32[$477>>2]|0;
  $479 = ($478|0)>(-1);
  if ($479) {
   $480 = (($405) - ($478))|0;
   $481 = (+($480|0));
   $482 = $481 * 2.0;
   $483 = $482;
   HEAPF32[$469>>2] = $483;
   $484 = $483 < 0.0;
   if ($484) {
    HEAPF32[$469>>2] = 0.0;
    $487 = 0.0;
   } else {
    $487 = $483;
   }
  } else {
   HEAPF32[$469>>2] = $476;
   $487 = $476;
  }
  $485 = (+($413|0));
  $486 = $487 / $485;
  HEAPF32[$469>>2] = $486;
  $488 = $476 / $485;
  HEAPF32[$470>>2] = $488;
  $489 = $486 > 0.0;
  if ($489) {
   $band$011$i = 0;$lowpass_band$013$i = 32;$minband$012$i = 999;
   while(1) {
    $490 = (+($band$011$i|0));
    $491 = $490 * 0.032258064516129031;
    $492 = $491;
    $493 = !($492 >= $488);
    $494 = ($lowpass_band$013$i|0)<($band$011$i|0);
    $495 = $494 | $493;
    $lowpass_band$1$i = $495 ? $lowpass_band$013$i : $band$011$i;
    $496 = $486 < $492;
    $497 = $492 < $488;
    $or$cond4$i = $497 & $496;
    $498 = ($minband$012$i|0)<($band$011$i|0);
    $499 = $498 ? $minband$012$i : $band$011$i;
    $minband$1$i = $or$cond4$i ? $499 : $minband$012$i;
    $500 = (($band$011$i) + 1)|0;
    $exitcond15$i = ($500|0)==(32);
    if ($exitcond15$i) {
     $lowpass_band$1$i$lcssa = $lowpass_band$1$i;$minband$1$i$lcssa = $minband$1$i;
     break;
    } else {
     $band$011$i = $500;$lowpass_band$013$i = $lowpass_band$1$i;$minband$012$i = $minband$1$i;
    }
   }
   $501 = ($minband$1$i$lcssa|0)==(999);
   $lowpass_band$0$minband$0$i = $501 ? $lowpass_band$1$i$lcssa : $minband$1$i$lcssa;
   $storemerge$in$in$in$i = (+($lowpass_band$0$minband$0$i|0));
   $storemerge$in$in$i = $storemerge$in$in$in$i + -0.75;
   $storemerge$in$i = $storemerge$in$in$i * 0.032258064516129031;
   $storemerge$i = $storemerge$in$i;
   HEAPF32[$469>>2] = $storemerge$i;
   $502 = (+($lowpass_band$1$i$lcssa|0));
   $503 = $502 * 0.032258064516129031;
   $504 = $503;
   HEAPF32[$470>>2] = $504;
  }
 }
 $505 = ((($1)) + 260|0);
 $506 = $507 > 0.0;
 $508 = $507;
 $509 = $508 < 0.021774193548387097;
 $or$cond$i = $506 & $509;
 $510 = ((($1)) + 256|0);
 if ($or$cond$i) {
  HEAPF32[$510>>2] = 0.0;
  HEAPF32[$505>>2] = 0.0;
  _lame_msgf($1,7096,$vararg_buffer);
  $$pr$i = +HEAPF32[$505>>2];
  $512 = $$pr$i;
 } else {
  $512 = $507;
 }
 $511 = $512 > 0.0;
 do {
  if ($511) {
   $513 = +HEAPF32[$510>>2];
   $band$18$i = 0;$highpass_band$010$i = -1;$maxband$09$i = -1;
   while(1) {
    $514 = (+($band$18$i|0));
    $515 = $514 * 0.032258064516129031;
    $516 = $515;
    $517 = !($516 <= $513);
    $518 = ($highpass_band$010$i|0)>($band$18$i|0);
    $519 = $518 | $517;
    $highpass_band$1$i = $519 ? $highpass_band$010$i : $band$18$i;
    $520 = $513 < $516;
    $521 = $516 < $512;
    $or$cond17$i = $520 & $521;
    $522 = ($maxband$09$i|0)>($band$18$i|0);
    $523 = $522 ? $maxband$09$i : $band$18$i;
    $maxband$1$i = $or$cond17$i ? $523 : $maxband$09$i;
    $524 = (($band$18$i) + 1)|0;
    $exitcond14$i = ($524|0)==(32);
    if ($exitcond14$i) {
     $highpass_band$1$i$lcssa = $highpass_band$1$i;$maxband$1$i$lcssa = $maxband$1$i;
     break;
    } else {
     $band$18$i = $524;$highpass_band$010$i = $highpass_band$1$i;$maxband$09$i = $maxband$1$i;
    }
   }
   $525 = (+($highpass_band$1$i$lcssa|0));
   $526 = $525 * 0.032258064516129031;
   $527 = $526;
   HEAPF32[$510>>2] = $527;
   $528 = ($maxband$1$i$lcssa|0)==(-1);
   if ($528) {
    $529 = $525 + 0.75;
    $530 = $529 * 0.032258064516129031;
    $531 = $530;
    HEAPF32[$505>>2] = $531;
    $540 = $531;$band$27$i = 0;
    break;
   } else {
    $532 = (+($maxband$1$i$lcssa|0));
    $533 = $532 + 0.75;
    $534 = $533 * 0.032258064516129031;
    $535 = $534;
    HEAPF32[$505>>2] = $535;
    $540 = $535;$band$27$i = 0;
    break;
   }
  } else {
   $540 = $512;$band$27$i = 0;
  }
 } while(0);
 while(1) {
  $536 = (+($band$27$i|0));
  $537 = $536 * 0.032258063554763794;
  $538 = +HEAPF32[$510>>2];
  $539 = $540 > $538;
  do {
   if ($539) {
    $541 = $540 - $537;
    $542 = $541;
    $543 = $540 - $538;
    $544 = $543;
    $545 = $544 + 9.9999999999999995E-21;
    $546 = $542 / $545;
    $547 = $546;
    $548 = $547;
    $549 = $547 > 1.0;
    if ($549) {
     $fc1$0$i = 0.0;
     break;
    }
    $550 = !($547 <= 0.0);
    if (!($550)) {
     $fc1$0$i = 1.0;
     break;
    }
    $551 = $548 * 1.5707963267948966;
    $552 = (+Math_cos((+$551)));
    $553 = $552;
    $fc1$0$i = $553;
   } else {
    $fc1$0$i = 1.0;
   }
  } while(0);
  $554 = +HEAPF32[$470>>2];
  $555 = +HEAPF32[$469>>2];
  $556 = $554 > $555;
  do {
   if ($556) {
    $557 = $537 - $555;
    $558 = $557;
    $559 = $554 - $555;
    $560 = $559;
    $561 = $560 + 9.9999999999999995E-21;
    $562 = $558 / $561;
    $563 = $562;
    $564 = $563;
    $565 = $563 > 1.0;
    if ($565) {
     $fc2$0$i = 0.0;
     break;
    }
    $566 = !($563 <= 0.0);
    if (!($566)) {
     $fc2$0$i = 1.0;
     break;
    }
    $567 = $564 * 1.5707963267948966;
    $568 = (+Math_cos((+$567)));
    $569 = $568;
    $fc2$0$i = $569;
   } else {
    $fc2$0$i = 1.0;
   }
  } while(0);
  $570 = $fc2$0$i * $fc1$0$i;
  $571 = (((($1)) + 37040|0) + ($band$27$i<<2)|0);
  HEAPF32[$571>>2] = $570;
  $572 = (($band$27$i) + 1)|0;
  $exitcond$i = ($572|0)==(32);
  if ($exitcond$i) {
   break;
  }
  $$pre$i = +HEAPF32[$505>>2];
  $540 = $$pre$i;$band$27$i = $572;
 }
 $573 = HEAP32[$414>>2]|0;
 $574 = (_SmpFrqIndex($573,$2)|0);
 $575 = ((($1)) + 20|0);
 HEAP32[$575>>2] = $574;
 $576 = ($574|0)<(0);
 if ($576) {
  _freegfc($1);
  HEAP32[$0>>2] = 0;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $577 = HEAP32[$105>>2]|0;
 $578 = ($577|0)==(0);
 do {
  if ($578) {
   $579 = HEAP32[$580>>2]|0;
   $581 = ($579|0)==(0);
   if (!($581)) {
    $582 = ((($1)) + 84744|0);
    HEAP32[$582>>2] = 0;
    break;
   }
   $583 = ((($gfp)) + 96|0);
   $584 = HEAP32[$583>>2]|0;
   $585 = HEAP32[$2>>2]|0;
   $586 = HEAP32[$414>>2]|0;
   $587 = (_FindNearestBitrate($584,$585,$586)|0);
   HEAP32[$583>>2] = $587;
   $588 = HEAP32[$2>>2]|0;
   $589 = HEAP32[$414>>2]|0;
   $590 = (_BitrateIndex($587,$588,$589)|0);
   $591 = ((($1)) + 84744|0);
   HEAP32[$591>>2] = $590;
   $592 = ($590|0)<(1);
   if (!($592)) {
    break;
   }
   _freegfc($1);
   HEAP32[$0>>2] = 0;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $593 = ((($1)) + 84744|0);
   HEAP32[$593>>2] = 1;
  }
 } while(0);
 _init_bit_stream_w($1);
 $594 = HEAP32[$575>>2]|0;
 $595 = HEAP32[$2>>2]|0;
 $596 = ($595*3)|0;
 $597 = (($596) + ($594))|0;
 $598 = HEAP32[$414>>2]|0;
 $599 = ($598|0)<(16000);
 $600 = $599 ? 6 : 0;
 $601 = (($597) + ($600))|0;
 $602 = (12200 + (($601*204)|0)|0);
 $603 = HEAP32[$602>>2]|0;
 $604 = ((($1)) + 21360|0);
 HEAP32[$604>>2] = $603;
 $605 = (((12200 + (($601*204)|0)|0)) + 4|0);
 $606 = HEAP32[$605>>2]|0;
 $607 = ((($1)) + 21364|0);
 HEAP32[$607>>2] = $606;
 $608 = (((12200 + (($601*204)|0)|0)) + 8|0);
 $609 = HEAP32[$608>>2]|0;
 $610 = ((($1)) + 21368|0);
 HEAP32[$610>>2] = $609;
 $611 = (((12200 + (($601*204)|0)|0)) + 12|0);
 $612 = HEAP32[$611>>2]|0;
 $613 = ((($1)) + 21372|0);
 HEAP32[$613>>2] = $612;
 $614 = (((12200 + (($601*204)|0)|0)) + 16|0);
 $615 = HEAP32[$614>>2]|0;
 $616 = ((($1)) + 21376|0);
 HEAP32[$616>>2] = $615;
 $617 = (((12200 + (($601*204)|0)|0)) + 20|0);
 $618 = HEAP32[$617>>2]|0;
 $619 = ((($1)) + 21380|0);
 HEAP32[$619>>2] = $618;
 $620 = (((12200 + (($601*204)|0)|0)) + 24|0);
 $621 = HEAP32[$620>>2]|0;
 $622 = ((($1)) + 21384|0);
 HEAP32[$622>>2] = $621;
 $623 = (((12200 + (($601*204)|0)|0)) + 28|0);
 $624 = HEAP32[$623>>2]|0;
 $625 = ((($1)) + 21388|0);
 HEAP32[$625>>2] = $624;
 $626 = (((12200 + (($601*204)|0)|0)) + 32|0);
 $627 = HEAP32[$626>>2]|0;
 $628 = ((($1)) + 21392|0);
 HEAP32[$628>>2] = $627;
 $629 = (((12200 + (($601*204)|0)|0)) + 36|0);
 $630 = HEAP32[$629>>2]|0;
 $631 = ((($1)) + 21396|0);
 HEAP32[$631>>2] = $630;
 $632 = (((12200 + (($601*204)|0)|0)) + 40|0);
 $633 = HEAP32[$632>>2]|0;
 $634 = ((($1)) + 21400|0);
 HEAP32[$634>>2] = $633;
 $635 = (((12200 + (($601*204)|0)|0)) + 44|0);
 $636 = HEAP32[$635>>2]|0;
 $637 = ((($1)) + 21404|0);
 HEAP32[$637>>2] = $636;
 $638 = (((12200 + (($601*204)|0)|0)) + 48|0);
 $639 = HEAP32[$638>>2]|0;
 $640 = ((($1)) + 21408|0);
 HEAP32[$640>>2] = $639;
 $641 = (((12200 + (($601*204)|0)|0)) + 52|0);
 $642 = HEAP32[$641>>2]|0;
 $643 = ((($1)) + 21412|0);
 HEAP32[$643>>2] = $642;
 $644 = (((12200 + (($601*204)|0)|0)) + 56|0);
 $645 = HEAP32[$644>>2]|0;
 $646 = ((($1)) + 21416|0);
 HEAP32[$646>>2] = $645;
 $647 = (((12200 + (($601*204)|0)|0)) + 60|0);
 $648 = HEAP32[$647>>2]|0;
 $649 = ((($1)) + 21420|0);
 HEAP32[$649>>2] = $648;
 $650 = (((12200 + (($601*204)|0)|0)) + 64|0);
 $651 = HEAP32[$650>>2]|0;
 $652 = ((($1)) + 21424|0);
 HEAP32[$652>>2] = $651;
 $653 = (((12200 + (($601*204)|0)|0)) + 68|0);
 $654 = HEAP32[$653>>2]|0;
 $655 = ((($1)) + 21428|0);
 HEAP32[$655>>2] = $654;
 $656 = (((12200 + (($601*204)|0)|0)) + 72|0);
 $657 = HEAP32[$656>>2]|0;
 $658 = ((($1)) + 21432|0);
 HEAP32[$658>>2] = $657;
 $659 = (((12200 + (($601*204)|0)|0)) + 76|0);
 $660 = HEAP32[$659>>2]|0;
 $661 = ((($1)) + 21436|0);
 HEAP32[$661>>2] = $660;
 $662 = (((12200 + (($601*204)|0)|0)) + 80|0);
 $663 = HEAP32[$662>>2]|0;
 $664 = ((($1)) + 21440|0);
 HEAP32[$664>>2] = $663;
 $665 = (((12200 + (($601*204)|0)|0)) + 84|0);
 $666 = HEAP32[$665>>2]|0;
 $667 = ((($1)) + 21444|0);
 HEAP32[$667>>2] = $666;
 $668 = (((12200 + (($601*204)|0)|0)) + 88|0);
 $669 = HEAP32[$668>>2]|0;
 $670 = ((($1)) + 21448|0);
 HEAP32[$670>>2] = $669;
 $671 = (($669) - ($666))|0;
 $672 = (($671|0) / 6)&-1;
 $673 = ((($1)) + 21508|0);
 HEAP32[$673>>2] = $666;
 $674 = (($672) + ($666))|0;
 $675 = ((($1)) + 21512|0);
 HEAP32[$675>>2] = $674;
 $676 = $672 << 1;
 $677 = (($676) + ($666))|0;
 $678 = ((($1)) + 21516|0);
 HEAP32[$678>>2] = $677;
 $679 = ($672*3)|0;
 $680 = (($679) + ($666))|0;
 $681 = ((($1)) + 21520|0);
 HEAP32[$681>>2] = $680;
 $682 = $672 << 2;
 $683 = (($682) + ($666))|0;
 $684 = ((($1)) + 21524|0);
 HEAP32[$684>>2] = $683;
 $685 = ($672*5)|0;
 $686 = (($685) + ($666))|0;
 $687 = ((($1)) + 21528|0);
 HEAP32[$687>>2] = $686;
 $688 = ((($1)) + 21532|0);
 HEAP32[$688>>2] = 576;
 $689 = (((12200 + (($601*204)|0)|0)) + 92|0);
 $690 = HEAP32[$689>>2]|0;
 $691 = ((($1)) + 21452|0);
 HEAP32[$691>>2] = $690;
 $692 = (((12200 + (($601*204)|0)|0)) + 96|0);
 $693 = HEAP32[$692>>2]|0;
 $694 = ((($1)) + 21456|0);
 HEAP32[$694>>2] = $693;
 $695 = (((12200 + (($601*204)|0)|0)) + 100|0);
 $696 = HEAP32[$695>>2]|0;
 $697 = ((($1)) + 21460|0);
 HEAP32[$697>>2] = $696;
 $698 = (((12200 + (($601*204)|0)|0)) + 104|0);
 $699 = HEAP32[$698>>2]|0;
 $700 = ((($1)) + 21464|0);
 HEAP32[$700>>2] = $699;
 $701 = (((12200 + (($601*204)|0)|0)) + 108|0);
 $702 = HEAP32[$701>>2]|0;
 $703 = ((($1)) + 21468|0);
 HEAP32[$703>>2] = $702;
 $704 = (((12200 + (($601*204)|0)|0)) + 112|0);
 $705 = HEAP32[$704>>2]|0;
 $706 = ((($1)) + 21472|0);
 HEAP32[$706>>2] = $705;
 $707 = (((12200 + (($601*204)|0)|0)) + 116|0);
 $708 = HEAP32[$707>>2]|0;
 $709 = ((($1)) + 21476|0);
 HEAP32[$709>>2] = $708;
 $710 = (((12200 + (($601*204)|0)|0)) + 120|0);
 $711 = HEAP32[$710>>2]|0;
 $712 = ((($1)) + 21480|0);
 HEAP32[$712>>2] = $711;
 $713 = (((12200 + (($601*204)|0)|0)) + 124|0);
 $714 = HEAP32[$713>>2]|0;
 $715 = ((($1)) + 21484|0);
 HEAP32[$715>>2] = $714;
 $716 = (((12200 + (($601*204)|0)|0)) + 128|0);
 $717 = HEAP32[$716>>2]|0;
 $718 = ((($1)) + 21488|0);
 HEAP32[$718>>2] = $717;
 $719 = (((12200 + (($601*204)|0)|0)) + 132|0);
 $720 = HEAP32[$719>>2]|0;
 $721 = ((($1)) + 21492|0);
 HEAP32[$721>>2] = $720;
 $722 = (((12200 + (($601*204)|0)|0)) + 136|0);
 $723 = HEAP32[$722>>2]|0;
 $724 = ((($1)) + 21496|0);
 HEAP32[$724>>2] = $723;
 $725 = (((12200 + (($601*204)|0)|0)) + 140|0);
 $726 = HEAP32[$725>>2]|0;
 $727 = ((($1)) + 21500|0);
 HEAP32[$727>>2] = $726;
 $728 = (((12200 + (($601*204)|0)|0)) + 144|0);
 $729 = HEAP32[$728>>2]|0;
 $730 = ((($1)) + 21504|0);
 HEAP32[$730>>2] = $729;
 $731 = (($729) - ($726))|0;
 $732 = (($731|0) / 6)&-1;
 $733 = ((($1)) + 21536|0);
 HEAP32[$733>>2] = $726;
 $734 = (($732) + ($726))|0;
 $735 = ((($1)) + 21540|0);
 HEAP32[$735>>2] = $734;
 $736 = $732 << 1;
 $737 = (($736) + ($726))|0;
 $738 = ((($1)) + 21544|0);
 HEAP32[$738>>2] = $737;
 $739 = ($732*3)|0;
 $740 = (($739) + ($726))|0;
 $741 = ((($1)) + 21548|0);
 HEAP32[$741>>2] = $740;
 $742 = $732 << 2;
 $743 = (($742) + ($726))|0;
 $744 = ((($1)) + 21552|0);
 HEAP32[$744>>2] = $743;
 $745 = ($732*5)|0;
 $746 = (($745) + ($726))|0;
 $747 = ((($1)) + 21556|0);
 HEAP32[$747>>2] = $746;
 $748 = ((($1)) + 21560|0);
 HEAP32[$748>>2] = 192;
 $749 = HEAP32[$417>>2]|0;
 $750 = ($749|0)==(2);
 $751 = HEAP32[$142>>2]|0;
 $752 = ($751|0)==(1);
 $753 = $752 ? 13 : 21;
 $754 = $752 ? 21 : 36;
 $755 = $750 ? $754 : $753;
 $756 = ((($1)) + 24|0);
 HEAP32[$756>>2] = $755;
 $757 = HEAP32[$80>>2]|0;
 $758 = ($757|0)==(0);
 if (!($758)) {
  $759 = $755 | 2;
  HEAP32[$756>>2] = $759;
 }
 HEAP32[$1>>2] = -487877;
 $760 = ($749*700)|0;
 $761 = Math_imul($760, $751)|0;
 $762 = (+($761|0));
 $763 = ((($1)) + 39756|0);
 HEAPF32[$763>>2] = $762;
 $$pre69 = HEAP32[$417>>2]|0;
 $$pre70 = HEAP32[$142>>2]|0;
 $764 = ($$pre69*700)|0;
 $765 = Math_imul($764, $$pre70)|0;
 $766 = (+($765|0));
 $767 = ((($1)) + 39760|0);
 HEAPF32[$767>>2] = $766;
 $$pre69$1 = HEAP32[$417>>2]|0;
 $$pre70$1 = HEAP32[$142>>2]|0;
 $768 = ($$pre69$1*700)|0;
 $769 = Math_imul($768, $$pre70$1)|0;
 $770 = (+($769|0));
 $771 = ((($1)) + 39764|0);
 HEAPF32[$771>>2] = $770;
 $$pre69$2 = HEAP32[$417>>2]|0;
 $$pre70$2 = HEAP32[$142>>2]|0;
 $772 = ($$pre69$2*700)|0;
 $773 = Math_imul($772, $$pre70$2)|0;
 $774 = (+($773|0));
 $775 = ((($1)) + 39768|0);
 HEAPF32[$775>>2] = $774;
 $$pre69$3 = HEAP32[$417>>2]|0;
 $$pre70$3 = HEAP32[$142>>2]|0;
 $776 = ($$pre69$3*700)|0;
 $777 = Math_imul($776, $$pre70$3)|0;
 $778 = (+($777|0));
 $779 = ((($1)) + 39772|0);
 HEAPF32[$779>>2] = $778;
 $$pre69$4 = HEAP32[$417>>2]|0;
 $$pre70$4 = HEAP32[$142>>2]|0;
 $780 = ($$pre69$4*700)|0;
 $781 = Math_imul($780, $$pre70$4)|0;
 $782 = (+($781|0));
 $783 = ((($1)) + 39776|0);
 HEAPF32[$783>>2] = $782;
 $$pre69$5 = HEAP32[$417>>2]|0;
 $$pre70$5 = HEAP32[$142>>2]|0;
 $784 = ($$pre69$5*700)|0;
 $785 = Math_imul($784, $$pre70$5)|0;
 $786 = (+($785|0));
 $787 = ((($1)) + 39780|0);
 HEAPF32[$787>>2] = $786;
 $$pre69$6 = HEAP32[$417>>2]|0;
 $$pre70$6 = HEAP32[$142>>2]|0;
 $788 = ($$pre69$6*700)|0;
 $789 = Math_imul($788, $$pre70$6)|0;
 $790 = (+($789|0));
 $791 = ((($1)) + 39784|0);
 HEAPF32[$791>>2] = $790;
 $$pre69$7 = HEAP32[$417>>2]|0;
 $$pre70$7 = HEAP32[$142>>2]|0;
 $792 = ($$pre69$7*700)|0;
 $793 = Math_imul($792, $$pre70$7)|0;
 $794 = (+($793|0));
 $795 = ((($1)) + 39788|0);
 HEAPF32[$795>>2] = $794;
 $$pre69$8 = HEAP32[$417>>2]|0;
 $$pre70$8 = HEAP32[$142>>2]|0;
 $796 = ($$pre69$8*700)|0;
 $797 = Math_imul($796, $$pre70$8)|0;
 $798 = (+($797|0));
 $799 = ((($1)) + 39792|0);
 HEAPF32[$799>>2] = $798;
 $$pre69$9 = HEAP32[$417>>2]|0;
 $$pre70$9 = HEAP32[$142>>2]|0;
 $800 = ($$pre69$9*700)|0;
 $801 = Math_imul($800, $$pre70$9)|0;
 $802 = (+($801|0));
 $803 = ((($1)) + 39796|0);
 HEAPF32[$803>>2] = $802;
 $$pre69$10 = HEAP32[$417>>2]|0;
 $$pre70$10 = HEAP32[$142>>2]|0;
 $804 = ($$pre69$10*700)|0;
 $805 = Math_imul($804, $$pre70$10)|0;
 $806 = (+($805|0));
 $807 = ((($1)) + 39800|0);
 HEAPF32[$807>>2] = $806;
 $$pre69$11 = HEAP32[$417>>2]|0;
 $$pre70$11 = HEAP32[$142>>2]|0;
 $808 = ($$pre69$11*700)|0;
 $809 = Math_imul($808, $$pre70$11)|0;
 $810 = (+($809|0));
 $811 = ((($1)) + 39804|0);
 HEAPF32[$811>>2] = $810;
 $$pre69$12 = HEAP32[$417>>2]|0;
 $$pre70$12 = HEAP32[$142>>2]|0;
 $812 = ($$pre69$12*700)|0;
 $813 = Math_imul($812, $$pre70$12)|0;
 $814 = (+($813|0));
 $815 = ((($1)) + 39808|0);
 HEAPF32[$815>>2] = $814;
 $$pre69$13 = HEAP32[$417>>2]|0;
 $$pre70$13 = HEAP32[$142>>2]|0;
 $816 = ($$pre69$13*700)|0;
 $817 = Math_imul($816, $$pre70$13)|0;
 $818 = (+($817|0));
 $819 = ((($1)) + 39812|0);
 HEAPF32[$819>>2] = $818;
 $$pre69$14 = HEAP32[$417>>2]|0;
 $$pre70$14 = HEAP32[$142>>2]|0;
 $820 = ($$pre69$14*700)|0;
 $821 = Math_imul($820, $$pre70$14)|0;
 $822 = (+($821|0));
 $823 = ((($1)) + 39816|0);
 HEAPF32[$823>>2] = $822;
 $$pre69$15 = HEAP32[$417>>2]|0;
 $$pre70$15 = HEAP32[$142>>2]|0;
 $824 = ($$pre69$15*700)|0;
 $825 = Math_imul($824, $$pre70$15)|0;
 $826 = (+($825|0));
 $827 = ((($1)) + 39820|0);
 HEAPF32[$827>>2] = $826;
 $$pre69$16 = HEAP32[$417>>2]|0;
 $$pre70$16 = HEAP32[$142>>2]|0;
 $828 = ($$pre69$16*700)|0;
 $829 = Math_imul($828, $$pre70$16)|0;
 $830 = (+($829|0));
 $831 = ((($1)) + 39824|0);
 HEAPF32[$831>>2] = $830;
 $$pre69$17 = HEAP32[$417>>2]|0;
 $$pre70$17 = HEAP32[$142>>2]|0;
 $832 = ($$pre69$17*700)|0;
 $833 = Math_imul($832, $$pre70$17)|0;
 $834 = (+($833|0));
 $835 = ((($1)) + 39828|0);
 HEAPF32[$835>>2] = $834;
 $836 = ((($gfp)) + 220|0);
 $837 = HEAP32[$836>>2]|0;
 $838 = ($837|0)==(-1);
 if ($838) {
  HEAP32[$836>>2] = 4;
 }
 $839 = HEAP32[$105>>2]|0;
 do {
  if ((($839|0) == 4) | (($839|0) == 1)) {
   $840 = ((($gfp)) + 124|0);
   $841 = HEAP32[$840>>2]|0;
   $842 = ($841|0)<(0);
   if ($842) {
    HEAP32[$840>>2] = 2;
   }
   $843 = ((($gfp)) + 244|0);
   $844 = HEAP32[$843>>2]|0;
   $845 = ($844|0)<(0);
   if ($845) {
    HEAP32[$843>>2] = 0;
   }
   $846 = ((($gfp)) + 164|0);
   $847 = HEAP32[$846>>2]|0;
   $848 = Math_imul($847, -10)|0;
   $849 = (($848) + 500)|0;
   (_apply_preset($gfp,$849,0)|0);
   $850 = ((($gfp)) + 44|0);
   $851 = HEAP32[$850>>2]|0;
   $852 = ($851|0)<(0);
   do {
    if ($852) {
     HEAP32[$850>>2] = 3;
     label = 169;
    } else {
     $853 = ($851|0)<(5);
     if ($853) {
      label = 169;
      break;
     }
     $854 = ($851|0)>(7);
     if (!($854)) {
      break;
     }
     HEAP32[$850>>2] = 7;
    }
   } while(0);
   if ((label|0) == 169) {
    HEAP32[$850>>2] = 0;
   }
   $855 = ((($gfp)) + 140|0);
   $856 = HEAP32[$855>>2]|0;
   $857 = ($856|0)==(0);
   if ($857) {
    $858 = HEAP32[$414>>2]|0;
    $859 = ($858|0)>(44000);
    $860 = $859&1;
    $$sink54 = $860;
   } else {
    $$sink54 = 0;
   }
   $861 = ((($1)) + 85092|0);
   HEAP32[$861>>2] = $$sink54;
   $862 = ((($1)) + 85812|0);
   HEAP32[$862>>2] = 1;
  } else if ((($839|0) == 2)) {
   $863 = ((($gfp)) + 164|0);
   $864 = HEAP32[$863>>2]|0;
   $865 = Math_imul($864, -10)|0;
   $866 = (($865) + 500)|0;
   (_apply_preset($gfp,$866,0)|0);
   $867 = ((($gfp)) + 140|0);
   $868 = HEAP32[$867>>2]|0;
   $869 = ($868|0)==(0);
   if ($869) {
    $870 = HEAP32[$414>>2]|0;
    $871 = ($870|0)>(44000);
    $872 = $871&1;
    $$sink55 = $872;
   } else {
    $$sink55 = 0;
   }
   $873 = ((($1)) + 85092|0);
   HEAP32[$873>>2] = $$sink55;
   $874 = ((($gfp)) + 44|0);
   $875 = HEAP32[$874>>2]|0;
   $876 = ($875|0)>(6);
   do {
    if ($876) {
     HEAP32[$874>>2] = 6;
    } else {
     $877 = ($875|0)<(0);
     if (!($877)) {
      break;
     }
     HEAP32[$874>>2] = 3;
    }
   } while(0);
   $878 = ((($1)) + 85812|0);
   HEAP32[$878>>2] = 2;
  } else {
   $879 = ((($1)) + 85092|0);
   HEAP32[$879>>2] = 0;
   $880 = ((($gfp)) + 44|0);
   $881 = HEAP32[$880>>2]|0;
   $882 = ($881|0)<(0);
   if ($882) {
    HEAP32[$880>>2] = 3;
   }
   $883 = ($839|0)==(0);
   if ($883) {
    $884 = ((($gfp)) + 96|0);
    $885 = HEAP32[$884>>2]|0;
    (_lame_set_VBR_mean_bitrate_kbps($gfp,$885)|0);
   }
   $886 = ((($gfp)) + 168|0);
   $887 = HEAP32[$886>>2]|0;
   (_apply_preset($gfp,$887,0)|0);
   HEAP32[$105>>2] = $839;
   $888 = ((($1)) + 85812|0);
   if ($883) {
    HEAP32[$888>>2] = 3;
    break;
   } else {
    HEAP32[$888>>2] = 4;
    break;
   }
  }
 } while(0);
 $889 = ((($gfp)) + 200|0);
 $890 = HEAP32[$889>>2]|0;
 $891 = ((($1)) + 84912|0);
 HEAP32[$891>>2] = $890;
 $892 = ((($gfp)) + 204|0);
 $893 = HEAP32[$892>>2]|0;
 $894 = ((($1)) + 84916|0);
 HEAP32[$894>>2] = $893;
 $895 = ((($gfp)) + 256|0);
 $896 = HEAP32[$895>>2]|0;
 $897 = ($896|0)==(0);
 if (!($897)) {
  $898 = (HEAP32[tempDoublePtr>>2]=$893,+HEAPF32[tempDoublePtr>>2]);
  $899 = (HEAP32[tempDoublePtr>>2]=$890,+HEAPF32[tempDoublePtr>>2]);
  $900 = ((($gfp)) + 260|0);
  $901 = +HEAPF32[$900>>2];
  $902 = $899 + $901;
  HEAPF32[$891>>2] = $902;
  $903 = $898 + $901;
  HEAPF32[$894>>2] = $903;
 }
 $904 = HEAP32[$105>>2]|0;
 $905 = ($904|0)==(0);
 if ($905) {
  $$phi$trans$insert77 = ((($gfp)) + 168|0);
  $$pre78 = HEAP32[$$phi$trans$insert77>>2]|0;
  $947 = 0;$964 = $$pre78;
 } else {
  $906 = ((($1)) + 112|0);
  HEAP32[$906>>2] = 1;
  $907 = ((($1)) + 116|0);
  $908 = HEAP32[$414>>2]|0;
  $909 = ($908|0)<(16000);
  $$11 = $909 ? 8 : 14;
  HEAP32[$907>>2] = $$11;
  $910 = ((($gfp)) + 172|0);
  $911 = HEAP32[$910>>2]|0;
  $912 = ($911|0)==(0);
  do {
   if ($912) {
    $1210 = 1;
   } else {
    $913 = HEAP32[$2>>2]|0;
    $914 = (_FindNearestBitrate($911,$913,$908)|0);
    HEAP32[$910>>2] = $914;
    $915 = HEAP32[$2>>2]|0;
    $916 = HEAP32[$414>>2]|0;
    $917 = (_BitrateIndex($914,$915,$916)|0);
    HEAP32[$906>>2] = $917;
    $918 = ($917|0)<(0);
    if ($918) {
     $$0 = -1;
    } else {
     $1210 = $917;
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $919 = ((($gfp)) + 176|0);
  $920 = HEAP32[$919>>2]|0;
  $921 = ($920|0)==(0);
  do {
   if ($921) {
    $$pre74 = HEAP32[$907>>2]|0;
    $931 = $1210;$934 = $$pre74;
   } else {
    $922 = HEAP32[$2>>2]|0;
    $923 = HEAP32[$414>>2]|0;
    $924 = (_FindNearestBitrate($920,$922,$923)|0);
    HEAP32[$919>>2] = $924;
    $925 = HEAP32[$2>>2]|0;
    $926 = HEAP32[$414>>2]|0;
    $927 = (_BitrateIndex($924,$925,$926)|0);
    HEAP32[$907>>2] = $927;
    $928 = ($927|0)<(0);
    if ($928) {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $$pre72 = HEAP32[$906>>2]|0;
     $931 = $$pre72;$934 = $927;
     break;
    }
   }
  } while(0);
  $929 = HEAP32[$2>>2]|0;
  $930 = ((83944 + ($929<<6)|0) + ($931<<2)|0);
  $932 = HEAP32[$930>>2]|0;
  HEAP32[$910>>2] = $932;
  $933 = ((83944 + ($929<<6)|0) + ($934<<2)|0);
  $935 = HEAP32[$933>>2]|0;
  HEAP32[$919>>2] = $935;
  $936 = ((($gfp)) + 168|0);
  $937 = HEAP32[$936>>2]|0;
  $938 = ($935|0)<($937|0);
  $$12 = $938 ? $935 : $937;
  $939 = ($932|0)>($$12|0);
  $940 = $939 ? $932 : $$12;
  HEAP32[$936>>2] = $940;
  $$pre75 = HEAP32[$105>>2]|0;
  $947 = $$pre75;$964 = $940;
 }
 $941 = ((($gfp)) + 152|0);
 $942 = HEAP32[$941>>2]|0;
 $943 = ((($1)) + 100|0);
 HEAP32[$943>>2] = $942;
 $944 = HEAP32[$372>>2]|0;
 $945 = ((($1)) + 156|0);
 HEAP32[$945>>2] = $944;
 $946 = ((($1)) + 104|0);
 HEAP32[$946>>2] = $947;
 $948 = ((($gfp)) + 80|0);
 $949 = HEAP32[$948>>2]|0;
 $950 = ((($1)) + 85096|0);
 HEAP32[$950>>2] = $949;
 $951 = ((($gfp)) + 84|0);
 $952 = HEAP32[$951>>2]|0;
 $953 = ((($1)) + 28|0);
 HEAP32[$953>>2] = $952;
 $954 = ((($gfp)) + 88|0);
 $955 = HEAP32[$954>>2]|0;
 $956 = ((($1)) + 32|0);
 HEAP32[$956>>2] = $955;
 $957 = ((($gfp)) + 92|0);
 $958 = HEAP32[$957>>2]|0;
 $959 = ((($1)) + 36|0);
 HEAP32[$959>>2] = $958;
 $960 = ((($gfp)) + 96|0);
 $961 = HEAP32[$960>>2]|0;
 $962 = ((($1)) + 120|0);
 HEAP32[$962>>2] = $961;
 $963 = ((($1)) + 108|0);
 HEAP32[$963>>2] = $964;
 $965 = ((($gfp)) + 100|0);
 $966 = HEAP32[$965>>2]|0;
 $967 = ((($1)) + 244|0);
 HEAP32[$967>>2] = $966;
 $968 = HEAP32[$0>>2]|0;
 $969 = ((($gfp)) + 44|0);
 $970 = HEAP32[$969>>2]|0;
 switch ($970|0) {
 case 6:  {
  $977 = ((($968)) + 28|0);
  $978 = HEAP32[$977>>2]|0;
  $979 = ($978|0)==(0);
  if ($979) {
   HEAP32[$977>>2] = 1;
  }
  $980 = ((($968)) + 40|0);
  HEAP32[$980>>2] = 0;
  $981 = ((($968)) + 44|0);
  HEAP32[$981>>2] = 0;
  $982 = ((($968)) + 32|0);
  $983 = HEAP32[$982>>2]|0;
  $984 = ($983|0)==(-1);
  if ($984) {
   HEAP32[$982>>2] = 1;
  }
  $985 = ((($968)) + 36|0);
  HEAP32[$985>>2] = 0;
  $986 = ((($968)) + 48|0);
  HEAP32[$986>>2] = 0;
  break;
 }
 case 5:  {
  $987 = ((($968)) + 28|0);
  $988 = HEAP32[$987>>2]|0;
  $989 = ($988|0)==(0);
  if ($989) {
   HEAP32[$987>>2] = 1;
  }
  $990 = ((($968)) + 40|0);
  HEAP32[$990>>2] = 0;
  $991 = ((($968)) + 44|0);
  HEAP32[$991>>2] = 0;
  $992 = ((($968)) + 32|0);
  $993 = HEAP32[$992>>2]|0;
  $994 = ($993|0)==(-1);
  if ($994) {
   HEAP32[$992>>2] = 1;
  }
  $995 = ((($968)) + 36|0);
  HEAP32[$995>>2] = 0;
  $996 = ((($968)) + 48|0);
  HEAP32[$996>>2] = 0;
  break;
 }
 case 8:  {
  HEAP32[$969>>2] = 7;
  label = 203;
  break;
 }
 case 7:  {
  label = 203;
  break;
 }
 case 3:  {
  $1007 = ((($968)) + 28|0);
  $1008 = HEAP32[$1007>>2]|0;
  $1009 = ($1008|0)==(0);
  if ($1009) {
   HEAP32[$1007>>2] = 1;
  }
  $1010 = ((($968)) + 40|0);
  HEAP32[$1010>>2] = 1;
  $1011 = ((($968)) + 44|0);
  HEAP32[$1011>>2] = 1;
  $1012 = ((($968)) + 32|0);
  $1013 = HEAP32[$1012>>2]|0;
  $1014 = ($1013|0)==(-1);
  if ($1014) {
   HEAP32[$1012>>2] = 1;
  }
  $1015 = ((($968)) + 36|0);
  HEAP32[$1015>>2] = 1;
  $1016 = ((($968)) + 48|0);
  HEAP32[$1016>>2] = 0;
  break;
 }
 case 4:  {
  $997 = ((($968)) + 28|0);
  $998 = HEAP32[$997>>2]|0;
  $999 = ($998|0)==(0);
  if ($999) {
   HEAP32[$997>>2] = 1;
  }
  $1000 = ((($968)) + 40|0);
  HEAP32[$1000>>2] = 0;
  $1001 = ((($968)) + 44|0);
  HEAP32[$1001>>2] = 0;
  $1002 = ((($968)) + 32|0);
  $1003 = HEAP32[$1002>>2]|0;
  $1004 = ($1003|0)==(-1);
  if ($1004) {
   HEAP32[$1002>>2] = 1;
  }
  $1005 = ((($968)) + 36|0);
  HEAP32[$1005>>2] = 1;
  $1006 = ((($968)) + 48|0);
  HEAP32[$1006>>2] = 0;
  break;
 }
 case 1:  {
  $1030 = ((($968)) + 28|0);
  $1031 = HEAP32[$1030>>2]|0;
  $1032 = ($1031|0)==(0);
  if ($1032) {
   HEAP32[$1030>>2] = 1;
  }
  $1033 = ((($968)) + 85096|0);
  $1034 = HEAP32[$1033>>2]|0;
  $1035 = ($1034|0)==(0);
  if ($1035) {
   HEAP32[$1033>>2] = 2;
  }
  $1036 = ((($968)) + 40|0);
  HEAP32[$1036>>2] = 2;
  $1037 = ((($968)) + 44|0);
  HEAP32[$1037>>2] = 1;
  $1038 = ((($968)) + 32|0);
  $1039 = HEAP32[$1038>>2]|0;
  $1040 = ($1039|0)==(-1);
  if ($1040) {
   HEAP32[$1038>>2] = 1;
  }
  $1041 = ((($968)) + 36|0);
  HEAP32[$1041>>2] = 1;
  $1042 = ((($968)) + 48|0);
  HEAP32[$1042>>2] = 0;
  break;
 }
 case 2:  {
  $1017 = ((($968)) + 28|0);
  $1018 = HEAP32[$1017>>2]|0;
  $1019 = ($1018|0)==(0);
  if ($1019) {
   HEAP32[$1017>>2] = 1;
  }
  $1020 = ((($968)) + 85096|0);
  $1021 = HEAP32[$1020>>2]|0;
  $1022 = ($1021|0)==(0);
  if ($1022) {
   HEAP32[$1020>>2] = 2;
  }
  $1023 = ((($968)) + 40|0);
  HEAP32[$1023>>2] = 1;
  $1024 = ((($968)) + 44|0);
  HEAP32[$1024>>2] = 1;
  $1025 = ((($968)) + 32|0);
  $1026 = HEAP32[$1025>>2]|0;
  $1027 = ($1026|0)==(-1);
  if ($1027) {
   HEAP32[$1025>>2] = 1;
  }
  $1028 = ((($968)) + 36|0);
  HEAP32[$1028>>2] = 1;
  $1029 = ((($968)) + 48|0);
  HEAP32[$1029>>2] = 0;
  break;
 }
 case 0:  {
  $1043 = ((($968)) + 28|0);
  $1044 = HEAP32[$1043>>2]|0;
  $1045 = ($1044|0)==(0);
  if ($1045) {
   HEAP32[$1043>>2] = 1;
  }
  $1046 = ((($968)) + 85096|0);
  $1047 = HEAP32[$1046>>2]|0;
  $1048 = ($1047|0)==(0);
  if ($1048) {
   HEAP32[$1046>>2] = 2;
  }
  $1049 = ((($968)) + 40|0);
  HEAP32[$1049>>2] = 2;
  $1050 = ((($968)) + 44|0);
  HEAP32[$1050>>2] = 1;
  $1051 = ((($968)) + 32|0);
  $1052 = HEAP32[$1051>>2]|0;
  $1053 = ($1052|0)==(-1);
  if ($1053) {
   HEAP32[$1051>>2] = 1;
  }
  $1054 = ((($968)) + 36|0);
  HEAP32[$1054>>2] = 1;
  $1055 = ((($968)) + 48|0);
  HEAP32[$1055>>2] = 1;
  break;
 }
 default: {
  $971 = ((($968)) + 28|0);
  HEAP32[$971>>2] = 0;
  $972 = ((($968)) + 36|0);
  ;HEAP32[$972>>2]=0|0;HEAP32[$972+4>>2]=0|0;HEAP32[$972+8>>2]=0|0;HEAP32[$972+12>>2]=0|0;
 }
 }
 do {
  if ((label|0) == 203) {
   $973 = ((($968)) + 28|0);
   HEAP32[$973>>2] = 0;
   $974 = ((($968)) + 36|0);
   $975 = ((($968)) + 48|0);
   ;HEAP32[$974>>2]=0|0;HEAP32[$974+4>>2]=0|0;HEAP32[$974+8>>2]=0|0;HEAP32[$974+12>>2]=0|0;
   $976 = HEAP32[$105>>2]|0;
   if (!((($976|0) == 4) | (($976|0) == 1))) {
    break;
   }
   HEAP32[$975>>2] = -1;
  }
 } while(0);
 $1056 = ((($gfp)) + 232|0);
 $1057 = HEAP32[$1056>>2]|0;
 $1058 = ($1057|0)<(0);
 $1059 = HEAP32[$68>>2]|0;
 $$30 = $1058 ? 3 : $1057;
 HEAP32[$1059>>2] = $$30;
 $1060 = ((($gfp)) + 236|0);
 $1061 = +HEAPF32[$1060>>2];
 $1062 = $1061;
 $1063 = $1062 * -0.10000000000000001;
 $1064 = (+Math_pow(10.0,(+$1063)));
 $1065 = $1064;
 $1066 = ((($1059)) + 4|0);
 HEAPF32[$1066>>2] = $1065;
 $1067 = ((($gfp)) + 240|0);
 $1068 = HEAP32[$1067>>2]|0;
 if ((($1068|0) == -1)) {
  HEAP32[$1067>>2] = 0;
  label = 248;
 } else if ((($1068|0) == 0)) {
  label = 248;
 } else {
  $1071 = $1068;
 }
 do {
  if ((label|0) == 248) {
   $1069 = HEAP32[$449>>2]|0;
   $switch = ($1069>>>0)<(2);
   if (!($switch)) {
    $1071 = 0;
    break;
   }
   HEAP32[$1067>>2] = 1;
   $1071 = 1;
  }
 } while(0);
 $1070 = ((($1)) + 184|0);
 HEAP32[$1070>>2] = $1071;
 $1072 = (_lame_get_quant_comp($gfp)|0);
 $1073 = ($1072|0)<(0);
 if ($1073) {
  (_lame_set_quant_comp($gfp,1)|0);
 }
 $1074 = (_lame_get_quant_comp_short($gfp)|0);
 $1075 = ($1074|0)<(0);
 if ($1075) {
  (_lame_set_quant_comp_short($gfp,0)|0);
 }
 $1076 = (+_lame_get_msfix($gfp));
 $1077 = $1076 < 0.0;
 if ($1077) {
  _lame_set_msfix($gfp,0.0);
 }
 $1078 = (_lame_get_exp_nspsytune($gfp)|0);
 $1079 = $1078 | 1;
 (_lame_set_exp_nspsytune($gfp,$1079)|0);
 $1080 = HEAP32[$836>>2]|0;
 $1081 = ($1080|0)<(0);
 if ($1081) {
  HEAP32[$836>>2] = 4;
  $1108 = 4;
 } else {
  $1108 = $1080;
 }
 $1082 = ((($gfp)) + 224|0);
 $1083 = +HEAPF32[$1082>>2];
 $1084 = $1083 < 0.0;
 $1085 = (HEAPF32[tempDoublePtr>>2]=$1083,HEAP32[tempDoublePtr>>2]|0);
 if ($1084) {
  HEAPF32[$1082>>2] = 4.0;
  $1106 = 1082130432;
 } else {
  $1106 = $1085;
 }
 $1086 = ((($gfp)) + 248|0);
 $1087 = +HEAPF32[$1086>>2];
 $1088 = $1087 < 0.0;
 $1089 = (HEAPF32[tempDoublePtr>>2]=$1087,HEAP32[tempDoublePtr>>2]|0);
 if ($1088) {
  HEAPF32[$1086>>2] = 0.0;
  $1094 = 0;
 } else {
  $1094 = $1089;
 }
 $1090 = ((($gfp)) + 244|0);
 $1091 = HEAP32[$1090>>2]|0;
 $1092 = ($1091|0)<(0);
 if ($1092) {
  HEAP32[$1090>>2] = 1;
  $1125 = 1;
 } else {
  $1125 = $1091;
 }
 $1093 = ((($1)) + 188|0);
 HEAP32[$1093>>2] = $1094;
 $1095 = ((($gfp)) + 252|0);
 $1096 = HEAP32[$1095>>2]|0;
 $1097 = ((($1)) + 192|0);
 HEAP32[$1097>>2] = $1096;
 $1098 = ((($gfp)) + 228|0);
 $1099 = +HEAPF32[$1098>>2];
 $1100 = -$1099;
 $1101 = ((($1)) + 196|0);
 HEAPF32[$1101>>2] = $1100;
 $1102 = $1099 * -0.10000000149011612;
 $1103 = (+Math_pow(10.0,(+$1102)));
 $1104 = ((($1)) + 200|0);
 HEAPF32[$1104>>2] = $1103;
 $1105 = ((($1)) + 204|0);
 HEAP32[$1105>>2] = $1106;
 $1107 = ((($1)) + 208|0);
 HEAP32[$1107>>2] = $1108;
 $1109 = ((($gfp)) + 208|0);
 $1110 = HEAP32[$1109>>2]|0;
 $1111 = ((($1)) + 212|0);
 HEAP32[$1111>>2] = $1110;
 $1112 = ((($gfp)) + 212|0);
 $1113 = HEAP32[$1112>>2]|0;
 $1114 = ((($1)) + 216|0);
 HEAP32[$1114>>2] = $1113;
 $1115 = ((($gfp)) + 216|0);
 $1116 = HEAP32[$1115>>2]|0;
 $1117 = ((($1)) + 220|0);
 HEAP32[$1117>>2] = $1116;
 $1118 = ((($gfp)) + 132|0);
 $1119 = HEAP32[$1118>>2]|0;
 $1120 = ((($1)) + 84|0);
 HEAP32[$1120>>2] = $1119;
 $1121 = ((($gfp)) + 136|0);
 $1122 = HEAP32[$1121>>2]|0;
 $1123 = ((($1)) + 88|0);
 HEAP32[$1123>>2] = $1122;
 $1124 = ((($1)) + 92|0);
 HEAP32[$1124>>2] = $1125;
 $1126 = ((($gfp)) + 148|0);
 $1127 = HEAP32[$1126>>2]|0;
 $1128 = $1127 & 2;
 $1129 = ((($1)) + 96|0);
 HEAP32[$1129>>2] = $1128;
 $1130 = $1127 >>> 2;
 $1131 = $1130 & 63;
 $1132 = (+($1131|0));
 $1133 = ((($1)) + 232|0);
 $1134 = !($1132 >= 32.0);
 $1135 = $1132 + -64.0;
 $storemerge4 = $1134 ? $1132 : $1135;
 $1136 = $storemerge4 * 0.25;
 HEAPF32[$1133>>2] = $1136;
 $1137 = $1127 >>> 8;
 $1138 = $1137 & 63;
 $1139 = (+($1138|0));
 $1140 = ((($1)) + 228|0);
 $1141 = !($1139 >= 32.0);
 $1142 = $1139 + -64.0;
 $storemerge3 = $1141 ? $1139 : $1142;
 $1143 = $storemerge3 * 0.25;
 HEAPF32[$1140>>2] = $1143;
 $1144 = $1127 >>> 14;
 $1145 = $1144 & 63;
 $1146 = (+($1145|0));
 $1147 = ((($1)) + 236|0);
 $1148 = !($1146 >= 32.0);
 $1149 = $1146 + -64.0;
 $storemerge2 = $1148 ? $1146 : $1149;
 $1150 = $storemerge2 * 0.25;
 HEAPF32[$1147>>2] = $1150;
 $1151 = $1127 >>> 20;
 $1152 = $1151 & 63;
 $1153 = (+($1152|0));
 $1154 = ((($1)) + 240|0);
 $1155 = !($1153 >= 32.0);
 $1156 = $1153 + -64.0;
 $storemerge1 = $1155 ? $1153 : $1156;
 $1157 = $storemerge1 + $storemerge2;
 $1158 = $1157 * 0.25;
 HEAPF32[$1154>>2] = $1158;
 $1159 = ((($gfp)) + 20|0);
 $1160 = +HEAPF32[$1159>>2];
 $1161 = ((($gfp)) + 24|0);
 $1162 = +HEAPF32[$1161>>2];
 $1163 = $1162 * $1160;
 $1164 = ((($gfp)) + 28|0);
 $1165 = +HEAPF32[$1164>>2];
 $1166 = $1165 * $1160;
 $1167 = HEAP32[$95>>2]|0;
 $1168 = ($1167|0)==(2);
 do {
  if ($1168) {
   $1169 = HEAP32[$142>>2]|0;
   $1170 = ($1169|0)==(1);
   if (!($1170)) {
    $m10$sroa$0$0 = $1163;$m10$sroa$22$0 = $1166;$m10$sroa$8$0 = 0.0;
    break;
   }
   $1171 = $1163 * 0.5;
   $1172 = $1166 * 0.5;
   $m10$sroa$0$0 = $1171;$m10$sroa$22$0 = 0.0;$m10$sroa$8$0 = $1172;
  } else {
   $m10$sroa$0$0 = $1163;$m10$sroa$22$0 = $1166;$m10$sroa$8$0 = 0.0;
  }
 } while(0);
 $1173 = ((($1)) + 264|0);
 HEAPF32[$1173>>2] = $m10$sroa$0$0;
 $1174 = ((($1)) + 268|0);
 HEAPF32[$1174>>2] = $m10$sroa$8$0;
 $1175 = ((($1)) + 272|0);
 HEAPF32[$1175>>2] = 0.0;
 $1176 = ((($1)) + 276|0);
 HEAPF32[$1176>>2] = $m10$sroa$22$0;
 $1177 = ((($1)) + 39832|0);
 HEAP32[$1177>>2] = 0;
 $1178 = ((($1)) + 39836|0);
 HEAP32[$1178>>2] = 0;
 $1179 = HEAP32[$946>>2]|0;
 $1180 = ($1179|0)==(0);
 if ($1180) {
  $1181 = HEAP32[$2>>2]|0;
  $1182 = ($1181*72000)|0;
  $1183 = (($1182) + 72000)|0;
  $1184 = HEAP32[$962>>2]|0;
  $1185 = Math_imul($1183, $1184)|0;
  $1186 = HEAP32[$414>>2]|0;
  $1187 = (($1185|0) % ($1186|0))&-1;
  HEAP32[$1177>>2] = $1187;
  HEAP32[$1178>>2] = $1187;
 }
 $1188 = HEAP32[$gfp>>2]|0;
 $1189 = ($1188|0)==(-487877);
 do {
  if ($1189) {
   $1190 = HEAP32[$0>>2]|0;
   $1191 = ($1190|0)==(0|0);
   if ($1191) {
    break;
   }
   $1192 = ((($1190)) + 84040|0);
   $1193 = ((($1190)) + 84748|0);
   HEAP32[$1193>>2] = 0;
   $1194 = ((($gfp)) + 68|0);
   $1195 = HEAP32[$1194>>2]|0;
   $1196 = ($1195|0)==(0);
   if (!($1196)) {
    (_id3tag_write_v2($gfp)|0);
   }
   $1197 = ((($1190)) + 85684|0);
   HEAPF32[$1197>>2] = 0.0;
   $1198 = ((($1190)) + 156|0);
   _memset(($1192|0),0,704)|0;
   $1199 = HEAP32[$1198>>2]|0;
   $1200 = ($1199|0)==(0);
   if ($1200) {
    break;
   }
   (_InitVbrTag($gfp)|0);
  }
 } while(0);
 _iteration_init($1);
 (_psymodel_init($gfp)|0);
 $1201 = ((($gfp)) + 124|0);
 $1202 = HEAP32[$1201>>2]|0;
 $1203 = (_get_max_frame_buffer_size_by_constraint($2,$1202)|0);
 $1204 = ((($1)) + 148|0);
 HEAP32[$1204>>2] = $1203;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lame_encode_buffer_ieee_float($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lame_encode_buffer_template($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size,3,1,32767.0)|0);
 return ($0|0);
}
function _lame_encode_flush($gfp,$mp3buffer,$mp3buffer_size) {
 $gfp = $gfp|0;
 $mp3buffer = $mp3buffer|0;
 $mp3buffer_size = $mp3buffer_size|0;
 var $$ = 0, $$$ = 0, $$0 = 0, $$04$lcssa16 = 0, $$0411 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$5 = 0, $$6 = 0, $$lcssa = 0, $$lcssa24 = 0, $$lcssa25 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $buffer = 0, $frames_left$09 = 0, $mp3count$0$lcssa17 = 0, $mp3count$010 = 0, $resample_ratio$0 = 0.0, $samples_to_encode$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4608|0;
 $buffer = sp;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$gfp>>2]|0;
 $2 = ($1|0)==(-487877);
 if (!($2)) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($gfp)) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(-487877);
 if (!($7)) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ((($4)) + 84032|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<(1);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($4)) + 16|0);
 $12 = ((($4)) + 76|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13*576)|0;
 $15 = (($14) + 752)|0;
 $16 = (($9) + -1152)|0;
 _memset(($buffer|0),0,4608)|0;
 $17 = (_isResamplingNecessary($11)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $resample_ratio$0 = 1.0;$samples_to_encode$0 = $16;
 } else {
  $19 = ((($4)) + 60|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($20|0));
  $22 = ((($4)) + 64|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (+($23|0));
  $25 = $21 / $24;
  $26 = 16.0 / $25;
  $27 = (+($16|0));
  $28 = $26 + $27;
  $29 = (~~(($28)));
  $resample_ratio$0 = $25;$samples_to_encode$0 = $29;
 }
 $30 = (($samples_to_encode$0|0) % ($14|0))&-1;
 $31 = (($14) - ($30))|0;
 $32 = ($31|0)<(576);
 $33 = $32 ? $14 : 0;
 $$5 = (($33) + ($31))|0;
 $34 = ((($4)) + 84764|0);
 HEAP32[$34>>2] = $$5;
 $35 = (($$5) + ($samples_to_encode$0))|0;
 $36 = (($35|0) / ($14|0))&-1;
 $37 = ($36|0)>(0);
 if ($37) {
  $38 = ((($4)) + 84748|0);
  $39 = ((($4)) + 84036|0);
  $40 = ($mp3buffer_size|0)==(0);
  $41 = ((($buffer)) + 2304|0);
  $$pre = HEAP32[$38>>2]|0;
  $$0411 = $mp3buffer;$54 = $$pre;$frames_left$09 = $36;$mp3count$010 = 0;
  while(1) {
   $42 = HEAP32[$39>>2]|0;
   $43 = (($15) - ($42))|0;
   $44 = (+($43|0));
   $45 = $44 * $resample_ratio$0;
   $46 = (~~(($45)));
   $47 = ($46|0)>(1152);
   $$ = $47 ? 1152 : $46;
   $48 = ($$|0)<(1);
   $$$ = $48 ? 1 : $$;
   $49 = (($mp3buffer_size) - ($mp3count$010))|0;
   $$1 = $40 ? 0 : $49;
   $50 = (_lame_encode_buffer_template($gfp,$buffer,$41,$$$,$$0411,$$1,0,1,1.0)|0);
   $51 = (($$0411) + ($50)|0);
   $52 = (($50) + ($mp3count$010))|0;
   $53 = HEAP32[$38>>2]|0;
   $55 = ($54|0)!=($53|0);
   $56 = $55&1;
   $57 = (($frames_left$09) - ($56))|0;
   $58 = ($57|0)>(0);
   $59 = ($50|0)>(-1);
   $60 = $58 & $59;
   if ($60) {
    $$0411 = $51;$54 = $53;$frames_left$09 = $57;$mp3count$010 = $52;
   } else {
    $$lcssa = $50;$$lcssa24 = $51;$$lcssa25 = $52;
    break;
   }
  }
  HEAP32[$8>>2] = 0;
  $61 = ($$lcssa|0)<(0);
  if ($61) {
   $$0 = $$lcssa;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$04$lcssa16 = $$lcssa24;$mp3count$0$lcssa17 = $$lcssa25;
  }
 } else {
  HEAP32[$8>>2] = 0;
  $$04$lcssa16 = $mp3buffer;$mp3count$0$lcssa17 = 0;
 }
 $62 = (($mp3buffer_size) - ($mp3count$0$lcssa17))|0;
 $63 = ($mp3buffer_size|0)==(0);
 $$2 = $63 ? 0 : $62;
 _flush_bitstream($4);
 $64 = (_copy_buffer($4,$$04$lcssa16,$$2,1)|0);
 _save_gain_values($4);
 $65 = ($64|0)<(0);
 if ($65) {
  $$0 = $64;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($64) + ($mp3count$0$lcssa17))|0;
 $67 = ((($gfp)) + 68|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)==(0);
 if ($69) {
  $$0 = $66;
  STACKTOP = sp;return ($$0|0);
 }
 $70 = (($mp3buffer_size) - ($66))|0;
 $$3 = $63 ? 0 : $70;
 $71 = (($$04$lcssa16) + ($64)|0);
 (_id3tag_write_v1($gfp)|0);
 $72 = (_copy_buffer($4,$71,$$3,0)|0);
 $73 = ($72|0)<(0);
 $74 = $73 ? 0 : $66;
 $$6 = (($74) + ($72))|0;
 $$0 = $$6;
 STACKTOP = sp;return ($$0|0);
}
function _lame_close($gfp) {
 $gfp = $gfp|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$02 = 0, $ret$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $ret$1 = 0;
  return ($ret$1|0);
 }
 $1 = HEAP32[$gfp>>2]|0;
 $2 = ($1|0)==(-487877);
 if (!($2)) {
  $ret$1 = 0;
  return ($ret$1|0);
 }
 $3 = ((($gfp)) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$gfp>>2] = 0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $ret$02 = -3;
 } else {
  $6 = HEAP32[$4>>2]|0;
  $7 = ($6|0)==(-487877);
  $$ = $7 ? 0 : -3;
  HEAP32[$4>>2] = 0;
  _freegfc($4);
  HEAP32[$3>>2] = 0;
  $ret$02 = $$;
 }
 $8 = ((($gfp)) + 284|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $ret$1 = $ret$02;
  return ($ret$1|0);
 }
 _free($gfp);
 $ret$1 = $ret$02;
 return ($ret$1|0);
}
function _lame_init() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _init_log_table();
 $0 = (_calloc(1,304)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 _memset(($0|0),0,304)|0;
 HEAP32[$0>>2] = -487877;
 $2 = (_calloc(1,85840)|0);
 $3 = ((($0)) + 288|0);
 HEAP32[$3>>2] = $2;
 $4 = ($2|0)==(0|0);
 if ($4) {
  _free($0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $5 = ((($0)) + 124|0);
  HEAP32[$5>>2] = 2;
  $6 = ((($0)) + 48|0);
  HEAP32[$6>>2] = 4;
  $7 = ((($0)) + 108|0);
  HEAP32[$7>>2] = 1;
  $8 = ((($0)) + 12|0);
  HEAP32[$8>>2] = 44100;
  $9 = ((($0)) + 8|0);
  HEAP32[$9>>2] = 2;
  $10 = ((($0)) + 4|0);
  HEAP32[$10>>2] = -1;
  $11 = ((($0)) + 36|0);
  HEAP32[$11>>2] = 1;
  $12 = ((($0)) + 44|0);
  HEAP32[$12>>2] = -1;
  $13 = ((($0)) + 240|0);
  HEAP32[$13>>2] = -1;
  $14 = ((($0)) + 88|0);
  HEAP32[$14>>2] = -1;
  $15 = ((($0)) + 184|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($0)) + 188|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($0)) + 192|0);
  HEAP32[$17>>2] = -1;
  $18 = ((($0)) + 196|0);
  HEAP32[$18>>2] = -1;
  $19 = ((($0)) + 156|0);
  HEAP32[$19>>2] = 0;
  $20 = ((($0)) + 164|0);
  HEAP32[$20>>2] = 4;
  $21 = ((($0)) + 224|0);
  HEAPF32[$21>>2] = -1.0;
  $22 = ((($0)) + 168|0);
  HEAP32[$22>>2] = 128;
  $23 = ((($0)) + 172|0);
  HEAP32[$23>>2] = 0;
  $24 = ((($0)) + 176|0);
  HEAP32[$24>>2] = 0;
  $25 = ((($0)) + 180|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($2)) + 112|0);
  HEAP32[$26>>2] = 1;
  $27 = ((($2)) + 116|0);
  HEAP32[$27>>2] = 13;
  $28 = ((($0)) + 132|0);
  HEAP32[$28>>2] = -1;
  $29 = ((($0)) + 136|0);
  HEAP32[$29>>2] = -1;
  $30 = ((($0)) + 252|0);
  HEAPF32[$30>>2] = -1.0;
  $31 = ((($2)) + 84920|0);
  HEAP32[$31>>2] = 180;
  $32 = ((($2)) + 84924|0);
  HEAP32[$32>>2] = 180;
  $33 = ((($2)) + 84928|0);
  HEAP32[$33>>2] = 4;
  $34 = ((($2)) + 84932|0);
  HEAP32[$34>>2] = 4;
  $35 = ((($2)) + 84908|0);
  HEAPF32[$35>>2] = 1.0;
  $36 = ((($0)) + 264|0);
  HEAPF32[$36>>2] = -1.0;
  $37 = ((($0)) + 268|0);
  HEAPF32[$37>>2] = -1.0;
  $38 = ((($0)) + 20|0);
  HEAPF32[$38>>2] = 1.0;
  $39 = ((($0)) + 24|0);
  HEAPF32[$39>>2] = 1.0;
  $40 = ((($0)) + 28|0);
  HEAPF32[$40>>2] = 1.0;
  $41 = ((($0)) + 232|0);
  HEAP32[$41>>2] = -1;
  $42 = ((($0)) + 220|0);
  HEAP32[$42>>2] = -1;
  $43 = ((($0)) + 236|0);
  HEAPF32[$43>>2] = 0.0;
  $44 = ((($0)) + 244|0);
  HEAP32[$44>>2] = -1;
  $45 = ((($0)) + 248|0);
  HEAPF32[$45>>2] = -1.0;
  $46 = ((($2)) + 84032|0);
  HEAP32[$46>>2] = 1728;
  $47 = ((($2)) + 84764|0);
  HEAP32[$47>>2] = 0;
  $48 = ((($2)) + 84036|0);
  HEAP32[$48>>2] = 528;
  $49 = ((($0)) + 60|0);
  HEAP32[$49>>2] = 0;
  $50 = ((($0)) + 64|0);
  HEAP32[$50>>2] = 0;
  $51 = ((($2)) + 136|0);
  HEAP32[$51>>2] = 0;
  $52 = ((($2)) + 128|0);
  HEAP32[$52>>2] = 0;
  $53 = ((($2)) + 132|0);
  HEAP32[$53>>2] = 0;
  $54 = ((($2)) + 85680|0);
  $55 = ((($2)) + 85688|0);
  HEAP32[$55>>2] = 0;
  $56 = ((($2)) + 85692|0);
  HEAP32[$56>>2] = 0;
  HEAPF32[$54>>2] = -1.0;
  $57 = ((($0)) + 292|0);
  HEAP32[$57>>2] = 1;
  $58 = ((($0)) + 296|0);
  HEAP32[$58>>2] = 1;
  $59 = ((($0)) + 300|0);
  HEAP32[$59>>2] = 1;
  $60 = ((($0)) + 152|0);
  HEAP32[$60>>2] = 0;
  $61 = ((($0)) + 68|0);
  HEAP32[$61>>2] = 1;
  $62 = ((($0)) + 276|0);
  HEAP32[$62>>2] = 2;
  $63 = ((($0)) + 280|0);
  HEAP32[$63>>2] = 2;
  $64 = ((($0)) + 272|0);
  HEAP32[$64>>2] = 2;
  $65 = ((($0)) + 284|0);
  HEAP32[$65>>2] = 1;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _lame_encode_buffer_template($gfp,$buffer_l,$buffer_r,$nsamples,$mp3buf,$mp3buf_size,$pcm_type,$aa,$norm) {
 $gfp = $gfp|0;
 $buffer_l = $buffer_l|0;
 $buffer_r = $buffer_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 $pcm_type = $pcm_type|0;
 $aa = $aa|0;
 $norm = +$norm;
 var $$0 = 0, $$0$i3 = 0, $$01$i = 0, $$01$i$us = 0, $$01$ph$i = 0, $$01$ph$i$us = 0, $$02$ph$i = 0, $$02$ph$i$us = 0, $$idx$val$i = 0, $$in_buffer$sroa$4$0$i = 0, $$in_buffer$sroa$4$0$i$lcssa = 0, $$in_buffer$sroa$4$0$i$us = 0, $$in_buffer$sroa$4$0$i$us$lcssa = 0, $$lcssa = 0, $$lcssa46 = 0, $$lcssa48 = 0, $$lcssa49 = 0, $$phi$trans$insert = 0, $$pr15$i = 0, $$pre = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ch$011$us$i = 0, $ch$011$us$i$us = 0, $exitcond = 0, $exitcond15 = 0, $exitcond16 = 0, $exitcond17 = 0, $i$010$us$i = 0, $i$010$us$i$us = 0, $in_buffer$sroa$0$0$i = 0, $in_buffer$sroa$0$0$i$us = 0, $in_buffer$sroa$0$0$ph$i = 0, $in_buffer$sroa$0$0$ph$i$us = 0, $in_buffer$sroa$4$0$i = 0, $in_buffer$sroa$4$0$i$us = 0, $in_buffer$sroa$4$0$ph$i = 0, $in_buffer$sroa$4$0$ph$i$us = 0, $in_buffer_ptr$i = 0, $mfbuf$i = 0;
 var $mp3size$0$ph$i = 0, $mp3size$0$ph$i$us = 0, $n_in$i = 0, $n_out$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$us = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $mfbuf$i = sp + 24|0;
 $in_buffer_ptr$i = sp + 16|0;
 $n_in$i = sp + 8|0;
 $n_out$i = sp + 4|0;
 $0 = ($gfp|0)==(0|0);
 if ($0) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$gfp>>2]|0;
 $2 = ($1|0)==(-487877);
 if (!($2)) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($gfp)) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(-487877);
 if (!($7)) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($nsamples|0)==(0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($4)) + 52152|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 do {
  if ($11) {
   label = 10;
  } else {
   $12 = ((($4)) + 52148|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)<($nsamples|0);
   if ($14) {
    _free($10);
    label = 10;
    break;
   } else {
    $$phi$trans$insert = ((($4)) + 52156|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$pr15$i = $10;$$pre$phiZ2D = $$phi$trans$insert;$22 = $$pre;
    label = 13;
    break;
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $15 = ((($4)) + 52156|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   _free($16);
  }
  $18 = (_calloc($nsamples,4)|0);
  HEAP32[$9>>2] = $18;
  $19 = (_calloc($nsamples,4)|0);
  HEAP32[$15>>2] = $19;
  $20 = ((($4)) + 52148|0);
  HEAP32[$20>>2] = $nsamples;
  $21 = ($18|0)==(0|0);
  if ($21) {
   $$pre$phi$iZ2D = $15;$24 = $19;
  } else {
   $$pr15$i = $18;$$pre$phiZ2D = $15;$22 = $19;
   label = 13;
  }
 }
 do {
  if ((label|0) == 13) {
   $23 = ($22|0)==(0|0);
   if ($23) {
    _free($$pr15$i);
    $$pre18 = HEAP32[$$pre$phiZ2D>>2]|0;
    $$pre$phi$iZ2D = $$pre$phiZ2D;$24 = $$pre18;
    break;
   }
   $27 = ((($4)) + 68|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)>(1);
   $30 = ($buffer_l|0)==(0|0);
   do {
    if ($29) {
     $31 = ($buffer_r|0)==(0|0);
     $or$cond = $30 | $31;
     if ($or$cond) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      _lame_copy_inbuffer($4,$buffer_l,$buffer_r,$nsamples,$pcm_type,$aa,$norm);
      break;
     }
    } else {
     if ($30) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      _lame_copy_inbuffer($4,$buffer_l,$buffer_l,$nsamples,$pcm_type,$aa,$norm);
      break;
     }
    }
   } while(0);
   $32 = ((($4)) + 76|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33*576)|0;
   $35 = HEAP32[$4>>2]|0;
   $36 = ($35|0)==(-487877);
   L41: do {
    if ($36) {
     $37 = (_copy_buffer($4,$mp3buf,$mp3buf_size,0)|0);
     $38 = ($37|0)<(0);
     if ($38) {
      $$0$i3 = $37;
     } else {
      $39 = (($mp3buf) + ($37)|0);
      $40 = HEAP32[$9>>2]|0;
      $41 = HEAP32[$$pre$phiZ2D>>2]|0;
      $$idx$val$i = HEAP32[$32>>2]|0;
      $42 = ($$idx$val$i*576)|0;
      $43 = (($42) + 752)|0;
      $44 = ((($4)) + 52160|0);
      HEAP32[$mfbuf$i>>2] = $44;
      $45 = ((($4)) + 68096|0);
      $46 = ((($mfbuf$i)) + 4|0);
      HEAP32[$46>>2] = $45;
      $47 = ((($in_buffer_ptr$i)) + 4|0);
      $48 = ((($4)) + 128|0);
      $49 = ((($4)) + 72|0);
      $50 = ((($4)) + 84036|0);
      $51 = ((($4)) + 84032|0);
      $52 = ((($4)) + 136|0);
      $53 = ((($4)) + 85676|0);
      $54 = ($mp3buf_size|0)==(0);
      $55 = Math_imul($33, -576)|0;
      if ($54) {
       $$01$ph$i$us = $nsamples;$$02$ph$i$us = $39;$in_buffer$sroa$0$0$ph$i$us = $40;$in_buffer$sroa$4$0$ph$i$us = $41;$mp3size$0$ph$i$us = $37;
       L65: while(1) {
        $$01$i$us = $$01$ph$i$us;$in_buffer$sroa$0$0$i$us = $in_buffer$sroa$0$0$ph$i$us;$in_buffer$sroa$4$0$i$us = $in_buffer$sroa$4$0$ph$i$us;
        while(1) {
         $56 = ($$01$i$us|0)>(0);
         if (!($56)) {
          $$0$i3 = $mp3size$0$ph$i$us;
          break L41;
         }
         HEAP32[$n_in$i>>2] = 0;
         HEAP32[$n_out$i>>2] = 0;
         HEAP32[$in_buffer_ptr$i>>2] = $in_buffer$sroa$0$0$i$us;
         HEAP32[$47>>2] = $in_buffer$sroa$4$0$i$us;
         _fill_buffer($4,$mfbuf$i,$in_buffer_ptr$i,$$01$i$us,$n_in$i,$n_out$i);
         $57 = HEAP32[$48>>2]|0;
         $58 = ($57|0)==(0);
         if (!($58)) {
          $59 = HEAP32[$52>>2]|0;
          $60 = ($59|0)==(0);
          if ($60) {
           $61 = HEAP32[$53>>2]|0;
           $62 = HEAP32[$50>>2]|0;
           $63 = HEAP32[$mfbuf$i>>2]|0;
           $64 = (($63) + ($62<<2)|0);
           $65 = HEAP32[$46>>2]|0;
           $66 = (($65) + ($62<<2)|0);
           $67 = HEAP32[$n_out$i>>2]|0;
           $68 = HEAP32[$49>>2]|0;
           $69 = (_AnalyzeSamples(($61|0),($64|0),($66|0),($67|0),($68|0))|0);
           $70 = ($69|0)==(0);
           if ($70) {
            $$0$i3 = -6;
            break L41;
           }
          }
         }
         $71 = HEAP32[$n_in$i>>2]|0;
         $72 = (($$01$i$us) - ($71))|0;
         $73 = (($in_buffer$sroa$0$0$i$us) + ($71<<2)|0);
         $74 = HEAP32[$49>>2]|0;
         $75 = ($74|0)==(2);
         $76 = (($in_buffer$sroa$4$0$i$us) + ($71<<2)|0);
         $$in_buffer$sroa$4$0$i$us = $75 ? $76 : $in_buffer$sroa$4$0$i$us;
         $77 = HEAP32[$n_out$i>>2]|0;
         $78 = HEAP32[$50>>2]|0;
         $79 = (($78) + ($77))|0;
         HEAP32[$50>>2] = $79;
         $80 = HEAP32[$51>>2]|0;
         $81 = ($80|0)<(1);
         if ($81) {
          HEAP32[$51>>2] = 1728;
          $83 = 1728;
         } else {
          $83 = $80;
         }
         $82 = (($83) + ($77))|0;
         HEAP32[$51>>2] = $82;
         $84 = ($79|0)<($43|0);
         if ($84) {
          $$01$i$us = $72;$in_buffer$sroa$0$0$i$us = $73;$in_buffer$sroa$4$0$i$us = $$in_buffer$sroa$4$0$i$us;
         } else {
          $$in_buffer$sroa$4$0$i$us$lcssa = $$in_buffer$sroa$4$0$i$us;$$lcssa = $72;$$lcssa46 = $73;
          break;
         }
        }
        $85 = HEAP32[$mfbuf$i>>2]|0;
        $86 = HEAP32[$46>>2]|0;
        $87 = (_lame_encode_mp3_frame($4,$85,$86,$$02$ph$i$us,0)|0);
        $88 = ($87|0)<(0);
        if ($88) {
         $$0$i3 = $87;
         break L41;
        }
        $89 = (($$02$ph$i$us) + ($87)|0);
        $90 = (($87) + ($mp3size$0$ph$i$us))|0;
        $91 = HEAP32[$50>>2]|0;
        $92 = (($91) - ($34))|0;
        HEAP32[$50>>2] = $92;
        $93 = HEAP32[$51>>2]|0;
        $94 = (($93) - ($34))|0;
        HEAP32[$51>>2] = $94;
        $95 = HEAP32[$49>>2]|0;
        $96 = ($95|0)>(0);
        $97 = ($92|0)>(0);
        $or$cond$i$us = $97 & $96;
        if (!($or$cond$i$us)) {
         $$01$ph$i$us = $$lcssa;$$02$ph$i$us = $89;$in_buffer$sroa$0$0$ph$i$us = $$lcssa46;$in_buffer$sroa$4$0$ph$i$us = $$in_buffer$sroa$4$0$i$us$lcssa;$mp3size$0$ph$i$us = $90;
         continue;
        }
        $105 = (($55) + ($91))|0;
        $ch$011$us$i$us = 0;
        while(1) {
         $98 = (($mfbuf$i) + ($ch$011$us$i$us<<2)|0);
         $99 = HEAP32[$98>>2]|0;
         $i$010$us$i$us = 0;
         while(1) {
          $100 = (($i$010$us$i$us) + ($34))|0;
          $101 = (($99) + ($100<<2)|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = (($99) + ($i$010$us$i$us<<2)|0);
          HEAP32[$103>>2] = $102;
          $104 = (($i$010$us$i$us) + 1)|0;
          $exitcond16 = ($104|0)==($105|0);
          if ($exitcond16) {
           break;
          } else {
           $i$010$us$i$us = $104;
          }
         }
         $106 = (($ch$011$us$i$us) + 1)|0;
         $exitcond17 = ($106|0)==($95|0);
         if ($exitcond17) {
          $$01$ph$i$us = $$lcssa;$$02$ph$i$us = $89;$in_buffer$sroa$0$0$ph$i$us = $$lcssa46;$in_buffer$sroa$4$0$ph$i$us = $$in_buffer$sroa$4$0$i$us$lcssa;$mp3size$0$ph$i$us = $90;
          continue L65;
         } else {
          $ch$011$us$i$us = $106;
         }
        }
       }
      } else {
       $$01$ph$i = $nsamples;$$02$ph$i = $39;$in_buffer$sroa$0$0$ph$i = $40;$in_buffer$sroa$4$0$ph$i = $41;$mp3size$0$ph$i = $37;
       L45: while(1) {
        $$01$i = $$01$ph$i;$in_buffer$sroa$0$0$i = $in_buffer$sroa$0$0$ph$i;$in_buffer$sroa$4$0$i = $in_buffer$sroa$4$0$ph$i;
        while(1) {
         $107 = ($$01$i|0)>(0);
         if (!($107)) {
          $$0$i3 = $mp3size$0$ph$i;
          break L41;
         }
         HEAP32[$n_in$i>>2] = 0;
         HEAP32[$n_out$i>>2] = 0;
         HEAP32[$in_buffer_ptr$i>>2] = $in_buffer$sroa$0$0$i;
         HEAP32[$47>>2] = $in_buffer$sroa$4$0$i;
         _fill_buffer($4,$mfbuf$i,$in_buffer_ptr$i,$$01$i,$n_in$i,$n_out$i);
         $108 = HEAP32[$48>>2]|0;
         $109 = ($108|0)==(0);
         if (!($109)) {
          $110 = HEAP32[$52>>2]|0;
          $111 = ($110|0)==(0);
          if ($111) {
           $112 = HEAP32[$53>>2]|0;
           $113 = HEAP32[$50>>2]|0;
           $114 = HEAP32[$mfbuf$i>>2]|0;
           $115 = (($114) + ($113<<2)|0);
           $116 = HEAP32[$46>>2]|0;
           $117 = (($116) + ($113<<2)|0);
           $118 = HEAP32[$n_out$i>>2]|0;
           $119 = HEAP32[$49>>2]|0;
           $120 = (_AnalyzeSamples(($112|0),($115|0),($117|0),($118|0),($119|0))|0);
           $121 = ($120|0)==(0);
           if ($121) {
            $$0$i3 = -6;
            break L41;
           }
          }
         }
         $122 = HEAP32[$n_in$i>>2]|0;
         $123 = (($$01$i) - ($122))|0;
         $124 = (($in_buffer$sroa$0$0$i) + ($122<<2)|0);
         $125 = HEAP32[$49>>2]|0;
         $126 = ($125|0)==(2);
         $127 = (($in_buffer$sroa$4$0$i) + ($122<<2)|0);
         $$in_buffer$sroa$4$0$i = $126 ? $127 : $in_buffer$sroa$4$0$i;
         $128 = HEAP32[$n_out$i>>2]|0;
         $129 = HEAP32[$50>>2]|0;
         $130 = (($129) + ($128))|0;
         HEAP32[$50>>2] = $130;
         $131 = HEAP32[$51>>2]|0;
         $132 = ($131|0)<(1);
         if ($132) {
          HEAP32[$51>>2] = 1728;
          $134 = 1728;
         } else {
          $134 = $131;
         }
         $133 = (($134) + ($128))|0;
         HEAP32[$51>>2] = $133;
         $135 = ($130|0)<($43|0);
         if ($135) {
          $$01$i = $123;$in_buffer$sroa$0$0$i = $124;$in_buffer$sroa$4$0$i = $$in_buffer$sroa$4$0$i;
         } else {
          $$in_buffer$sroa$4$0$i$lcssa = $$in_buffer$sroa$4$0$i;$$lcssa48 = $123;$$lcssa49 = $124;
          break;
         }
        }
        $136 = (($mp3buf_size) - ($mp3size$0$ph$i))|0;
        $137 = HEAP32[$mfbuf$i>>2]|0;
        $138 = HEAP32[$46>>2]|0;
        $139 = (_lame_encode_mp3_frame($4,$137,$138,$$02$ph$i,$136)|0);
        $140 = ($139|0)<(0);
        if ($140) {
         $$0$i3 = $139;
         break L41;
        }
        $141 = (($$02$ph$i) + ($139)|0);
        $142 = (($139) + ($mp3size$0$ph$i))|0;
        $143 = HEAP32[$50>>2]|0;
        $144 = (($143) - ($34))|0;
        HEAP32[$50>>2] = $144;
        $145 = HEAP32[$51>>2]|0;
        $146 = (($145) - ($34))|0;
        HEAP32[$51>>2] = $146;
        $147 = HEAP32[$49>>2]|0;
        $148 = ($147|0)>(0);
        $149 = ($144|0)>(0);
        $or$cond$i = $149 & $148;
        if (!($or$cond$i)) {
         $$01$ph$i = $$lcssa48;$$02$ph$i = $141;$in_buffer$sroa$0$0$ph$i = $$lcssa49;$in_buffer$sroa$4$0$ph$i = $$in_buffer$sroa$4$0$i$lcssa;$mp3size$0$ph$i = $142;
         continue;
        }
        $150 = (($55) + ($143))|0;
        $ch$011$us$i = 0;
        while(1) {
         $158 = (($mfbuf$i) + ($ch$011$us$i<<2)|0);
         $154 = HEAP32[$158>>2]|0;
         $i$010$us$i = 0;
         while(1) {
          $152 = (($i$010$us$i) + ($34))|0;
          $153 = (($154) + ($152<<2)|0);
          $155 = HEAP32[$153>>2]|0;
          $156 = (($154) + ($i$010$us$i<<2)|0);
          HEAP32[$156>>2] = $155;
          $157 = (($i$010$us$i) + 1)|0;
          $exitcond = ($157|0)==($150|0);
          if ($exitcond) {
           break;
          } else {
           $i$010$us$i = $157;
          }
         }
         $151 = (($ch$011$us$i) + 1)|0;
         $exitcond15 = ($151|0)==($147|0);
         if ($exitcond15) {
          $$01$ph$i = $$lcssa48;$$02$ph$i = $141;$in_buffer$sroa$0$0$ph$i = $$lcssa49;$in_buffer$sroa$4$0$ph$i = $$in_buffer$sroa$4$0$i$lcssa;$mp3size$0$ph$i = $142;
          continue L45;
         } else {
          $ch$011$us$i = $151;
         }
        }
       }
      }
     }
    } else {
     $$0$i3 = -3;
    }
   } while(0);
   $$0 = $$0$i3;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 HEAP32[$9>>2] = 0;
 HEAP32[$$pre$phi$iZ2D>>2] = 0;
 $26 = ((($4)) + 52148|0);
 HEAP32[$26>>2] = 0;
 _lame_errorf($4,7168,$vararg_buffer);
 $$0 = -2;
 STACKTOP = sp;return ($$0|0);
}
function _save_gain_values($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $fabsf = 0.0, $fabsf1 = 0.0;
 var $floorf = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 85680|0);
 $1 = ((($gfc)) + 128|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if (!($3)) {
   $4 = ((($gfc)) + 85676|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (+_GetTitleGain(($5|0)));
   $7 = $6;
   $fabsf = (+Math_abs((+$6)));
   $8 = $fabsf > 24601.0;
   $9 = $6 + 24601.0;
   $fabsf1 = (+Math_abs((+$9)));
   $10 = $fabsf1;
   if ($8) {
    $11 = $fabsf;
    $12 = $11 * 9.9999999747524271E-7;
    $13 = !($10 <= $12);
    if ($13) {
     label = 5;
    } else {
     label = 6;
    }
   } else {
    $14 = !($10 <= 0.024600999937888446);
    if ($14) {
     label = 5;
    } else {
     label = 6;
    }
   }
   if ((label|0) == 5) {
    $15 = $7 * 10.0;
    $16 = $15 + 0.5;
    $17 = (+Math_floor((+$16)));
    $18 = (~~(($17)));
    $19 = ((($gfc)) + 85688|0);
    HEAP32[$19>>2] = $18;
    break;
   }
   else if ((label|0) == 6) {
    $20 = ((($gfc)) + 85688|0);
    HEAP32[$20>>2] = 0;
    break;
   }
  }
 } while(0);
 $21 = ((($gfc)) + 132|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  return;
 }
 $24 = ((($gfc)) + 85684|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $25;
 $27 = $26 * 3.0518509475997192E-5;
 $28 = (+_log10($27));
 $29 = $28 * 200.0;
 $30 = (+Math_ceil((+$29)));
 $31 = (~~(($30)));
 $32 = ((($gfc)) + 85692|0);
 HEAP32[$32>>2] = $31;
 $33 = ($31|0)>(0);
 if ($33) {
  $34 = 3276700.0 / $25;
  $floorf = (+Math_floor((+$34)));
  $35 = $floorf;
  $36 = $35 * 0.01;
  $37 = $36;
  HEAPF32[$0>>2] = $37;
  return;
 } else {
  HEAPF32[$0>>2] = -1.0;
  return;
 }
}
function _lame_copy_inbuffer($gfc,$l,$r,$nsamples,$pcm_type,$jump,$s) {
 $gfc = $gfc|0;
 $l = $l|0;
 $r = $r|0;
 $nsamples = $nsamples|0;
 $pcm_type = $pcm_type|0;
 $jump = $jump|0;
 $s = +$s;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $bl$07 = 0, $bl1$010 = 0, $bl15$016 = 0, $bl22$020 = 0, $bl8$014 = 0, $br$06 = 0;
 var $br16$017 = 0, $br2$09 = 0, $br23$021 = 0, $br9$013 = 0, $exitcond = 0, $exitcond24 = 0, $exitcond25 = 0, $exitcond26 = 0, $exitcond27 = 0, $i$05 = 0, $i10$012 = 0, $i17$018 = 0, $i24$022 = 0, $i3$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 52152|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($gfc)) + 52156|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($gfc)) + 264|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 * $s;
 $7 = ((($gfc)) + 268|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 * $s;
 $10 = ((($gfc)) + 272|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 * $s;
 $13 = ((($gfc)) + 276|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $14 * $s;
 switch ($pcm_type|0) {
 case 4:  {
  $78 = ($nsamples|0)>(0);
  if (!($78)) {
   return;
  }
  $bl22$020 = $l;$br23$021 = $r;$i24$022 = 0;
  while(1) {
   $79 = +HEAPF64[$bl22$020>>3];
   $80 = $79;
   $81 = +HEAPF64[$br23$021>>3];
   $82 = $81;
   $83 = $80 * $6;
   $84 = $82 * $9;
   $85 = $84 + $83;
   $86 = $80 * $12;
   $87 = $82 * $15;
   $88 = $87 + $86;
   $89 = (($1) + ($i24$022<<2)|0);
   HEAPF32[$89>>2] = $85;
   $90 = (($3) + ($i24$022<<2)|0);
   HEAPF32[$90>>2] = $88;
   $91 = (($bl22$020) + ($jump<<3)|0);
   $92 = (($br23$021) + ($jump<<3)|0);
   $93 = (($i24$022) + 1)|0;
   $exitcond27 = ($93|0)==($nsamples|0);
   if ($exitcond27) {
    break;
   } else {
    $bl22$020 = $91;$br23$021 = $92;$i24$022 = $93;
   }
  }
  return;
  break;
 }
 case 0:  {
  $16 = ($nsamples|0)>(0);
  if (!($16)) {
   return;
  }
  $bl$07 = $l;$br$06 = $r;$i$05 = 0;
  while(1) {
   $17 = HEAP16[$bl$07>>1]|0;
   $18 = (+($17<<16>>16));
   $19 = HEAP16[$br$06>>1]|0;
   $20 = (+($19<<16>>16));
   $21 = $18 * $6;
   $22 = $20 * $9;
   $23 = $22 + $21;
   $24 = $18 * $12;
   $25 = $20 * $15;
   $26 = $25 + $24;
   $27 = (($1) + ($i$05<<2)|0);
   HEAPF32[$27>>2] = $23;
   $28 = (($3) + ($i$05<<2)|0);
   HEAPF32[$28>>2] = $26;
   $29 = (($bl$07) + ($jump<<1)|0);
   $30 = (($br$06) + ($jump<<1)|0);
   $31 = (($i$05) + 1)|0;
   $exitcond = ($31|0)==($nsamples|0);
   if ($exitcond) {
    break;
   } else {
    $bl$07 = $29;$br$06 = $30;$i$05 = $31;
   }
  }
  return;
  break;
 }
 case 3:  {
  $64 = ($nsamples|0)>(0);
  if (!($64)) {
   return;
  }
  $bl15$016 = $l;$br16$017 = $r;$i17$018 = 0;
  while(1) {
   $65 = +HEAPF32[$bl15$016>>2];
   $66 = +HEAPF32[$br16$017>>2];
   $67 = $65 * $6;
   $68 = $66 * $9;
   $69 = $68 + $67;
   $70 = $65 * $12;
   $71 = $66 * $15;
   $72 = $71 + $70;
   $73 = (($1) + ($i17$018<<2)|0);
   HEAPF32[$73>>2] = $69;
   $74 = (($3) + ($i17$018<<2)|0);
   HEAPF32[$74>>2] = $72;
   $75 = (($bl15$016) + ($jump<<2)|0);
   $76 = (($br16$017) + ($jump<<2)|0);
   $77 = (($i17$018) + 1)|0;
   $exitcond26 = ($77|0)==($nsamples|0);
   if ($exitcond26) {
    break;
   } else {
    $bl15$016 = $75;$br16$017 = $76;$i17$018 = $77;
   }
  }
  return;
  break;
 }
 case 2:  {
  $48 = ($nsamples|0)>(0);
  if (!($48)) {
   return;
  }
  $bl8$014 = $l;$br9$013 = $r;$i10$012 = 0;
  while(1) {
   $49 = HEAP32[$bl8$014>>2]|0;
   $50 = (+($49|0));
   $51 = HEAP32[$br9$013>>2]|0;
   $52 = (+($51|0));
   $53 = $50 * $6;
   $54 = $52 * $9;
   $55 = $54 + $53;
   $56 = $50 * $12;
   $57 = $52 * $15;
   $58 = $57 + $56;
   $59 = (($1) + ($i10$012<<2)|0);
   HEAPF32[$59>>2] = $55;
   $60 = (($3) + ($i10$012<<2)|0);
   HEAPF32[$60>>2] = $58;
   $61 = (($bl8$014) + ($jump<<2)|0);
   $62 = (($br9$013) + ($jump<<2)|0);
   $63 = (($i10$012) + 1)|0;
   $exitcond25 = ($63|0)==($nsamples|0);
   if ($exitcond25) {
    break;
   } else {
    $bl8$014 = $61;$br9$013 = $62;$i10$012 = $63;
   }
  }
  return;
  break;
 }
 case 1:  {
  $32 = ($nsamples|0)>(0);
  if (!($32)) {
   return;
  }
  $bl1$010 = $l;$br2$09 = $r;$i3$08 = 0;
  while(1) {
   $33 = HEAP32[$bl1$010>>2]|0;
   $34 = (+($33|0));
   $35 = HEAP32[$br2$09>>2]|0;
   $36 = (+($35|0));
   $37 = $34 * $6;
   $38 = $36 * $9;
   $39 = $38 + $37;
   $40 = $34 * $12;
   $41 = $36 * $15;
   $42 = $41 + $40;
   $43 = (($1) + ($i3$08<<2)|0);
   HEAPF32[$43>>2] = $39;
   $44 = (($3) + ($i3$08<<2)|0);
   HEAPF32[$44>>2] = $42;
   $45 = (($bl1$010) + ($jump<<2)|0);
   $46 = (($br2$09) + ($jump<<2)|0);
   $47 = (($i3$08) + 1)|0;
   $exitcond24 = ($47|0)==($nsamples|0);
   if ($exitcond24) {
    break;
   } else {
    $bl1$010 = $45;$br2$09 = $46;$i3$08 = $47;
   }
  }
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _mdct_sub48($gfc,$w0,$w1) {
 $gfc = $gfc|0;
 $w0 = $w0|0;
 $w1 = $w1|0;
 var $$ = 0, $$02$i = 0, $$lcssa = 0, $$neg11$i = 0.0, $$neg13$i = 0.0, $$neg3$i = 0.0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum18$1 = 0, $$sum18$10 = 0, $$sum18$11 = 0, $$sum18$12 = 0, $$sum18$13 = 0, $$sum18$14 = 0, $$sum18$15 = 0;
 var $$sum18$16 = 0, $$sum18$17 = 0, $$sum18$2 = 0, $$sum18$3 = 0, $$sum18$4 = 0, $$sum18$5 = 0, $$sum18$6 = 0, $$sum18$7 = 0, $$sum18$8 = 0, $$sum18$9 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0;
 var $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0;
 var $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0;
 var $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0;
 var $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0;
 var $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0;
 var $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0;
 var $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0.0, $247 = 0.0;
 var $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0;
 var $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0;
 var $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0;
 var $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0;
 var $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0;
 var $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0.0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0;
 var $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0, $382 = 0.0, $383 = 0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0.0;
 var $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0.0, $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0;
 var $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0, $414 = 0.0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0;
 var $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0;
 var $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0, $45 = 0.0, $450 = 0.0, $451 = 0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0;
 var $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0.0;
 var $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0;
 var $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0.0, $511 = 0, $512 = 0.0, $513 = 0.0, $514 = 0, $515 = 0, $516 = 0.0, $517 = 0;
 var $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0.0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0;
 var $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $band$156 = 0, $ch$060 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond69 = 0, $exitcond70 = 0, $exitcond71 = 0, $gr$058 = 0, $k$049 = 0;
 var $k$252 = 0, $k$351 = 0, $k$453 = 0, $l$01$i = 0, $mdct_enc$054 = 0, $or$cond = 0, $or$cond3 = 0, $samp$047 = 0, $scevgep = 0, $w0$pn59 = 0, $wk$0 = 0, $wk$157 = 0, $wk$248 = 0, $work = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $work = sp;
 $0 = ((($gfc)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = ((($gfc)) + 76|0);
 $4 = ((($work)) + 68|0);
 $5 = ((($work)) + 36|0);
 $6 = ((($work)) + 60|0);
 $7 = ((($work)) + 44|0);
 $8 = ((($work)) + 56|0);
 $9 = ((($work)) + 48|0);
 $10 = ((($work)) + 32|0);
 $11 = ((($work)) + 4|0);
 $12 = ((($work)) + 28|0);
 $13 = ((($work)) + 8|0);
 $14 = ((($work)) + 24|0);
 $15 = ((($work)) + 12|0);
 $16 = ((($work)) + 20|0);
 $17 = ((($work)) + 16|0);
 $18 = ((($work)) + 64|0);
 $19 = ((($work)) + 40|0);
 $20 = ((($work)) + 52|0);
 $ch$060 = 0;$w0$pn59 = $w0;
 while(1) {
  $21 = HEAP32[$3>>2]|0;
  $22 = ($21|0)>(0);
  if ($22) {
   $wk$0 = ((($w0$pn59)) + 1144|0);
   $gr$058 = 0;$wk$157 = $wk$0;
   while(1) {
    $23 = (1 - ($gr$058))|0;
    $24 = ((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0);
    $k$049 = 0;$samp$047 = $24;$wk$248 = $wk$157;
    while(1) {
     _window_subband($wk$248,$samp$047);
     $28 = ((($wk$248)) + 128|0);
     $29 = ((($samp$047)) + 128|0);
     _window_subband($28,$29);
     $30 = ((($samp$047)) + 256|0);
     $31 = ((($samp$047)) + 132|0);
     $32 = +HEAPF32[$31>>2];
     $33 = -$32;
     HEAPF32[$31>>2] = $33;
     $34 = ((($samp$047)) + 140|0);
     $35 = +HEAPF32[$34>>2];
     $36 = -$35;
     HEAPF32[$34>>2] = $36;
     $37 = ((($samp$047)) + 148|0);
     $38 = +HEAPF32[$37>>2];
     $39 = -$38;
     HEAPF32[$37>>2] = $39;
     $40 = ((($samp$047)) + 156|0);
     $41 = +HEAPF32[$40>>2];
     $42 = -$41;
     HEAPF32[$40>>2] = $42;
     $43 = ((($samp$047)) + 164|0);
     $44 = +HEAPF32[$43>>2];
     $45 = -$44;
     HEAPF32[$43>>2] = $45;
     $46 = ((($samp$047)) + 172|0);
     $47 = +HEAPF32[$46>>2];
     $48 = -$47;
     HEAPF32[$46>>2] = $48;
     $49 = ((($samp$047)) + 180|0);
     $50 = +HEAPF32[$49>>2];
     $51 = -$50;
     HEAPF32[$49>>2] = $51;
     $52 = ((($samp$047)) + 188|0);
     $53 = +HEAPF32[$52>>2];
     $54 = -$53;
     HEAPF32[$52>>2] = $54;
     $55 = ((($samp$047)) + 196|0);
     $56 = +HEAPF32[$55>>2];
     $57 = -$56;
     HEAPF32[$55>>2] = $57;
     $58 = ((($samp$047)) + 204|0);
     $59 = +HEAPF32[$58>>2];
     $60 = -$59;
     HEAPF32[$58>>2] = $60;
     $61 = ((($samp$047)) + 212|0);
     $62 = +HEAPF32[$61>>2];
     $63 = -$62;
     HEAPF32[$61>>2] = $63;
     $64 = ((($samp$047)) + 220|0);
     $65 = +HEAPF32[$64>>2];
     $66 = -$65;
     HEAPF32[$64>>2] = $66;
     $67 = ((($samp$047)) + 228|0);
     $68 = +HEAPF32[$67>>2];
     $69 = -$68;
     HEAPF32[$67>>2] = $69;
     $70 = ((($samp$047)) + 236|0);
     $71 = +HEAPF32[$70>>2];
     $72 = -$71;
     HEAPF32[$70>>2] = $72;
     $73 = ((($samp$047)) + 244|0);
     $74 = +HEAPF32[$73>>2];
     $75 = -$74;
     HEAPF32[$73>>2] = $75;
     $76 = ((($samp$047)) + 252|0);
     $77 = +HEAPF32[$76>>2];
     $78 = -$77;
     HEAPF32[$76>>2] = $78;
     $79 = ((($wk$248)) + 256|0);
     $80 = (($k$049) + 1)|0;
     $exitcond = ($80|0)==(9);
     if ($exitcond) {
      break;
     } else {
      $k$049 = $80;$samp$047 = $30;$wk$248 = $79;
     }
    }
    $25 = ((((($gfc)) + 304|0) + (($gr$058*10504)|0)|0) + (($ch$060*5252)|0)|0);
    $26 = ((((((($gfc)) + 304|0) + (($gr$058*10504)|0)|0) + (($ch$060*5252)|0)|0)) + 4788|0);
    $27 = ((((((($gfc)) + 304|0) + (($gr$058*10504)|0)|0) + (($ch$060*5252)|0)|0)) + 4792|0);
    $band$156 = 0;$mdct_enc$054 = $25;
    while(1) {
     $81 = HEAP32[$26>>2]|0;
     $82 = (7208 + ($band$156<<2)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = HEAP32[$27>>2]|0;
     $85 = ($84|0)!=(0);
     $86 = ($band$156|0)<(2);
     $or$cond = $86 & $85;
     $$ = $or$cond ? 0 : $81;
     $87 = (((($gfc)) + 37040|0) + ($band$156<<2)|0);
     $88 = +HEAPF32[$87>>2];
     $89 = $88;
     $90 = $89 < 9.9999999999999998E-13;
     do {
      if ($90) {
       dest=$mdct_enc$054; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
      } else {
       $91 = $88 < 1.0;
       if ($91) {
        $92 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($83<<2)|0);
        $93 = +HEAPF32[$92>>2];
        $94 = $93 * $88;
        HEAPF32[$92>>2] = $94;
        $95 = +HEAPF32[$87>>2];
        $$sum18$1 = (($83) + 32)|0;
        $96 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$1<<2)|0);
        $97 = +HEAPF32[$96>>2];
        $98 = $97 * $95;
        HEAPF32[$96>>2] = $98;
        $99 = +HEAPF32[$87>>2];
        $$sum18$2 = (($83) + 64)|0;
        $100 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$2<<2)|0);
        $101 = +HEAPF32[$100>>2];
        $102 = $101 * $99;
        HEAPF32[$100>>2] = $102;
        $103 = +HEAPF32[$87>>2];
        $$sum18$3 = (($83) + 96)|0;
        $104 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$3<<2)|0);
        $105 = +HEAPF32[$104>>2];
        $106 = $105 * $103;
        HEAPF32[$104>>2] = $106;
        $107 = +HEAPF32[$87>>2];
        $$sum18$4 = (($83) + 128)|0;
        $108 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$4<<2)|0);
        $109 = +HEAPF32[$108>>2];
        $110 = $109 * $107;
        HEAPF32[$108>>2] = $110;
        $111 = +HEAPF32[$87>>2];
        $$sum18$5 = (($83) + 160)|0;
        $112 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$5<<2)|0);
        $113 = +HEAPF32[$112>>2];
        $114 = $113 * $111;
        HEAPF32[$112>>2] = $114;
        $115 = +HEAPF32[$87>>2];
        $$sum18$6 = (($83) + 192)|0;
        $116 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$6<<2)|0);
        $117 = +HEAPF32[$116>>2];
        $118 = $117 * $115;
        HEAPF32[$116>>2] = $118;
        $119 = +HEAPF32[$87>>2];
        $$sum18$7 = (($83) + 224)|0;
        $120 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$7<<2)|0);
        $121 = +HEAPF32[$120>>2];
        $122 = $121 * $119;
        HEAPF32[$120>>2] = $122;
        $123 = +HEAPF32[$87>>2];
        $$sum18$8 = (($83) + 256)|0;
        $124 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$8<<2)|0);
        $125 = +HEAPF32[$124>>2];
        $126 = $125 * $123;
        HEAPF32[$124>>2] = $126;
        $127 = +HEAPF32[$87>>2];
        $$sum18$9 = (($83) + 288)|0;
        $128 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$9<<2)|0);
        $129 = +HEAPF32[$128>>2];
        $130 = $129 * $127;
        HEAPF32[$128>>2] = $130;
        $131 = +HEAPF32[$87>>2];
        $$sum18$10 = (($83) + 320)|0;
        $132 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$10<<2)|0);
        $133 = +HEAPF32[$132>>2];
        $134 = $133 * $131;
        HEAPF32[$132>>2] = $134;
        $135 = +HEAPF32[$87>>2];
        $$sum18$11 = (($83) + 352)|0;
        $136 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$11<<2)|0);
        $137 = +HEAPF32[$136>>2];
        $138 = $137 * $135;
        HEAPF32[$136>>2] = $138;
        $139 = +HEAPF32[$87>>2];
        $$sum18$12 = (($83) + 384)|0;
        $140 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$12<<2)|0);
        $141 = +HEAPF32[$140>>2];
        $142 = $141 * $139;
        HEAPF32[$140>>2] = $142;
        $143 = +HEAPF32[$87>>2];
        $$sum18$13 = (($83) + 416)|0;
        $144 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$13<<2)|0);
        $145 = +HEAPF32[$144>>2];
        $146 = $145 * $143;
        HEAPF32[$144>>2] = $146;
        $147 = +HEAPF32[$87>>2];
        $$sum18$14 = (($83) + 448)|0;
        $148 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$14<<2)|0);
        $149 = +HEAPF32[$148>>2];
        $150 = $149 * $147;
        HEAPF32[$148>>2] = $150;
        $151 = +HEAPF32[$87>>2];
        $$sum18$15 = (($83) + 480)|0;
        $152 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$15<<2)|0);
        $153 = +HEAPF32[$152>>2];
        $154 = $153 * $151;
        HEAPF32[$152>>2] = $154;
        $155 = +HEAPF32[$87>>2];
        $$sum18$16 = (($83) + 512)|0;
        $156 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$16<<2)|0);
        $157 = +HEAPF32[$156>>2];
        $158 = $157 * $155;
        HEAPF32[$156>>2] = $158;
        $159 = +HEAPF32[$87>>2];
        $$sum18$17 = (($83) + 544)|0;
        $160 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum18$17<<2)|0);
        $161 = +HEAPF32[$160>>2];
        $162 = $161 * $159;
        HEAPF32[$160>>2] = $162;
       }
       $163 = ($$|0)==(2);
       if ($163) {
        $164 = (($83) + 288)|0;
        $165 = (($83) + 480)|0;
        $k$252 = -3;
        while(1) {
         $166 = (($k$252) + 3)|0;
         $167 = (7624 + ($166<<2)|0);
         $168 = +HEAPF32[$167>>2];
         $169 = $k$252 << 5;
         $$sum10 = (($164) + ($169))|0;
         $170 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($gr$058*2304)|0)|0) + ($$sum10<<2)|0);
         $171 = +HEAPF32[$170>>2];
         $172 = $171 * $168;
         $173 = (8 - ($k$252))|0;
         $174 = $173 << 5;
         $$sum11 = (($174) + ($83))|0;
         $175 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($gr$058*2304)|0)|0) + ($$sum11<<2)|0);
         $176 = +HEAPF32[$175>>2];
         $177 = $172 - $176;
         $178 = ($k$252*3)|0;
         $179 = (($178) + 9)|0;
         $180 = (($mdct_enc$054) + ($179<<2)|0);
         HEAPF32[$180>>2] = $177;
         $181 = (14 - ($k$252))|0;
         $182 = $181 << 5;
         $$sum12 = (($182) + ($83))|0;
         $183 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($gr$058*2304)|0)|0) + ($$sum12<<2)|0);
         $184 = +HEAPF32[$183>>2];
         $185 = $184 * $168;
         $$sum13 = (($165) + ($169))|0;
         $186 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($gr$058*2304)|0)|0) + ($$sum13<<2)|0);
         $187 = +HEAPF32[$186>>2];
         $188 = $185 + $187;
         $189 = (($178) + 18)|0;
         $190 = (($mdct_enc$054) + ($189<<2)|0);
         HEAPF32[$190>>2] = $188;
         $191 = +HEAPF32[$186>>2];
         $192 = $191 * $168;
         $193 = +HEAPF32[$183>>2];
         $194 = $192 - $193;
         $195 = (($178) + 10)|0;
         $196 = (($mdct_enc$054) + ($195<<2)|0);
         HEAPF32[$196>>2] = $194;
         $197 = (2 - ($k$252))|0;
         $198 = $197 << 5;
         $$sum14 = (($198) + ($83))|0;
         $199 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum14<<2)|0);
         $200 = +HEAPF32[$199>>2];
         $201 = $200 * $168;
         $202 = $166 << 5;
         $$sum15 = (($202) + ($83))|0;
         $203 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum15<<2)|0);
         $204 = +HEAPF32[$203>>2];
         $205 = $201 + $204;
         $206 = (($178) + 19)|0;
         $207 = (($mdct_enc$054) + ($206<<2)|0);
         HEAPF32[$207>>2] = $205;
         $208 = +HEAPF32[$203>>2];
         $209 = $208 * $168;
         $210 = +HEAPF32[$199>>2];
         $211 = $209 - $210;
         $212 = (($178) + 11)|0;
         $213 = (($mdct_enc$054) + ($212<<2)|0);
         HEAPF32[$213>>2] = $211;
         $214 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum11<<2)|0);
         $215 = +HEAPF32[$214>>2];
         $216 = $215 * $168;
         $217 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum10<<2)|0);
         $218 = +HEAPF32[$217>>2];
         $219 = $216 + $218;
         $220 = (($178) + 20)|0;
         $221 = (($mdct_enc$054) + ($220<<2)|0);
         HEAPF32[$221>>2] = $219;
         $222 = (($k$252) + 1)|0;
         $exitcond70 = ($222|0)==(0);
         if ($exitcond70) {
          $$02$i = $mdct_enc$054;$l$01$i = 0;
          break;
         } else {
          $k$252 = $222;
         }
        }
        while(1) {
         $223 = ((($$02$i)) + 24|0);
         $224 = +HEAPF32[$223>>2];
         $225 = $224 * 0.13165250420570374;
         $226 = ((($$02$i)) + 60|0);
         $227 = +HEAPF32[$226>>2];
         $228 = $225 - $227;
         $229 = +HEAPF32[$$02$i>>2];
         $230 = $229 * 0.76732701063156128;
         $231 = ((($$02$i)) + 36|0);
         $232 = +HEAPF32[$231>>2];
         $233 = $230 - $232;
         $234 = $233 + $228;
         $235 = $228 - $233;
         $236 = $227 * 0.13165250420570374;
         $237 = $236 + $224;
         $238 = $232 * 0.76732701063156128;
         $239 = $238 + $229;
         $240 = $239 + $237;
         $241 = $239 - $237;
         $242 = ((($$02$i)) + 12|0);
         $243 = +HEAPF32[$242>>2];
         $244 = $243 * 0.41421356797218323;
         $245 = ((($$02$i)) + 48|0);
         $246 = +HEAPF32[$245>>2];
         $247 = $244 - $246;
         $248 = $247;
         $249 = $248 * 2.0699781119530891E-11;
         $250 = $249;
         $251 = $246 * 0.41421356797218323;
         $252 = $251 + $243;
         $253 = $252;
         $254 = $253 * 2.0699781119530891E-11;
         $255 = $254;
         $256 = $234;
         $257 = $256 * 1.9075251917372799E-11;
         $258 = $250;
         $259 = $258 + $257;
         $260 = $259;
         HEAPF32[$$02$i>>2] = $260;
         $261 = -$240;
         $262 = $261;
         $263 = $262 * 1.9075251917372799E-11;
         $264 = $255;
         $265 = $264 + $263;
         $266 = $265;
         HEAPF32[$226>>2] = $266;
         $267 = $235;
         $268 = $267 * 1.6519652744032674E-11;
         $269 = $268;
         $270 = $240;
         $271 = $270 * 9.5376259586864042E-12;
         $272 = $264 + $271;
         $273 = $272;
         $274 = $269 - $273;
         HEAPF32[$242>>2] = $274;
         $275 = $273 + $269;
         HEAPF32[$223>>2] = $275;
         $276 = $256 * 9.5376259586864042E-12;
         $277 = $276 - $258;
         $278 = $277;
         $279 = $241;
         $280 = $279 * 1.6519652744032674E-11;
         $281 = $280;
         $282 = $278 + $281;
         HEAPF32[$231>>2] = $282;
         $283 = $278 - $281;
         HEAPF32[$245>>2] = $283;
         $284 = ((($$02$i)) + 4|0);
         $285 = (($l$01$i) + 1)|0;
         $exitcond$i = ($285|0)==(3);
         if ($exitcond$i) {
          break;
         } else {
          $$02$i = $284;$l$01$i = $285;
         }
        }
       } else {
        $k$351 = -9;
        while(1) {
         $286 = (($k$351) + 27)|0;
         $287 = ((7336 + (($$*144)|0)|0) + ($286<<2)|0);
         $288 = +HEAPF32[$287>>2];
         $289 = (($k$351) + 9)|0;
         $290 = $289 << 5;
         $$sum5 = (($290) + ($83))|0;
         $291 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum5<<2)|0);
         $292 = +HEAPF32[$291>>2];
         $293 = $292 * $288;
         $294 = (($k$351) + 36)|0;
         $295 = ((7336 + (($$*144)|0)|0) + ($294<<2)|0);
         $296 = +HEAPF32[$295>>2];
         $297 = (8 - ($k$351))|0;
         $298 = $297 << 5;
         $$sum6 = (($298) + ($83))|0;
         $299 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($23*2304)|0)|0) + ($$sum6<<2)|0);
         $300 = +HEAPF32[$299>>2];
         $301 = $300 * $296;
         $302 = $301 + $293;
         $303 = ((7336 + (($$*144)|0)|0) + ($289<<2)|0);
         $304 = +HEAPF32[$303>>2];
         $305 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($gr$058*2304)|0)|0) + ($$sum5<<2)|0);
         $306 = +HEAPF32[$305>>2];
         $307 = $306 * $304;
         $308 = (($k$351) + 18)|0;
         $309 = ((7336 + (($$*144)|0)|0) + ($308<<2)|0);
         $310 = +HEAPF32[$309>>2];
         $311 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0) + (($gr$058*2304)|0)|0) + ($$sum6<<2)|0);
         $312 = +HEAPF32[$311>>2];
         $313 = $312 * $310;
         $314 = $307 - $313;
         $$sum9 = (($k$351) + 12)|0;
         $315 = (7624 + ($$sum9<<2)|0);
         $316 = +HEAPF32[$315>>2];
         $317 = $314 * $316;
         $318 = $302 - $317;
         $319 = (($work) + ($289<<2)|0);
         HEAPF32[$319>>2] = $318;
         $320 = $316 * $302;
         $321 = $320 + $314;
         $322 = (($work) + ($308<<2)|0);
         HEAPF32[$322>>2] = $321;
         $323 = (($k$351) + 1)|0;
         $exitcond69 = ($323|0)==(0);
         if ($exitcond69) {
          break;
         } else {
          $k$351 = $323;
         }
        }
        $324 = +HEAPF32[$4>>2];
        $325 = +HEAPF32[$5>>2];
        $326 = $324 - $325;
        $327 = +HEAPF32[$6>>2];
        $328 = +HEAPF32[$7>>2];
        $329 = $327 - $328;
        $330 = +HEAPF32[$8>>2];
        $331 = +HEAPF32[$9>>2];
        $332 = $330 - $331;
        $333 = +HEAPF32[$work>>2];
        $334 = +HEAPF32[$10>>2];
        $335 = $334 + $333;
        $336 = +HEAPF32[$11>>2];
        $337 = +HEAPF32[$12>>2];
        $338 = $337 + $336;
        $339 = +HEAPF32[$13>>2];
        $340 = +HEAPF32[$14>>2];
        $341 = $340 + $339;
        $342 = +HEAPF32[$15>>2];
        $343 = +HEAPF32[$16>>2];
        $344 = $343 + $342;
        $345 = $341 + $335;
        $346 = $345 - $344;
        $347 = +HEAPF32[$17>>2];
        $$neg3$i = $347 - $338;
        $348 = $$neg3$i + $346;
        $349 = ((($mdct_enc$054)) + 68|0);
        HEAPF32[$349>>2] = $348;
        $350 = $346 * 0.5;
        $351 = +HEAPF32[$17>>2];
        $352 = $338 - $351;
        $353 = $350 + $352;
        $354 = $326 - $329;
        $355 = $354 - $332;
        $356 = $355 * 0.86602538824081421;
        $357 = $353 + $356;
        $358 = ((($mdct_enc$054)) + 20|0);
        HEAPF32[$358>>2] = $357;
        $359 = $356 - $353;
        $360 = ((($mdct_enc$054)) + 24|0);
        HEAPF32[$360>>2] = $359;
        $361 = +HEAPF32[$18>>2];
        $362 = +HEAPF32[$19>>2];
        $363 = $361 - $362;
        $364 = $363 * 0.86602538824081421;
        $365 = $338 * 0.5;
        $366 = +HEAPF32[$17>>2];
        $367 = $366 + $365;
        $368 = $326 * 0.98480772972106933;
        $369 = $329 * 0.6427876353263855;
        $370 = $332 * 0.34202015399932861;
        $371 = $369 + $368;
        $372 = $371 + $370;
        $373 = $372 + $364;
        $374 = $335 * 0.1736481785774231;
        $375 = $341 * 0.76604443788528442;
        $376 = $344 * 0.93969261646270751;
        $377 = $375 + $374;
        $378 = $377 + $376;
        $379 = $378 + $367;
        $380 = $373 + $379;
        $381 = ((($mdct_enc$054)) + 4|0);
        HEAPF32[$381>>2] = $380;
        $382 = $373 - $379;
        $383 = ((($mdct_enc$054)) + 8|0);
        HEAPF32[$383>>2] = $382;
        $384 = $326 * 0.6427876353263855;
        $385 = $329 * 0.34202015399932861;
        $386 = $332 * 0.98480772972106933;
        $387 = $384 - $385;
        $388 = $387 + $386;
        $389 = $388 - $364;
        $390 = $335 * 0.76604443788528442;
        $391 = $341 * 0.93969261646270751;
        $392 = $344 * 0.1736481785774231;
        $393 = $390 - $391;
        $394 = $393 - $392;
        $395 = $394 + $367;
        $396 = $389 + $395;
        $397 = ((($mdct_enc$054)) + 36|0);
        HEAPF32[$397>>2] = $396;
        $398 = $389 - $395;
        $399 = ((($mdct_enc$054)) + 40|0);
        HEAPF32[$399>>2] = $398;
        $400 = $326 * 0.34202015399932861;
        $401 = $329 * 0.98480772972106933;
        $402 = $332 * 0.6427876353263855;
        $403 = $401 + $400;
        $404 = $403 - $402;
        $405 = $404 - $364;
        $406 = $335 * 0.93969261646270751;
        $407 = $341 * 0.1736481785774231;
        $408 = $344 * 0.76604443788528442;
        $409 = $406 - $407;
        $410 = $409 + $408;
        $411 = $410 - $367;
        $412 = $411 + $405;
        $413 = ((($mdct_enc$054)) + 52|0);
        HEAPF32[$413>>2] = $412;
        $414 = $405 - $411;
        $415 = ((($mdct_enc$054)) + 56|0);
        HEAPF32[$415>>2] = $414;
        $416 = +HEAPF32[$10>>2];
        $417 = +HEAPF32[$work>>2];
        $418 = $416 - $417;
        $419 = +HEAPF32[$14>>2];
        $420 = +HEAPF32[$13>>2];
        $421 = $419 - $420;
        $422 = +HEAPF32[$16>>2];
        $423 = +HEAPF32[$15>>2];
        $424 = $422 - $423;
        $425 = +HEAPF32[$4>>2];
        $426 = +HEAPF32[$5>>2];
        $427 = $426 + $425;
        $428 = +HEAPF32[$18>>2];
        $429 = +HEAPF32[$19>>2];
        $430 = $429 + $428;
        $431 = +HEAPF32[$6>>2];
        $432 = +HEAPF32[$7>>2];
        $433 = $432 + $431;
        $434 = +HEAPF32[$8>>2];
        $435 = +HEAPF32[$9>>2];
        $436 = $435 + $434;
        $437 = $433 + $427;
        $438 = $437 + $436;
        $439 = +HEAPF32[$20>>2];
        $440 = $439 + $430;
        $441 = $440 + $438;
        HEAPF32[$mdct_enc$054>>2] = $441;
        $442 = $438 * 0.5;
        $443 = +HEAPF32[$20>>2];
        $$neg11$i = -$430;
        $$neg13$i = $$neg11$i - $443;
        $444 = $$neg13$i + $442;
        $445 = $418 - $421;
        $446 = $445 + $424;
        $447 = $446 * 0.86602538824081421;
        $448 = $444 + $447;
        $449 = ((($mdct_enc$054)) + 44|0);
        HEAPF32[$449>>2] = $448;
        $450 = $444 - $447;
        $451 = ((($mdct_enc$054)) + 48|0);
        HEAPF32[$451>>2] = $450;
        $452 = +HEAPF32[$12>>2];
        $453 = +HEAPF32[$11>>2];
        $454 = $452 - $453;
        $455 = $454 * 0.86602538824081421;
        $456 = +HEAPF32[$20>>2];
        $457 = $430 * 0.5;
        $458 = $456 - $457;
        $459 = $427 * 0.93969261646270751;
        $460 = $433 * 0.1736481785774231;
        $461 = $436 * 0.76604443788528442;
        $462 = $459 - $460;
        $463 = $462 - $461;
        $464 = $463 - $458;
        $465 = $418 * 0.34202015399932861;
        $466 = $421 * 0.98480772972106933;
        $467 = $424 * 0.6427876353263855;
        $468 = $466 + $465;
        $469 = $468 + $467;
        $470 = $469 + $455;
        $471 = $464 + $470;
        $472 = ((($mdct_enc$054)) + 12|0);
        HEAPF32[$472>>2] = $471;
        $473 = $464 - $470;
        $474 = ((($mdct_enc$054)) + 16|0);
        HEAPF32[$474>>2] = $473;
        $475 = $427 * 0.76604443788528442;
        $476 = $433 * 0.93969261646270751;
        $477 = $436 * 0.1736481785774231;
        $478 = $475 - $476;
        $479 = $478 + $477;
        $480 = $479 + $458;
        $481 = $418 * 0.6427876353263855;
        $482 = $421 * 0.34202015399932861;
        $483 = $424 * 0.98480772972106933;
        $484 = $481 - $482;
        $485 = $484 - $483;
        $486 = $485 + $455;
        $487 = $480 + $486;
        $488 = ((($mdct_enc$054)) + 28|0);
        HEAPF32[$488>>2] = $487;
        $489 = $480 - $486;
        $490 = ((($mdct_enc$054)) + 32|0);
        HEAPF32[$490>>2] = $489;
        $491 = $427 * 0.1736481785774231;
        $492 = $433 * 0.76604443788528442;
        $493 = $436 * 0.93969261646270751;
        $494 = $492 + $491;
        $495 = $494 - $493;
        $496 = $495 + $458;
        $497 = $418 * 0.98480772972106933;
        $498 = $421 * 0.6427876353263855;
        $499 = $424 * 0.34202015399932861;
        $500 = $498 + $497;
        $501 = $500 - $499;
        $502 = $501 - $455;
        $503 = $496 + $502;
        $504 = ((($mdct_enc$054)) + 60|0);
        HEAPF32[$504>>2] = $503;
        $505 = $496 - $502;
        $506 = ((($mdct_enc$054)) + 64|0);
        HEAPF32[$506>>2] = $505;
        break;
       }
      }
     } while(0);
     $507 = ($$|0)!=(2);
     $508 = ($band$156|0)!=(0);
     $or$cond3 = $508 & $507;
     if ($or$cond3) {
      $k$453 = 7;
      while(1) {
       $509 = (($mdct_enc$054) + ($k$453<<2)|0);
       $510 = +HEAPF32[$509>>2];
       $$sum = (($k$453) + 20)|0;
       $511 = (7624 + ($$sum<<2)|0);
       $512 = +HEAPF32[$511>>2];
       $513 = $512 * $510;
       $514 = $k$453 ^ -1;
       $515 = (($mdct_enc$054) + ($514<<2)|0);
       $516 = +HEAPF32[$515>>2];
       $$sum4 = (($k$453) + 28)|0;
       $517 = (7624 + ($$sum4<<2)|0);
       $518 = +HEAPF32[$517>>2];
       $519 = $518 * $516;
       $520 = $519 + $513;
       $521 = $518 * $510;
       $522 = $516 * $512;
       $523 = $521 - $522;
       HEAPF32[$515>>2] = $520;
       HEAPF32[$509>>2] = $523;
       $524 = (($k$453) + -1)|0;
       $525 = ($k$453|0)>(0);
       if ($525) {
        $k$453 = $524;
       } else {
        break;
       }
      }
     }
     $526 = (($band$156) + 1)|0;
     $527 = ((($mdct_enc$054)) + 72|0);
     $exitcond71 = ($526|0)==(32);
     if ($exitcond71) {
      break;
     } else {
      $band$156 = $526;$mdct_enc$054 = $527;
     }
    }
    $scevgep = ((($wk$157)) + 2304|0);
    $528 = (($gr$058) + 1)|0;
    $529 = HEAP32[$3>>2]|0;
    $530 = ($528|0)<($529|0);
    if ($530) {
     $gr$058 = $528;$wk$157 = $scevgep;
    } else {
     $$lcssa = $529;
     break;
    }
   }
   $531 = ($$lcssa|0)==(1);
   if ($531) {
    $532 = (((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0);
    $533 = (((((($gfc)) + 27824|0) + (($ch$060*4608)|0)|0)) + 2304|0);
    _memcpy(($532|0),($533|0),2304)|0;
   }
  }
  $534 = (($ch$060) + 1)|0;
  $535 = HEAP32[$0>>2]|0;
  $536 = ($534|0)<($535|0);
  if ($536) {
   $ch$060 = $534;$w0$pn59 = $w1;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _window_subband($x1,$a) {
 $x1 = $x1|0;
 $a = $a|0;
 var $$015 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0;
 var $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0;
 var $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0;
 var $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0.0;
 var $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0;
 var $223 = 0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0;
 var $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0;
 var $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0.0, $276 = 0, $277 = 0.0;
 var $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0;
 var $296 = 0.0, $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0.0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0;
 var $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0;
 var $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0;
 var $368 = 0, $369 = 0.0, $37 = 0.0, $370 = 0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0, $376 = 0.0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0;
 var $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0.0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0;
 var $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0;
 var $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0;
 var $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0;
 var $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0;
 var $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0.0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0;
 var $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0;
 var $53 = 0.0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0;
 var $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0.0;
 var $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0.0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0.0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0.0;
 var $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0.0, $589 = 0.0, $59 = 0, $590 = 0.0, $591 = 0.0, $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0.0, $600 = 0.0;
 var $601 = 0.0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0, $610 = 0.0, $611 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0;
 var $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $i$014 = 0, $wp$013 = 0, $x2$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($x1)) + -248|0);
 $$015 = $x1;$i$014 = -15;$wp$013 = (7952);$x2$012 = $0;
 while(1) {
  $1 = ((($wp$013)) + -40|0);
  $2 = +HEAPF32[$1>>2];
  $3 = ((($x2$012)) + -896|0);
  $4 = +HEAPF32[$3>>2];
  $5 = $4 * $2;
  $6 = ((($$015)) + 896|0);
  $7 = +HEAPF32[$6>>2];
  $8 = $7 * $2;
  $9 = ((($wp$013)) + -36|0);
  $10 = +HEAPF32[$9>>2];
  $11 = ((($x2$012)) + -640|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $12 * $10;
  $14 = $13 + $5;
  $15 = ((($$015)) + 640|0);
  $16 = +HEAPF32[$15>>2];
  $17 = $16 * $10;
  $18 = $17 + $8;
  $19 = ((($wp$013)) + -32|0);
  $20 = +HEAPF32[$19>>2];
  $21 = ((($x2$012)) + -384|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $22 * $20;
  $24 = $14 + $23;
  $25 = ((($$015)) + 384|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $26 * $20;
  $28 = $18 + $27;
  $29 = ((($wp$013)) + -28|0);
  $30 = +HEAPF32[$29>>2];
  $31 = ((($x2$012)) + -128|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $32 * $30;
  $34 = $24 + $33;
  $35 = ((($$015)) + 128|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $36 * $30;
  $38 = $28 + $37;
  $39 = ((($wp$013)) + -24|0);
  $40 = +HEAPF32[$39>>2];
  $41 = ((($x2$012)) + 128|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $42 * $40;
  $44 = $34 + $43;
  $45 = ((($$015)) + -128|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $46 * $40;
  $48 = $38 + $47;
  $49 = ((($wp$013)) + -20|0);
  $50 = +HEAPF32[$49>>2];
  $51 = ((($x2$012)) + 384|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $52 * $50;
  $54 = $44 + $53;
  $55 = ((($$015)) + -384|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $56 * $50;
  $58 = $48 + $57;
  $59 = ((($wp$013)) + -16|0);
  $60 = +HEAPF32[$59>>2];
  $61 = ((($x2$012)) + 640|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $62 * $60;
  $64 = $54 + $63;
  $65 = ((($$015)) + -640|0);
  $66 = +HEAPF32[$65>>2];
  $67 = $66 * $60;
  $68 = $58 + $67;
  $69 = ((($wp$013)) + -12|0);
  $70 = +HEAPF32[$69>>2];
  $71 = ((($x2$012)) + 896|0);
  $72 = +HEAPF32[$71>>2];
  $73 = $72 * $70;
  $74 = $64 + $73;
  $75 = ((($$015)) + -896|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $76 * $70;
  $78 = $68 + $77;
  $79 = ((($wp$013)) + -8|0);
  $80 = +HEAPF32[$79>>2];
  $81 = ((($$015)) + -1024|0);
  $82 = +HEAPF32[$81>>2];
  $83 = $82 * $80;
  $84 = $74 + $83;
  $85 = ((($x2$012)) + 1024|0);
  $86 = +HEAPF32[$85>>2];
  $87 = $86 * $80;
  $88 = $78 - $87;
  $89 = ((($wp$013)) + -4|0);
  $90 = +HEAPF32[$89>>2];
  $91 = ((($$015)) + -768|0);
  $92 = +HEAPF32[$91>>2];
  $93 = $92 * $90;
  $94 = $84 + $93;
  $95 = ((($x2$012)) + 768|0);
  $96 = +HEAPF32[$95>>2];
  $97 = $96 * $90;
  $98 = $88 - $97;
  $99 = +HEAPF32[$wp$013>>2];
  $100 = ((($$015)) + -512|0);
  $101 = +HEAPF32[$100>>2];
  $102 = $101 * $99;
  $103 = $94 + $102;
  $104 = ((($x2$012)) + 512|0);
  $105 = +HEAPF32[$104>>2];
  $106 = $105 * $99;
  $107 = $98 - $106;
  $108 = ((($wp$013)) + 4|0);
  $109 = +HEAPF32[$108>>2];
  $110 = ((($$015)) + -256|0);
  $111 = +HEAPF32[$110>>2];
  $112 = $111 * $109;
  $113 = $103 + $112;
  $114 = ((($x2$012)) + 256|0);
  $115 = +HEAPF32[$114>>2];
  $116 = $115 * $109;
  $117 = $107 - $116;
  $118 = ((($wp$013)) + 8|0);
  $119 = +HEAPF32[$118>>2];
  $120 = +HEAPF32[$$015>>2];
  $121 = $120 * $119;
  $122 = $113 + $121;
  $123 = +HEAPF32[$x2$012>>2];
  $124 = $123 * $119;
  $125 = $117 - $124;
  $126 = ((($wp$013)) + 12|0);
  $127 = +HEAPF32[$126>>2];
  $128 = ((($$015)) + 256|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $129 * $127;
  $131 = $122 + $130;
  $132 = ((($x2$012)) + -256|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $133 * $127;
  $135 = $125 - $134;
  $136 = ((($wp$013)) + 16|0);
  $137 = +HEAPF32[$136>>2];
  $138 = ((($$015)) + 512|0);
  $139 = +HEAPF32[$138>>2];
  $140 = $139 * $137;
  $141 = $131 + $140;
  $142 = ((($x2$012)) + -512|0);
  $143 = +HEAPF32[$142>>2];
  $144 = $143 * $137;
  $145 = $135 - $144;
  $146 = ((($wp$013)) + 20|0);
  $147 = +HEAPF32[$146>>2];
  $148 = ((($$015)) + 768|0);
  $149 = +HEAPF32[$148>>2];
  $150 = $149 * $147;
  $151 = $141 + $150;
  $152 = ((($x2$012)) + -768|0);
  $153 = +HEAPF32[$152>>2];
  $154 = $153 * $147;
  $155 = $145 - $154;
  $156 = ((($wp$013)) + 24|0);
  $157 = +HEAPF32[$156>>2];
  $158 = $151 * $157;
  $159 = $155 - $158;
  $160 = $155 + $158;
  $161 = $i$014 << 1;
  $162 = (($161) + 30)|0;
  $163 = (($a) + ($162<<2)|0);
  HEAPF32[$163>>2] = $160;
  $164 = ((($wp$013)) + 28|0);
  $165 = +HEAPF32[$164>>2];
  $166 = $159 * $165;
  $167 = (($161) + 31)|0;
  $168 = (($a) + ($167<<2)|0);
  HEAPF32[$168>>2] = $166;
  $169 = ((($wp$013)) + 72|0);
  $170 = ((($$015)) + -4|0);
  $171 = ((($x2$012)) + 4|0);
  $172 = (($i$014) + 1)|0;
  $exitcond = ($172|0)==(0);
  if ($exitcond) {
   break;
  } else {
   $$015 = $170;$i$014 = $172;$wp$013 = $169;$x2$012 = $171;
  }
 }
 $173 = ((($x1)) + -124|0);
 $174 = +HEAPF32[$173>>2];
 $175 = $174 * 10612.802734375;
 $176 = ((($x1)) + -188|0);
 $177 = +HEAPF32[$176>>2];
 $178 = $177 * 12804.7978515625;
 $179 = ((($x1)) + -252|0);
 $180 = +HEAPF32[$179>>2];
 $181 = ((($x1)) + 4|0);
 $182 = +HEAPF32[$181>>2];
 $183 = $180 - $182;
 $184 = $183 * 5302.158203125;
 $185 = $184 + $175;
 $186 = ((($x1)) + -444|0);
 $187 = +HEAPF32[$186>>2];
 $188 = $187 * 1945.5516357421875;
 $189 = $188 + $178;
 $190 = ((($x1)) + -380|0);
 $191 = +HEAPF32[$190>>2];
 $192 = ((($x1)) + 132|0);
 $193 = +HEAPF32[$192>>2];
 $194 = $193 + $191;
 $195 = $194 * 929.77630615234375;
 $196 = $185 + $195;
 $197 = ((($x1)) + -700|0);
 $198 = +HEAPF32[$197>>2];
 $199 = $198 * 313.42449951171875;
 $200 = $189 + $199;
 $201 = ((($x1)) + -508|0);
 $202 = +HEAPF32[$201>>2];
 $203 = ((($x1)) + 260|0);
 $204 = +HEAPF32[$203>>2];
 $205 = $202 - $204;
 $206 = $205 * 728.80108642578125;
 $207 = $196 + $206;
 $208 = ((($x1)) + -956|0);
 $209 = +HEAPF32[$208>>2];
 $210 = $209 * 20.801593780517578;
 $211 = $200 + $210;
 $212 = ((($x1)) + -636|0);
 $213 = +HEAPF32[$212>>2];
 $214 = ((($x1)) + 388|0);
 $215 = +HEAPF32[$214>>2];
 $216 = $215 + $213;
 $217 = $216 * 288.09765625;
 $218 = $207 + $217;
 $219 = ((($x1)) + 68|0);
 $220 = +HEAPF32[$219>>2];
 $221 = $220 * 1995.1556396484375;
 $222 = $211 - $221;
 $223 = ((($x1)) + -764|0);
 $224 = +HEAPF32[$223>>2];
 $225 = ((($x1)) + 516|0);
 $226 = +HEAPF32[$225>>2];
 $227 = $224 - $226;
 $228 = $227 * 64.917388916015625;
 $229 = $218 + $228;
 $230 = ((($x1)) + 324|0);
 $231 = +HEAPF32[$230>>2];
 $232 = $231 * 9.0008392333984375;
 $233 = $222 - $232;
 $234 = ((($x1)) + -892|0);
 $235 = +HEAPF32[$234>>2];
 $236 = ((($x1)) + 644|0);
 $237 = +HEAPF32[$236>>2];
 $238 = $237 + $235;
 $239 = $238 * 30.125003814697266;
 $240 = $229 + $239;
 $241 = ((($x1)) + 580|0);
 $242 = +HEAPF32[$241>>2];
 $243 = $242 * -29.202180862426758;
 $244 = $233 - $243;
 $245 = ((($x1)) + -1020|0);
 $246 = +HEAPF32[$245>>2];
 $247 = ((($x1)) + 772|0);
 $248 = +HEAPF32[$247>>2];
 $249 = $246 - $248;
 $250 = $249 * 4.1014566421508789;
 $251 = $240 + $250;
 $252 = ((($x1)) + 836|0);
 $253 = +HEAPF32[$252>>2];
 $254 = $244 - $253;
 $255 = $254 - $251;
 $256 = $254 + $251;
 $257 = ((($a)) + 56|0);
 $258 = +HEAPF32[$257>>2];
 $259 = ((($a)) + 60|0);
 $260 = +HEAPF32[$259>>2];
 $261 = $260 - $258;
 $262 = $256 + $258;
 $263 = ((($a)) + 124|0);
 $264 = $261 + $255;
 $265 = ((($a)) + 120|0);
 $266 = $255 - $261;
 $267 = $256 - $258;
 $268 = ((($a)) + 112|0);
 $269 = +HEAPF32[$268>>2];
 $270 = +HEAPF32[$a>>2];
 $271 = $269 - $270;
 $272 = $270 + $269;
 HEAPF32[$a>>2] = $272;
 $273 = $271 * 1.9615705013275146;
 HEAPF32[$268>>2] = $273;
 $274 = ((($a)) + 116|0);
 $275 = +HEAPF32[$274>>2];
 $276 = ((($a)) + 4|0);
 $277 = +HEAPF32[$276>>2];
 $278 = $275 - $277;
 $279 = $277 + $275;
 HEAPF32[$276>>2] = $279;
 $280 = $278 * 1.9615705013275146;
 HEAPF32[$274>>2] = $280;
 $281 = ((($a)) + 104|0);
 $282 = +HEAPF32[$281>>2];
 $283 = ((($a)) + 8|0);
 $284 = +HEAPF32[$283>>2];
 $285 = $282 - $284;
 $286 = $284 + $282;
 HEAPF32[$283>>2] = $286;
 $287 = $285 * 1.8477590084075928;
 HEAPF32[$281>>2] = $287;
 $288 = ((($a)) + 108|0);
 $289 = +HEAPF32[$288>>2];
 $290 = ((($a)) + 12|0);
 $291 = +HEAPF32[$290>>2];
 $292 = $289 - $291;
 $293 = $291 + $289;
 HEAPF32[$290>>2] = $293;
 $294 = $292 * 1.8477590084075928;
 HEAPF32[$288>>2] = $294;
 $295 = ((($a)) + 96|0);
 $296 = +HEAPF32[$295>>2];
 $297 = ((($a)) + 16|0);
 $298 = +HEAPF32[$297>>2];
 $299 = $296 - $298;
 $300 = $298 + $296;
 HEAPF32[$297>>2] = $300;
 $301 = $299 * 1.662939190864563;
 HEAPF32[$295>>2] = $301;
 $302 = ((($a)) + 100|0);
 $303 = +HEAPF32[$302>>2];
 $304 = ((($a)) + 20|0);
 $305 = +HEAPF32[$304>>2];
 $306 = $303 - $305;
 $307 = $305 + $303;
 HEAPF32[$304>>2] = $307;
 $308 = $306 * 1.662939190864563;
 HEAPF32[$302>>2] = $308;
 $309 = ((($a)) + 88|0);
 $310 = +HEAPF32[$309>>2];
 $311 = ((($a)) + 24|0);
 $312 = +HEAPF32[$311>>2];
 $313 = $310 - $312;
 $314 = $312 + $310;
 $315 = $313;
 $316 = $315 * 1.4142135623730951;
 $317 = $316;
 $318 = ((($a)) + 92|0);
 $319 = +HEAPF32[$318>>2];
 $320 = ((($a)) + 28|0);
 $321 = +HEAPF32[$320>>2];
 $322 = $319 - $321;
 $323 = $321 + $319;
 $324 = $322;
 $325 = $324 * 1.4142135623730951;
 $326 = $323;
 $327 = $325 - $326;
 $328 = $327;
 $329 = $323 - $314;
 $330 = $317 - $329;
 $331 = $328 - $330;
 $332 = $262 - $314;
 HEAPF32[$311>>2] = $332;
 $333 = $262 + $314;
 HEAPF32[$263>>2] = $333;
 $334 = $264 - $329;
 HEAPF32[$320>>2] = $334;
 $335 = $264 + $329;
 HEAPF32[$265>>2] = $335;
 $336 = $266 - $330;
 HEAPF32[$309>>2] = $336;
 $337 = $266 + $330;
 HEAPF32[$259>>2] = $337;
 $338 = $267 - $331;
 HEAPF32[$318>>2] = $338;
 $339 = $267 + $331;
 HEAPF32[$257>>2] = $339;
 $340 = ((($a)) + 80|0);
 $341 = +HEAPF32[$340>>2];
 $342 = ((($a)) + 32|0);
 $343 = +HEAPF32[$342>>2];
 $344 = $341 - $343;
 $345 = $343 + $341;
 $346 = $344 * 1.1111404895782471;
 $347 = ((($a)) + 84|0);
 $348 = +HEAPF32[$347>>2];
 $349 = ((($a)) + 36|0);
 $350 = +HEAPF32[$349>>2];
 $351 = $348 - $350;
 $352 = $350 + $348;
 $353 = $351 * 1.1111404895782471;
 $354 = ((($a)) + 72|0);
 $355 = +HEAPF32[$354>>2];
 $356 = ((($a)) + 40|0);
 $357 = +HEAPF32[$356>>2];
 $358 = $355 - $357;
 $359 = $357 + $355;
 $360 = $358 * 0.76536685228347778;
 $361 = ((($a)) + 76|0);
 $362 = +HEAPF32[$361>>2];
 $363 = ((($a)) + 44|0);
 $364 = +HEAPF32[$363>>2];
 $365 = $362 - $364;
 $366 = $364 + $362;
 $367 = $365 * 0.76536685228347778;
 $368 = ((($a)) + 64|0);
 $369 = +HEAPF32[$368>>2];
 $370 = ((($a)) + 48|0);
 $371 = +HEAPF32[$370>>2];
 $372 = $369 - $371;
 $373 = $371 + $369;
 $374 = $372 * 0.39018064737319946;
 $375 = ((($a)) + 68|0);
 $376 = +HEAPF32[$375>>2];
 $377 = ((($a)) + 52|0);
 $378 = +HEAPF32[$377>>2];
 $379 = $376 - $378;
 $380 = $378 + $376;
 $381 = $379 * 0.39018064737319946;
 $382 = +HEAPF32[$295>>2];
 $383 = $382 - $346;
 $384 = $382 + $346;
 HEAPF32[$340>>2] = $384;
 $385 = $383 * 0.76536685228347778;
 HEAPF32[$295>>2] = $385;
 $386 = +HEAPF32[$302>>2];
 $387 = $386 - $353;
 $388 = $386 + $353;
 HEAPF32[$347>>2] = $388;
 $389 = $387 * 0.76536685228347778;
 HEAPF32[$302>>2] = $389;
 $390 = +HEAPF32[$297>>2];
 $391 = $390 - $345;
 $392 = $345 + $390;
 HEAPF32[$297>>2] = $392;
 $393 = $391 * 0.76536685228347778;
 HEAPF32[$342>>2] = $393;
 $394 = +HEAPF32[$304>>2];
 $395 = $394 - $352;
 $396 = $352 + $394;
 HEAPF32[$304>>2] = $396;
 $397 = $395 * 0.76536685228347778;
 HEAPF32[$349>>2] = $397;
 $398 = +HEAPF32[$a>>2];
 $399 = $398 - $373;
 $400 = $373 + $398;
 HEAPF32[$a>>2] = $400;
 $401 = $399 * 1.8477590084075928;
 HEAPF32[$370>>2] = $401;
 $402 = +HEAPF32[$276>>2];
 $403 = $402 - $380;
 $404 = $380 + $402;
 HEAPF32[$276>>2] = $404;
 $405 = $403 * 1.8477590084075928;
 HEAPF32[$377>>2] = $405;
 $406 = +HEAPF32[$268>>2];
 $407 = $374 - $406;
 $408 = $406 + $374;
 HEAPF32[$368>>2] = $408;
 $409 = $407 * 1.8477590084075928;
 HEAPF32[$268>>2] = $409;
 $410 = +HEAPF32[$274>>2];
 $411 = $410 - $381;
 $412 = $410 + $381;
 HEAPF32[$375>>2] = $412;
 $413 = $411 * 1.8477590084075928;
 HEAPF32[$274>>2] = $413;
 $414 = +HEAPF32[$283>>2];
 $415 = $414 - $359;
 $416 = $415;
 $417 = $416 * 1.4142135623730951;
 $418 = $417;
 $419 = $359 + $414;
 $420 = +HEAPF32[$290>>2];
 $421 = $420 - $366;
 $422 = $421;
 $423 = $422 * 1.4142135623730951;
 $424 = $423;
 $425 = $366 + $420;
 $426 = +HEAPF32[$281>>2];
 $427 = $426 - $360;
 $428 = $427;
 $429 = $428 * 1.4142135623730951;
 $430 = $429;
 $431 = $426 + $360;
 $432 = $430 - $431;
 $433 = +HEAPF32[$288>>2];
 $434 = $433 - $367;
 $435 = $434;
 $436 = $435 * 1.4142135623730951;
 $437 = $436;
 $438 = $433 + $367;
 $439 = $437 - $438;
 $440 = $438 - $425;
 $441 = $425 - $419;
 $442 = +HEAPF32[$263>>2];
 $443 = $442 - $419;
 HEAPF32[$283>>2] = $443;
 $444 = $442 + $419;
 HEAPF32[$263>>2] = $444;
 $445 = $424 - $440;
 $446 = $431 - $441;
 $447 = +HEAPF32[$265>>2];
 $448 = $447 - $441;
 HEAPF32[$290>>2] = $448;
 $449 = $447 + $441;
 HEAPF32[$265>>2] = $449;
 $450 = $439 - $445;
 $451 = $440 - $446;
 $452 = +HEAPF32[$259>>2];
 $453 = $452 - $446;
 HEAPF32[$354>>2] = $453;
 $454 = $452 + $446;
 HEAPF32[$259>>2] = $454;
 $455 = $418 - $451;
 $456 = +HEAPF32[$257>>2];
 $457 = $456 - $451;
 HEAPF32[$361>>2] = $457;
 $458 = $456 + $451;
 HEAPF32[$257>>2] = $458;
 $459 = $445 - $455;
 $460 = +HEAPF32[$318>>2];
 $461 = $460 - $455;
 HEAPF32[$356>>2] = $461;
 $462 = $460 + $455;
 HEAPF32[$318>>2] = $462;
 $463 = $432 - $459;
 $464 = +HEAPF32[$309>>2];
 $465 = $464 - $459;
 HEAPF32[$363>>2] = $465;
 $466 = $464 + $459;
 HEAPF32[$309>>2] = $466;
 $467 = $450 - $463;
 $468 = +HEAPF32[$320>>2];
 $469 = $468 - $463;
 HEAPF32[$281>>2] = $469;
 $470 = $468 + $463;
 HEAPF32[$320>>2] = $470;
 $471 = +HEAPF32[$311>>2];
 $472 = $471 - $467;
 HEAPF32[$288>>2] = $472;
 $473 = $471 + $467;
 HEAPF32[$311>>2] = $473;
 $474 = +HEAPF32[$a>>2];
 $475 = +HEAPF32[$297>>2];
 $476 = $474 - $475;
 $477 = $476;
 $478 = $477 * 1.4142135623730951;
 $479 = $478;
 $480 = $475 + $474;
 HEAPF32[$a>>2] = $480;
 HEAPF32[$297>>2] = $479;
 $481 = +HEAPF32[$276>>2];
 $482 = +HEAPF32[$304>>2];
 $483 = $481 - $482;
 $484 = $483;
 $485 = $484 * 1.4142135623730951;
 $486 = $485;
 $487 = $482 + $481;
 $488 = +HEAPF32[$368>>2];
 $489 = +HEAPF32[$340>>2];
 $490 = $488 - $489;
 $491 = $490;
 $492 = $491 * 1.4142135623730951;
 $493 = $492;
 $494 = $489 + $488;
 $495 = +HEAPF32[$375>>2];
 $496 = +HEAPF32[$347>>2];
 $497 = $495 - $496;
 $498 = $497;
 $499 = $498 * 1.4142135623730951;
 $500 = $499;
 $501 = $496 + $495;
 $502 = +HEAPF32[$342>>2];
 $503 = +HEAPF32[$370>>2];
 $504 = $502 - $503;
 $505 = $504;
 $506 = $505 * -1.4142135623730951;
 $507 = $506;
 $508 = $503 + $502;
 $509 = $507 - $508;
 $510 = +HEAPF32[$349>>2];
 $511 = +HEAPF32[$377>>2];
 $512 = $510 - $511;
 $513 = $512;
 $514 = $513 * -1.4142135623730951;
 $515 = $514;
 $516 = $511 + $510;
 $517 = $515 - $516;
 $518 = +HEAPF32[$302>>2];
 $519 = +HEAPF32[$274>>2];
 $520 = $518 - $519;
 $521 = $520;
 $522 = $521 * -1.4142135623730951;
 $523 = $522;
 $524 = $519 + $518;
 $525 = $523 - $524;
 $526 = +HEAPF32[$295>>2];
 $527 = +HEAPF32[$268>>2];
 $528 = $527 + $526;
 $529 = $528;
 $530 = $529 * -1.4142135623730951;
 $531 = $530;
 $532 = $526 - $527;
 $533 = $531 - $532;
 $534 = $532 - $494;
 $535 = $493 - $534;
 $536 = $533 - $535;
 $537 = $524 - $501;
 $538 = $500 - $537;
 $539 = $525 - $538;
 $540 = $501 - $487;
 $541 = $516 - $540;
 $542 = $537 - $541;
 $543 = $486 - $542;
 $544 = $538 - $543;
 $545 = $517 - $544;
 $546 = $539 - $545;
 $547 = $487 - $480;
 $548 = $494 - $547;
 $549 = $540 - $548;
 $550 = $508 - $549;
 $551 = $541 - $550;
 $552 = $534 - $551;
 $553 = $542 - $552;
 $554 = +HEAPF32[$297>>2];
 $555 = $554 - $553;
 $556 = $543 - $555;
 $557 = $535 - $556;
 $558 = $544 - $557;
 $559 = $509 - $558;
 $560 = $545 - $559;
 $561 = $536 - $560;
 $562 = $546 - $561;
 $563 = +HEAPF32[$a>>2];
 $564 = +HEAPF32[$263>>2];
 $565 = $564 + $563;
 HEAPF32[$a>>2] = $565;
 $566 = $564 - $563;
 HEAPF32[$263>>2] = $566;
 $567 = +HEAPF32[$265>>2];
 $568 = $567 + $547;
 HEAPF32[$276>>2] = $568;
 $569 = $567 - $547;
 HEAPF32[$265>>2] = $569;
 $570 = +HEAPF32[$259>>2];
 $571 = $570 + $548;
 HEAPF32[$368>>2] = $571;
 $572 = $570 - $548;
 HEAPF32[$259>>2] = $572;
 $573 = +HEAPF32[$257>>2];
 $574 = $573 + $549;
 HEAPF32[$375>>2] = $574;
 $575 = $573 - $549;
 HEAPF32[$257>>2] = $575;
 $576 = +HEAPF32[$318>>2];
 $577 = $576 + $550;
 HEAPF32[$342>>2] = $577;
 $578 = $576 - $550;
 HEAPF32[$318>>2] = $578;
 $579 = +HEAPF32[$309>>2];
 $580 = $579 + $551;
 HEAPF32[$349>>2] = $580;
 $581 = $579 - $551;
 HEAPF32[$309>>2] = $581;
 $582 = +HEAPF32[$320>>2];
 $583 = $582 + $552;
 HEAPF32[$295>>2] = $583;
 $584 = $582 - $552;
 HEAPF32[$320>>2] = $584;
 $585 = +HEAPF32[$311>>2];
 $586 = $585 + $553;
 HEAPF32[$302>>2] = $586;
 $587 = $585 - $553;
 HEAPF32[$311>>2] = $587;
 $588 = +HEAPF32[$288>>2];
 $589 = $588 + $555;
 HEAPF32[$297>>2] = $589;
 $590 = $588 - $555;
 HEAPF32[$288>>2] = $590;
 $591 = +HEAPF32[$281>>2];
 $592 = $591 + $556;
 HEAPF32[$304>>2] = $592;
 $593 = $591 - $556;
 HEAPF32[$281>>2] = $593;
 $594 = +HEAPF32[$363>>2];
 $595 = $594 + $557;
 HEAPF32[$340>>2] = $595;
 $596 = $594 - $557;
 HEAPF32[$363>>2] = $596;
 $597 = +HEAPF32[$356>>2];
 $598 = $597 + $558;
 HEAPF32[$347>>2] = $598;
 $599 = $597 - $558;
 HEAPF32[$356>>2] = $599;
 $600 = +HEAPF32[$361>>2];
 $601 = $600 + $559;
 HEAPF32[$370>>2] = $601;
 $602 = $600 - $559;
 HEAPF32[$361>>2] = $602;
 $603 = +HEAPF32[$354>>2];
 $604 = $603 + $560;
 HEAPF32[$377>>2] = $604;
 $605 = $603 - $560;
 HEAPF32[$354>>2] = $605;
 $606 = +HEAPF32[$290>>2];
 $607 = $606 + $561;
 HEAPF32[$268>>2] = $607;
 $608 = $606 - $561;
 HEAPF32[$290>>2] = $608;
 $609 = +HEAPF32[$283>>2];
 $610 = $609 + $562;
 HEAPF32[$274>>2] = $610;
 $611 = $609 - $562;
 HEAPF32[$283>>2] = $611;
 return;
}
function _apply_preset($gfp,$preset,$enforce) {
 $gfp = $gfp|0;
 $preset = $preset|0;
 $enforce = $enforce|0;
 var $$0 = 0, $$02$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: do {
  switch ($preset|0) {
  case 1004: case 1001:  {
   (_lame_set_VBR($gfp,4)|0);
   $2 = ((($gfp)) + 152|0);
   HEAP32[$2>>2] = 480;
   label = 15;
   break;
  }
  case 1007: case 1006:  {
   (_lame_set_VBR($gfp,4)|0);
   $1 = ((($gfp)) + 152|0);
   HEAP32[$1>>2] = 460;
   label = 13;
   break;
  }
  case 1005: case 1002:  {
   (_lame_set_VBR($gfp,4)|0);
   $3 = ((($gfp)) + 152|0);
   HEAP32[$3>>2] = 500;
   label = 17;
   break;
  }
  case 1003:  {
   $4 = ((($gfp)) + 152|0);
   HEAP32[$4>>2] = 320;
   (_apply_abr_preset($gfp,320,$enforce)|0);
   (_lame_set_VBR($gfp,0)|0);
   $$0 = 320;
   return ($$0|0);
   break;
  }
  case 1000:  {
   (_lame_set_VBR($gfp,4)|0);
   $0 = ((($gfp)) + 152|0);
   HEAP32[$0>>2] = 470;
   label = 14;
   break;
  }
  default: {
   $5 = ((($gfp)) + 152|0);
   HEAP32[$5>>2] = $preset;
   switch ($preset|0) {
   case 490:  {
    _apply_vbr_preset($gfp,1,$enforce);
    $$0 = 490;
    return ($$0|0);
    break;
   }
   case 470:  {
    label = 14;
    break L1;
    break;
   }
   case 410:  {
    _apply_vbr_preset($gfp,9,$enforce);
    $$0 = 410;
    return ($$0|0);
    break;
   }
   case 450:  {
    _apply_vbr_preset($gfp,5,$enforce);
    $$0 = 450;
    return ($$0|0);
    break;
   }
   case 420:  {
    _apply_vbr_preset($gfp,8,$enforce);
    $$0 = 420;
    return ($$0|0);
    break;
   }
   case 500:  {
    label = 17;
    break L1;
    break;
   }
   case 440:  {
    _apply_vbr_preset($gfp,6,$enforce);
    $$0 = 440;
    return ($$0|0);
    break;
   }
   case 480:  {
    label = 15;
    break L1;
    break;
   }
   case 460:  {
    label = 13;
    break L1;
    break;
   }
   case 430:  {
    _apply_vbr_preset($gfp,7,$enforce);
    $$0 = 430;
    return ($$0|0);
    break;
   }
   default: {
    $$02$off = (($preset) + -8)|0;
    $6 = ($$02$off>>>0)<(313);
    if ($6) {
     $7 = (_apply_abr_preset($gfp,$preset,$enforce)|0);
     $$0 = $7;
     return ($$0|0);
    } else {
     HEAP32[$5>>2] = 0;
     $$0 = $preset;
     return ($$0|0);
    }
   }
   }
  }
  }
 } while(0);
 if ((label|0) == 13) {
  _apply_vbr_preset($gfp,4,$enforce);
  $$0 = 460;
  return ($$0|0);
 }
 else if ((label|0) == 14) {
  _apply_vbr_preset($gfp,3,$enforce);
  $$0 = 470;
  return ($$0|0);
 }
 else if ((label|0) == 15) {
  _apply_vbr_preset($gfp,2,$enforce);
  $$0 = 480;
  return ($$0|0);
 }
 else if ((label|0) == 17) {
  _apply_vbr_preset($gfp,0,$enforce);
  $$0 = 500;
  return ($$0|0);
 }
 return (0)|0;
}
function _apply_abr_preset($gfp,$preset,$enforce) {
 $gfp = $gfp|0;
 $preset = $preset|0;
 $enforce = $enforce|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $a$$i = 0, $a$$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $preset&65535;
 $1 = (_nearestBitrateFullIndex($0)|0);
 (_lame_set_VBR($gfp,3)|0);
 (_lame_set_VBR_mean_bitrate_kbps($gfp,$preset)|0);
 $2 = (_lame_get_VBR_mean_bitrate_kbps($gfp)|0);
 $3 = ($2|0)<(320);
 $a$$i = $3 ? $2 : 320;
 (_lame_set_VBR_mean_bitrate_kbps($gfp,$a$$i)|0);
 $4 = (_lame_get_VBR_mean_bitrate_kbps($gfp)|0);
 $5 = ($4|0)>(8);
 $a$$i1 = $5 ? $4 : 8;
 (_lame_set_VBR_mean_bitrate_kbps($gfp,$a$$i1)|0);
 $6 = (_lame_get_VBR_mean_bitrate_kbps($gfp)|0);
 (_lame_set_brate($gfp,$6)|0);
 $7 = (($1) + -12)|0;
 $8 = ($7>>>0)<(5);
 if ($8) {
  $9 = (_lame_get_exp_nspsytune($gfp)|0);
  $10 = $9 | 2;
  (_lame_set_exp_nspsytune($gfp,$10)|0);
 }
 $11 = ($1>>>0)<(13);
 if ($11) {
  (_lame_set_sfscale($gfp,1)|0);
 }
 $12 = ($enforce|0)!=(0);
 if ($12) {
  $32 = (((10560 + (($1*52)|0)|0)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  (_lame_set_quant_comp($gfp,$33)|0);
  $34 = (((10560 + (($1*52)|0)|0)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  (_lame_set_quant_comp_short($gfp,$35)|0);
  $36 = (((10560 + (($1*52)|0)|0)) + 16|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $37;
  _lame_set_msfix($gfp,$38);
  $39 = (((10560 + (($1*52)|0)|0)) + 20|0);
  $40 = +HEAPF32[$39>>2];
  (_lame_set_short_threshold_lrm($gfp,$40)|0);
  $41 = (((10560 + (($1*52)|0)|0)) + 24|0);
  $42 = +HEAPF32[$41>>2];
  (_lame_set_short_threshold_s($gfp,$42)|0);
 } else {
  $13 = (_lame_get_quant_comp($gfp)|0);
  $14 = ($13|0)==(-1);
  if ($14) {
   $15 = (((10560 + (($1*52)|0)|0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   (_lame_set_quant_comp($gfp,$16)|0);
  }
  $17 = (_lame_get_quant_comp_short($gfp)|0);
  $18 = ($17|0)==(-1);
  if ($18) {
   $19 = (((10560 + (($1*52)|0)|0)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   (_lame_set_quant_comp_short($gfp,$20)|0);
  }
  $21 = (+_lame_get_msfix($gfp));
  $22 = $21 + 1.0;
  $23 = ($22 != $22) | (0.0 != 0.0) |($22 == 0.0);
  if ($23) {
   $24 = (((10560 + (($1*52)|0)|0)) + 16|0);
   $25 = +HEAPF32[$24>>2];
   $26 = $25;
   _lame_set_msfix($gfp,$26);
  }
  $27 = (+_lame_get_short_threshold_lrm($gfp));
  $28 = $27 + 1.0;
  $29 = ($28 != $28) | (0.0 != 0.0) |($28 == 0.0);
  if ($29) {
   $30 = (((10560 + (($1*52)|0)|0)) + 20|0);
   $31 = +HEAPF32[$30>>2];
   (_lame_set_short_threshold_lrm($gfp,$31)|0);
  }
  $43 = (+_lame_get_short_threshold_s($gfp));
  $44 = $43 + 1.0;
  $45 = ($44 != $44) | (0.0 != 0.0) |($44 == 0.0);
  if ($45) {
   $46 = (((10560 + (($1*52)|0)|0)) + 24|0);
   $47 = +HEAPF32[$46>>2];
   (_lame_set_short_threshold_s($gfp,$47)|0);
  }
 }
 $48 = (+_lame_get_scale($gfp));
 $49 = (((10560 + (($1*52)|0)|0)) + 28|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $50 * $48;
 (_lame_set_scale($gfp,$51)|0);
 if ($12) {
  $72 = (((10560 + (($1*52)|0)|0)) + 32|0);
  $73 = +HEAPF32[$72>>2];
  (_lame_set_maskingadjust($gfp,$73)|0);
  $74 = $73;
  $75 = $74 * 1.1000000000000001;
  $76 = $75;
  (_lame_set_maskingadjust_short($gfp,$76)|0);
  $77 = (((10560 + (($1*52)|0)|0)) + 36|0);
  $78 = +HEAPF32[$77>>2];
  (_lame_set_ATHlower($gfp,$78)|0);
  $79 = (((10560 + (($1*52)|0)|0)) + 40|0);
  $80 = +HEAPF32[$79>>2];
  (_lame_set_ATHcurve($gfp,$80)|0);
  $81 = (((10560 + (($1*52)|0)|0)) + 44|0);
  $82 = +HEAPF32[$81>>2];
  (_lame_set_interChRatio($gfp,$82)|0);
  $88 = (10560 + (($1*52)|0)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (+($89|0));
  $91 = $90 * 0.015625;
  $92 = $91;
  $93 = ((($gfp)) + 288|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($94)) + 280|0);
  HEAPF32[$95>>2] = $92;
  return ($preset|0);
 }
 $52 = (+_lame_get_maskingadjust($gfp));
 $53 = ($52 != $52) | (0.0 != 0.0) |($52 == 0.0);
 if ($53) {
  $54 = (((10560 + (($1*52)|0)|0)) + 32|0);
  $55 = +HEAPF32[$54>>2];
  (_lame_set_maskingadjust($gfp,$55)|0);
 }
 $56 = (+_lame_get_maskingadjust_short($gfp));
 $57 = ($56 != $56) | (0.0 != 0.0) |($56 == 0.0);
 if ($57) {
  $58 = (((10560 + (($1*52)|0)|0)) + 32|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $59;
  $61 = $60 * 1.1000000000000001;
  $62 = $61;
  (_lame_set_maskingadjust_short($gfp,$62)|0);
 }
 $63 = (+_lame_get_ATHlower($gfp));
 $64 = ($63 != $63) | (0.0 != 0.0) |($63 == 0.0);
 if ($64) {
  $65 = (((10560 + (($1*52)|0)|0)) + 36|0);
  $66 = +HEAPF32[$65>>2];
  (_lame_set_ATHlower($gfp,$66)|0);
 }
 $67 = (+_lame_get_ATHcurve($gfp));
 $68 = $67 + 1.0;
 $69 = ($68 != $68) | (0.0 != 0.0) |($68 == 0.0);
 if ($69) {
  $70 = (((10560 + (($1*52)|0)|0)) + 40|0);
  $71 = +HEAPF32[$70>>2];
  (_lame_set_ATHcurve($gfp,$71)|0);
 }
 $83 = (+_lame_get_interChRatio($gfp));
 $84 = $83 + 1.0;
 $85 = ($84 != $84) | (0.0 != 0.0) |($84 == 0.0);
 if (!($85)) {
  $88 = (10560 + (($1*52)|0)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (+($89|0));
  $91 = $90 * 0.015625;
  $92 = $91;
  $93 = ((($gfp)) + 288|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($94)) + 280|0);
  HEAPF32[$95>>2] = $92;
  return ($preset|0);
 }
 $86 = (((10560 + (($1*52)|0)|0)) + 44|0);
 $87 = +HEAPF32[$86>>2];
 (_lame_set_interChRatio($gfp,$87)|0);
 $88 = (10560 + (($1*52)|0)|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (+($89|0));
 $91 = $90 * 0.015625;
 $92 = $91;
 $93 = ((($gfp)) + 288|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($94)) + 280|0);
 HEAPF32[$95>>2] = $92;
 return ($preset|0);
}
function _apply_vbr_preset($gfp,$a,$enforce) {
 $gfp = $gfp|0;
 $a = $a|0;
 $enforce = $enforce|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0;
 var $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0;
 var $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0;
 var $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lame_get_VBR($gfp)|0);
 if ((($0|0) == 1) | (($0|0) == 4)) {
  $$0$i = 9808;
 } else {
  $$0$i = 9056;
 }
 $1 = ((($gfp)) + 160|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (($$0$i) + (($a*68)|0)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((($$0$i) + (($a*68)|0)|0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (((($$0$i) + (($a*68)|0)|0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((($$0$i) + (($a*68)|0)|0)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (((($$0$i) + (($a*68)|0)|0)) + 16|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (((($$0$i) + (($a*68)|0)|0)) + 20|0);
 $14 = +HEAPF32[$13>>2];
 $15 = (((($$0$i) + (($a*68)|0)|0)) + 24|0);
 $16 = +HEAPF32[$15>>2];
 $17 = (((($$0$i) + (($a*68)|0)|0)) + 28|0);
 $18 = +HEAPF32[$17>>2];
 $19 = (((($$0$i) + (($a*68)|0)|0)) + 32|0);
 $20 = +HEAPF32[$19>>2];
 $21 = (((($$0$i) + (($a*68)|0)|0)) + 36|0);
 $22 = +HEAPF32[$21>>2];
 $23 = (((($$0$i) + (($a*68)|0)|0)) + 40|0);
 $24 = +HEAPF32[$23>>2];
 $25 = (((($$0$i) + (($a*68)|0)|0)) + 44|0);
 $26 = +HEAPF32[$25>>2];
 $27 = (((($$0$i) + (($a*68)|0)|0)) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (((($$0$i) + (($a*68)|0)|0)) + 52|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (((($$0$i) + (($a*68)|0)|0)) + 56|0);
 $32 = +HEAPF32[$31>>2];
 $33 = (((($$0$i) + (($a*68)|0)|0)) + 60|0);
 $34 = +HEAPF32[$33>>2];
 $35 = (((($$0$i) + (($a*68)|0)|0)) + 64|0);
 $36 = +HEAPF32[$35>>2];
 $37 = (($a) + 1)|0;
 $38 = (((($$0$i) + (($37*68)|0)|0)) + 16|0);
 $39 = +HEAPF32[$38>>2];
 $40 = (((($$0$i) + (($37*68)|0)|0)) + 20|0);
 $41 = +HEAPF32[$40>>2];
 $42 = (((($$0$i) + (($37*68)|0)|0)) + 24|0);
 $43 = +HEAPF32[$42>>2];
 $44 = (((($$0$i) + (($37*68)|0)|0)) + 28|0);
 $45 = +HEAPF32[$44>>2];
 $46 = (((($$0$i) + (($37*68)|0)|0)) + 32|0);
 $47 = +HEAPF32[$46>>2];
 $48 = (((($$0$i) + (($37*68)|0)|0)) + 36|0);
 $49 = +HEAPF32[$48>>2];
 $50 = (((($$0$i) + (($37*68)|0)|0)) + 40|0);
 $51 = +HEAPF32[$50>>2];
 $52 = (((($$0$i) + (($37*68)|0)|0)) + 44|0);
 $53 = +HEAPF32[$52>>2];
 $54 = (((($$0$i) + (($37*68)|0)|0)) + 52|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (((($$0$i) + (($37*68)|0)|0)) + 56|0);
 $57 = +HEAPF32[$56>>2];
 $58 = (((($$0$i) + (($37*68)|0)|0)) + 60|0);
 $59 = +HEAPF32[$58>>2];
 $60 = (((($$0$i) + (($37*68)|0)|0)) + 64|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $39 - $12;
 $63 = $62 * $2;
 $64 = $63 + $12;
 $65 = $41 - $14;
 $66 = $65 * $2;
 $67 = $66 + $14;
 $68 = $43 - $16;
 $69 = $68 * $2;
 $70 = $69 + $16;
 $71 = $45 - $18;
 $72 = $71 * $2;
 $73 = $72 + $18;
 $74 = $47 - $20;
 $75 = $74 * $2;
 $76 = $75 + $20;
 $77 = $49 - $22;
 $78 = $77 * $2;
 $79 = $78 + $22;
 $80 = $51 - $24;
 $81 = $80 * $2;
 $82 = $81 + $24;
 $83 = $53 - $26;
 $84 = $83 * $2;
 $85 = $84 + $26;
 $86 = (+($30|0));
 $87 = (($55) - ($30))|0;
 $88 = (+($87|0));
 $89 = $88 * $2;
 $90 = $89 + $86;
 $91 = (~~(($90)));
 $92 = $57 - $32;
 $93 = $92 * $2;
 $94 = $93 + $32;
 $95 = $59 - $34;
 $96 = $95 * $2;
 $97 = $96 + $34;
 $98 = $61 - $36;
 $99 = $98 * $2;
 $100 = $99 + $36;
 (_lame_set_VBR_q($gfp,$4)|0);
 $101 = ($enforce|0)!=(0);
 if ($101) {
  (_lame_set_quant_comp($gfp,$6)|0);
  (_lame_set_quant_comp_short($gfp,$8)|0);
 } else {
  $102 = (_lame_get_quant_comp($gfp)|0);
  $103 = ($102|0)==(-1);
  if ($103) {
   (_lame_set_quant_comp($gfp,$6)|0);
  }
  $104 = (_lame_get_quant_comp_short($gfp)|0);
  $105 = ($104|0)==(-1);
  if ($105) {
   (_lame_set_quant_comp_short($gfp,$8)|0);
  }
 }
 $106 = ($10|0)==(0);
 if (!($106)) {
  (_lame_set_experimentalY($gfp,$10)|0);
 }
 if ($101) {
  (_lame_set_short_threshold_lrm($gfp,$64)|0);
  (_lame_set_short_threshold_s($gfp,$67)|0);
  (_lame_set_maskingadjust($gfp,$70)|0);
  (_lame_set_maskingadjust_short($gfp,$73)|0);
 } else {
  $107 = (+_lame_get_short_threshold_lrm($gfp));
  $108 = $107 + 1.0;
  $109 = ($108 != $108) | (0.0 != 0.0) |($108 == 0.0);
  if ($109) {
   (_lame_set_short_threshold_lrm($gfp,$64)|0);
  }
  $110 = (+_lame_get_short_threshold_s($gfp));
  $111 = $110 + 1.0;
  $112 = ($111 != $111) | (0.0 != 0.0) |($111 == 0.0);
  if ($112) {
   (_lame_set_short_threshold_s($gfp,$67)|0);
  }
  $113 = (+_lame_get_maskingadjust($gfp));
  $114 = ($113 != $113) | (0.0 != 0.0) |($113 == 0.0);
  if ($114) {
   (_lame_set_maskingadjust($gfp,$70)|0);
  }
  $115 = (+_lame_get_maskingadjust_short($gfp));
  $116 = ($115 != $115) | (0.0 != 0.0) |($115 == 0.0);
  if ($116) {
   (_lame_set_maskingadjust_short($gfp,$73)|0);
  }
 }
 $117 = (_lame_get_VBR($gfp)|0);
 $118 = ($117|0)==(1);
 if ($118) {
  label = 23;
 } else {
  $119 = (_lame_get_VBR($gfp)|0);
  $120 = ($119|0)==(4);
  if ($120) {
   label = 23;
  }
 }
 if ((label|0) == 23) {
  (_lame_set_ATHtype($gfp,5)|0);
 }
 if ($101) {
  (_lame_set_ATHlower($gfp,$76)|0);
  (_lame_set_ATHcurve($gfp,$79)|0);
  (_lame_set_athaa_sensitivity($gfp,$82)|0);
 } else {
  $121 = (+_lame_get_ATHlower($gfp));
  $122 = ($121 != $121) | (0.0 != 0.0) |($121 == 0.0);
  if ($122) {
   (_lame_set_ATHlower($gfp,$76)|0);
  }
  $123 = (+_lame_get_ATHcurve($gfp));
  $124 = $123 + 1.0;
  $125 = ($124 != $124) | (0.0 != 0.0) |($124 == 0.0);
  if ($125) {
   (_lame_set_ATHcurve($gfp,$79)|0);
  }
  $126 = (+_lame_get_athaa_sensitivity($gfp));
  $127 = ($126 != $126) | (0.0 != 0.0) |($126 == 0.0);
  if ($127) {
   (_lame_set_athaa_sensitivity($gfp,$82)|0);
  }
 }
 $128 = $85 > 0.0;
 do {
  if ($128) {
   if ($101) {
    (_lame_set_interChRatio($gfp,$85)|0);
    break;
   }
   $129 = (+_lame_get_interChRatio($gfp));
   $130 = $129 + 1.0;
   $131 = ($130 != $130) | (0.0 != 0.0) |($130 == 0.0);
   if ($131) {
    (_lame_set_interChRatio($gfp,$85)|0);
   }
  }
 } while(0);
 $132 = ($28|0)>(0);
 if ($132) {
  $133 = (_lame_get_exp_nspsytune($gfp)|0);
  $134 = $133 | 2;
  (_lame_set_exp_nspsytune($gfp,$134)|0);
 }
 $135 = ($91|0)>(0);
 if ($135) {
  $136 = (_lame_get_exp_nspsytune($gfp)|0);
  $137 = $136 & 66060288;
  $138 = ($137|0)==(0);
  if ($138) {
   $139 = $91 << 20;
   $140 = $136 | $139;
   (_lame_set_exp_nspsytune($gfp,$140)|0);
  }
 }
 if ($101) {
  $145 = $94;
  _lame_set_msfix($gfp,$145);
  $147 = ((($gfp)) + 288|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = ((($148)) + 280|0);
  HEAPF32[$149>>2] = $97;
  $150 = ((($148)) + 224|0);
  HEAPF32[$150>>2] = $100;
  return;
 }
 $141 = (+_lame_get_msfix($gfp));
 $142 = $141 + 1.0;
 $143 = ($142 != $142) | (0.0 != 0.0) |($142 == 0.0);
 if ($143) {
  $144 = $94;
  _lame_set_msfix($gfp,$144);
 }
 $146 = ((($gfp)) + 164|0);
 HEAP32[$146>>2] = $a;
 HEAPF32[$1>>2] = $2;
 $147 = ((($gfp)) + 288|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ((($148)) + 280|0);
 HEAPF32[$149>>2] = $97;
 $150 = ((($148)) + 224|0);
 HEAPF32[$150>>2] = $100;
 return;
}
function _L3psycho_anal_vbr($gfc,$buffer,$gr_out,$masking_ratio,$masking_MS_ratio,$percep_entropy,$percep_MS_entropy,$energy,$blocktype_d) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 $gr_out = $gr_out|0;
 $masking_ratio = $masking_ratio|0;
 $masking_MS_ratio = $masking_MS_ratio|0;
 $percep_entropy = $percep_entropy|0;
 $percep_MS_entropy = $percep_MS_entropy|0;
 $energy = $energy|0;
 $blocktype_d = $blocktype_d|0;
 var $$$i = 0.0, $$$i67 = 0, $$01$i$i = 0.0, $$01$i$i46 = 0.0, $$02$i$i = 0.0, $$02$i$i47 = 0.0, $$1$i$i = 0.0, $$1$i$i54 = 0.0, $$lcssa = 0.0, $$lcssa$i$i = 0, $$lcssa$i$i39 = 0, $$lcssa1$i$i = 0.0, $$lcssa1$i$i38 = 0.0, $$lcssa226 = 0.0, $$lcssa227 = 0, $$lcssa228 = 0, $$lcssa229 = 0.0, $$lcssa230 = 0.0, $$lcssa231 = 0.0, $$lcssa232 = 0.0;
 var $$lcssa233 = 0, $$lcssa234 = 0, $$not = 0, $$not203 = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre$i12 = 0.0, $$pre$i27 = 0.0, $$pre$phi$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre34$i = 0.0, $$pre35$i = 0, $$pre37$i = 0, $$pre48$i = 0.0, $$pre49$i = 0, $$pre52$i = 0, $$pre61$i = 0, $$pre63$i = 0, $$pre8$i = 0, $$sink$i$i = 0;
 var $$sink$i$i36 = 0, $$sink7$i$i = 0, $$sink7$i$i43 = 0, $$sum = 0, $$sum$i = 0, $$sum$us$i = 0, $$sum1$1$i = 0, $$sum1$2$i = 0, $$sum1$3$i = 0, $$sum1$4$i = 0, $$sum1$i = 0, $$sum1$us$1$i = 0, $$sum1$us$2$i = 0, $$sum1$us$3$i = 0, $$sum1$us$4$i = 0, $$sum1$us$i = 0, $$sum2$1$i = 0, $$sum2$2$i = 0, $$sum2$3$i = 0, $$sum2$4$i = 0;
 var $$sum2$i = 0, $$sum2$us$1$i = 0, $$sum2$us$2$i = 0, $$sum2$us$3$i = 0, $$sum2$us$4$i = 0, $$sum2$us$i = 0, $$sum3$1$i = 0, $$sum3$2$i = 0, $$sum3$3$i = 0, $$sum3$4$i = 0, $$sum3$i = 0, $$sum3$us$1$i = 0, $$sum3$us$2$i = 0, $$sum3$us$3$i = 0, $$sum3$us$4$i = 0, $$sum3$us$i = 0, $$sum4$1$i = 0, $$sum4$2$i = 0, $$sum4$3$i = 0, $$sum4$4$i = 0;
 var $$sum4$i = 0, $$sum4$us$1$i = 0, $$sum4$us$2$i = 0, $$sum4$us$3$i = 0, $$sum4$us$4$i = 0, $$sum4$us$i = 0, $$sum73 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0.0, $1003 = 0.0, $1004 = 0, $1005 = 0, $1006 = 0.0, $1007 = 0, $1008 = 0.0;
 var $1009 = 0.0, $101 = 0.0, $1010 = 0.0, $1011 = 0.0, $1012 = 0, $1013 = 0.0, $1014 = 0, $1015 = 0.0, $1016 = 0.0, $1017 = 0.0, $1018 = 0, $1019 = 0.0, $102 = 0.0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0;
 var $1027 = 0, $1028 = 0, $1029 = 0.0, $103 = 0.0, $1030 = 0.0, $1031 = 0.0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0.0, $1038 = 0, $1039 = 0.0, $104 = 0.0, $1040 = 0.0, $1041 = 0.0, $1042 = 0, $1043 = 0, $1044 = 0.0;
 var $1045 = 0.0, $1046 = 0, $1047 = 0.0, $1048 = 0, $1049 = 0.0, $105 = 0.0, $1050 = 0, $1051 = 0.0, $1052 = 0.0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0.0, $1060 = 0.0, $1061 = 0, $1062 = 0;
 var $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0.0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0.0, $1080 = 0;
 var $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0.0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0;
 var $11 = 0.0, $110 = 0.0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0.0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0;
 var $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0.0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0.0, $113 = 0.0, $1130 = 0.0, $1131 = 0.0, $1132 = 0.0, $1133 = 0, $1134 = 0;
 var $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0.0, $1145 = 0.0, $1146 = 0.0, $1147 = 0, $1148 = 0.0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0.0, $1152 = 0.0;
 var $1153 = 0.0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0.0, $1161 = 0.0, $1162 = 0.0, $1163 = 0, $1164 = 0.0, $1165 = 0.0, $1166 = 0.0, $1167 = 0, $1168 = 0.0, $1169 = 0, $117 = 0, $1170 = 0.0;
 var $1171 = 0.0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0;
 var $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0.0, $1206 = 0;
 var $1207 = 0, $1208 = 0.0, $1209 = 0, $121 = 0, $1210 = 0.0, $1211 = 0, $1212 = 0.0, $1213 = 0, $1214 = 0.0, $1215 = 0, $1216 = 0.0, $1217 = 0.0, $1218 = 0.0, $1219 = 0.0, $122 = 0, $1220 = 0.0, $1221 = 0.0, $1222 = 0.0, $1223 = 0.0, $1224 = 0.0;
 var $1225 = 0.0, $1226 = 0.0, $1227 = 0.0, $1228 = 0.0, $1229 = 0.0, $123 = 0, $1230 = 0, $1231 = 0.0, $1232 = 0, $1233 = 0.0, $1234 = 0, $1235 = 0.0, $1236 = 0, $1237 = 0.0, $1238 = 0, $1239 = 0.0, $124 = 0, $1240 = 0.0, $1241 = 0.0, $1242 = 0.0;
 var $1243 = 0.0, $1244 = 0.0, $1245 = 0.0, $1246 = 0.0, $1247 = 0.0, $1248 = 0.0, $1249 = 0.0, $125 = 0, $1250 = 0.0, $1251 = 0.0, $1252 = 0.0, $1253 = 0, $1254 = 0.0, $1255 = 0, $1256 = 0.0, $1257 = 0, $1258 = 0.0, $1259 = 0, $126 = 0, $1260 = 0.0;
 var $1261 = 0, $1262 = 0.0, $1263 = 0.0, $1264 = 0.0, $1265 = 0.0, $1266 = 0.0, $1267 = 0.0, $1268 = 0.0, $1269 = 0.0, $127 = 0, $1270 = 0.0, $1271 = 0.0, $1272 = 0.0, $1273 = 0.0, $1274 = 0.0, $1275 = 0.0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0.0;
 var $128 = 0, $1280 = 0, $1281 = 0.0, $1282 = 0, $1283 = 0.0, $1284 = 0, $1285 = 0.0, $1286 = 0, $1287 = 0, $1288 = 0.0, $1289 = 0.0, $129 = 0, $1290 = 0.0, $1291 = 0.0, $1292 = 0.0, $1293 = 0.0, $1294 = 0.0, $1295 = 0.0, $1296 = 0.0, $1297 = 0.0;
 var $1298 = 0.0, $1299 = 0.0, $13 = 0, $130 = 0, $1300 = 0.0, $1301 = 0.0, $1302 = 0, $1303 = 0, $1304 = 0.0, $1305 = 0.0, $1306 = 0, $1307 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0.0;
 var $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0;
 var $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0.0;
 var $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0;
 var $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0;
 var $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0;
 var $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0.0, $317 = 0, $318 = 0;
 var $319 = 0.0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0.0, $393 = 0, $394 = 0.0, $395 = 0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0.0, $432 = 0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0, $440 = 0.0, $441 = 0.0, $442 = 0, $443 = 0, $444 = 0.0;
 var $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0.0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0.0, $475 = 0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0;
 var $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0.0, $530 = 0.0, $531 = 0.0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $540$phi = 0, $541 = 0.0, $542 = 0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0, $548 = 0.0, $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0.0, $569 = 0.0, $57 = 0.0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0.0, $574 = 0, $575 = 0.0, $576 = 0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0.0, $587 = 0.0, $588 = 0.0;
 var $589 = 0, $59 = 0.0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0.0, $600 = 0.0, $601 = 0.0, $602 = 0.0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0.0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0.0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0.0, $621 = 0, $622 = 0.0, $623 = 0.0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0.0, $630 = 0, $631 = 0.0, $632 = 0, $633 = 0.0, $634 = 0.0, $635 = 0, $636 = 0.0, $637 = 0.0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0.0, $645 = 0.0, $646 = 0, $647 = 0, $648 = 0.0, $649 = 0, $65 = 0.0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0.0, $656 = 0, $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0.0;
 var $660 = 0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0.0, $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0, $675 = 0, $676 = 0, $677 = 0.0, $678 = 0.0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0.0, $69 = 0.0, $690 = 0, $691 = 0, $692 = 0.0, $693 = 0.0, $694 = 0, $695 = 0.0, $696 = 0.0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0.0, $702 = 0, $703 = 0.0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0.0, $709 = 0, $71 = 0.0, $710 = 0.0, $711 = 0.0, $712 = 0.0, $713 = 0;
 var $714 = 0.0, $715 = 0, $716 = 0.0, $717 = 0.0, $718 = 0, $719 = 0.0, $72 = 0.0, $720 = 0, $721 = 0.0, $722 = 0, $723 = 0.0, $724 = 0.0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0.0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0.0, $741 = 0, $742 = 0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0.0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0.0, $755 = 0.0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0.0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0.0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0.0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0.0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0.0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0.0, $82 = 0, $820 = 0, $821 = 0.0;
 var $822 = 0.0, $823 = 0.0, $824 = 0.0, $825 = 0.0, $826 = 0, $827 = 0, $828 = 0, $829 = 0.0, $83 = 0.0, $830 = 0.0, $831 = 0, $832 = 0, $833 = 0.0, $834 = 0, $835 = 0, $836 = 0.0, $837 = 0.0, $838 = 0.0, $839 = 0.0, $84 = 0.0;
 var $840 = 0.0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0.0, $850 = 0, $851 = 0, $852 = 0.0, $853 = 0.0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0.0, $862 = 0.0, $863 = 0, $864 = 0, $865 = 0.0, $866 = 0.0, $867 = 0.0, $868 = 0, $869 = 0.0, $87 = 0.0, $870 = 0.0, $871 = 0, $872 = 0.0, $873 = 0.0, $874 = 0.0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0.0, $882 = 0.0, $883 = 0.0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0.0, $890 = 0.0, $891 = 0, $892 = 0, $893 = 0, $894 = 0.0;
 var $895 = 0.0, $896 = 0.0, $897 = 0, $898 = 0, $899 = 0, $899$phi = 0, $9 = 0, $90 = 0.0, $900 = 0.0, $901 = 0, $902 = 0.0, $903 = 0, $904 = 0, $905 = 0.0, $906 = 0, $907 = 0.0, $908 = 0.0, $909 = 0.0, $91 = 0.0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0.0, $92 = 0, $920 = 0.0, $921 = 0.0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0.0, $928 = 0.0, $929 = 0;
 var $93 = 0.0, $930 = 0, $931 = 0, $932 = 0.0, $933 = 0, $934 = 0.0, $935 = 0, $936 = 0.0, $937 = 0.0, $938 = 0.0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0.0, $946 = 0.0, $947 = 0.0;
 var $948 = 0, $949 = 0, $95 = 0.0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0.0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0.0, $968 = 0.0, $969 = 0.0, $97 = 0.0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0.0, $976 = 0, $977 = 0.0, $978 = 0.0, $979 = 0, $98 = 0, $980 = 0.0, $981 = 0.0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0.0, $99 = 0.0, $990 = 0, $991 = 0.0, $992 = 0.0, $993 = 0, $994 = 0.0, $995 = 0.0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $avg$i = 0, $b$0$lcssa$i$i = 0, $b$0$lcssa$i$i40 = 0;
 var $b$01$i = 0, $b$019$i = 0, $b$02$i$i = 0, $b$02$i$i32 = 0, $b$030$i = 0, $b$08$i$i = 0, $b$116$i = 0, $b$16$i$ph = 0, $b$23$i$ph = 0, $blocktype$0$i = 0, $brmerge = 0, $chn$01$i$us = 0, $chn$01$i65 = 0, $chn$01$us$i = 0, $chn$0136 = 0, $chn$031$i = 0, $chn$031$us$i = 0, $chn$1133 = 0, $chn$125$i = 0, $chn$2120 = 0;
 var $chn$3127 = 0, $chn$4119 = 0, $chn$5114 = 0, $chn$6112 = 0, $dd$0$lcssa$i = 0, $dd$0$lcssa$i58 = 0, $dd$010$i = 0, $dd$06$i = 0, $dd_n$0$lcssa$i = 0, $dd_n$0$lcssa$i57 = 0, $eb = 0, $ebb$0$lcssa$i = 0.0, $ebb$0$lcssa$i$i = 0.0, $ebb$02$i$i = 0.0, $ebb$021$i = 0.0, $ecb$0$be$i = 0.0, $ecb$0$be$i$lcssa = 0.0, $ecb$0$be$i48 = 0.0, $ecb$0$be$i48$lcssa = 0.0, $ecb$0$lcssa$i = 0.0;
 var $ecb$0$lcssa$i56 = 0.0, $ecb$08$i = 0.0, $ecb$09$i = 0.0, $ecb_limit1$0$i = 0.0, $ecb_limit_1$0$i = 0.0, $ecb_limit_2$0$i = 0.0, $en_short$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i11 = 0, $exitcond$i17 = 0, $exitcond$i18 = 0, $exitcond$i68 = 0, $exitcond$i7 = 0, $exitcond$i8 = 0, $exitcond150 = 0, $exitcond151 = 0, $exitcond155 = 0, $exitcond156 = 0;
 var $exitcond159 = 0, $exitcond160 = 0, $exitcond167 = 0, $exitcond168 = 0, $exitcond169 = 0, $exitcond170 = 0, $exitcond173 = 0, $exitcond180 = 0, $exitcond31$i = 0, $exitcond32$i = 0, $exitcond33$i = 0, $exitcond41$i = 0, $exitcond44$i = 0, $exitcond45$i = 0, $exitcond46$i = 0, $exitcond46$i25 = 0, $exitcond48$i = 0, $exitcond49$i = 0, $exitcond50$i = 0, $exitcond51$i = 0;
 var $exitcond9$i = 0, $fabsf$i = 0.0, $factor$0$1$i = 0.0, $factor$0$2$i = 0.0, $factor$0$i = 0.0, $fftenergy = 0, $fftenergy_s = 0, $i$01$i$i = 0, $i$023$i = 0, $i$030$i = 0, $i$030$us$i = 0, $i$04$i$i = 0, $i$114$i = 0, $i$319$i = 0, $i$623$i = 0, $ispos$i$i = 0, $ispos$i$i52 = 0, $j$03$i = 0, $j$031$i = 0, $j$07$i$i = 0;
 var $j$08$i = 0, $j$1$lcssa$i = 0, $j$1$lcssa$i$i = 0, $j$11$i$i = 0, $j$12$i = 0, $j$122$i = 0, $j$17$i = 0, $j$217$i = 0, $j$25$i = 0, $j$3$i = 0, $j$3$lcssa$i = 0, $j$34$i = 0, $j$34$i45 = 0, $j$39$i = 0, $k$020$i = 0, $k$1$i = 0, $k$1$lcssa$i = 0, $k$112$i = 0, $k$17$i = 0, $kk$010$i = 0;
 var $kk$010$in$i = 0, $kk$013$i = 0, $kk$013$in$i = 0, $last_thm = 0, $loudness_power$02$i$i = 0.0, $m$0$i$i = 0.0, $m$0$i$i29 = 0.0, $m$0$lcssa$i = 0.0, $m$0$lcssa$i$i = 0.0, $m$020$i = 0.0, $m$03$i$i = 0.0, $m$1$i = 0.0, $m$1$i$i = 0.0, $m$1$i$i$lcssa = 0.0, $m$1$i$i34 = 0.0, $m$1$i$lcssa = 0.0, $m$1$i2$i = 0.0, $m$2$i$i = 0.0, $m$2$i$i35 = 0.0, $m$3$i$i = 0.0;
 var $m$3$i$i42 = 0.0, $mask_idx_s$i = 0, $mr$0 = 0, $neg$i$i = 0, $neg$i$i53 = 0, $new_thmm = 0, $ns_attacks = 0, $ns_uselongblock$0$i = 0, $or$cond = 0, $or$cond$1$i = 0, $or$cond$2$i = 0, $or$cond$i = 0, $or$cond$i20 = 0, $or$cond3 = 0, $or$cond7$1$i = 0, $or$cond7$2$i = 0, $or$cond7$i = 0, $or$cond75 = 0, $p$017$i = 0.0, $p$1$i = 0.0;
 var $p$1$i$lcssa = 0.0, $p$2$i = 0.0, $pe_l$02$i = 0.0, $pe_l$1$i = 0.0, $pe_l$1$i$lcssa = 0.0, $pe_s$04$i = 0.0, $pe_s$2$1$i = 0.0, $pe_s$2$2$i = 0.0, $pe_s$2$2$i$lcssa = 0.0, $pe_s$2$i = 0.0, $pf$018$i = 0, $pf$116$i = 0, $ppe$0 = 0, $prev_thm$0 = 0.0, $prev_thm$0$in = 0, $prev_thm$1 = 0.0, $ratio$0$i$i = 0.0, $ratio$0$i$i51 = 0.0, $sb$01$i = 0, $sb$0118 = 0;
 var $sb$02$i = 0, $sb$03$i = 0, $sblock$0130 = 0, $sblock$1116 = 0, $scevgep = 0, $scevgep162 = 0, $scevgep165 = 0, $scevgep175 = 0, $scevgep178 = 0, $smax$i = 0, $smax$i$i = 0, $smax$i31 = 0, $storemerge$i$i = 0, $storemerge$i$i30 = 0, $sub_short_factor = 0, $t1$0 = 0.0, $t2$0 = 0.0, $thm$i = 0, $thr = 0, $totalenergy$06$i = 0.0;
 var $type$0 = 0, $type$1 = 0, $uselongblock = 0, $wsamp_L = 0, $wsamp_S = 0, $x$1$1$i = 0.0, $x$1$10$i = 0.0, $x$1$2$i = 0.0, $x$1$3$i = 0.0, $x$1$4$i = 0.0, $x$1$5$i = 0.0, $x$1$6$i = 0.0, $x$1$7$i = 0.0, $x$1$8$i = 0.0, $x$1$9$i = 0.0, $x$1$i = 0.0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 26240|0;
 $mask_idx_s$i = sp + 21624|0;
 $thm$i = sp + 21368|0;
 $avg$i = sp + 21112|0;
 $en_short$i = sp + 21096|0;
 $last_thm = sp + 20120|0;
 $fftenergy = sp + 18068|0;
 $fftenergy_s = sp + 16520|0;
 $wsamp_L = sp + 8328|0;
 $wsamp_S = sp + 2184|0;
 $eb = sp + 1160|0;
 $thr = sp + 136|0;
 $sub_short_factor = sp + 88|0;
 $ns_attacks = sp + 24|0;
 $uselongblock = sp + 16|0;
 $new_thmm = sp;
 $0 = ((($gfc)) + 85800|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($gfc)) + 140|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $1192 = 0;
 } else {
  $5 = ((($gfc)) + 85804|0);
  $6 = HEAP32[$5>>2]|0;
  $1192 = $6;
 }
 $7 = ((($gfc)) + 192|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 > 0.0;
 if ($9) {
  $10 = ((($gfc)) + 200|0);
  $11 = +HEAPF32[$10>>2];
  $12 = ((($gfc)) + 85796|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 8|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $15 * $11;
  $743 = $16;
 } else {
  $743 = 1.0;
 }
 dest=$ns_attacks; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $17 = ((($gfc)) + 180|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(1);
 if ($19) {
  $417 = 4;
 } else {
  $20 = ((($gfc)) + 72|0);
  $21 = HEAP32[$20>>2]|0;
  $417 = $21;
 }
 $22 = ((($gfc)) + 25660|0);
 _memcpy(($last_thm|0),($22|0),976)|0;
 if ($4) {
  $117 = 0;
 } else {
  $23 = ((($gfc)) + 85804|0);
  $24 = HEAP32[$23>>2]|0;
  $117 = $24;
 }
 $25 = ((($gfc)) + 72|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $19 ? 4 : $26;
 _memset(($mask_idx_s$i|0),0,4608)|0;
 $28 = ($26|0)>(0);
 if ($28) {
  $29 = ($27|0)>(2);
  if ($29) {
   $chn$031$us$i = 0;
   while(1) {
    $30 = (($buffer) + ($chn$031$us$i<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $i$030$us$i = 0;
    while(1) {
     $$sum$us$i = (($i$030$us$i) + 407)|0;
     $42 = (($31) + ($$sum$us$i<<2)|0);
     $43 = +HEAPF32[$42>>2];
     $$sum1$us$i = (($i$030$us$i) + 397)|0;
     $44 = (($31) + ($$sum1$us$i<<2)|0);
     $45 = +HEAPF32[$44>>2];
     $$sum2$us$i = (($i$030$us$i) + 418)|0;
     $46 = (($31) + ($$sum2$us$i<<2)|0);
     $47 = +HEAPF32[$46>>2];
     $48 = $47 + $45;
     $49 = $48 * 1.7303260184043527E-17;
     $$sum3$us$i = (($i$030$us$i) + 398)|0;
     $50 = (($31) + ($$sum3$us$i<<2)|0);
     $51 = +HEAPF32[$50>>2];
     $$sum4$us$i = (($i$030$us$i) + 417)|0;
     $52 = (($31) + ($$sum4$us$i<<2)|0);
     $53 = +HEAPF32[$52>>2];
     $54 = $53 + $51;
     $55 = $54 * 0.017031719908118248;
     $$sum1$us$1$i = (($i$030$us$i) + 399)|0;
     $56 = (($31) + ($$sum1$us$1$i<<2)|0);
     $57 = +HEAPF32[$56>>2];
     $$sum2$us$1$i = (($i$030$us$i) + 416)|0;
     $58 = (($31) + ($$sum2$us$1$i<<2)|0);
     $59 = +HEAPF32[$58>>2];
     $60 = $59 + $57;
     $61 = $60 * 1.3495279640235235E-17;
     $$sum3$us$1$i = (($i$030$us$i) + 400)|0;
     $62 = (($31) + ($$sum3$us$1$i<<2)|0);
     $63 = +HEAPF32[$62>>2];
     $$sum4$us$1$i = (($i$030$us$i) + 415)|0;
     $64 = (($31) + ($$sum4$us$1$i<<2)|0);
     $65 = +HEAPF32[$64>>2];
     $66 = $65 + $63;
     $67 = $66 * 0.041807200759649277;
     $$sum1$us$2$i = (($i$030$us$i) + 401)|0;
     $68 = (($31) + ($$sum1$us$2$i<<2)|0);
     $69 = +HEAPF32[$68>>2];
     $$sum2$us$2$i = (($i$030$us$i) + 414)|0;
     $70 = (($31) + ($$sum2$us$2$i<<2)|0);
     $71 = +HEAPF32[$70>>2];
     $72 = $71 + $69;
     $73 = $72 * 6.7327796858492251E-17;
     $$sum3$us$2$i = (($i$030$us$i) + 402)|0;
     $74 = (($31) + ($$sum3$us$2$i<<2)|0);
     $75 = +HEAPF32[$74>>2];
     $$sum4$us$2$i = (($i$030$us$i) + 413)|0;
     $76 = (($31) + ($$sum4$us$2$i<<2)|0);
     $77 = +HEAPF32[$76>>2];
     $78 = $77 + $75;
     $79 = $78 * 0.087632402777671814;
     $$sum1$us$3$i = (($i$030$us$i) + 403)|0;
     $80 = (($31) + ($$sum1$us$3$i<<2)|0);
     $81 = +HEAPF32[$80>>2];
     $$sum2$us$3$i = (($i$030$us$i) + 412)|0;
     $82 = (($31) + ($$sum2$us$3$i<<2)|0);
     $83 = +HEAPF32[$82>>2];
     $84 = $83 + $81;
     $85 = $84 * 3.0835000291318875E-17;
     $$sum3$us$3$i = (($i$030$us$i) + 404)|0;
     $86 = (($31) + ($$sum3$us$3$i<<2)|0);
     $87 = +HEAPF32[$86>>2];
     $$sum4$us$3$i = (($i$030$us$i) + 411)|0;
     $88 = (($31) + ($$sum4$us$3$i<<2)|0);
     $89 = +HEAPF32[$88>>2];
     $90 = $89 + $87;
     $91 = $90 * 0.1863476037979126;
     $$sum1$us$4$i = (($i$030$us$i) + 405)|0;
     $92 = (($31) + ($$sum1$us$4$i<<2)|0);
     $93 = +HEAPF32[$92>>2];
     $$sum2$us$4$i = (($i$030$us$i) + 410)|0;
     $94 = (($31) + ($$sum2$us$4$i<<2)|0);
     $95 = +HEAPF32[$94>>2];
     $96 = $95 + $93;
     $97 = $96 * 1.1044240253100168E-16;
     $$sum3$us$4$i = (($i$030$us$i) + 406)|0;
     $98 = (($31) + ($$sum3$us$4$i<<2)|0);
     $99 = +HEAPF32[$98>>2];
     $$sum4$us$4$i = (($i$030$us$i) + 409)|0;
     $100 = (($31) + ($$sum4$us$4$i<<2)|0);
     $101 = +HEAPF32[$100>>2];
     $102 = $101 + $99;
     $103 = $102 * 0.62763798236846924;
     $104 = $43 - $49;
     $105 = $104 - $55;
     $106 = $105 - $61;
     $107 = $106 + $67;
     $108 = $107 - $73;
     $109 = $108 - $79;
     $110 = $109 - $85;
     $111 = $110 + $91;
     $112 = $111 - $97;
     $113 = $112 - $103;
     $114 = ((($mask_idx_s$i) + (($chn$031$us$i*2304)|0)|0) + ($i$030$us$i<<2)|0);
     HEAPF32[$114>>2] = $113;
     $115 = (($i$030$us$i) + 1)|0;
     $exitcond50$i = ($115|0)==(576);
     if ($exitcond50$i) {
      break;
     } else {
      $i$030$us$i = $115;
     }
    }
    $32 = ((((($masking_ratio) + (($gr_out*976)|0)|0) + (($chn$031$us$i*488)|0)|0)) + 244|0);
    $33 = (((($gfc)) + 26636|0) + (($chn$031$us$i*244)|0)|0);
    _memcpy(($32|0),($33|0),244)|0;
    $34 = ((($masking_ratio) + (($gr_out*976)|0)|0) + (($chn$031$us$i*488)|0)|0);
    $35 = (((($gfc)) + 25660|0) + (($chn$031$us$i*244)|0)|0);
    _memcpy(($34|0),($35|0),244)|0;
    $36 = ((((($masking_MS_ratio) + (($gr_out*976)|0)|0) + (($chn$031$us$i*488)|0)|0)) + 244|0);
    $37 = (($chn$031$us$i) + 2)|0;
    $38 = (((($gfc)) + 26636|0) + (($37*244)|0)|0);
    _memcpy(($36|0),($38|0),244)|0;
    $39 = ((($masking_MS_ratio) + (($gr_out*976)|0)|0) + (($chn$031$us$i*488)|0)|0);
    $40 = (((($gfc)) + 25660|0) + (($37*244)|0)|0);
    _memcpy(($39|0),($40|0),244)|0;
    $41 = (($chn$031$us$i) + 1)|0;
    $exitcond51$i = ($41|0)==($26|0);
    if ($exitcond51$i) {
     break;
    } else {
     $chn$031$us$i = $41;
    }
   }
  } else {
   $chn$031$i = 0;
   while(1) {
    $145 = (($buffer) + ($chn$031$i<<2)|0);
    $146 = HEAP32[$145>>2]|0;
    $i$030$i = 0;
    while(1) {
     $$sum$i = (($i$030$i) + 407)|0;
     $147 = (($146) + ($$sum$i<<2)|0);
     $148 = +HEAPF32[$147>>2];
     $$sum1$i = (($i$030$i) + 397)|0;
     $149 = (($146) + ($$sum1$i<<2)|0);
     $150 = +HEAPF32[$149>>2];
     $$sum2$i = (($i$030$i) + 418)|0;
     $151 = (($146) + ($$sum2$i<<2)|0);
     $152 = +HEAPF32[$151>>2];
     $153 = $152 + $150;
     $154 = $153 * 1.7303260184043527E-17;
     $$sum3$i = (($i$030$i) + 398)|0;
     $155 = (($146) + ($$sum3$i<<2)|0);
     $156 = +HEAPF32[$155>>2];
     $$sum4$i = (($i$030$i) + 417)|0;
     $157 = (($146) + ($$sum4$i<<2)|0);
     $158 = +HEAPF32[$157>>2];
     $159 = $158 + $156;
     $160 = $159 * 0.017031719908118248;
     $$sum1$1$i = (($i$030$i) + 399)|0;
     $161 = (($146) + ($$sum1$1$i<<2)|0);
     $162 = +HEAPF32[$161>>2];
     $$sum2$1$i = (($i$030$i) + 416)|0;
     $163 = (($146) + ($$sum2$1$i<<2)|0);
     $164 = +HEAPF32[$163>>2];
     $165 = $164 + $162;
     $166 = $165 * 1.3495279640235235E-17;
     $$sum3$1$i = (($i$030$i) + 400)|0;
     $167 = (($146) + ($$sum3$1$i<<2)|0);
     $168 = +HEAPF32[$167>>2];
     $$sum4$1$i = (($i$030$i) + 415)|0;
     $169 = (($146) + ($$sum4$1$i<<2)|0);
     $170 = +HEAPF32[$169>>2];
     $171 = $170 + $168;
     $172 = $171 * 0.041807200759649277;
     $$sum1$2$i = (($i$030$i) + 401)|0;
     $173 = (($146) + ($$sum1$2$i<<2)|0);
     $174 = +HEAPF32[$173>>2];
     $$sum2$2$i = (($i$030$i) + 414)|0;
     $175 = (($146) + ($$sum2$2$i<<2)|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $176 + $174;
     $178 = $177 * 6.7327796858492251E-17;
     $$sum3$2$i = (($i$030$i) + 402)|0;
     $179 = (($146) + ($$sum3$2$i<<2)|0);
     $180 = +HEAPF32[$179>>2];
     $$sum4$2$i = (($i$030$i) + 413)|0;
     $181 = (($146) + ($$sum4$2$i<<2)|0);
     $182 = +HEAPF32[$181>>2];
     $183 = $182 + $180;
     $184 = $183 * 0.087632402777671814;
     $$sum1$3$i = (($i$030$i) + 403)|0;
     $185 = (($146) + ($$sum1$3$i<<2)|0);
     $186 = +HEAPF32[$185>>2];
     $$sum2$3$i = (($i$030$i) + 412)|0;
     $187 = (($146) + ($$sum2$3$i<<2)|0);
     $188 = +HEAPF32[$187>>2];
     $189 = $188 + $186;
     $190 = $189 * 3.0835000291318875E-17;
     $$sum3$3$i = (($i$030$i) + 404)|0;
     $191 = (($146) + ($$sum3$3$i<<2)|0);
     $192 = +HEAPF32[$191>>2];
     $$sum4$3$i = (($i$030$i) + 411)|0;
     $193 = (($146) + ($$sum4$3$i<<2)|0);
     $194 = +HEAPF32[$193>>2];
     $195 = $194 + $192;
     $196 = $195 * 0.1863476037979126;
     $$sum1$4$i = (($i$030$i) + 405)|0;
     $197 = (($146) + ($$sum1$4$i<<2)|0);
     $198 = +HEAPF32[$197>>2];
     $$sum2$4$i = (($i$030$i) + 410)|0;
     $199 = (($146) + ($$sum2$4$i<<2)|0);
     $200 = +HEAPF32[$199>>2];
     $201 = $200 + $198;
     $202 = $201 * 1.1044240253100168E-16;
     $$sum3$4$i = (($i$030$i) + 406)|0;
     $203 = (($146) + ($$sum3$4$i<<2)|0);
     $204 = +HEAPF32[$203>>2];
     $$sum4$4$i = (($i$030$i) + 409)|0;
     $205 = (($146) + ($$sum4$4$i<<2)|0);
     $206 = +HEAPF32[$205>>2];
     $207 = $206 + $204;
     $208 = $207 * 0.62763798236846924;
     $209 = $148 - $154;
     $210 = $209 - $160;
     $211 = $210 - $166;
     $212 = $211 + $172;
     $213 = $212 - $178;
     $214 = $213 - $184;
     $215 = $214 - $190;
     $216 = $215 + $196;
     $217 = $216 - $202;
     $218 = $217 - $208;
     $219 = ((($mask_idx_s$i) + (($chn$031$i*2304)|0)|0) + ($i$030$i<<2)|0);
     HEAPF32[$219>>2] = $218;
     $220 = (($i$030$i) + 1)|0;
     $exitcond48$i = ($220|0)==(576);
     if ($exitcond48$i) {
      break;
     } else {
      $i$030$i = $220;
     }
    }
    $221 = ((((($masking_ratio) + (($gr_out*976)|0)|0) + (($chn$031$i*488)|0)|0)) + 244|0);
    $222 = (((($gfc)) + 26636|0) + (($chn$031$i*244)|0)|0);
    _memcpy(($221|0),($222|0),244)|0;
    $223 = ((($masking_ratio) + (($gr_out*976)|0)|0) + (($chn$031$i*488)|0)|0);
    $224 = (((($gfc)) + 25660|0) + (($chn$031$i*244)|0)|0);
    _memcpy(($223|0),($224|0),244)|0;
    $225 = (($chn$031$i) + 1)|0;
    $exitcond49$i = ($225|0)==($26|0);
    if ($exitcond49$i) {
     break;
    } else {
     $chn$031$i = $225;
    }
   }
  }
 }
 $116 = ($27|0)>(0);
 if ($116) {
  $118 = ($117|0)==(0|0);
  $119 = ((($uselongblock)) + 4|0);
  $120 = ((($avg$i)) + 4|0);
  $121 = ((($thm$i)) + 4|0);
  $122 = ((($avg$i)) + 8|0);
  $123 = ((($thm$i)) + 8|0);
  $124 = ((($avg$i)) + 12|0);
  $125 = ((($avg$i)) + 16|0);
  $126 = ((($avg$i)) + 20|0);
  $127 = ((($avg$i)) + 24|0);
  $128 = ((($avg$i)) + 28|0);
  $129 = ((($avg$i)) + 32|0);
  $130 = ((($avg$i)) + 36|0);
  $131 = ((($avg$i)) + 40|0);
  $132 = ((($avg$i)) + 44|0);
  $133 = ((($en_short$i)) + 4|0);
  $134 = ((($en_short$i)) + 8|0);
  $135 = ((($en_short$i)) + 12|0);
  $136 = ((($thm$i)) + 12|0);
  $137 = ((($thm$i)) + 16|0);
  $138 = ((($thm$i)) + 20|0);
  $139 = ((($thm$i)) + 24|0);
  $140 = ((($thm$i)) + 28|0);
  $141 = ((($thm$i)) + 32|0);
  $142 = ((($thm$i)) + 36|0);
  $143 = ((($thm$i)) + 40|0);
  $144 = ((($thm$i)) + 44|0);
  $chn$125$i = 0;
  while(1) {
   ;HEAP32[$en_short$i>>2]=0|0;HEAP32[$en_short$i+4>>2]=0|0;HEAP32[$en_short$i+8>>2]=0|0;HEAP32[$en_short$i+12>>2]=0|0;
   $226 = $chn$125$i & 1;
   $227 = (($mask_idx_s$i) + (($226*2304)|0)|0);
   $228 = ($chn$125$i|0)==(2);
   if ($228) {
    $i$114$i = 0;
    while(1) {
     $244 = (($mask_idx_s$i) + ($i$114$i<<2)|0);
     $245 = +HEAPF32[$244>>2];
     $246 = (((($mask_idx_s$i)) + 2304|0) + ($i$114$i<<2)|0);
     $247 = +HEAPF32[$246>>2];
     $248 = $247 + $245;
     HEAPF32[$244>>2] = $248;
     $249 = $245 - $247;
     HEAPF32[$246>>2] = $249;
     $250 = (($i$114$i) + 1)|0;
     $exitcond$i = ($250|0)==(576);
     if ($exitcond$i) {
      break;
     } else {
      $i$114$i = $250;
     }
    }
   }
   $229 = (((((($gfc)) + 27636|0) + (($chn$125$i*36)|0)|0)) + 24|0);
   $230 = +HEAPF32[$229>>2];
   HEAPF32[$avg$i>>2] = $230;
   $231 = (((((($gfc)) + 27636|0) + (($chn$125$i*36)|0)|0)) + 16|0);
   $232 = +HEAPF32[$231>>2];
   $233 = $230 / $232;
   HEAPF32[$thm$i>>2] = $233;
   $234 = (((((($gfc)) + 27636|0) + (($chn$125$i*36)|0)|0)) + 28|0);
   $235 = +HEAPF32[$234>>2];
   HEAPF32[$120>>2] = $235;
   $236 = (((((($gfc)) + 27636|0) + (($chn$125$i*36)|0)|0)) + 20|0);
   $237 = +HEAPF32[$236>>2];
   $238 = $235 / $237;
   HEAPF32[$121>>2] = $238;
   $239 = $235 + $230;
   $240 = (((((($gfc)) + 27636|0) + (($chn$125$i*36)|0)|0)) + 32|0);
   $241 = +HEAPF32[$240>>2];
   HEAPF32[$122>>2] = $241;
   $242 = $241 / $230;
   HEAPF32[$123>>2] = $242;
   $243 = $239 + $241;
   HEAPF32[$en_short$i>>2] = $243;
   $i$319$i = 0;$pf$018$i = $227;
   while(1) {
    $258 = ((($pf$018$i)) + 256|0);
    $p$017$i = 1.0;$pf$116$i = $pf$018$i;
    while(1) {
     $259 = +HEAPF32[$pf$116$i>>2];
     $fabsf$i = (+Math_abs((+$259)));
     $260 = $p$017$i < $fabsf$i;
     $p$1$i = $260 ? $fabsf$i : $p$017$i;
     $261 = ((($pf$116$i)) + 4|0);
     $262 = ($261>>>0)<($258>>>0);
     if ($262) {
      $p$017$i = $p$1$i;$pf$116$i = $261;
     } else {
      $p$1$i$lcssa = $p$1$i;
      break;
     }
    }
    $263 = (($i$319$i) + 3)|0;
    $264 = (($avg$i) + ($263<<2)|0);
    HEAPF32[$264>>2] = $p$1$i$lcssa;
    $265 = ((((($gfc)) + 27636|0) + (($chn$125$i*36)|0)|0) + ($i$319$i<<2)|0);
    HEAPF32[$265>>2] = $p$1$i$lcssa;
    $266 = (($i$319$i|0) / 3)&-1;
    $267 = (($266) + 1)|0;
    $268 = (($en_short$i) + ($267<<2)|0);
    $269 = +HEAPF32[$268>>2];
    $270 = $269 + $p$1$i$lcssa;
    HEAPF32[$268>>2] = $270;
    $271 = (($i$319$i) + 1)|0;
    $272 = (($avg$i) + ($271<<2)|0);
    $273 = +HEAPF32[$272>>2];
    $274 = $p$1$i$lcssa > $273;
    if ($274) {
     $275 = $p$1$i$lcssa / $273;
     $p$2$i = $275;
    } else {
     $276 = $p$1$i$lcssa * 10.0;
     $277 = $273 > $276;
     if ($277) {
      $278 = $273 / $276;
      $p$2$i = $278;
     } else {
      $p$2$i = 0.0;
     }
    }
    $279 = (($thm$i) + ($263<<2)|0);
    HEAPF32[$279>>2] = $p$2$i;
    $exitcond41$i = ($271|0)==(9);
    if ($exitcond41$i) {
     break;
    } else {
     $i$319$i = $271;$pf$018$i = $258;
    }
   }
   $251 = +HEAPF32[$124>>2];
   $252 = +HEAPF32[$125>>2];
   $253 = $252 + $251;
   $254 = +HEAPF32[$126>>2];
   $255 = $253 + $254;
   $256 = $254 * 6.0;
   $257 = $256 < $255;
   if ($257) {
    $280 = $252 * 6.0;
    $281 = $280 < $255;
    if ($281) {
     $factor$0$i = 0.25;
    } else {
     $factor$0$i = 0.5;
    }
   } else {
    $factor$0$i = 1.0;
   }
   $282 = (($sub_short_factor) + (($chn$125$i*12)|0)|0);
   HEAPF32[$282>>2] = $factor$0$i;
   $283 = +HEAPF32[$127>>2];
   $284 = +HEAPF32[$128>>2];
   $285 = $284 + $283;
   $286 = +HEAPF32[$129>>2];
   $287 = $285 + $286;
   $288 = $286 * 6.0;
   $289 = $288 < $287;
   if ($289) {
    $379 = $284 * 6.0;
    $380 = $379 < $287;
    if ($380) {
     $factor$0$1$i = 0.25;
    } else {
     $factor$0$1$i = 0.5;
    }
   } else {
    $factor$0$1$i = 1.0;
   }
   $381 = (((($sub_short_factor) + (($chn$125$i*12)|0)|0)) + 4|0);
   HEAPF32[$381>>2] = $factor$0$1$i;
   $382 = +HEAPF32[$130>>2];
   $383 = +HEAPF32[$131>>2];
   $384 = $383 + $382;
   $385 = +HEAPF32[$132>>2];
   $386 = $384 + $385;
   $387 = $385 * 6.0;
   $388 = $387 < $386;
   if ($388) {
    $389 = $383 * 6.0;
    $390 = $389 < $386;
    if ($390) {
     $factor$0$2$i = 0.25;
    } else {
     $factor$0$2$i = 0.5;
    }
   } else {
    $factor$0$2$i = 1.0;
   }
   $391 = (((($sub_short_factor) + (($chn$125$i*12)|0)|0)) + 8|0);
   HEAPF32[$391>>2] = $factor$0$2$i;
   if (!($118)) {
    $290 = +HEAPF32[$thm$i>>2];
    $291 = +HEAPF32[$121>>2];
    $292 = $290 < $291;
    $x$1$i = $292 ? $291 : $290;
    $293 = +HEAPF32[$123>>2];
    $294 = $x$1$i < $293;
    $x$1$1$i = $294 ? $293 : $x$1$i;
    $295 = +HEAPF32[$136>>2];
    $296 = $x$1$1$i < $295;
    $x$1$2$i = $296 ? $295 : $x$1$1$i;
    $297 = +HEAPF32[$137>>2];
    $298 = $x$1$2$i < $297;
    $x$1$3$i = $298 ? $297 : $x$1$2$i;
    $299 = +HEAPF32[$138>>2];
    $300 = $x$1$3$i < $299;
    $x$1$4$i = $300 ? $299 : $x$1$3$i;
    $301 = +HEAPF32[$139>>2];
    $302 = $x$1$4$i < $301;
    $x$1$5$i = $302 ? $301 : $x$1$4$i;
    $303 = +HEAPF32[$140>>2];
    $304 = $x$1$5$i < $303;
    $x$1$6$i = $304 ? $303 : $x$1$5$i;
    $305 = +HEAPF32[$141>>2];
    $306 = $x$1$6$i < $305;
    $x$1$7$i = $306 ? $305 : $x$1$6$i;
    $307 = +HEAPF32[$142>>2];
    $308 = $x$1$7$i < $307;
    $x$1$8$i = $308 ? $307 : $x$1$7$i;
    $309 = +HEAPF32[$143>>2];
    $310 = $x$1$8$i < $309;
    $x$1$9$i = $310 ? $309 : $x$1$8$i;
    $311 = +HEAPF32[$144>>2];
    $312 = $x$1$9$i < $311;
    $x$1$10$i = $312 ? $311 : $x$1$9$i;
    $313 = (((($117)) + 197112|0) + ($chn$125$i<<3)|0);
    $314 = +HEAPF64[$313>>3];
    $315 = ((((($117)) + 197144|0) + ($gr_out<<5)|0) + ($chn$125$i<<3)|0);
    HEAPF64[$315>>3] = $314;
    $316 = $x$1$10$i;
    HEAPF64[$313>>3] = $316;
   }
   $317 = HEAP32[$0>>2]|0;
   $318 = (((($317)) + 6480|0) + ($chn$125$i<<2)|0);
   $319 = +HEAPF32[$318>>2];
   $i$623$i = 0;
   while(1) {
    $330 = (($i$623$i|0) / 3)&-1;
    $331 = ((($ns_attacks) + ($chn$125$i<<4)|0) + ($330<<2)|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = ($332|0)==(0);
    if ($333) {
     $334 = (($thm$i) + ($i$623$i<<2)|0);
     $335 = +HEAPF32[$334>>2];
     $336 = $335 > $319;
     if ($336) {
      $337 = (($i$623$i|0) % 3)&-1;
      $338 = (($337) + 1)|0;
      HEAP32[$331>>2] = $338;
     }
    }
    $339 = (($i$623$i) + 1)|0;
    $exitcond44$i = ($339|0)==(12);
    if ($exitcond44$i) {
     break;
    } else {
     $i$623$i = $339;
    }
   }
   $320 = (($ns_attacks) + ($chn$125$i<<4)|0);
   $321 = +HEAPF32[$en_short$i>>2];
   $322 = +HEAPF32[$133>>2];
   $323 = $321 > $322;
   $324 = $323 ? $321 : $322;
   $325 = $324 < 4.0E+4;
   $326 = $322 * 1.7000000476837158;
   $327 = $321 < $326;
   $or$cond$i = $327 & $325;
   $328 = $321 * 1.7000000476837158;
   $329 = $322 < $328;
   $or$cond7$i = $329 & $or$cond$i;
   if ($or$cond7$i) {
    $340 = HEAP32[$320>>2]|0;
    $341 = (((($ns_attacks) + ($chn$125$i<<4)|0)) + 4|0);
    $342 = HEAP32[$341>>2]|0;
    $343 = ($340|0)>($342|0);
    if (!($343)) {
     HEAP32[$320>>2] = 0;
    }
    HEAP32[$341>>2] = 0;
   }
   $344 = +HEAPF32[$134>>2];
   $345 = $322 > $344;
   $346 = $345 ? $322 : $344;
   $347 = $346 < 4.0E+4;
   $348 = $344 * 1.7000000476837158;
   $349 = $322 < $348;
   $or$cond$1$i = $349 & $347;
   $350 = $344 < $326;
   $or$cond7$1$i = $350 & $or$cond$1$i;
   if ($or$cond7$1$i) {
    $$pre61$i = (((($ns_attacks) + ($chn$125$i<<4)|0)) + 8|0);
    HEAP32[$$pre61$i>>2] = 0;
   }
   $392 = +HEAPF32[$135>>2];
   $393 = $344 > $392;
   $394 = $393 ? $344 : $392;
   $395 = $394 < 4.0E+4;
   $396 = $392 * 1.7000000476837158;
   $397 = $344 < $396;
   $or$cond$2$i = $397 & $395;
   $398 = $392 < $348;
   $or$cond7$2$i = $398 & $or$cond$2$i;
   if ($or$cond7$2$i) {
    $$pre63$i = (((($ns_attacks) + ($chn$125$i<<4)|0)) + 12|0);
    HEAP32[$$pre63$i>>2] = 0;
   }
   $399 = HEAP32[$320>>2]|0;
   $400 = (((($gfc)) + 27780|0) + ($chn$125$i<<2)|0);
   $351 = HEAP32[$400>>2]|0;
   $401 = ($399|0)>($351|0);
   if ($401) {
    $354 = $399;
   } else {
    HEAP32[$320>>2] = 0;
    $354 = 0;
   }
   $352 = ($351|0)==(3);
   $$phi$trans$insert$i = (((($ns_attacks) + ($chn$125$i<<4)|0)) + 4|0);
   $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
   if ($352) {
    label = 47;
   } else {
    $353 = (($$pre$i) + ($354))|0;
    $355 = (((($ns_attacks) + ($chn$125$i<<4)|0)) + 8|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = (($353) + ($356))|0;
    $358 = (((($ns_attacks) + ($chn$125$i<<4)|0)) + 12|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = (0 - ($359))|0;
    $361 = ($357|0)==($360|0);
    if ($361) {
     $ns_uselongblock$0$i = 1;
    } else {
     label = 47;
    }
   }
   do {
    if ((label|0) == 47) {
     label = 0;
     $362 = ($$pre$i|0)==(0);
     do {
      if ($362) {
       $367 = 0;
      } else {
       $363 = ($354|0)==(0);
       if ($363) {
        $367 = $$pre$i;
        break;
       }
       HEAP32[$$phi$trans$insert$i>>2] = 0;
       $367 = 0;
      }
     } while(0);
     $364 = (((($ns_attacks) + ($chn$125$i<<4)|0)) + 8|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = ($365|0)==(0);
     if ($366) {
      $ns_uselongblock$0$i = 0;
      break;
     }
     $368 = ($367|0)==(0);
     if (!($368)) {
      HEAP32[$364>>2] = 0;
      $ns_uselongblock$0$i = 0;
      break;
     }
     $369 = (((($ns_attacks) + ($chn$125$i<<4)|0)) + 12|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = ($370|0)==(0);
     if ($371) {
      $ns_uselongblock$0$i = 0;
      break;
     }
     HEAP32[$369>>2] = 0;
     $ns_uselongblock$0$i = 0;
    }
   } while(0);
   $372 = ($chn$125$i|0)<(2);
   do {
    if ($372) {
     $373 = (($uselongblock) + ($chn$125$i<<2)|0);
     HEAP32[$373>>2] = $ns_uselongblock$0$i;
    } else {
     $374 = ($ns_uselongblock$0$i|0)==(0);
     if (!($374)) {
      break;
     }
     HEAP32[$119>>2] = 0;
     HEAP32[$uselongblock>>2] = 0;
    }
   } while(0);
   $375 = (((($gfc)) + 27620|0) + ($chn$125$i<<2)|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = (($energy) + ($chn$125$i<<2)|0);
   HEAP32[$377>>2] = $376;
   $378 = (($chn$125$i) + 1)|0;
   $exitcond46$i = ($378|0)==($27|0);
   if ($exitcond46$i) {
    break;
   } else {
    $chn$125$i = $378;
   }
  }
 }
 $402 = ((($gfc)) + 184|0);
 $403 = HEAP32[$402>>2]|0;
 $404 = ($403|0)==(1);
 if ($404) {
  $405 = HEAP32[$uselongblock>>2]|0;
  $406 = ($405|0)==(0);
  $$pre8$i = ((($uselongblock)) + 4|0);
  $407 = HEAP32[$$pre8$i>>2]|0;
  $408 = ($407|0)==(0);
  $or$cond75 = $406 | $408;
  if ($or$cond75) {
   HEAP32[$$pre8$i>>2] = 0;
   HEAP32[$uselongblock>>2] = 0;
  }
 }
 $409 = HEAP32[$25>>2]|0;
 $410 = ($409|0)>(0);
 do {
  if ($410) {
   if ((($403|0) == 3)) {
    $chn$01$i$us = 0;
    while(1) {
     $411 = (($uselongblock) + ($chn$01$i$us<<2)|0);
     HEAP32[$411>>2] = 0;
     $412 = (($chn$01$i$us) + 1)|0;
     $413 = ($412|0)<($409|0);
     if ($413) {
      $chn$01$i$us = $412;
     } else {
      break;
     }
    }
   } else if ((($403|0) == 2)) {
    $chn$01$us$i = 0;
    while(1) {
     $414 = (($uselongblock) + ($chn$01$us$i<<2)|0);
     HEAP32[$414>>2] = 1;
     $415 = (($chn$01$us$i) + 1)|0;
     $416 = ($415|0)<($409|0);
     if ($416) {
      $chn$01$us$i = $415;
     } else {
      break;
     }
    }
   } else {
    break;
   }
  }
 } while(0);
 $418 = ($417|0)>(0);
 if ($418) {
  $419 = ((($gfc)) + 85796|0);
  $420 = ((($thm$i)) + 4|0);
  $421 = ((($gfc)) + 84908|0);
  $$pre37$i = ((($avg$i)) + 4|0);
  $422 = ((($gfc)) + 85804|0);
  $chn$0136 = 0;
  while(1) {
   $423 = $chn$0136 & 1;
   $424 = (($wsamp_L) + ($423<<12)|0);
   $425 = HEAP32[$2>>2]|0;
   $426 = ($425|0)==(0);
   if ($426) {
    $460 = 0;
   } else {
    $427 = HEAP32[$422>>2]|0;
    $460 = $427;
   }
   $428 = ($chn$0136|0)<(2);
   if ($428) {
    _fft_long($gfc,$424,$chn$0136,$buffer);
   } else {
    $429 = ($chn$0136|0)==(2);
    if ($429) {
     $$sum73 = (($423) + 1)|0;
     $j$08$i = 1023;
     while(1) {
      $430 = ((($wsamp_L) + ($423<<12)|0) + ($j$08$i<<2)|0);
      $431 = +HEAPF32[$430>>2];
      $432 = ((($wsamp_L) + ($$sum73<<12)|0) + ($j$08$i<<2)|0);
      $433 = +HEAPF32[$432>>2];
      $434 = $433 + $431;
      $435 = $434 * 0.70710676908493042;
      HEAPF32[$430>>2] = $435;
      $436 = $431 - $433;
      $437 = $436 * 0.70710676908493042;
      HEAPF32[$432>>2] = $437;
      $438 = (($j$08$i) + -1)|0;
      $439 = ($j$08$i|0)>(0);
      if ($439) {
       $j$08$i = $438;
      } else {
       break;
      }
     }
    }
   }
   $440 = +HEAPF32[$424>>2];
   $441 = $440 * $440;
   HEAPF32[$fftenergy>>2] = $441;
   $j$17$i = 511;
   while(1) {
    $442 = (512 - ($j$17$i))|0;
    $443 = ((($wsamp_L) + ($423<<12)|0) + ($442<<2)|0);
    $444 = +HEAPF32[$443>>2];
    $445 = (($j$17$i) + 512)|0;
    $446 = ((($wsamp_L) + ($423<<12)|0) + ($445<<2)|0);
    $447 = +HEAPF32[$446>>2];
    $448 = $444 * $444;
    $449 = $447 * $447;
    $450 = $449 + $448;
    $451 = $450 * 0.5;
    $452 = (($fftenergy) + ($442<<2)|0);
    HEAPF32[$452>>2] = $451;
    $453 = (($j$17$i) + -1)|0;
    $454 = ($j$17$i|0)>(0);
    if ($454) {
     $j$17$i = $453;
    } else {
     $j$25$i = 11;$totalenergy$06$i = 0.0;
     break;
    }
   }
   while(1) {
    $455 = (($fftenergy) + ($j$25$i<<2)|0);
    $456 = +HEAPF32[$455>>2];
    $457 = $456 + $totalenergy$06$i;
    $458 = (($j$25$i) + 1)|0;
    $exitcond9$i = ($458|0)==(513);
    if ($exitcond9$i) {
     $$lcssa229 = $457;
     break;
    } else {
     $j$25$i = $458;$totalenergy$06$i = $457;
    }
   }
   $459 = (((($gfc)) + 27620|0) + ($chn$0136<<2)|0);
   HEAPF32[$459>>2] = $$lcssa229;
   $461 = ($460|0)==(0|0);
   if (!($461)) {
    $j$34$i = 0;
    while(1) {
     $462 = ((((($460)) + 90936|0) + ($chn$0136<<13)|0) + ($j$34$i<<3)|0);
     $463 = +HEAPF64[$462>>3];
     $464 = (((((($460)) + 123704|0) + ($gr_out<<15)|0) + ($chn$0136<<13)|0) + ($j$34$i<<3)|0);
     HEAPF64[$464>>3] = $463;
     $465 = (($fftenergy) + ($j$34$i<<2)|0);
     $466 = +HEAPF32[$465>>2];
     $467 = $466;
     HEAPF64[$462>>3] = $467;
     $468 = (($j$34$i) + 1)|0;
     $exitcond$i8 = ($468|0)==(513);
     if ($exitcond$i8) {
      break;
     } else {
      $j$34$i = $468;
     }
    }
   }
   if ($428) {
    $469 = (((($gfc)) + 27612|0) + ($chn$0136<<2)|0);
    $470 = HEAP32[$469>>2]|0;
    $471 = ((((($gfc)) + 27804|0) + ($gr_out<<3)|0) + ($chn$0136<<2)|0);
    HEAP32[$471>>2] = $470;
    $472 = HEAP32[$419>>2]|0;
    $i$01$i$i = 0;$loudness_power$02$i$i = 0.0;
    while(1) {
     $473 = (($fftenergy) + ($i$01$i$i<<2)|0);
     $474 = +HEAPF32[$473>>2];
     $475 = (((($472)) + 724|0) + ($i$01$i$i<<2)|0);
     $476 = +HEAPF32[$475>>2];
     $477 = $476 * $474;
     $478 = $477 + $loudness_power$02$i$i;
     $479 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($479|0)==(512);
     if ($exitcond$i$i) {
      $$lcssa230 = $478;
      break;
     } else {
      $i$01$i$i = $479;$loudness_power$02$i$i = $478;
     }
    }
    $480 = $$lcssa230;
    $481 = $480 * 8.9748713435966334E-12;
    $482 = $481;
    HEAPF32[$469>>2] = $482;
   }
   $483 = HEAP32[$0>>2]|0;
   $484 = ((($483)) + 2148|0);
   $485 = HEAP32[$484>>2]|0;
   $486 = ($485|0)>(0);
   if ($486) {
    $b$08$i$i = 0;$j$07$i$i = 0;
    while(1) {
     $487 = (((($483)) + 1716|0) + ($b$08$i$i<<2)|0);
     $488 = HEAP32[$487>>2]|0;
     $489 = ($488|0)>(0);
     if ($489) {
      $ebb$02$i$i = 0.0;$i$04$i$i = 0;$j$11$i$i = $j$07$i$i;$m$03$i$i = 0.0;
      while(1) {
       $490 = (($fftenergy) + ($j$11$i$i<<2)|0);
       $491 = +HEAPF32[$490>>2];
       $492 = $491 + $ebb$02$i$i;
       $493 = $m$03$i$i < $491;
       $m$1$i$i = $493 ? $491 : $m$03$i$i;
       $494 = (($i$04$i$i) + 1)|0;
       $495 = (($j$11$i$i) + 1)|0;
       $exitcond32$i = ($494|0)==($488|0);
       if ($exitcond32$i) {
        $$lcssa231 = $492;$m$1$i$i$lcssa = $m$1$i$i;
        break;
       } else {
        $ebb$02$i$i = $492;$i$04$i$i = $494;$j$11$i$i = $495;$m$03$i$i = $m$1$i$i;
       }
      }
      $496 = ($488|0)>(1);
      $smax$i$i = $496 ? $488 : 1;
      $497 = (($smax$i$i) + ($j$07$i$i))|0;
      $ebb$0$lcssa$i$i = $$lcssa231;$j$1$lcssa$i$i = $497;$m$0$lcssa$i$i = $m$1$i$i$lcssa;
     } else {
      $ebb$0$lcssa$i$i = 0.0;$j$1$lcssa$i$i = $j$07$i$i;$m$0$lcssa$i$i = 0.0;
     }
     $498 = ((($eb) + ($chn$0136<<8)|0) + ($b$08$i$i<<2)|0);
     HEAPF32[$498>>2] = $ebb$0$lcssa$i$i;
     $499 = (($thm$i) + ($b$08$i$i<<2)|0);
     HEAPF32[$499>>2] = $m$0$lcssa$i$i;
     $500 = (((($483)) + 512|0) + ($b$08$i$i<<2)|0);
     $501 = +HEAPF32[$500>>2];
     $502 = $501 * $ebb$0$lcssa$i$i;
     $503 = (($avg$i) + ($b$08$i$i<<2)|0);
     HEAPF32[$503>>2] = $502;
     $504 = (($b$08$i$i) + 1)|0;
     $exitcond33$i = ($504|0)==($485|0);
     if ($exitcond33$i) {
      break;
     } else {
      $b$08$i$i = $504;$j$07$i$i = $j$1$lcssa$i$i;
     }
    }
    $$pre$i12 = +HEAPF32[$avg$i>>2];
    $$pre34$i = +HEAPF32[$$pre37$i>>2];
    $506 = $$pre34$i;$507 = $$pre$i12;
   } else {
    $506 = 0.0;$507 = 0.0;
   }
   $505 = $507 + $506;
   $508 = $505 > 0.0;
   if ($508) {
    $509 = +HEAPF32[$thm$i>>2];
    $510 = +HEAPF32[$420>>2];
    $511 = $509 < $510;
    $m$0$i$i = $511 ? $510 : $509;
    $512 = $m$0$i$i * 2.0;
    $513 = $512 - $505;
    $514 = $513 * 20.0;
    $515 = ((($483)) + 1716|0);
    $516 = HEAP32[$515>>2]|0;
    $517 = ((($483)) + 1720|0);
    $518 = HEAP32[$517>>2]|0;
    $519 = (($516) + -1)|0;
    $520 = (($519) + ($518))|0;
    $521 = (+($520|0));
    $522 = $521 * $505;
    $523 = $514 / $522;
    $524 = (~~(($523)));
    $525 = ($524|0)>(8);
    $526 = $524&255;
    $527 = $525 ? 8 : $526;
    $storemerge$i$i = $527;
   } else {
    $storemerge$i$i = 0;
   }
   HEAP8[$mask_idx_s$i>>0] = $storemerge$i$i;
   $528 = (($485) + -1)|0;
   $529 = ($528|0)>(1);
   $530 = +HEAPF32[$$pre37$i>>2];
   $531 = $530 + $507;
   if ($529) {
    $532 = ($528|0)>(2);
    $537 = $531;$540 = 0;$569 = $530;$b$02$i$i = 1;
    while(1) {
     $533 = (($b$02$i$i) + 1)|0;
     $534 = (($avg$i) + ($533<<2)|0);
     $535 = +HEAPF32[$534>>2];
     $536 = $535 + $537;
     $538 = $536 > 0.0;
     if ($538) {
      $539 = (($thm$i) + ($540<<2)|0);
      $541 = +HEAPF32[$539>>2];
      $542 = (($thm$i) + ($b$02$i$i<<2)|0);
      $543 = +HEAPF32[$542>>2];
      $544 = $541 < $543;
      $m$1$i2$i = $544 ? $543 : $541;
      $545 = (($thm$i) + ($533<<2)|0);
      $546 = +HEAPF32[$545>>2];
      $547 = $m$1$i2$i < $546;
      $m$2$i$i = $547 ? $546 : $m$1$i2$i;
      $548 = $m$2$i$i * 3.0;
      $549 = $548 - $536;
      $550 = $549 * 20.0;
      $551 = (((($483)) + 1716|0) + ($540<<2)|0);
      $552 = HEAP32[$551>>2]|0;
      $553 = (((($483)) + 1716|0) + ($b$02$i$i<<2)|0);
      $554 = HEAP32[$553>>2]|0;
      $555 = (((($483)) + 1716|0) + ($533<<2)|0);
      $556 = HEAP32[$555>>2]|0;
      $557 = (($552) + -1)|0;
      $558 = (($557) + ($554))|0;
      $559 = (($558) + ($556))|0;
      $560 = (+($559|0));
      $561 = $560 * $536;
      $562 = $550 / $561;
      $563 = (~~(($562)));
      $564 = ($563|0)>(8);
      $565 = $563&255;
      $566 = $564 ? 8 : $565;
      $$sink$i$i = $566;
     } else {
      $$sink$i$i = 0;
     }
     $567 = (($mask_idx_s$i) + ($b$02$i$i)|0);
     HEAP8[$567>>0] = $$sink$i$i;
     $568 = $535 + $569;
     $exitcond173 = ($533|0)==($528|0);
     if ($exitcond173) {
      $$lcssa232 = $568;
      break;
     } else {
      $540$phi = $b$02$i$i;$537 = $568;$569 = $535;$b$02$i$i = $533;$540 = $540$phi;
     }
    }
    $smax$i = $532 ? $528 : 2;
    $570 = (($smax$i) + -1)|0;
    $$lcssa$i$i = $570;$$lcssa1$i$i = $$lcssa232;$b$0$lcssa$i$i = $smax$i;
   } else {
    $$lcssa$i$i = 0;$$lcssa1$i$i = $531;$b$0$lcssa$i$i = 1;
   }
   $571 = $$lcssa1$i$i > 0.0;
   if ($571) {
    $572 = (($thm$i) + ($$lcssa$i$i<<2)|0);
    $573 = +HEAPF32[$572>>2];
    $574 = (($thm$i) + ($b$0$lcssa$i$i<<2)|0);
    $575 = +HEAPF32[$574>>2];
    $576 = $573 < $575;
    $m$3$i$i = $576 ? $575 : $573;
    $577 = $m$3$i$i * 2.0;
    $578 = $577 - $$lcssa1$i$i;
    $579 = $578 * 20.0;
    $580 = (((($483)) + 1716|0) + ($$lcssa$i$i<<2)|0);
    $581 = HEAP32[$580>>2]|0;
    $582 = (((($483)) + 1716|0) + ($b$0$lcssa$i$i<<2)|0);
    $583 = HEAP32[$582>>2]|0;
    $584 = (($581) + -1)|0;
    $585 = (($584) + ($583))|0;
    $586 = (+($585|0));
    $587 = $586 * $$lcssa1$i$i;
    $588 = $579 / $587;
    $589 = (~~(($588)));
    $590 = ($589|0)>(8);
    $591 = $589&255;
    $592 = $590 ? 8 : $591;
    $$sink7$i$i = $592;
   } else {
    $$sink7$i$i = 0;
   }
   $593 = (($mask_idx_s$i) + ($b$0$lcssa$i$i)|0);
   HEAP8[$593>>0] = $$sink7$i$i;
   if ($486) {
    $594 = ((($483)) + 2156|0);
    $595 = (((($gfc)) + 27796|0) + ($423<<2)|0);
    $b$019$i = 0;$k$020$i = 0;
    while(1) {
     $599 = (($483) + ($b$019$i<<2)|0);
     $600 = +HEAPF32[$599>>2];
     $601 = +HEAPF32[$421>>2];
     $602 = $601 * $600;
     $603 = (((($483)) + 1204|0) + ($b$019$i<<3)|0);
     $604 = HEAP32[$603>>2]|0;
     $605 = (((((($483)) + 1204|0) + ($b$019$i<<3)|0)) + 4|0);
     $606 = HEAP32[$605>>2]|0;
     $607 = (($mask_idx_s$i) + ($b$019$i)|0);
     $608 = HEAP8[$607>>0]|0;
     $609 = $608&255;
     $610 = (11448 + ($609<<2)|0);
     $611 = HEAP32[$610>>2]|0;
     $612 = (($mask_idx_s$i) + ($604)|0);
     $613 = HEAP8[$612>>0]|0;
     $614 = $613&255;
     $615 = HEAP32[$594>>2]|0;
     $616 = (($615) + ($k$020$i<<2)|0);
     $617 = +HEAPF32[$616>>2];
     $618 = ((($eb) + ($chn$0136<<8)|0) + ($604<<2)|0);
     $619 = +HEAPF32[$618>>2];
     $620 = $619 * $617;
     $621 = (11488 + ($614<<2)|0);
     $622 = +HEAPF32[$621>>2];
     $623 = $620 * $622;
     $k$17$i = (($k$020$i) + 1)|0;
     $624 = ($604|0)<($606|0);
     if ($624) {
      $630 = $615;$dd$010$i = $614;$ecb$09$i = $623;$k$112$i = $k$17$i;$kk$013$in$i = $604;
      while(1) {
       $kk$013$i = (($kk$013$in$i) + 1)|0;
       $625 = (($mask_idx_s$i) + ($kk$013$i)|0);
       $626 = HEAP8[$625>>0]|0;
       $627 = $626&255;
       $628 = (($627) + ($dd$010$i))|0;
       $629 = (($630) + ($k$112$i<<2)|0);
       $631 = +HEAPF32[$629>>2];
       $632 = ((($eb) + ($chn$0136<<8)|0) + ($kk$013$i<<2)|0);
       $633 = +HEAPF32[$632>>2];
       $634 = $633 * $631;
       $635 = (11488 + ($627<<2)|0);
       $636 = +HEAPF32[$635>>2];
       $637 = $634 * $636;
       $638 = (($kk$013$i) - ($b$019$i))|0;
       $639 = $ecb$09$i < 0.0;
       $$01$i$i = $639 ? 0.0 : $ecb$09$i;
       $640 = $637 < 0.0;
       $$02$i$i = $640 ? 0.0 : $637;
       $641 = !($$01$i$i <= 0.0);
       do {
        if ($641) {
         $642 = !($$02$i$i <= 0.0);
         if (!($642)) {
          $ecb$0$be$i = $$01$i$i;
          break;
         }
         $643 = $$02$i$i > $$01$i$i;
         $644 = $$02$i$i / $$01$i$i;
         $645 = $$01$i$i / $$02$i$i;
         $ratio$0$i$i = $643 ? $644 : $645;
         $ispos$i$i = ($638|0)>(-1);
         $neg$i$i = (0 - ($638))|0;
         $646 = $ispos$i$i ? $638 : $neg$i$i;
         $647 = ($646|0)>($611|0);
         if ($647) {
          $659 = +HEAPF32[11576>>2];
          $660 = $ratio$0$i$i < $659;
          if ($660) {
           $661 = $$02$i$i + $$01$i$i;
           $ecb$0$be$i = $661;
           break;
          } else {
           $$1$i$i = $643 ? $$02$i$i : $$01$i$i;
           $ecb$0$be$i = $$1$i$i;
           break;
          }
         } else {
          $648 = +HEAPF32[11528>>2];
          $649 = !($ratio$0$i$i >= $648);
          if ($649) {
           $651 = (+_fast_log2($ratio$0$i$i));
           $652 = $651;
           $653 = $652 * 4.8164799306236983;
           $654 = (~~(($653)));
           $655 = $$02$i$i + $$01$i$i;
           $656 = (11536 + ($654<<2)|0);
           $657 = +HEAPF32[$656>>2];
           $658 = $657 * $655;
           $ecb$0$be$i = $658;
           break;
          } else {
           $650 = $$02$i$i + $$01$i$i;
           $ecb$0$be$i = $650;
           break;
          }
         }
        } else {
         $ecb$0$be$i = $$02$i$i;
        }
       } while(0);
       $exitcond31$i = ($kk$013$i|0)==($606|0);
       if ($exitcond31$i) {
        $$lcssa233 = $628;$ecb$0$be$i$lcssa = $ecb$0$be$i;
        break;
       }
       $k$1$i = (($k$112$i) + 1)|0;
       $$pre35$i = HEAP32[$594>>2]|0;
       $630 = $$pre35$i;$dd$010$i = $628;$ecb$09$i = $ecb$0$be$i;$k$112$i = $k$1$i;$kk$013$in$i = $kk$013$i;
      }
      $662 = (($k$17$i) - ($604))|0;
      $663 = (($662) + ($606))|0;
      $664 = (1 - ($604))|0;
      $665 = (($664) + ($606))|0;
      $dd$0$lcssa$i = $$lcssa233;$dd_n$0$lcssa$i = $665;$ecb$0$lcssa$i = $ecb$0$be$i$lcssa;$k$1$lcssa$i = $663;
     } else {
      $dd$0$lcssa$i = $614;$dd_n$0$lcssa$i = 1;$ecb$0$lcssa$i = $623;$k$1$lcssa$i = $k$17$i;
     }
     $666 = $dd$0$lcssa$i << 1;
     $667 = $666 | 1;
     $668 = $dd_n$0$lcssa$i << 1;
     $669 = (($667|0) / ($668|0))&-1;
     $670 = (11488 + ($669<<2)|0);
     $671 = +HEAPF32[$670>>2];
     $672 = $671 * 0.5;
     $673 = $672 * $ecb$0$lcssa$i;
     $674 = HEAP32[$595>>2]|0;
     $675 = ($674|0)==(2);
     do {
      if ($675) {
       $676 = ((((($gfc)) + 21564|0) + ($chn$0136<<8)|0) + ($b$019$i<<2)|0);
       $677 = +HEAPF32[$676>>2];
       $678 = $677 * 2.0;
       $679 = $678 > 0.0;
       if ($679) {
        $680 = $673 < $678;
        $681 = $680 ? $673 : $678;
        $682 = ((($thr) + ($chn$0136<<8)|0) + ($b$019$i<<2)|0);
        HEAPF32[$682>>2] = $681;
        $$pre$phi$iZ2D = $676;$$pre$phi36$iZ2D = $682;$714 = $681;
        break;
       } else {
        $683 = $673;
        $684 = ((($eb) + ($chn$0136<<8)|0) + ($b$019$i<<2)|0);
        $685 = +HEAPF32[$684>>2];
        $686 = $685;
        $687 = $686 * 0.29999999999999999;
        $688 = $683 < $687;
        $$$i = $688 ? $683 : $687;
        $689 = $$$i;
        $690 = ((($thr) + ($chn$0136<<8)|0) + ($b$019$i<<2)|0);
        HEAPF32[$690>>2] = $689;
        $$pre$phi$iZ2D = $676;$$pre$phi36$iZ2D = $690;$714 = $689;
        break;
       }
      } else {
       $691 = ((((($gfc)) + 22588|0) + ($chn$0136<<8)|0) + ($b$019$i<<2)|0);
       $692 = +HEAPF32[$691>>2];
       $693 = $692 * 16.0;
       $694 = ((((($gfc)) + 21564|0) + ($chn$0136<<8)|0) + ($b$019$i<<2)|0);
       $695 = +HEAPF32[$694>>2];
       $696 = $695 * 2.0;
       $697 = !($693 <= 0.0);
       $ecb_limit_2$0$i = $697 ? $693 : $673;
       $698 = !($696 <= 0.0);
       $ecb_limit_1$0$i = $698 ? $696 : $673;
       $699 = ($674|0)==(0);
       $700 = $ecb_limit_1$0$i < $ecb_limit_2$0$i;
       $701 = $700 ? $ecb_limit_1$0$i : $ecb_limit_2$0$i;
       $ecb_limit1$0$i = $699 ? $701 : $ecb_limit_1$0$i;
       $702 = $673 < $ecb_limit1$0$i;
       $703 = $702 ? $673 : $ecb_limit1$0$i;
       $704 = ((($thr) + ($chn$0136<<8)|0) + ($b$019$i<<2)|0);
       HEAPF32[$704>>2] = $703;
       $$pre$phi$iZ2D = $694;$$pre$phi36$iZ2D = $704;$714 = $703;
      }
     } while(0);
     $705 = HEAP32[$$pre$phi$iZ2D>>2]|0;
     $706 = ((((($gfc)) + 22588|0) + ($chn$0136<<8)|0) + ($b$019$i<<2)|0);
     HEAP32[$706>>2] = $705;
     HEAPF32[$$pre$phi$iZ2D>>2] = $673;
     $707 = (($thm$i) + ($b$019$i<<2)|0);
     $708 = +HEAPF32[$707>>2];
     $709 = (((($483)) + 256|0) + ($b$019$i<<2)|0);
     $710 = +HEAPF32[$709>>2];
     $711 = $708 * $672;
     $712 = $711 * $710;
     $713 = $714 > $712;
     if ($713) {
      HEAPF32[$$pre$phi36$iZ2D>>2] = $712;
      $717 = $712;
     } else {
      $717 = $714;
     }
     $715 = $602 > 1.0;
     if ($715) {
      $716 = $717 * $602;
      HEAPF32[$$pre$phi36$iZ2D>>2] = $716;
      $721 = $716;
     } else {
      $721 = $717;
     }
     $718 = ((($eb) + ($chn$0136<<8)|0) + ($b$019$i<<2)|0);
     $719 = +HEAPF32[$718>>2];
     $720 = $721 > $719;
     if ($720) {
      HEAPF32[$$pre$phi36$iZ2D>>2] = $719;
      $724 = $719;
     } else {
      $724 = $721;
     }
     $722 = $602 < 1.0;
     if ($722) {
      $723 = $724 * $602;
      HEAPF32[$$pre$phi36$iZ2D>>2] = $723;
     }
     $725 = (($b$019$i) + 1)|0;
     $726 = HEAP32[$484>>2]|0;
     $727 = ($725|0)<($726|0);
     if ($727) {
      $b$019$i = $725;$k$020$i = $k$1$lcssa$i;
     } else {
      $$lcssa234 = $725;
      break;
     }
    }
    $596 = ($$lcssa234|0)<(64);
    if ($596) {
     $b$16$i$ph = $$lcssa234;
     label = 114;
    }
   } else {
    $b$16$i$ph = 0;
    label = 114;
   }
   if ((label|0) == 114) {
    label = 0;
    $scevgep175 = ((($eb) + ($chn$0136<<8)|0) + ($b$16$i$ph<<2)|0);
    $597 = $b$16$i$ph << 2;
    $598 = (256 - ($597))|0;
    _memset(($scevgep175|0),0,($598|0))|0;
    $scevgep178 = ((($thr) + ($chn$0136<<8)|0) + ($b$16$i$ph<<2)|0);
    _memset(($scevgep178|0),0,($598|0))|0;
   }
   $728 = (($chn$0136) + 1)|0;
   $exitcond180 = ($728|0)==($417|0);
   if ($exitcond180) {
    break;
   } else {
    $chn$0136 = $728;
   }
  }
 }
 $729 = HEAP32[$17>>2]|0;
 $730 = ($729|0)==(1);
 if ($730) {
  $731 = HEAP32[$uselongblock>>2]|0;
  $732 = ((($uselongblock)) + 4|0);
  $733 = HEAP32[$732>>2]|0;
  $734 = (($733) + ($731))|0;
  $735 = ($734|0)==(2);
  if ($735) {
   $736 = ((($1)) + 768|0);
   $737 = ((($gfc)) + 85796|0);
   $738 = HEAP32[$737>>2]|0;
   $739 = ((($738)) + 212|0);
   $740 = +HEAPF32[$7>>2];
   $741 = ((($1)) + 2148|0);
   $742 = HEAP32[$741>>2]|0;
   _vbrpsy_compute_MS_thresholds($eb,$thr,$736,$739,$743,$740,$742);
  }
 }
 if ($418) {
  $chn$1133 = 0;
  while(1) {
   $744 = (($eb) + ($chn$1133<<8)|0);
   $745 = (($thr) + ($chn$1133<<8)|0);
   $746 = HEAP32[$0>>2]|0;
   $747 = (((($gfc)) + 26636|0) + (($chn$1133*244)|0)|0);
   $748 = (((($gfc)) + 25660|0) + (($chn$1133*244)|0)|0);
   _convert_partition2scalefac($746,$744,$745,$747,$748);
   $749 = HEAP32[$0>>2]|0;
   $750 = ((($749)) + 4320|0);
   _convert_partition2scalefac($750,$744,$745,$mask_idx_s$i,$thm$i);
   $sb$02$i = 0;
   while(1) {
    $751 = (($mask_idx_s$i) + ($sb$02$i<<2)|0);
    $752 = HEAP32[$751>>2]|0;
    $753 = (($thm$i) + ($sb$02$i<<2)|0);
    $754 = +HEAPF32[$753>>2];
    $755 = $754 * 0.015625;
    $756 = ((((((($gfc)) + 26636|0) + (($chn$1133*244)|0)|0)) + 88|0) + (($sb$02$i*12)|0)|0);
    HEAP32[$756>>2] = $752;
    $757 = ((((((($gfc)) + 25660|0) + (($chn$1133*244)|0)|0)) + 88|0) + (($sb$02$i*12)|0)|0);
    HEAPF32[$757>>2] = $755;
    $758 = ((((((((($gfc)) + 26636|0) + (($chn$1133*244)|0)|0)) + 88|0) + (($sb$02$i*12)|0)|0)) + 4|0);
    HEAP32[$758>>2] = $752;
    $759 = ((((((((($gfc)) + 25660|0) + (($chn$1133*244)|0)|0)) + 88|0) + (($sb$02$i*12)|0)|0)) + 4|0);
    HEAPF32[$759>>2] = $755;
    $760 = ((((((((($gfc)) + 26636|0) + (($chn$1133*244)|0)|0)) + 88|0) + (($sb$02$i*12)|0)|0)) + 8|0);
    HEAP32[$760>>2] = $752;
    $761 = ((((((((($gfc)) + 25660|0) + (($chn$1133*244)|0)|0)) + 88|0) + (($sb$02$i*12)|0)|0)) + 8|0);
    HEAPF32[$761>>2] = $755;
    $762 = (($sb$02$i) + 1)|0;
    $exitcond$i17 = ($762|0)==(13);
    if ($exitcond$i17) {
     break;
    } else {
     $sb$02$i = $762;
    }
   }
   $763 = (($chn$1133) + 1)|0;
   $exitcond170 = ($763|0)==($417|0);
   if ($exitcond170) {
    break;
   } else {
    $chn$1133 = $763;
   }
  }
 }
 $764 = HEAP32[$0>>2]|0;
 $765 = ((($764)) + 6500|0);
 $766 = HEAP32[$765>>2]|0;
 $767 = HEAP32[$uselongblock>>2]|0;
 $768 = ((($uselongblock)) + 4|0);
 $769 = HEAP32[$768>>2]|0;
 $770 = (0 - ($769))|0;
 $771 = ((($1)) + 2928|0);
 $772 = ((($gfc)) + 85796|0);
 $773 = ((($1)) + 4308|0);
 $774 = ($766|0)!=(0);
 $775 = ((($mask_idx_s$i)) + 4|0);
 $776 = ((($thm$i)) + 4|0);
 $777 = ((($mask_idx_s$i)) + 8|0);
 $778 = ((($thm$i)) + 8|0);
 $779 = ((($mask_idx_s$i)) + 12|0);
 $780 = ((($thm$i)) + 12|0);
 $781 = ((($mask_idx_s$i)) + 16|0);
 $782 = ((($thm$i)) + 16|0);
 $783 = ((($mask_idx_s$i)) + 20|0);
 $784 = ((($thm$i)) + 20|0);
 $785 = ((($mask_idx_s$i)) + 24|0);
 $786 = ((($thm$i)) + 24|0);
 $787 = ((($mask_idx_s$i)) + 28|0);
 $788 = ((($thm$i)) + 28|0);
 $789 = ((($mask_idx_s$i)) + 32|0);
 $790 = ((($thm$i)) + 32|0);
 $791 = ((($mask_idx_s$i)) + 36|0);
 $792 = ((($thm$i)) + 36|0);
 $793 = ((($mask_idx_s$i)) + 40|0);
 $794 = ((($thm$i)) + 40|0);
 $795 = ((($mask_idx_s$i)) + 44|0);
 $796 = ((($thm$i)) + 44|0);
 $797 = ((($mask_idx_s$i)) + 48|0);
 $798 = ((($thm$i)) + 48|0);
 $799 = ((($thm$i)) + 4|0);
 $800 = ((($gfc)) + 84908|0);
 $$pre52$i = ((($avg$i)) + 4|0);
 $$not203 = ($767|0)!=($770|0);
 $sblock$0130 = 0;
 while(1) {
  if ($418) {
   $801 = ($sblock$0130|0)==(0);
   $802 = (($fftenergy_s) + (($sblock$0130*516)|0)|0);
   $chn$2120 = 0;
   while(1) {
    $803 = $chn$2120 & 1;
    $804 = (($uselongblock) + ($803<<2)|0);
    $805 = HEAP32[$804>>2]|0;
    $806 = ($805|0)==(0);
    $or$cond = $774 | $806;
    if ($or$cond) {
     $815 = ($chn$2120|0)<(2);
     $or$cond$i20 = $801 & $815;
     if ($or$cond$i20) {
      $816 = (($wsamp_S) + (($803*3072)|0)|0);
      _fft_short($gfc,$816,$chn$2120,$buffer);
     }
     $817 = ($chn$2120|0)==(2);
     if ($817) {
      $$sum = (($803) + 1)|0;
      $j$03$i = 255;
      while(1) {
       $818 = (((($wsamp_S) + (($803*3072)|0)|0) + ($sblock$0130<<10)|0) + ($j$03$i<<2)|0);
       $819 = +HEAPF32[$818>>2];
       $820 = (((($wsamp_S) + (($$sum*3072)|0)|0) + ($sblock$0130<<10)|0) + ($j$03$i<<2)|0);
       $821 = +HEAPF32[$820>>2];
       $822 = $821 + $819;
       $823 = $822 * 0.70710676908493042;
       HEAPF32[$818>>2] = $823;
       $824 = $819 - $821;
       $825 = $824 * 0.70710676908493042;
       HEAPF32[$820>>2] = $825;
       $826 = (($j$03$i) + -1)|0;
       $827 = ($j$03$i|0)>(0);
       if ($827) {
        $j$03$i = $826;
       } else {
        break;
       }
      }
     }
     $828 = ((($wsamp_S) + (($803*3072)|0)|0) + ($sblock$0130<<10)|0);
     $829 = +HEAPF32[$828>>2];
     $830 = $829 * $829;
     HEAPF32[$802>>2] = $830;
     $j$12$i = 127;
     while(1) {
      $831 = (128 - ($j$12$i))|0;
      $832 = (((($wsamp_S) + (($803*3072)|0)|0) + ($sblock$0130<<10)|0) + ($831<<2)|0);
      $833 = +HEAPF32[$832>>2];
      $834 = (($j$12$i) + 128)|0;
      $835 = (((($wsamp_S) + (($803*3072)|0)|0) + ($sblock$0130<<10)|0) + ($834<<2)|0);
      $836 = +HEAPF32[$835>>2];
      $837 = $833 * $833;
      $838 = $836 * $836;
      $839 = $838 + $837;
      $840 = $839 * 0.5;
      $841 = ((($fftenergy_s) + (($sblock$0130*516)|0)|0) + ($831<<2)|0);
      HEAPF32[$841>>2] = $840;
      $842 = (($j$12$i) + -1)|0;
      $843 = ($j$12$i|0)>(0);
      if ($843) {
       $j$12$i = $842;
      } else {
       break;
      }
     }
     $844 = HEAP32[$0>>2]|0;
     _memset(($thm$i|0),0,256)|0;
     _memset(($avg$i|0),0,256)|0;
     $845 = ((($844)) + 4308|0);
     $846 = HEAP32[$845>>2]|0;
     $847 = ($846|0)>(0);
     if ($847) {
      $b$030$i = 0;$j$031$i = 0;
      while(1) {
       $848 = (((($844)) + 3876|0) + ($b$030$i<<2)|0);
       $849 = HEAP32[$848>>2]|0;
       $850 = ($849|0)>(0);
       if ($850) {
        $ebb$021$i = 0.0;$i$023$i = 0;$j$122$i = $j$031$i;$m$020$i = 0.0;
        while(1) {
         $851 = ((($fftenergy_s) + (($sblock$0130*516)|0)|0) + ($j$122$i<<2)|0);
         $852 = +HEAPF32[$851>>2];
         $853 = $852 + $ebb$021$i;
         $854 = $m$020$i < $852;
         $m$1$i = $854 ? $852 : $m$020$i;
         $855 = (($i$023$i) + 1)|0;
         $856 = (($j$122$i) + 1)|0;
         $exitcond46$i25 = ($855|0)==($849|0);
         if ($exitcond46$i25) {
          $$lcssa = $853;$m$1$i$lcssa = $m$1$i;
          break;
         } else {
          $ebb$021$i = $853;$i$023$i = $855;$j$122$i = $856;$m$020$i = $m$1$i;
         }
        }
        $857 = (($849) + ($j$031$i))|0;
        $ebb$0$lcssa$i = $$lcssa;$j$1$lcssa$i = $857;$m$0$lcssa$i = $m$1$i$lcssa;
       } else {
        $ebb$0$lcssa$i = 0.0;$j$1$lcssa$i = $j$031$i;$m$0$lcssa$i = 0.0;
       }
       $858 = ((($eb) + ($chn$2120<<8)|0) + ($b$030$i<<2)|0);
       HEAPF32[$858>>2] = $ebb$0$lcssa$i;
       $859 = (($thm$i) + ($b$030$i<<2)|0);
       HEAPF32[$859>>2] = $m$0$lcssa$i;
       $860 = (((($844)) + 2672|0) + ($b$030$i<<2)|0);
       $861 = +HEAPF32[$860>>2];
       $862 = $861 * $ebb$0$lcssa$i;
       $863 = (($avg$i) + ($b$030$i<<2)|0);
       HEAPF32[$863>>2] = $862;
       $864 = (($b$030$i) + 1)|0;
       $exitcond159 = ($864|0)==($846|0);
       if ($exitcond159) {
        break;
       } else {
        $b$030$i = $864;$j$031$i = $j$1$lcssa$i;
       }
      }
      $$pre$i27 = +HEAPF32[$avg$i>>2];
      $$pre48$i = +HEAPF32[$$pre52$i>>2];
      $866 = $$pre48$i;$867 = $$pre$i27;
     } else {
      $866 = 0.0;$867 = 0.0;
     }
     $865 = $867 + $866;
     $868 = $865 > 0.0;
     if ($868) {
      $869 = +HEAPF32[$thm$i>>2];
      $870 = +HEAPF32[$799>>2];
      $871 = $869 < $870;
      $m$0$i$i29 = $871 ? $870 : $869;
      $872 = $m$0$i$i29 * 2.0;
      $873 = $872 - $865;
      $874 = $873 * 20.0;
      $875 = ((($844)) + 3876|0);
      $876 = HEAP32[$875>>2]|0;
      $877 = ((($844)) + 3880|0);
      $878 = HEAP32[$877>>2]|0;
      $879 = (($876) + -1)|0;
      $880 = (($879) + ($878))|0;
      $881 = (+($880|0));
      $882 = $881 * $865;
      $883 = $874 / $882;
      $884 = (~~(($883)));
      $885 = ($884|0)>(8);
      $886 = $884&255;
      $887 = $885 ? 8 : $886;
      $storemerge$i$i30 = $887;
     } else {
      $storemerge$i$i30 = 0;
     }
     HEAP8[$mask_idx_s$i>>0] = $storemerge$i$i30;
     $888 = (($846) + -1)|0;
     $889 = ($888|0)>(1);
     $890 = $866 + $867;
     if ($889) {
      $891 = ($888|0)>(2);
      $896 = $890;$899 = 0;$928 = $866;$b$02$i$i32 = 1;
      while(1) {
       $892 = (($b$02$i$i32) + 1)|0;
       $893 = (($avg$i) + ($892<<2)|0);
       $894 = +HEAPF32[$893>>2];
       $895 = $894 + $896;
       $897 = $895 > 0.0;
       if ($897) {
        $898 = (($thm$i) + ($899<<2)|0);
        $900 = +HEAPF32[$898>>2];
        $901 = (($thm$i) + ($b$02$i$i32<<2)|0);
        $902 = +HEAPF32[$901>>2];
        $903 = $900 < $902;
        $m$1$i$i34 = $903 ? $902 : $900;
        $904 = (($thm$i) + ($892<<2)|0);
        $905 = +HEAPF32[$904>>2];
        $906 = $m$1$i$i34 < $905;
        $m$2$i$i35 = $906 ? $905 : $m$1$i$i34;
        $907 = $m$2$i$i35 * 3.0;
        $908 = $907 - $895;
        $909 = $908 * 20.0;
        $910 = (((($844)) + 3876|0) + ($899<<2)|0);
        $911 = HEAP32[$910>>2]|0;
        $912 = (((($844)) + 3876|0) + ($b$02$i$i32<<2)|0);
        $913 = HEAP32[$912>>2]|0;
        $914 = (((($844)) + 3876|0) + ($892<<2)|0);
        $915 = HEAP32[$914>>2]|0;
        $916 = (($911) + -1)|0;
        $917 = (($916) + ($913))|0;
        $918 = (($917) + ($915))|0;
        $919 = (+($918|0));
        $920 = $919 * $895;
        $921 = $909 / $920;
        $922 = (~~(($921)));
        $923 = ($922|0)>(8);
        $924 = $922&255;
        $925 = $923 ? 8 : $924;
        $$sink$i$i36 = $925;
       } else {
        $$sink$i$i36 = 0;
       }
       $926 = (($mask_idx_s$i) + ($b$02$i$i32)|0);
       HEAP8[$926>>0] = $$sink$i$i36;
       $927 = $894 + $928;
       $exitcond160 = ($892|0)==($888|0);
       if ($exitcond160) {
        $$lcssa226 = $927;
        break;
       } else {
        $899$phi = $b$02$i$i32;$896 = $927;$928 = $894;$b$02$i$i32 = $892;$899 = $899$phi;
       }
      }
      $smax$i31 = $891 ? $888 : 2;
      $929 = (($smax$i31) + -1)|0;
      $$lcssa$i$i39 = $929;$$lcssa1$i$i38 = $$lcssa226;$b$0$lcssa$i$i40 = $smax$i31;
     } else {
      $$lcssa$i$i39 = 0;$$lcssa1$i$i38 = $890;$b$0$lcssa$i$i40 = 1;
     }
     $930 = $$lcssa1$i$i38 > 0.0;
     if ($930) {
      $931 = (($thm$i) + ($$lcssa$i$i39<<2)|0);
      $932 = +HEAPF32[$931>>2];
      $933 = (($thm$i) + ($b$0$lcssa$i$i40<<2)|0);
      $934 = +HEAPF32[$933>>2];
      $935 = $932 < $934;
      $m$3$i$i42 = $935 ? $934 : $932;
      $936 = $m$3$i$i42 * 2.0;
      $937 = $936 - $$lcssa1$i$i38;
      $938 = $937 * 20.0;
      $939 = (((($844)) + 3876|0) + ($$lcssa$i$i39<<2)|0);
      $940 = HEAP32[$939>>2]|0;
      $941 = (((($844)) + 3876|0) + ($b$0$lcssa$i$i40<<2)|0);
      $942 = HEAP32[$941>>2]|0;
      $943 = (($940) + -1)|0;
      $944 = (($943) + ($942))|0;
      $945 = (+($944|0));
      $946 = $945 * $$lcssa1$i$i38;
      $947 = $938 / $946;
      $948 = (~~(($947)));
      $949 = ($948|0)>(8);
      $950 = $948&255;
      $951 = $949 ? 8 : $950;
      $$sink7$i$i43 = $951;
     } else {
      $$sink7$i$i43 = 0;
     }
     $952 = (($mask_idx_s$i) + ($b$0$lcssa$i$i40)|0);
     HEAP8[$952>>0] = $$sink7$i$i43;
     if ($847) {
      $953 = ((($844)) + 4316|0);
      $b$116$i = 0;$j$217$i = 0;
      while(1) {
       $957 = (((($844)) + 3364|0) + ($b$116$i<<3)|0);
       $958 = HEAP32[$957>>2]|0;
       $959 = (((((($844)) + 3364|0) + ($b$116$i<<3)|0)) + 4|0);
       $960 = HEAP32[$959>>2]|0;
       $961 = (($mask_idx_s$i) + ($b$116$i)|0);
       $962 = HEAP8[$961>>0]|0;
       $963 = $962&255;
       $964 = (11448 + ($963<<2)|0);
       $965 = HEAP32[$964>>2]|0;
       $966 = (((($844)) + 2160|0) + ($b$116$i<<2)|0);
       $967 = +HEAPF32[$966>>2];
       $968 = +HEAPF32[$800>>2];
       $969 = $968 * $967;
       $970 = (($mask_idx_s$i) + ($958)|0);
       $971 = HEAP8[$970>>0]|0;
       $972 = $971&255;
       $973 = HEAP32[$953>>2]|0;
       $974 = (($973) + ($j$217$i<<2)|0);
       $975 = +HEAPF32[$974>>2];
       $976 = ((($eb) + ($chn$2120<<8)|0) + ($958<<2)|0);
       $977 = +HEAPF32[$976>>2];
       $978 = $977 * $975;
       $979 = (11488 + ($972<<2)|0);
       $980 = +HEAPF32[$979>>2];
       $981 = $978 * $980;
       $j$34$i45 = (($j$217$i) + 1)|0;
       $982 = ($958|0)<($960|0);
       if ($982) {
        $988 = $973;$dd$06$i = $972;$ecb$08$i = $981;$j$39$i = $j$34$i45;$kk$010$in$i = $958;
        while(1) {
         $kk$010$i = (($kk$010$in$i) + 1)|0;
         $983 = (($mask_idx_s$i) + ($kk$010$i)|0);
         $984 = HEAP8[$983>>0]|0;
         $985 = $984&255;
         $986 = (($985) + ($dd$06$i))|0;
         $987 = (($988) + ($j$39$i<<2)|0);
         $989 = +HEAPF32[$987>>2];
         $990 = ((($eb) + ($chn$2120<<8)|0) + ($kk$010$i<<2)|0);
         $991 = +HEAPF32[$990>>2];
         $992 = $991 * $989;
         $993 = (11488 + ($985<<2)|0);
         $994 = +HEAPF32[$993>>2];
         $995 = $992 * $994;
         $996 = (($kk$010$i) - ($b$116$i))|0;
         $997 = $ecb$08$i < 0.0;
         $$01$i$i46 = $997 ? 0.0 : $ecb$08$i;
         $998 = $995 < 0.0;
         $$02$i$i47 = $998 ? 0.0 : $995;
         $999 = !($$01$i$i46 <= 0.0);
         do {
          if ($999) {
           $1000 = !($$02$i$i47 <= 0.0);
           if (!($1000)) {
            $ecb$0$be$i48 = $$01$i$i46;
            break;
           }
           $1001 = $$02$i$i47 > $$01$i$i46;
           $1002 = $$02$i$i47 / $$01$i$i46;
           $1003 = $$01$i$i46 / $$02$i$i47;
           $ratio$0$i$i51 = $1001 ? $1002 : $1003;
           $ispos$i$i52 = ($996|0)>(-1);
           $neg$i$i53 = (0 - ($996))|0;
           $1004 = $ispos$i$i52 ? $996 : $neg$i$i53;
           $1005 = ($1004|0)>($965|0);
           if ($1005) {
            $1017 = +HEAPF32[11576>>2];
            $1018 = $ratio$0$i$i51 < $1017;
            if ($1018) {
             $1019 = $$02$i$i47 + $$01$i$i46;
             $ecb$0$be$i48 = $1019;
             break;
            } else {
             $$1$i$i54 = $1001 ? $$02$i$i47 : $$01$i$i46;
             $ecb$0$be$i48 = $$1$i$i54;
             break;
            }
           } else {
            $1006 = +HEAPF32[11528>>2];
            $1007 = !($ratio$0$i$i51 >= $1006);
            if ($1007) {
             $1009 = (+_fast_log2($ratio$0$i$i51));
             $1010 = $1009;
             $1011 = $1010 * 4.8164799306236983;
             $1012 = (~~(($1011)));
             $1013 = $$02$i$i47 + $$01$i$i46;
             $1014 = (11536 + ($1012<<2)|0);
             $1015 = +HEAPF32[$1014>>2];
             $1016 = $1015 * $1013;
             $ecb$0$be$i48 = $1016;
             break;
            } else {
             $1008 = $$02$i$i47 + $$01$i$i46;
             $ecb$0$be$i48 = $1008;
             break;
            }
           }
          } else {
           $ecb$0$be$i48 = $$02$i$i47;
          }
         } while(0);
         $exitcond45$i = ($kk$010$i|0)==($960|0);
         if ($exitcond45$i) {
          $$lcssa227 = $986;$ecb$0$be$i48$lcssa = $ecb$0$be$i48;
          break;
         }
         $j$3$i = (($j$39$i) + 1)|0;
         $$pre49$i = HEAP32[$953>>2]|0;
         $988 = $$pre49$i;$dd$06$i = $986;$ecb$08$i = $ecb$0$be$i48;$j$39$i = $j$3$i;$kk$010$in$i = $kk$010$i;
        }
        $1020 = (($j$34$i45) - ($958))|0;
        $1021 = (($1020) + ($960))|0;
        $1022 = (1 - ($958))|0;
        $1023 = (($1022) + ($960))|0;
        $dd$0$lcssa$i58 = $$lcssa227;$dd_n$0$lcssa$i57 = $1023;$ecb$0$lcssa$i56 = $ecb$0$be$i48$lcssa;$j$3$lcssa$i = $1021;
       } else {
        $dd$0$lcssa$i58 = $972;$dd_n$0$lcssa$i57 = 1;$ecb$0$lcssa$i56 = $981;$j$3$lcssa$i = $j$34$i45;
       }
       $1024 = $dd$0$lcssa$i58 << 1;
       $1025 = $1024 | 1;
       $1026 = $dd_n$0$lcssa$i57 << 1;
       $1027 = (($1025|0) / ($1026|0))&-1;
       $1028 = (11488 + ($1027<<2)|0);
       $1029 = +HEAPF32[$1028>>2];
       $1030 = $1029 * 0.5;
       $1031 = $1030 * $ecb$0$lcssa$i56;
       $1032 = ((($thr) + ($chn$2120<<8)|0) + ($b$116$i<<2)|0);
       HEAPF32[$1032>>2] = $1031;
       $1033 = ((((($gfc)) + 23612|0) + ($chn$2120<<8)|0) + ($b$116$i<<2)|0);
       $1034 = HEAP32[$1033>>2]|0;
       $1035 = ((((($gfc)) + 24636|0) + ($chn$2120<<8)|0) + ($b$116$i<<2)|0);
       HEAP32[$1035>>2] = $1034;
       HEAPF32[$1033>>2] = $1031;
       $1036 = (($thm$i) + ($b$116$i<<2)|0);
       $1037 = +HEAPF32[$1036>>2];
       $1038 = (((($844)) + 2416|0) + ($b$116$i<<2)|0);
       $1039 = +HEAPF32[$1038>>2];
       $1040 = $1037 * $1030;
       $1041 = $1040 * $1039;
       $1042 = $1031 > $1041;
       if ($1042) {
        HEAPF32[$1032>>2] = $1041;
        $1045 = $1041;
       } else {
        $1045 = $1031;
       }
       $1043 = $969 > 1.0;
       if ($1043) {
        $1044 = $1045 * $969;
        HEAPF32[$1032>>2] = $1044;
        $1049 = $1044;
       } else {
        $1049 = $1045;
       }
       $1046 = ((($eb) + ($chn$2120<<8)|0) + ($b$116$i<<2)|0);
       $1047 = +HEAPF32[$1046>>2];
       $1048 = $1049 > $1047;
       if ($1048) {
        HEAPF32[$1032>>2] = $1047;
        $1052 = $1047;
       } else {
        $1052 = $1049;
       }
       $1050 = $969 < 1.0;
       if ($1050) {
        $1051 = $1052 * $969;
        HEAPF32[$1032>>2] = $1051;
       }
       $1053 = (($b$116$i) + 1)|0;
       $1054 = HEAP32[$845>>2]|0;
       $1055 = ($1053|0)<($1054|0);
       if ($1055) {
        $b$116$i = $1053;$j$217$i = $j$3$lcssa$i;
       } else {
        $$lcssa228 = $1053;
        break;
       }
      }
      $954 = ($$lcssa228|0)<(64);
      if ($954) {
       $b$23$i$ph = $$lcssa228;
       label = 185;
      }
     } else {
      $b$23$i$ph = 0;
      label = 185;
     }
     if ((label|0) == 185) {
      label = 0;
      $scevgep162 = ((($eb) + ($chn$2120<<8)|0) + ($b$23$i$ph<<2)|0);
      $955 = $b$23$i$ph << 2;
      $956 = (256 - ($955))|0;
      _memset(($scevgep162|0),0,($956|0))|0;
      $scevgep165 = ((($thr) + ($chn$2120<<8)|0) + ($b$23$i$ph<<2)|0);
      _memset(($scevgep165|0),0,($956|0))|0;
     }
    } else {
     if ($801) {
      $807 = HEAP32[$0>>2]|0;
      $808 = ((($807)) + 4308|0);
      $809 = HEAP32[$808>>2]|0;
      $810 = ($809|0)>(0);
      if ($810) {
       $b$01$i = 0;
       while(1) {
        $811 = ((((($gfc)) + 23612|0) + ($chn$2120<<8)|0) + ($b$01$i<<2)|0);
        $812 = HEAP32[$811>>2]|0;
        $813 = ((((($gfc)) + 24636|0) + ($chn$2120<<8)|0) + ($b$01$i<<2)|0);
        HEAP32[$813>>2] = $812;
        $814 = (($b$01$i) + 1)|0;
        $exitcond$i18 = ($814|0)==($809|0);
        if ($exitcond$i18) {
         break;
        } else {
         $b$01$i = $814;
        }
       }
      }
     }
    }
    $1056 = (($chn$2120) + 1)|0;
    $exitcond167 = ($1056|0)==($417|0);
    if ($exitcond167) {
     break;
    } else {
     $chn$2120 = $1056;
    }
   }
  }
  $1057 = HEAP32[$17>>2]|0;
  $$not = ($1057|0)!=(1);
  $brmerge = $$not | $$not203;
  if (!($brmerge)) {
   $1058 = HEAP32[$772>>2]|0;
   $1059 = ((($1058)) + 468|0);
   $1060 = +HEAPF32[$7>>2];
   $1061 = HEAP32[$773>>2]|0;
   _vbrpsy_compute_MS_thresholds($eb,$thr,$771,$1059,$743,$1060,$1061);
  }
  if ($418) {
   $chn$3127 = 0;
   while(1) {
    $1062 = $chn$3127 & 1;
    $1063 = (($uselongblock) + ($1062<<2)|0);
    $1064 = HEAP32[$1063>>2]|0;
    $1065 = ($1064|0)==(0);
    $or$cond3 = $774 | $1065;
    if ($or$cond3) {
     $1066 = (($eb) + ($chn$3127<<8)|0);
     $1067 = (($thr) + ($chn$3127<<8)|0);
     $1068 = HEAP32[$0>>2]|0;
     $1069 = ((($1068)) + 2160|0);
     _convert_partition2scalefac($1069,$1066,$1067,$mask_idx_s$i,$thm$i);
     $1070 = HEAP32[$mask_idx_s$i>>2]|0;
     $1071 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 88|0) + ($sblock$0130<<2)|0);
     HEAP32[$1071>>2] = $1070;
     $1072 = HEAP32[$thm$i>>2]|0;
     $1073 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 88|0) + ($sblock$0130<<2)|0);
     HEAP32[$1073>>2] = $1072;
     $1074 = HEAP32[$775>>2]|0;
     $1075 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 100|0) + ($sblock$0130<<2)|0);
     HEAP32[$1075>>2] = $1074;
     $1076 = HEAP32[$776>>2]|0;
     $1077 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 100|0) + ($sblock$0130<<2)|0);
     HEAP32[$1077>>2] = $1076;
     $1078 = HEAP32[$777>>2]|0;
     $1079 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 112|0) + ($sblock$0130<<2)|0);
     HEAP32[$1079>>2] = $1078;
     $1080 = HEAP32[$778>>2]|0;
     $1081 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 112|0) + ($sblock$0130<<2)|0);
     HEAP32[$1081>>2] = $1080;
     $1082 = HEAP32[$779>>2]|0;
     $1083 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 124|0) + ($sblock$0130<<2)|0);
     HEAP32[$1083>>2] = $1082;
     $1084 = HEAP32[$780>>2]|0;
     $1085 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 124|0) + ($sblock$0130<<2)|0);
     HEAP32[$1085>>2] = $1084;
     $1086 = HEAP32[$781>>2]|0;
     $1087 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 136|0) + ($sblock$0130<<2)|0);
     HEAP32[$1087>>2] = $1086;
     $1088 = HEAP32[$782>>2]|0;
     $1089 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 136|0) + ($sblock$0130<<2)|0);
     HEAP32[$1089>>2] = $1088;
     $1090 = HEAP32[$783>>2]|0;
     $1091 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 148|0) + ($sblock$0130<<2)|0);
     HEAP32[$1091>>2] = $1090;
     $1092 = HEAP32[$784>>2]|0;
     $1093 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 148|0) + ($sblock$0130<<2)|0);
     HEAP32[$1093>>2] = $1092;
     $1094 = HEAP32[$785>>2]|0;
     $1095 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 160|0) + ($sblock$0130<<2)|0);
     HEAP32[$1095>>2] = $1094;
     $1096 = HEAP32[$786>>2]|0;
     $1097 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 160|0) + ($sblock$0130<<2)|0);
     HEAP32[$1097>>2] = $1096;
     $1098 = HEAP32[$787>>2]|0;
     $1099 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 172|0) + ($sblock$0130<<2)|0);
     HEAP32[$1099>>2] = $1098;
     $1100 = HEAP32[$788>>2]|0;
     $1101 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 172|0) + ($sblock$0130<<2)|0);
     HEAP32[$1101>>2] = $1100;
     $1102 = HEAP32[$789>>2]|0;
     $1103 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 184|0) + ($sblock$0130<<2)|0);
     HEAP32[$1103>>2] = $1102;
     $1104 = HEAP32[$790>>2]|0;
     $1105 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 184|0) + ($sblock$0130<<2)|0);
     HEAP32[$1105>>2] = $1104;
     $1106 = HEAP32[$791>>2]|0;
     $1107 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 196|0) + ($sblock$0130<<2)|0);
     HEAP32[$1107>>2] = $1106;
     $1108 = HEAP32[$792>>2]|0;
     $1109 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 196|0) + ($sblock$0130<<2)|0);
     HEAP32[$1109>>2] = $1108;
     $1110 = HEAP32[$793>>2]|0;
     $1111 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 208|0) + ($sblock$0130<<2)|0);
     HEAP32[$1111>>2] = $1110;
     $1112 = HEAP32[$794>>2]|0;
     $1113 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 208|0) + ($sblock$0130<<2)|0);
     HEAP32[$1113>>2] = $1112;
     $1114 = HEAP32[$795>>2]|0;
     $1115 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 220|0) + ($sblock$0130<<2)|0);
     HEAP32[$1115>>2] = $1114;
     $1116 = HEAP32[$796>>2]|0;
     $1117 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 220|0) + ($sblock$0130<<2)|0);
     HEAP32[$1117>>2] = $1116;
     $1118 = HEAP32[$797>>2]|0;
     $1119 = ((((((($gfc)) + 26636|0) + (($chn$3127*244)|0)|0)) + 232|0) + ($sblock$0130<<2)|0);
     HEAP32[$1119>>2] = $1118;
     $1120 = HEAP32[$798>>2]|0;
     $1121 = ((((((($gfc)) + 25660|0) + (($chn$3127*244)|0)|0)) + 232|0) + ($sblock$0130<<2)|0);
     HEAP32[$1121>>2] = $1120;
    }
    $1122 = (($chn$3127) + 1)|0;
    $exitcond168 = ($1122|0)==($417|0);
    if ($exitcond168) {
     break;
    } else {
     $chn$3127 = $1122;
    }
   }
  }
  $1123 = (($sblock$0130) + 1)|0;
  $exitcond169 = ($1123|0)==(3);
  if ($exitcond169) {
   break;
  } else {
   $sblock$0130 = $1123;
  }
 }
 if ($418) {
  $chn$4119 = 0;
  while(1) {
   $1124 = (((($gfc)) + 27780|0) + ($chn$4119<<2)|0);
   $sb$0118 = 0;
   while(1) {
    $scevgep = ((((((($gfc)) + 25660|0) + (($chn$4119*244)|0)|0)) + 88|0) + (($sb$0118*12)|0)|0);
    $1125 = ((((((($last_thm) + (($chn$4119*244)|0)|0)) + 88|0) + (($sb$0118*12)|0)|0)) + 8|0);
    $1126 = ((((((($last_thm) + (($chn$4119*244)|0)|0)) + 88|0) + (($sb$0118*12)|0)|0)) + 4|0);
    $sblock$1116 = 0;
    while(1) {
     $1128 = (((((((($gfc)) + 25660|0) + (($chn$4119*244)|0)|0)) + 88|0) + (($sb$0118*12)|0)|0) + ($sblock$1116<<2)|0);
     $1129 = +HEAPF32[$1128>>2];
     $1130 = $1129;
     $1131 = $1130 * 0.80000000000000004;
     $1132 = $1131;
     $1133 = ($sblock$1116|0)>(0);
     $1134 = (($sblock$1116) + -1)|0;
     $1135 = (($new_thmm) + ($1134<<2)|0);
     $prev_thm$0$in = $1133 ? $1135 : $1125;
     $prev_thm$0 = +HEAPF32[$prev_thm$0$in>>2];
     $1136 = ((($ns_attacks) + ($chn$4119<<4)|0) + ($sblock$1116<<2)|0);
     $1137 = HEAP32[$1136>>2]|0;
     $1138 = ($1137|0)>(1);
     if ($1138) {
      label = 223;
     } else {
      $1139 = (($sblock$1116) + 1)|0;
      $1140 = ((($ns_attacks) + ($chn$4119<<4)|0) + ($1139<<2)|0);
      $1141 = HEAP32[$1140>>2]|0;
      $1142 = ($1141|0)==(1);
      if ($1142) {
       label = 223;
      } else {
       $t1$0 = $1132;
      }
     }
     if ((label|0) == 223) {
      label = 0;
      $1143 = $1132 > 0.0;
      if ($1143) {
       $1144 = $prev_thm$0 / $1132;
       $1145 = (+Math_pow((+$1144),0.36000001430511475));
       $1146 = $1145 * $1132;
       $t1$0 = $1146;
      } else {
       $t1$0 = 0.0;
      }
     }
     $1147 = $t1$0 < $1132;
     $1148 = $1147 ? $t1$0 : $1132;
     $1149 = ($1137|0)==(1);
     L341: do {
      if ($1149) {
       $1150 = $1148 > 0.0;
       if ($1150) {
        $1151 = $prev_thm$0 / $1148;
        $1152 = (+Math_pow((+$1151),0.18000000715255737));
        $1153 = $1152 * $1148;
        $t2$0 = $1153;
       } else {
        $t2$0 = 0.0;
       }
      } else {
       $1154 = ($sblock$1116|0)==(0);
       if ($1154) {
        $1155 = HEAP32[$1124>>2]|0;
        $1156 = ($1155|0)==(3);
        if ($1156) {
         label = 233;
        } else {
         label = 230;
        }
       } else {
        label = 230;
       }
       do {
        if ((label|0) == 230) {
         label = 0;
         if (!($1133)) {
          $t2$0 = $1132;
          break L341;
         }
         $1157 = ((($ns_attacks) + ($chn$4119<<4)|0) + ($1134<<2)|0);
         $1158 = HEAP32[$1157>>2]|0;
         $1159 = ($1158|0)==(3);
         if (!($1159)) {
          $t2$0 = $1132;
          break L341;
         }
         if ((($sblock$1116|0) == 0)) {
          label = 233;
          break;
         } else if ((($sblock$1116|0) == 1)) {
          $1161 = +HEAPF32[$1125>>2];
          $prev_thm$1 = $1161;
          break;
         } else if ((($sblock$1116|0) == 2)) {
          $1162 = +HEAPF32[$new_thmm>>2];
          $prev_thm$1 = $1162;
          break;
         } else {
          $prev_thm$1 = $prev_thm$0;
          break;
         }
        }
       } while(0);
       if ((label|0) == 233) {
        label = 0;
        $1160 = +HEAPF32[$1126>>2];
        $prev_thm$1 = $1160;
       }
       $1163 = $1148 > 0.0;
       if (!($1163)) {
        $t2$0 = 0.0;
        break;
       }
       $1164 = $prev_thm$1 / $1148;
       $1165 = (+Math_pow((+$1164),0.18000000715255737));
       $1166 = $1165 * $1148;
       $t2$0 = $1166;
      }
     } while(0);
     $1167 = $t2$0 < $1148;
     $1168 = $1167 ? $t2$0 : $1148;
     $1169 = ((($sub_short_factor) + (($chn$4119*12)|0)|0) + ($sblock$1116<<2)|0);
     $1170 = +HEAPF32[$1169>>2];
     $1171 = $1168 * $1170;
     $1172 = (($new_thmm) + ($sblock$1116<<2)|0);
     HEAPF32[$1172>>2] = $1171;
     $1173 = (($sblock$1116) + 1)|0;
     $exitcond151 = ($1173|0)==(3);
     if ($exitcond151) {
      break;
     } else {
      $sblock$1116 = $1173;
     }
    }
    ;HEAP32[$scevgep>>2]=HEAP32[$new_thmm>>2]|0;HEAP32[$scevgep+4>>2]=HEAP32[$new_thmm+4>>2]|0;HEAP32[$scevgep+8>>2]=HEAP32[$new_thmm+8>>2]|0;
    $1127 = (($sb$0118) + 1)|0;
    $exitcond155 = ($1127|0)==(13);
    if ($exitcond155) {
     break;
    } else {
     $sb$0118 = $1127;
    }
   }
   $1174 = (($chn$4119) + 1)|0;
   $exitcond156 = ($1174|0)==($417|0);
   if ($exitcond156) {
    break;
   } else {
    $chn$4119 = $1174;
   }
  }
  if ($418) {
   $chn$5114 = 0;
   while(1) {
    $1175 = (((($ns_attacks) + ($chn$5114<<4)|0)) + 8|0);
    $1176 = HEAP32[$1175>>2]|0;
    $1177 = (((($gfc)) + 27780|0) + ($chn$5114<<2)|0);
    HEAP32[$1177>>2] = $1176;
    $1178 = (($chn$5114) + 1)|0;
    $exitcond150 = ($1178|0)==($417|0);
    if ($exitcond150) {
     break;
    } else {
     $chn$5114 = $1178;
    }
   }
  }
 }
 $1179 = HEAP32[$25>>2]|0;
 $1180 = ($1179|0)>(0);
 if ($1180) {
  $chn$01$i65 = 0;
  while(1) {
   $1181 = (($uselongblock) + ($chn$01$i65<<2)|0);
   $1182 = HEAP32[$1181>>2]|0;
   $1183 = ($1182|0)==(0);
   $1184 = (((($gfc)) + 27796|0) + ($chn$01$i65<<2)|0);
   $1185 = HEAP32[$1184>>2]|0;
   do {
    if ($1183) {
     if ((($1185|0) == 0)) {
      HEAP32[$1184>>2] = 1;
      $1188 = 1;$blocktype$0$i = 2;
      break;
     } else if ((($1185|0) == 3)) {
      HEAP32[$1184>>2] = 2;
      $1188 = 2;$blocktype$0$i = 2;
      break;
     } else {
      $1188 = $1185;$blocktype$0$i = 2;
      break;
     }
    } else {
     $1186 = ($1185|0)==(2);
     $$$i67 = $1186 ? 3 : 0;
     $1188 = $1185;$blocktype$0$i = $$$i67;
    }
   } while(0);
   $1187 = (($blocktype_d) + ($chn$01$i65<<2)|0);
   HEAP32[$1187>>2] = $1188;
   HEAP32[$1184>>2] = $blocktype$0$i;
   $1189 = (($chn$01$i65) + 1)|0;
   $exitcond$i68 = ($1189|0)==($1179|0);
   if ($exitcond$i68) {
    break;
   } else {
    $chn$01$i65 = $1189;
   }
  }
 }
 if (!($418)) {
  STACKTOP = sp;return 0;
 }
 $1190 = ((($percep_MS_entropy)) + -8|0);
 $1191 = ((($blocktype_d)) + 4|0);
 $1193 = ($1192|0)==(0|0);
 $chn$6112 = 0;
 while(1) {
  $1194 = ($chn$6112|0)>(1);
  if ($1194) {
   $1195 = HEAP32[$blocktype_d>>2]|0;
   $1196 = ($1195|0)==(2);
   if ($1196) {
    label = 253;
   } else {
    $1197 = HEAP32[$1191>>2]|0;
    $1198 = ($1197|0)==(2);
    if ($1198) {
     label = 253;
    } else {
     $type$0 = 0;
    }
   }
   if ((label|0) == 253) {
    label = 0;
    $type$0 = 2;
   }
   $1199 = (($chn$6112) + -2)|0;
   $1200 = ((($masking_MS_ratio) + (($gr_out*976)|0)|0) + (($1199*488)|0)|0);
   $mr$0 = $1200;$ppe$0 = $1190;$type$1 = $type$0;
  } else {
   $1201 = (($blocktype_d) + ($chn$6112<<2)|0);
   $1202 = HEAP32[$1201>>2]|0;
   $1203 = ((($masking_ratio) + (($gr_out*976)|0)|0) + (($chn$6112*488)|0)|0);
   $mr$0 = $1203;$ppe$0 = $percep_entropy;$type$1 = $1202;
  }
  $1204 = ($type$1|0)==(2);
  $1205 = +HEAPF32[$800>>2];
  if ($1204) {
   $pe_s$04$i = 309.07000732421875;$sb$03$i = 0;
   while(1) {
    $1206 = (11584 + ($sb$03$i<<2)|0);
    $1207 = (((($mr$0)) + 88|0) + (($sb$03$i*12)|0)|0);
    $1208 = +HEAPF32[$1207>>2];
    $1209 = $1208 > 0.0;
    do {
     if ($1209) {
      $1210 = $1208 * $1205;
      $1211 = (((($mr$0)) + 332|0) + (($sb$03$i*12)|0)|0);
      $1212 = +HEAPF32[$1211>>2];
      $1213 = $1212 > $1210;
      if (!($1213)) {
       $pe_s$2$i = $pe_s$04$i;
       break;
      }
      $1214 = $1210 * 1.0E+10;
      $1215 = $1212 > $1214;
      $1216 = +HEAPF32[$1206>>2];
      $1217 = $1216;
      if ($1215) {
       $1218 = $1217 * 23.025850929940461;
       $1219 = $pe_s$04$i;
       $1220 = $1218 + $1219;
       $1221 = $1220;
       $pe_s$2$i = $1221;
       break;
      } else {
       $1222 = $1212 / $1210;
       $1223 = (+_fast_log2($1222));
       $1224 = $1223;
       $1225 = $1217 * 0.30102999566398114;
       $1226 = $1225 * $1224;
       $1227 = $pe_s$04$i;
       $1228 = $1226 + $1227;
       $1229 = $1228;
       $pe_s$2$i = $1229;
       break;
      }
     } else {
      $pe_s$2$i = $pe_s$04$i;
     }
    } while(0);
    $1230 = (((((($mr$0)) + 88|0) + (($sb$03$i*12)|0)|0)) + 4|0);
    $1231 = +HEAPF32[$1230>>2];
    $1232 = $1231 > 0.0;
    do {
     if ($1232) {
      $1233 = $1231 * $1205;
      $1234 = (((((($mr$0)) + 332|0) + (($sb$03$i*12)|0)|0)) + 4|0);
      $1235 = +HEAPF32[$1234>>2];
      $1236 = $1235 > $1233;
      if (!($1236)) {
       $pe_s$2$1$i = $pe_s$2$i;
       break;
      }
      $1237 = $1233 * 1.0E+10;
      $1238 = $1235 > $1237;
      $1239 = +HEAPF32[$1206>>2];
      $1240 = $1239;
      if ($1238) {
       $1249 = $1240 * 23.025850929940461;
       $1250 = $pe_s$2$i;
       $1251 = $1249 + $1250;
       $1252 = $1251;
       $pe_s$2$1$i = $1252;
       break;
      } else {
       $1241 = $1235 / $1233;
       $1242 = (+_fast_log2($1241));
       $1243 = $1242;
       $1244 = $1240 * 0.30102999566398114;
       $1245 = $1244 * $1243;
       $1246 = $pe_s$2$i;
       $1247 = $1245 + $1246;
       $1248 = $1247;
       $pe_s$2$1$i = $1248;
       break;
      }
     } else {
      $pe_s$2$1$i = $pe_s$2$i;
     }
    } while(0);
    $1253 = (((((($mr$0)) + 88|0) + (($sb$03$i*12)|0)|0)) + 8|0);
    $1254 = +HEAPF32[$1253>>2];
    $1255 = $1254 > 0.0;
    do {
     if ($1255) {
      $1256 = $1254 * $1205;
      $1257 = (((((($mr$0)) + 332|0) + (($sb$03$i*12)|0)|0)) + 8|0);
      $1258 = +HEAPF32[$1257>>2];
      $1259 = $1258 > $1256;
      if (!($1259)) {
       $pe_s$2$2$i = $pe_s$2$1$i;
       break;
      }
      $1260 = $1256 * 1.0E+10;
      $1261 = $1258 > $1260;
      $1262 = +HEAPF32[$1206>>2];
      $1263 = $1262;
      if ($1261) {
       $1272 = $1263 * 23.025850929940461;
       $1273 = $pe_s$2$1$i;
       $1274 = $1272 + $1273;
       $1275 = $1274;
       $pe_s$2$2$i = $1275;
       break;
      } else {
       $1264 = $1258 / $1256;
       $1265 = (+_fast_log2($1264));
       $1266 = $1265;
       $1267 = $1263 * 0.30102999566398114;
       $1268 = $1267 * $1266;
       $1269 = $pe_s$2$1$i;
       $1270 = $1268 + $1269;
       $1271 = $1270;
       $pe_s$2$2$i = $1271;
       break;
      }
     } else {
      $pe_s$2$2$i = $pe_s$2$1$i;
     }
    } while(0);
    $1276 = (($sb$03$i) + 1)|0;
    $exitcond$i11 = ($1276|0)==(12);
    if ($exitcond$i11) {
     $pe_s$2$2$i$lcssa = $pe_s$2$2$i;
     break;
    } else {
     $pe_s$04$i = $pe_s$2$2$i;$sb$03$i = $1276;
    }
   }
   $1277 = (($ppe$0) + ($chn$6112<<2)|0);
   HEAPF32[$1277>>2] = $pe_s$2$2$i$lcssa;
   $1305 = $pe_s$2$2$i$lcssa;
  } else {
   $pe_l$02$i = 281.0574951171875;$sb$01$i = 0;
   while(1) {
    $1278 = (($mr$0) + ($sb$01$i<<2)|0);
    $1279 = +HEAPF32[$1278>>2];
    $1280 = $1279 > 0.0;
    do {
     if ($1280) {
      $1281 = $1279 * $1205;
      $1282 = (((($mr$0)) + 244|0) + ($sb$01$i<<2)|0);
      $1283 = +HEAPF32[$1282>>2];
      $1284 = $1283 > $1281;
      if (!($1284)) {
       $pe_l$1$i = $pe_l$02$i;
       break;
      }
      $1285 = $1281 * 1.0E+10;
      $1286 = $1283 > $1285;
      $1287 = (11632 + ($sb$01$i<<2)|0);
      $1288 = +HEAPF32[$1287>>2];
      $1289 = $1288;
      if ($1286) {
       $1290 = $1289 * 23.025850929940461;
       $1291 = $pe_l$02$i;
       $1292 = $1290 + $1291;
       $1293 = $1292;
       $pe_l$1$i = $1293;
       break;
      } else {
       $1294 = $1283 / $1281;
       $1295 = (+_fast_log2($1294));
       $1296 = $1295;
       $1297 = $1289 * 0.30102999566398114;
       $1298 = $1297 * $1296;
       $1299 = $pe_l$02$i;
       $1300 = $1298 + $1299;
       $1301 = $1300;
       $pe_l$1$i = $1301;
       break;
      }
     } else {
      $pe_l$1$i = $pe_l$02$i;
     }
    } while(0);
    $1302 = (($sb$01$i) + 1)|0;
    $exitcond$i7 = ($1302|0)==(21);
    if ($exitcond$i7) {
     $pe_l$1$i$lcssa = $pe_l$1$i;
     break;
    } else {
     $pe_l$02$i = $pe_l$1$i;$sb$01$i = $1302;
    }
   }
   $1303 = (($ppe$0) + ($chn$6112<<2)|0);
   HEAPF32[$1303>>2] = $pe_l$1$i$lcssa;
   $1305 = $pe_l$1$i$lcssa;
  }
  if (!($1193)) {
   $1304 = $1305;
   $1306 = ((((($1192)) + 189240|0) + ($gr_out<<5)|0) + ($chn$6112<<3)|0);
   HEAPF64[$1306>>3] = $1304;
  }
  $1307 = (($chn$6112) + 1)|0;
  $exitcond = ($1307|0)==($417|0);
  if ($exitcond) {
   break;
  } else {
   $chn$6112 = $1307;
  }
 }
 STACKTOP = sp;return 0;
}
function _psymodel_init($gfp) {
 $gfp = $gfp|0;
 var $$ = 0.0, $$0 = 0, $$lcssa = 0, $$lcssa133 = 0.0, $$lcssa20 = 0, $$pre = 0, $$pre109 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0;
 var $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0;
 var $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0;
 var $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0.0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0.0, $289 = 0.0, $29 = 0;
 var $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0.0, $365 = 0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0, $385 = 0.0, $386 = 0, $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0.0;
 var $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$051 = 0, $b$3$lcssa110 = 0, $b$329 = 0, $b$427 = 0, $b$5$lcssa111 = 0, $b$525 = 0, $b$624 = 0, $bval = 0, $bval_width = 0, $eql_balance$049 = 0.0, $exitcond = 0, $exitcond$i = 0;
 var $exitcond$i4 = 0, $exitcond101 = 0, $exitcond102 = 0, $exitcond106 = 0, $exitcond108 = 0, $exitcond97 = 0, $freq5$048 = 0.0, $i$089 = 0, $i$180 = 0, $i$278 = 0, $i$365 = 0, $i$450 = 0, $j$01$i = 0, $j$01$i3 = 0, $j$084 = 0, $j$187 = 0, $j$377 = 0, $j$4$lcssa = 0, $j$471 = 0, $j$564 = 0;
 var $j$6$lcssa = 0, $j$657 = 0, $k$02$i = 0, $k$02$i2 = 0, $k$069 = 0, $k$155 = 0, $msfix$0 = 0.0, $norm = 0, $phitmp = 0.0, $sk_s$0 = 0.0, $snr2$0 = 0.0, $x$0$lcssa = 0.0, $x$070 = 0.0, $x$1 = 0.0, $x$2 = 0.0, $x$3 = 0.0, $x$3$op = 0.0, $x$3$op$op = 0.0, $x1$0$lcssa = 0.0, $x1$056 = 0.0;
 var $x1$1 = 0.0, $x1$2 = 0.0, $x1$3 = 0.0, $x1$4 = 0.0, $x1$5 = 0.0, $x1$5$op = 0.0, $x1$5$op$op = 0.0, $x6$0 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0;
 $bval = sp + 512|0;
 $bval_width = sp + 256|0;
 $norm = sp;
 $0 = ((($gfp)) + 288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = ((($1)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+($4|0));
 $6 = ((($1)) + 280|0);
 $7 = +HEAPF32[$6>>2];
 $8 = -$7;
 $9 = ((($1)) + 85800|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($norm|0),0,256)|0;
 $12 = (_calloc(1,6504)|0);
 HEAP32[$9>>2] = $12;
 $13 = ((($gfp)) + 144|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($12)) + 6500|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($1)) + 27800|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($1)) + 27796|0);
 HEAP32[$17>>2] = 0;
 $i$089 = 0;
 while(1) {
  $j$084 = 0;
  while(1) {
   $63 = ((((($1)) + 21564|0) + ($i$089<<8)|0) + ($j$084<<2)|0);
   HEAPF32[$63>>2] = 1.0000000200408773E+20;
   $64 = ((((($1)) + 22588|0) + ($i$089<<8)|0) + ($j$084<<2)|0);
   HEAPF32[$64>>2] = 1.0000000200408773E+20;
   $65 = ((((($1)) + 24636|0) + ($i$089<<8)|0) + ($j$084<<2)|0);
   HEAPF32[$65>>2] = 1.0;
   $66 = ((((($1)) + 23612|0) + ($i$089<<8)|0) + ($j$084<<2)|0);
   HEAPF32[$66>>2] = 1.0;
   $67 = (($j$084) + 1)|0;
   $exitcond102 = ($67|0)==(64);
   if ($exitcond102) {
    break;
   } else {
    $j$084 = $67;
   }
  }
  $18 = (((($1)) + 26636|0) + (($i$089*244)|0)|0);
  HEAPF32[$18>>2] = 1.0000000200408773E+20;
  $19 = (((($1)) + 25660|0) + (($i$089*244)|0)|0);
  HEAPF32[$19>>2] = 1.0000000200408773E+20;
  $20 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 4|0);
  HEAPF32[$20>>2] = 1.0000000200408773E+20;
  $21 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 4|0);
  HEAPF32[$21>>2] = 1.0000000200408773E+20;
  $22 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 8|0);
  HEAPF32[$22>>2] = 1.0000000200408773E+20;
  $23 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 8|0);
  HEAPF32[$23>>2] = 1.0000000200408773E+20;
  $24 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 12|0);
  HEAPF32[$24>>2] = 1.0000000200408773E+20;
  $25 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 12|0);
  HEAPF32[$25>>2] = 1.0000000200408773E+20;
  $26 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 16|0);
  HEAPF32[$26>>2] = 1.0000000200408773E+20;
  $27 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 16|0);
  HEAPF32[$27>>2] = 1.0000000200408773E+20;
  $28 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 20|0);
  HEAPF32[$28>>2] = 1.0000000200408773E+20;
  $29 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 20|0);
  HEAPF32[$29>>2] = 1.0000000200408773E+20;
  $30 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 24|0);
  HEAPF32[$30>>2] = 1.0000000200408773E+20;
  $31 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 24|0);
  HEAPF32[$31>>2] = 1.0000000200408773E+20;
  $32 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 28|0);
  HEAPF32[$32>>2] = 1.0000000200408773E+20;
  $33 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 28|0);
  HEAPF32[$33>>2] = 1.0000000200408773E+20;
  $34 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 32|0);
  HEAPF32[$34>>2] = 1.0000000200408773E+20;
  $35 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 32|0);
  HEAPF32[$35>>2] = 1.0000000200408773E+20;
  $36 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 36|0);
  HEAPF32[$36>>2] = 1.0000000200408773E+20;
  $37 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 36|0);
  HEAPF32[$37>>2] = 1.0000000200408773E+20;
  $38 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 40|0);
  HEAPF32[$38>>2] = 1.0000000200408773E+20;
  $39 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 40|0);
  HEAPF32[$39>>2] = 1.0000000200408773E+20;
  $40 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 44|0);
  HEAPF32[$40>>2] = 1.0000000200408773E+20;
  $41 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 44|0);
  HEAPF32[$41>>2] = 1.0000000200408773E+20;
  $42 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 48|0);
  HEAPF32[$42>>2] = 1.0000000200408773E+20;
  $43 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 48|0);
  HEAPF32[$43>>2] = 1.0000000200408773E+20;
  $44 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 52|0);
  HEAPF32[$44>>2] = 1.0000000200408773E+20;
  $45 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 52|0);
  HEAPF32[$45>>2] = 1.0000000200408773E+20;
  $46 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 56|0);
  HEAPF32[$46>>2] = 1.0000000200408773E+20;
  $47 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 56|0);
  HEAPF32[$47>>2] = 1.0000000200408773E+20;
  $48 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 60|0);
  HEAPF32[$48>>2] = 1.0000000200408773E+20;
  $49 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 60|0);
  HEAPF32[$49>>2] = 1.0000000200408773E+20;
  $50 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 64|0);
  HEAPF32[$50>>2] = 1.0000000200408773E+20;
  $51 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 64|0);
  HEAPF32[$51>>2] = 1.0000000200408773E+20;
  $52 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 68|0);
  HEAPF32[$52>>2] = 1.0000000200408773E+20;
  $53 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 68|0);
  HEAPF32[$53>>2] = 1.0000000200408773E+20;
  $54 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 72|0);
  HEAPF32[$54>>2] = 1.0000000200408773E+20;
  $55 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 72|0);
  HEAPF32[$55>>2] = 1.0000000200408773E+20;
  $56 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 76|0);
  HEAPF32[$56>>2] = 1.0000000200408773E+20;
  $57 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 76|0);
  HEAPF32[$57>>2] = 1.0000000200408773E+20;
  $58 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 80|0);
  HEAPF32[$58>>2] = 1.0000000200408773E+20;
  $59 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 80|0);
  HEAPF32[$59>>2] = 1.0000000200408773E+20;
  $60 = (((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 84|0);
  HEAPF32[$60>>2] = 1.0000000200408773E+20;
  $61 = (((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 84|0);
  HEAPF32[$61>>2] = 1.0000000200408773E+20;
  $62 = (((($1)) + 27780|0) + ($i$089<<2)|0);
  $j$187 = 0;
  while(1) {
   $78 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 88|0) + ($j$187<<2)|0);
   HEAPF32[$78>>2] = 1.0000000200408773E+20;
   $79 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 88|0) + ($j$187<<2)|0);
   HEAPF32[$79>>2] = 1.0000000200408773E+20;
   $80 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 100|0) + ($j$187<<2)|0);
   HEAPF32[$80>>2] = 1.0000000200408773E+20;
   $81 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 100|0) + ($j$187<<2)|0);
   HEAPF32[$81>>2] = 1.0000000200408773E+20;
   $82 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 112|0) + ($j$187<<2)|0);
   HEAPF32[$82>>2] = 1.0000000200408773E+20;
   $83 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 112|0) + ($j$187<<2)|0);
   HEAPF32[$83>>2] = 1.0000000200408773E+20;
   $84 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 124|0) + ($j$187<<2)|0);
   HEAPF32[$84>>2] = 1.0000000200408773E+20;
   $85 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 124|0) + ($j$187<<2)|0);
   HEAPF32[$85>>2] = 1.0000000200408773E+20;
   $86 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 136|0) + ($j$187<<2)|0);
   HEAPF32[$86>>2] = 1.0000000200408773E+20;
   $87 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 136|0) + ($j$187<<2)|0);
   HEAPF32[$87>>2] = 1.0000000200408773E+20;
   $88 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 148|0) + ($j$187<<2)|0);
   HEAPF32[$88>>2] = 1.0000000200408773E+20;
   $89 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 148|0) + ($j$187<<2)|0);
   HEAPF32[$89>>2] = 1.0000000200408773E+20;
   $90 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 160|0) + ($j$187<<2)|0);
   HEAPF32[$90>>2] = 1.0000000200408773E+20;
   $91 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 160|0) + ($j$187<<2)|0);
   HEAPF32[$91>>2] = 1.0000000200408773E+20;
   $92 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 172|0) + ($j$187<<2)|0);
   HEAPF32[$92>>2] = 1.0000000200408773E+20;
   $93 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 172|0) + ($j$187<<2)|0);
   HEAPF32[$93>>2] = 1.0000000200408773E+20;
   $94 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 184|0) + ($j$187<<2)|0);
   HEAPF32[$94>>2] = 1.0000000200408773E+20;
   $95 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 184|0) + ($j$187<<2)|0);
   HEAPF32[$95>>2] = 1.0000000200408773E+20;
   $96 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 196|0) + ($j$187<<2)|0);
   HEAPF32[$96>>2] = 1.0000000200408773E+20;
   $97 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 196|0) + ($j$187<<2)|0);
   HEAPF32[$97>>2] = 1.0000000200408773E+20;
   $98 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 208|0) + ($j$187<<2)|0);
   HEAPF32[$98>>2] = 1.0000000200408773E+20;
   $99 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 208|0) + ($j$187<<2)|0);
   HEAPF32[$99>>2] = 1.0000000200408773E+20;
   $100 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 220|0) + ($j$187<<2)|0);
   HEAPF32[$100>>2] = 1.0000000200408773E+20;
   $101 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 220|0) + ($j$187<<2)|0);
   HEAPF32[$101>>2] = 1.0000000200408773E+20;
   $102 = ((((((($1)) + 26636|0) + (($i$089*244)|0)|0)) + 232|0) + ($j$187<<2)|0);
   HEAPF32[$102>>2] = 1.0000000200408773E+20;
   $103 = ((((((($1)) + 25660|0) + (($i$089*244)|0)|0)) + 232|0) + ($j$187<<2)|0);
   HEAPF32[$103>>2] = 1.0000000200408773E+20;
   HEAP32[$62>>2] = 0;
   $104 = (($j$187) + 1)|0;
   $exitcond106 = ($104|0)==(3);
   if ($exitcond106) {
    break;
   } else {
    $j$187 = $104;
   }
  }
  $68 = (((($1)) + 27636|0) + (($i$089*36)|0)|0);
  HEAPF32[$68>>2] = 10.0;
  $69 = (((((($1)) + 27636|0) + (($i$089*36)|0)|0)) + 4|0);
  HEAPF32[$69>>2] = 10.0;
  $70 = (((((($1)) + 27636|0) + (($i$089*36)|0)|0)) + 8|0);
  HEAPF32[$70>>2] = 10.0;
  $71 = (((((($1)) + 27636|0) + (($i$089*36)|0)|0)) + 12|0);
  HEAPF32[$71>>2] = 10.0;
  $72 = (((((($1)) + 27636|0) + (($i$089*36)|0)|0)) + 16|0);
  HEAPF32[$72>>2] = 10.0;
  $73 = (((((($1)) + 27636|0) + (($i$089*36)|0)|0)) + 20|0);
  HEAPF32[$73>>2] = 10.0;
  $74 = (((((($1)) + 27636|0) + (($i$089*36)|0)|0)) + 24|0);
  HEAPF32[$74>>2] = 10.0;
  $75 = (((((($1)) + 27636|0) + (($i$089*36)|0)|0)) + 28|0);
  HEAPF32[$75>>2] = 10.0;
  $76 = (((((($1)) + 27636|0) + (($i$089*36)|0)|0)) + 32|0);
  HEAPF32[$76>>2] = 10.0;
  $77 = (($i$089) + 1)|0;
  $exitcond108 = ($77|0)==(4);
  if ($exitcond108) {
   break;
  } else {
   $i$089 = $77;
  }
 }
 $105 = ((($1)) + 27616|0);
 HEAPF32[$105>>2] = 0.0;
 $106 = ((($1)) + 27612|0);
 HEAPF32[$106>>2] = 0.0;
 $107 = ((($1)) + 21360|0);
 _init_numline($12,$5,1024,576,22,$107);
 $108 = ((($12)) + 2148|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $5 * 9.765625E-4;
 $111 = ($109|0)>(0);
 if ($111) {
  $112 = $110;
  $j$01$i = 0;$k$02$i = 0;
  while(1) {
   $113 = (((($12)) + 1716|0) + ($k$02$i<<2)|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (+($j$01$i|0));
   $116 = $115 * $110;
   $117 = (+_freq2bark($116));
   $118 = (($114) + ($j$01$i))|0;
   $119 = (($118) + -1)|0;
   $120 = (+($119|0));
   $121 = $120 * $110;
   $122 = (+_freq2bark($121));
   $123 = $122 + $117;
   $124 = $123 * 0.5;
   $125 = (($bval) + ($k$02$i<<2)|0);
   HEAPF32[$125>>2] = $124;
   $126 = (+($j$01$i|0));
   $127 = $126 + -0.5;
   $128 = $127 * $112;
   $129 = $128;
   $130 = (+_freq2bark($129));
   $131 = (+($118|0));
   $132 = $131 + -0.5;
   $133 = $132 * $112;
   $134 = $133;
   $135 = (+_freq2bark($134));
   $136 = $135 - $130;
   $137 = (($bval_width) + ($k$02$i<<2)|0);
   HEAPF32[$137>>2] = $136;
   $138 = (($k$02$i) + 1)|0;
   $exitcond$i = ($138|0)==($109|0);
   if ($exitcond$i) {
    break;
   } else {
    $j$01$i = $118;$k$02$i = $138;
   }
  }
  $$pre = HEAP32[$108>>2]|0;
  $139 = ($$pre|0)>(0);
  if ($139) {
   $i$180 = 0;
   while(1) {
    $140 = (($norm) + ($i$180<<2)|0);
    HEAPF32[$140>>2] = 1.0;
    $141 = (($i$180) + 1)|0;
    $142 = ($141|0)<($$pre|0);
    if ($142) {
     $i$180 = $141;
    } else {
     $145 = $$pre;
     break;
    }
   }
  } else {
   $145 = $$pre;
  }
 } else {
  $145 = $109;
 }
 $143 = ((($12)) + 2156|0);
 $144 = ((($12)) + 1204|0);
 $146 = (_init_s3_values($143,$144,$145,$bval,$bval_width,$norm)|0);
 $147 = ($146|0)==(0);
 if (!($147)) {
  $$0 = $146;
  STACKTOP = sp;return ($$0|0);
 }
 $148 = HEAP32[$108>>2]|0;
 $149 = ($148|0)>(0);
 if ($149) {
  $150 = ((($12)) + 1716|0);
  $151 = ((($1)) + 85796|0);
  $152 = $8;
  $153 = ((($12)) + 256|0);
  $i$278 = 0;$j$377 = 0;
  while(1) {
   $154 = (($150) + ($i$278<<2)|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ($155|0)>(0);
   if ($156) {
    $j$471 = $j$377;$k$069 = 0;$x$070 = 9.9999999999999995E+36;
    while(1) {
     $157 = (+($j$471|0));
     $158 = $157 * $5;
     $159 = $158;
     $160 = $159 * 9.7656250000000002E-7;
     $161 = $160;
     $162 = $161 * 1000.0;
     $163 = (+_ATHformula($2,$162));
     $164 = $163 + -20.0;
     $165 = $164;
     $166 = $165 * 0.10000000000000001;
     $167 = (+Math_pow(10.0,(+$166)));
     $168 = $167;
     $169 = HEAP32[$154>>2]|0;
     $170 = (+($169|0));
     $171 = $170 * $168;
     $172 = $171;
     $173 = $x$070 > $172;
     $x$1 = $173 ? $172 : $x$070;
     $174 = (($k$069) + 1)|0;
     $175 = (($j$471) + 1)|0;
     $176 = ($174|0)<($169|0);
     if ($176) {
      $j$471 = $175;$k$069 = $174;$x$070 = $x$1;
     } else {
      $193 = $169;$j$4$lcssa = $175;$x$0$lcssa = $x$1;
      break;
     }
    }
   } else {
    $193 = $155;$j$4$lcssa = $j$377;$x$0$lcssa = 9.9999999999999995E+36;
   }
   $177 = $x$0$lcssa;
   $178 = HEAP32[$151>>2]|0;
   $179 = (((($178)) + 212|0) + ($i$278<<2)|0);
   HEAPF32[$179>>2] = $177;
   $180 = (($bval) + ($i$278<<2)|0);
   $181 = +HEAPF32[$180>>2];
   $182 = $181 * 0.10000000149011612;
   $183 = $182;
   $184 = $183 + -1.0;
   $185 = $184 * 20.0;
   $186 = $185 > 6.0;
   $x$2 = $186 ? 30.0 : $185;
   $187 = $x$2 < $152;
   $x$3 = $187 ? $152 : $x$2;
   $188 = HEAP32[$3>>2]|0;
   $189 = ($188|0)<(44000);
   $x$3$op = $x$3 + -8.0;
   $x$3$op$op = $x$3$op * 0.10000000000000001;
   $190 = $189 ? 2.2000000000000002 : $x$3$op$op;
   $191 = (+Math_pow(10.0,(+$190)));
   $192 = (+($193|0));
   $194 = $192 * $191;
   $195 = $194;
   $196 = (($153) + ($i$278<<2)|0);
   HEAPF32[$196>>2] = $195;
   $197 = (($i$278) + 1)|0;
   $198 = HEAP32[$108>>2]|0;
   $199 = ($197|0)<($198|0);
   if ($199) {
    $i$278 = $197;$j$377 = $j$4$lcssa;
   } else {
    break;
   }
  }
 }
 $200 = ((($12)) + 2160|0);
 $201 = ((($1)) + 21452|0);
 _init_numline($200,$5,256,192,13,$201);
 $202 = ((($12)) + 4308|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = $5 * 0.00390625;
 $205 = ($203|0)>(0);
 if ($205) {
  $206 = $204;
  $j$01$i3 = 0;$k$02$i2 = 0;
  while(1) {
   $207 = (((($200)) + 1716|0) + ($k$02$i2<<2)|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = (+($j$01$i3|0));
   $210 = $209 * $204;
   $211 = (+_freq2bark($210));
   $212 = (($208) + ($j$01$i3))|0;
   $213 = (($212) + -1)|0;
   $214 = (+($213|0));
   $215 = $214 * $204;
   $216 = (+_freq2bark($215));
   $217 = $216 + $211;
   $218 = $217 * 0.5;
   $219 = (($bval) + ($k$02$i2<<2)|0);
   HEAPF32[$219>>2] = $218;
   $220 = (+($j$01$i3|0));
   $221 = $220 + -0.5;
   $222 = $221 * $206;
   $223 = $222;
   $224 = (+_freq2bark($223));
   $225 = (+($212|0));
   $226 = $225 + -0.5;
   $227 = $226 * $206;
   $228 = $227;
   $229 = (+_freq2bark($228));
   $230 = $229 - $224;
   $231 = (($bval_width) + ($k$02$i2<<2)|0);
   HEAPF32[$231>>2] = $230;
   $232 = (($k$02$i2) + 1)|0;
   $exitcond$i4 = ($232|0)==($203|0);
   if ($exitcond$i4) {
    break;
   } else {
    $j$01$i3 = $212;$k$02$i2 = $232;
   }
  }
  $$pre109 = HEAP32[$202>>2]|0;
  $233 = ($$pre109|0)>(0);
  if ($233) {
   $234 = ((($12)) + 3876|0);
   $235 = ((($1)) + 85796|0);
   $236 = $8;
   $237 = ((($12)) + 2416|0);
   $i$365 = 0;$j$564 = 0;
   while(1) {
    $238 = (($bval) + ($i$365<<2)|0);
    $239 = +HEAPF32[$238>>2];
    $240 = !($239 >= 13.0);
    if ($240) {
     $snr2$0 = -8.25;
    } else {
     $241 = $239 + -13.0;
     $242 = $241 * 0.40909090638160706;
     $243 = 24.0 - $239;
     $244 = $243 * -0.75;
     $245 = $244 - $242;
     $246 = $245;
     $snr2$0 = $246;
    }
    $247 = $snr2$0 * 0.10000000000000001;
    $248 = (+Math_pow(10.0,(+$247)));
    $249 = $248;
    $250 = (($norm) + ($i$365<<2)|0);
    HEAPF32[$250>>2] = $249;
    $251 = (($234) + ($i$365<<2)|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = ($252|0)>(0);
    if ($253) {
     $j$657 = $j$564;$k$155 = 0;$x1$056 = 9.9999999999999995E+36;
     while(1) {
      $254 = (+($j$657|0));
      $255 = $254 * $5;
      $256 = $255;
      $257 = $256 * 3.9062500000000001E-6;
      $258 = $257;
      $259 = $258 * 1000.0;
      $260 = (+_ATHformula($2,$259));
      $261 = $260 + -20.0;
      $262 = $261;
      $263 = $262 * 0.10000000000000001;
      $264 = (+Math_pow(10.0,(+$263)));
      $265 = $264;
      $266 = HEAP32[$251>>2]|0;
      $267 = (+($266|0));
      $268 = $267 * $265;
      $269 = $268;
      $270 = $x1$056 > $269;
      $x1$1 = $270 ? $269 : $x1$056;
      $271 = (($k$155) + 1)|0;
      $272 = (($j$657) + 1)|0;
      $273 = ($271|0)<($266|0);
      if ($273) {
       $j$657 = $272;$k$155 = $271;$x1$056 = $x1$1;
      } else {
       $300 = $266;$j$6$lcssa = $272;$x1$0$lcssa = $x1$1;
       break;
      }
     }
    } else {
     $300 = $252;$j$6$lcssa = $j$564;$x1$0$lcssa = 9.9999999999999995E+36;
    }
    $274 = $x1$0$lcssa;
    $275 = HEAP32[$235>>2]|0;
    $276 = (((($275)) + 468|0) + ($i$365<<2)|0);
    HEAPF32[$276>>2] = $274;
    $277 = $239 * 0.083333335816860198;
    $278 = $277;
    $279 = $278 + -1.0;
    $280 = $279 * 7.0;
    $281 = $239 > 12.0;
    if ($281) {
     $282 = $280 + 1.0;
     $283 = (+Math_log((+$282)));
     $284 = $283 * 3.1000000000000001;
     $285 = $284 + 1.0;
     $286 = $285 * $280;
     $x1$2 = $286;
    } else {
     $x1$2 = $280;
    }
    $287 = $239 < 12.0;
    if ($287) {
     $288 = 1.0 - $x1$2;
     $289 = (+Math_log((+$288)));
     $290 = $289 * 2.2999999999999998;
     $291 = $290 + 1.0;
     $292 = $291 * $x1$2;
     $x1$3 = $292;
    } else {
     $x1$3 = $x1$2;
    }
    $293 = $x1$3 > 6.0;
    $x1$4 = $293 ? 30.0 : $x1$3;
    $294 = $x1$4 < $236;
    $x1$5 = $294 ? $236 : $x1$4;
    $295 = HEAP32[$3>>2]|0;
    $296 = ($295|0)<(44000);
    $x1$5$op = $x1$5 + -8.0;
    $x1$5$op$op = $x1$5$op * 0.10000000000000001;
    $297 = $296 ? 2.2000000000000002 : $x1$5$op$op;
    $298 = (+Math_pow(10.0,(+$297)));
    $299 = (+($300|0));
    $301 = $299 * $298;
    $302 = $301;
    $303 = (($237) + ($i$365<<2)|0);
    HEAPF32[$303>>2] = $302;
    $304 = (($i$365) + 1)|0;
    $305 = HEAP32[$202>>2]|0;
    $306 = ($304|0)<($305|0);
    if ($306) {
     $i$365 = $304;$j$564 = $j$6$lcssa;
    } else {
     $$lcssa20 = $305;
     break;
    }
   }
  } else {
   $$lcssa20 = $$pre109;
  }
 } else {
  $$lcssa20 = $203;
 }
 $307 = ((($12)) + 4316|0);
 $308 = ((($12)) + 3364|0);
 $309 = (_init_s3_values($307,$308,$$lcssa20,$bval,$bval_width,$norm)|0);
 $310 = ($309|0)==(0);
 if (!($310)) {
  $$0 = $309;
  STACKTOP = sp;return ($$0|0);
 }
 HEAPF32[11528>>2] = 3.6517412662506104;
 HEAPF32[11576>>2] = 31.622776031494141;
 _init_fft($1);
 $311 = $5;
 $312 = -44209.633785485676 / $311;
 $313 = (+Math_exp((+$312)));
 $314 = $313;
 $315 = ((($12)) + 6496|0);
 HEAPF32[$315>>2] = $314;
 $316 = ((($1)) + 96|0);
 $317 = HEAP32[$316>>2]|0;
 $318 = ($317|0)!=(0);
 $$ = $318 ? 1.0 : 3.5;
 $319 = ((($1)) + 192|0);
 $320 = +HEAPF32[$319>>2];
 $321 = ($320 != $320) | (0.0 != 0.0) |($320 == 0.0);
 $msfix$0 = $321 ? $$ : $320;
 HEAPF32[$319>>2] = $msfix$0;
 $322 = HEAP32[$108>>2]|0;
 $323 = ($322|0)>(0);
 if ($323) {
  $324 = (($322) + -1)|0;
  $b$051 = 0;
  while(1) {
   $325 = (((($144) + ($b$051<<3)|0)) + 4|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = ($326|0)>($324|0);
   if ($327) {
    HEAP32[$325>>2] = $324;
   }
   $328 = (($b$051) + 1)|0;
   $329 = ($328|0)<($322|0);
   if ($329) {
    $b$051 = $328;
   } else {
    break;
   }
  }
 }
 $330 = ((($1)) + 76|0);
 $331 = HEAP32[$330>>2]|0;
 $332 = (+($331|0));
 $333 = $332 * 576.0;
 $334 = $333 / $311;
 $335 = $334 * -1.2;
 $336 = (+Math_pow(10.0,(+$335)));
 $337 = $336;
 $338 = ((($1)) + 85796|0);
 $339 = HEAP32[$338>>2]|0;
 $340 = ((($339)) + 16|0);
 HEAPF32[$340>>2] = $337;
 $341 = ((($339)) + 8|0);
 HEAPF32[$341>>2] = 0.0099999997764825821;
 $342 = ((($339)) + 12|0);
 HEAPF32[$342>>2] = 1.0;
 $343 = ((($1)) + 208|0);
 $344 = HEAP32[$343>>2]|0;
 $345 = ($344|0)==(-1);
 if (!($345)) {
  $346 = HEAP32[$3>>2]|0;
  $347 = (+($346|0));
  $348 = $347 * 9.765625E-4;
  $eql_balance$049 = 0.0;$freq5$048 = 0.0;$i$450 = 0;
  while(1) {
   $349 = $freq5$048 + $348;
   $350 = (+_ATHformula($2,$349));
   $351 = $350 * 0.10000000149011612;
   $352 = $351;
   $353 = (+Math_pow(10.0,(+$352)));
   $354 = 1.0 / $353;
   $355 = $354;
   $356 = HEAP32[$338>>2]|0;
   $357 = (((($356)) + 724|0) + ($i$450<<2)|0);
   HEAPF32[$357>>2] = $355;
   $358 = $355 + $eql_balance$049;
   $359 = (($i$450) + 1)|0;
   $exitcond101 = ($359|0)==(512);
   if ($exitcond101) {
    $$lcssa = $356;$$lcssa133 = $358;
    break;
   } else {
    $eql_balance$049 = $358;$freq5$048 = $349;$i$450 = $359;
   }
  }
  $360 = 1.0 / $$lcssa133;
  $377 = 511;
  while(1) {
   $376 = (((($$lcssa)) + 724|0) + ($377<<2)|0);
   $378 = +HEAPF32[$376>>2];
   $379 = $378 * $360;
   HEAPF32[$376>>2] = $379;
   $380 = (($377) + -1)|0;
   $381 = ($377|0)>(0);
   if ($381) {
    $377 = $380;
   } else {
    break;
   }
  }
 }
 $361 = HEAP32[$202>>2]|0;
 $362 = ($361|0)>(0);
 $363 = ((($gfp)) + 264|0);
 $364 = +HEAPF32[$363>>2];
 $365 = ((($gfp)) + 268|0);
 $366 = +HEAPF32[$365>>2];
 $367 = $364 < 0.0;
 $x6$0 = $367 ? 4.4000000953674316 : $364;
 $368 = $366 < 0.0;
 $y$0 = $368 ? 25.0 : $366;
 $369 = ((($12)) + 6480|0);
 $370 = ((($12)) + 6488|0);
 HEAPF32[$370>>2] = $x6$0;
 $371 = ((($12)) + 6484|0);
 HEAPF32[$371>>2] = $x6$0;
 HEAPF32[$369>>2] = $x6$0;
 $372 = ((($12)) + 6492|0);
 HEAPF32[$372>>2] = $y$0;
 $373 = ((($gfp)) + 164|0);
 $374 = HEAP32[$373>>2]|0;
 $375 = ($374|0)<(4);
 if ($375) {
  $sk_s$0 = -0.74000000953674316;
 } else {
  $382 = (11720 + ($374<<2)|0);
  $383 = +HEAPF32[$382>>2];
  $384 = ((($gfp)) + 160|0);
  $385 = +HEAPF32[$384>>2];
  $386 = (($374) + 1)|0;
  $387 = (11720 + ($386<<2)|0);
  $388 = +HEAPF32[$387>>2];
  $389 = $383 - $388;
  $390 = $389 * $385;
  $391 = $390 + $383;
  $phitmp = $391 * 0.10000000149011612;
  $sk_s$0 = $phitmp;
 }
 if ($362) {
  $392 = ($361|0)>(1);
  $393 = (+($361|0));
  $b$329 = 0;
  while(1) {
   $395 = (($361) - ($b$329))|0;
   $396 = (+($395|0));
   $397 = $396 / $393;
   $398 = $sk_s$0 * $397;
   $399 = (+Math_pow(10.0,(+$398)));
   $400 = (($200) + ($b$329<<2)|0);
   HEAPF32[$400>>2] = $399;
   $401 = (($b$329) + 1)|0;
   $402 = ($361|0)>($401|0);
   if ($402) {
    $b$329 = $401;
   } else {
    break;
   }
  }
  if ($392) {
   $394 = ($361|0)<(64);
   if ($394) {
    $b$3$lcssa110 = $361;
    label = 50;
   }
  } else {
   $b$3$lcssa110 = 1;
   label = 50;
  }
 } else {
  $b$3$lcssa110 = 0;
  label = 50;
 }
 if ((label|0) == 50) {
  $b$427 = $b$3$lcssa110;
  while(1) {
   $407 = (($200) + ($b$427<<2)|0);
   HEAPF32[$407>>2] = 1.0;
   $408 = (($b$427) + 1)|0;
   $exitcond97 = ($408|0)==(64);
   if ($exitcond97) {
    break;
   } else {
    $b$427 = $408;
   }
  }
 }
 $403 = HEAP32[$108>>2]|0;
 $404 = ($403|0)>(0);
 if ($404) {
  $405 = ($403|0)>(1);
  $406 = (+($403|0));
  $b$525 = 0;
  while(1) {
   $410 = (($403) - ($b$525))|0;
   $411 = (+($410|0));
   $412 = $411 / $406;
   $413 = $sk_s$0 * $412;
   $414 = (+Math_pow(10.0,(+$413)));
   $415 = (($12) + ($b$525<<2)|0);
   HEAPF32[$415>>2] = $414;
   $416 = (($b$525) + 1)|0;
   $417 = ($403|0)>($416|0);
   if ($417) {
    $b$525 = $416;
   } else {
    break;
   }
  }
  if ($405) {
   $409 = ($403|0)<(64);
   if ($409) {
    $b$5$lcssa111 = $403;
    label = 57;
   }
  } else {
   $b$5$lcssa111 = 1;
   label = 57;
  }
 } else {
  $b$5$lcssa111 = 0;
  label = 57;
 }
 if ((label|0) == 57) {
  $b$624 = $b$5$lcssa111;
  while(1) {
   $418 = (($12) + ($b$624<<2)|0);
   HEAPF32[$418>>2] = 1.0;
   $419 = (($b$624) + 1)|0;
   $exitcond = ($419|0)==(64);
   if ($exitcond) {
    break;
   } else {
    $b$624 = $419;
   }
  }
 }
 $420 = ((($12)) + 4320|0);
 _memcpy(($420|0),($12|0),2160)|0;
 _init_numline($420,$5,1024,192,13,$201);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _vbrpsy_compute_MS_thresholds($eb,$thr,$cb_mld,$ath_cb,$athlower,$msfix,$n) {
 $eb = $eb|0;
 $thr = $thr|0;
 $cb_mld = $cb_mld|0;
 $ath_cb = $ath_cb|0;
 $athlower = +$athlower;
 $msfix = +$msfix;
 $n = $n|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $b$02 = 0, $b$02$us = 0, $exitcond = 0, $exitcond3 = 0, $or$cond = 0, $or$cond$us = 0, $rmid$0 = 0.0, $rmid$0$us = 0.0, $rmid$2 = 0.0, $rmid$2$us = 0.0, $rside$0 = 0.0;
 var $rside$0$us = 0.0, $rside$2 = 0.0, $rside$2$us = 0.0, $thmM$0$us = 0.0, $thmS$0$us = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $msfix * 2.0;
 $1 = ($n|0)>(0);
 if (!($1)) {
  return;
 }
 $2 = $msfix > 0.0;
 if ($2) {
  $b$02$us = 0;
 } else {
  $b$02 = 0;
  while(1) {
   $58 = (((($eb)) + 512|0) + ($b$02<<2)|0);
   $59 = +HEAPF32[$58>>2];
   $60 = (((($eb)) + 768|0) + ($b$02<<2)|0);
   $61 = +HEAPF32[$60>>2];
   $62 = (($thr) + ($b$02<<2)|0);
   $63 = +HEAPF32[$62>>2];
   $64 = (((($thr)) + 256|0) + ($b$02<<2)|0);
   $65 = +HEAPF32[$64>>2];
   $66 = (((($thr)) + 512|0) + ($b$02<<2)|0);
   $67 = +HEAPF32[$66>>2];
   $68 = (((($thr)) + 768|0) + ($b$02<<2)|0);
   $69 = +HEAPF32[$68>>2];
   $70 = $65 * 1.5800000429153442;
   $71 = !($63 <= $70);
   $72 = $63 * 1.5800000429153442;
   $73 = !($65 <= $72);
   $or$cond = $73 | $71;
   if ($or$cond) {
    $rmid$0 = $67;$rside$0 = $69;
   } else {
    $74 = (($cb_mld) + ($b$02<<2)|0);
    $75 = +HEAPF32[$74>>2];
    $76 = $75 * $61;
    $77 = $75 * $59;
    $78 = $69 < $76;
    $79 = $78 ? $69 : $76;
    $80 = $67 < $77;
    $81 = $80 ? $67 : $77;
    $82 = $67 > $79;
    $83 = $82 ? $67 : $79;
    $84 = $69 > $81;
    $85 = $84 ? $69 : $81;
    $rmid$0 = $83;$rside$0 = $85;
   }
   $86 = $rmid$0 > $59;
   $rmid$2 = $86 ? $59 : $rmid$0;
   $87 = $rside$0 > $61;
   $rside$2 = $87 ? $61 : $rside$0;
   HEAPF32[$66>>2] = $rmid$2;
   HEAPF32[$68>>2] = $rside$2;
   $88 = (($b$02) + 1)|0;
   $exitcond = ($88|0)==($n|0);
   if ($exitcond) {
    break;
   } else {
    $b$02 = $88;
   }
  }
  return;
 }
 while(1) {
  $3 = (((($eb)) + 512|0) + ($b$02$us<<2)|0);
  $4 = +HEAPF32[$3>>2];
  $5 = (((($eb)) + 768|0) + ($b$02$us<<2)|0);
  $6 = +HEAPF32[$5>>2];
  $7 = (($thr) + ($b$02$us<<2)|0);
  $8 = +HEAPF32[$7>>2];
  $9 = (((($thr)) + 256|0) + ($b$02$us<<2)|0);
  $10 = +HEAPF32[$9>>2];
  $11 = (((($thr)) + 512|0) + ($b$02$us<<2)|0);
  $12 = +HEAPF32[$11>>2];
  $13 = (((($thr)) + 768|0) + ($b$02$us<<2)|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $10 * 1.5800000429153442;
  $16 = !($8 <= $15);
  $17 = $8 * 1.5800000429153442;
  $18 = !($10 <= $17);
  $or$cond$us = $18 | $16;
  if ($or$cond$us) {
   $rmid$0$us = $12;$rside$0$us = $14;
  } else {
   $19 = (($cb_mld) + ($b$02$us<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $20 * $6;
   $22 = $20 * $4;
   $23 = $14 < $21;
   $24 = $23 ? $14 : $21;
   $25 = $12 < $22;
   $26 = $25 ? $12 : $22;
   $27 = $12 > $24;
   $28 = $27 ? $12 : $24;
   $29 = $14 > $26;
   $30 = $29 ? $14 : $26;
   $rmid$0$us = $28;$rside$0$us = $30;
  }
  $31 = (($ath_cb) + ($b$02$us<<2)|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $32 * $athlower;
  $34 = $8 > $33;
  $35 = $34 ? $8 : $33;
  $36 = $10 > $33;
  $37 = $36 ? $10 : $33;
  $38 = $rmid$0$us > $33;
  $39 = $38 ? $rmid$0$us : $33;
  $40 = $rside$0$us > $33;
  $41 = $40 ? $rside$0$us : $33;
  $42 = $39 + $41;
  $43 = $42 > 0.0;
  if ($43) {
   $44 = $35 < $37;
   $45 = $44 ? $35 : $37;
   $46 = $0 * $45;
   $47 = $46 < $42;
   if ($47) {
    $48 = $46 / $42;
    $49 = $48 * $39;
    $50 = $48 * $41;
    $thmM$0$us = $49;$thmS$0$us = $50;
   } else {
    $thmM$0$us = $39;$thmS$0$us = $41;
   }
  } else {
   $thmM$0$us = $39;$thmS$0$us = $41;
  }
  $51 = $thmM$0$us < $rmid$0$us;
  $52 = $51 ? $thmM$0$us : $rmid$0$us;
  $53 = $thmS$0$us < $rside$0$us;
  $54 = $53 ? $thmS$0$us : $rside$0$us;
  $55 = $52 > $4;
  $rmid$2$us = $55 ? $4 : $52;
  $56 = $54 > $6;
  $rside$2$us = $56 ? $6 : $54;
  HEAPF32[$11>>2] = $rmid$2$us;
  HEAPF32[$13>>2] = $rside$2$us;
  $57 = (($b$02$us) + 1)|0;
  $exitcond3 = ($57|0)==($n|0);
  if ($exitcond3) {
   break;
  } else {
   $b$02$us = $57;
  }
 }
 return;
}
function _convert_partition2scalefac($gd,$eb,$thr,$enn_out,$thm_out) {
 $gd = $gd|0;
 $eb = $eb|0;
 $thr = $thr|0;
 $enn_out = $enn_out|0;
 $thm_out = $thm_out|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$011 = 0, $b$1$lcssa = 0, $b$13 = 0, $enn$014 = 0.0, $enn$1$lcssa = 0.0, $enn$1$lcssa$lcssa = 0.0, $enn$15 = 0.0, $exitcond = 0, $exitcond26 = 0, $sb$012 = 0, $sb$012$lcssa = 0, $sb$1$ph = 0, $sb$12 = 0;
 var $thmm$013 = 0.0, $thmm$1$lcssa = 0.0, $thmm$1$lcssa$lcssa = 0.0, $thmm$14 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gd)) + 2152|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 L1: do {
  if ($2) {
   $3 = ((($gd)) + 2148|0);
   $$pre = HEAP32[$3>>2]|0;
   $b$011 = 0;$enn$014 = 0.0;$sb$012 = 0;$thmm$013 = 0.0;
   while(1) {
    $5 = (((($gd)) + 2060|0) + ($sb$012<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)<($$pre|0);
    $8 = $7 ? $6 : $$pre;
    $9 = ($b$011|0)<($8|0);
    if ($9) {
     $10 = ($$pre|0)>($6|0);
     $11 = $10 ? $6 : $$pre;
     $b$13 = $b$011;$enn$15 = $enn$014;$thmm$14 = $thmm$013;
     while(1) {
      $12 = (($eb) + ($b$13<<2)|0);
      $13 = +HEAPF32[$12>>2];
      $14 = $13 + $enn$15;
      $15 = (($thr) + ($b$13<<2)|0);
      $16 = +HEAPF32[$15>>2];
      $17 = $16 + $thmm$14;
      $18 = (($b$13) + 1)|0;
      $exitcond26 = ($18|0)==($11|0);
      if ($exitcond26) {
       $b$1$lcssa = $11;$enn$1$lcssa = $14;$thmm$1$lcssa = $17;
       break;
      } else {
       $b$13 = $18;$enn$15 = $14;$thmm$14 = $17;
      }
     }
    } else {
     $b$1$lcssa = $b$011;$enn$1$lcssa = $enn$014;$thmm$1$lcssa = $thmm$013;
    }
    $19 = ($b$1$lcssa|0)<($$pre|0);
    if (!($19)) {
     $enn$1$lcssa$lcssa = $enn$1$lcssa;$sb$012$lcssa = $sb$012;$thmm$1$lcssa$lcssa = $thmm$1$lcssa;
     break;
    }
    $23 = (((($gd)) + 1112|0) + ($sb$012<<2)|0);
    $24 = +HEAPF32[$23>>2];
    $25 = 1.0 - $24;
    $26 = (($eb) + ($b$1$lcssa<<2)|0);
    $27 = +HEAPF32[$26>>2];
    $28 = $27 * $24;
    $29 = $28 + $enn$1$lcssa;
    $30 = (($thr) + ($b$1$lcssa<<2)|0);
    $31 = +HEAPF32[$30>>2];
    $32 = $31 * $24;
    $33 = $32 + $thmm$1$lcssa;
    $34 = (($enn_out) + ($sb$012<<2)|0);
    HEAPF32[$34>>2] = $29;
    $35 = (($thm_out) + ($sb$012<<2)|0);
    HEAPF32[$35>>2] = $33;
    $36 = +HEAPF32[$26>>2];
    $37 = $36 * $25;
    $38 = +HEAPF32[$30>>2];
    $39 = $38 * $25;
    $40 = (($b$1$lcssa) + 1)|0;
    $41 = (($sb$012) + 1)|0;
    $42 = ($41|0)<($1|0);
    if ($42) {
     $b$011 = $40;$enn$014 = $37;$sb$012 = $41;$thmm$013 = $39;
    } else {
     $sb$1$ph = $41;
     break L1;
    }
   }
   $20 = (($enn_out) + ($sb$012$lcssa<<2)|0);
   HEAPF32[$20>>2] = $enn$1$lcssa$lcssa;
   $21 = (($thm_out) + ($sb$012$lcssa<<2)|0);
   HEAPF32[$21>>2] = $thmm$1$lcssa$lcssa;
   $22 = (($sb$012$lcssa) + 1)|0;
   $sb$1$ph = $22;
  } else {
   $sb$1$ph = 0;
  }
 } while(0);
 $4 = ($sb$1$ph|0)<($1|0);
 if ($4) {
  $sb$12 = $sb$1$ph;
 } else {
  return;
 }
 while(1) {
  $43 = (($enn_out) + ($sb$12<<2)|0);
  HEAPF32[$43>>2] = 0.0;
  $44 = (($thm_out) + ($sb$12<<2)|0);
  HEAPF32[$44>>2] = 0.0;
  $45 = (($sb$12) + 1)|0;
  $exitcond = ($45|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $sb$12 = $45;
  }
 }
 return;
}
function _init_numline($gd,$sfreq,$fft_size,$mdct_size,$sbmax,$scalepos) {
 $gd = $gd|0;
 $sfreq = +$sfreq;
 $fft_size = $fft_size|0;
 $mdct_size = $mdct_size|0;
 $sbmax = $sbmax|0;
 $scalepos = $scalepos|0;
 var $$ = 0, $$2 = 0, $$lcssa = 0, $$op$op$i = 0.0, $$op$op$i3 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0;
 var $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0;
 var $98 = 0.0, $99 = 0.0, $b_frq = 0, $bo_w$0 = 0.0, $exitcond = 0, $exitcond17 = 0, $exitcond18 = 0, $i$29 = 0, $i$36 = 0, $j$0 = 0, $j$1$lcssa = 0, $j$112 = 0, $j$2 = 0, $j$38 = 0, $j2$0 = 0, $j2$0$lcssa = 0, $ni$0 = 0, $ni$1 = 0, $or$cond = 0, $partition = 0;
 var $sfb$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2320|0;
 $b_frq = sp + 2052|0;
 $partition = sp;
 $0 = (+($mdct_size|0));
 $1 = $0 * 2.0;
 $2 = $sfreq / $1;
 $3 = (+($fft_size|0));
 $4 = $3 / $1;
 _memset(($partition|0),0,2052)|0;
 $5 = $sfreq / $3;
 $6 = (($fft_size|0) / 2)&-1;
 $j$0 = 0;$ni$0 = 0;
 while(1) {
  $7 = ($ni$0|0)<(64);
  if (!($7)) {
   $j$2 = $j$0;$ni$1 = $ni$0;
   break;
  }
  $8 = (+($j$0|0));
  $9 = $8 * $5;
  $10 = (+_freq2bark($9));
  $11 = (($b_frq) + ($ni$0<<2)|0);
  HEAPF32[$11>>2] = $9;
  $j2$0 = $j$0;
  while(1) {
   $12 = (+($j2$0|0));
   $13 = $12 * $5;
   $14 = (+_freq2bark($13));
   $15 = $14 - $10;
   $16 = $15;
   $17 = !($16 < 0.34000000000000002);
   $18 = ($j2$0|0)>($6|0);
   $or$cond = $18 | $17;
   $19 = (($j2$0) + 1)|0;
   if ($or$cond) {
    $j2$0$lcssa = $j2$0;
    break;
   } else {
    $j2$0 = $19;
   }
  }
  $20 = (($j2$0$lcssa) - ($j$0))|0;
  $21 = (((($gd)) + 1716|0) + ($ni$0<<2)|0);
  HEAP32[$21>>2] = $20;
  $22 = ($20|0)>(0);
  $23 = (+($20|0));
  $24 = 1.0 / $23;
  $25 = $22 ? $24 : 0.0;
  $26 = (((($gd)) + 512|0) + ($ni$0<<2)|0);
  HEAPF32[$26>>2] = $25;
  $27 = (($ni$0) + 1)|0;
  $28 = ($j2$0$lcssa|0)>($j$0|0);
  if ($28) {
   $j$112 = $j$0;
   while(1) {
    $29 = (($j$112) + 1)|0;
    $30 = (($partition) + ($j$112<<2)|0);
    HEAP32[$30>>2] = $ni$0;
    $exitcond18 = ($29|0)==($j2$0$lcssa|0);
    if ($exitcond18) {
     $j$1$lcssa = $j2$0$lcssa;
     break;
    } else {
     $j$112 = $29;
    }
   }
  } else {
   $j$1$lcssa = $j$0;
  }
  $31 = ($j$1$lcssa|0)>($6|0);
  if ($31) {
   $j$2 = $6;$ni$1 = $27;
   break;
  } else {
   $j$0 = $j$1$lcssa;$ni$0 = $27;
  }
 }
 $32 = (+($j$2|0));
 $33 = $32 * $5;
 $34 = (($b_frq) + ($ni$1<<2)|0);
 HEAPF32[$34>>2] = $33;
 $35 = ((($gd)) + 2152|0);
 HEAP32[$35>>2] = $sbmax;
 $36 = ((($gd)) + 2148|0);
 HEAP32[$36>>2] = $ni$1;
 $37 = ($ni$1|0)>(0);
 if ($37) {
  $i$29 = 0;$j$38 = 0;
  while(1) {
   $39 = (((($gd)) + 1716|0) + ($i$29<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40|0) / 2)&-1;
   $42 = (($41) + ($j$38))|0;
   $43 = (+($42|0));
   $44 = $43 * $5;
   $45 = (+_freq2bark($44));
   $46 = $45;
   $47 = $45 < 15.5;
   $$op$op$i = $46 * 0.2026833970057931;
   $48 = $47 ? $$op$op$i : 3.1415926535897931;
   $49 = (+Math_cos((+$48)));
   $50 = 1.0 - $49;
   $51 = $50 * 1.25;
   $52 = $51 + -2.5;
   $53 = (+Math_pow(10.0,(+$52)));
   $54 = $53;
   $55 = (((($gd)) + 768|0) + ($i$29<<2)|0);
   HEAPF32[$55>>2] = $54;
   $56 = (($40) + ($j$38))|0;
   $57 = (($i$29) + 1)|0;
   $58 = HEAP32[$36>>2]|0;
   $59 = ($57|0)<($58|0);
   if ($59) {
    $i$29 = $57;$j$38 = $56;
   } else {
    $$lcssa = $57;
    break;
   }
  }
  $38 = ($$lcssa|0)<(64);
  if ($38) {
   $i$36 = $$lcssa;
   label = 13;
  }
 } else {
  $i$36 = 0;
  label = 13;
 }
 if ((label|0) == 13) {
  while(1) {
   label = 0;
   $62 = (((($gd)) + 768|0) + ($i$36<<2)|0);
   HEAPF32[$62>>2] = 1.0;
   $63 = (($i$36) + 1)|0;
   $exitcond17 = ($63|0)==(64);
   if ($exitcond17) {
    break;
   } else {
    $i$36 = $63;
    label = 13;
   }
  }
 }
 $60 = ($sbmax|0)>(0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $4;
 $sfb$05 = 0;
 while(1) {
  $64 = (($scalepos) + ($sfb$05<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($sfb$05) + 1)|0;
  $67 = (($scalepos) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (+($65|0));
  $70 = $69 + -0.5;
  $71 = $70 * $61;
  $72 = $71 + 0.5;
  $73 = (+Math_floor((+$72)));
  $74 = (~~(($73)));
  $75 = ($74|0)<(0);
  $$ = $75 ? 0 : $74;
  $76 = (+($68|0));
  $77 = $76 + -0.5;
  $78 = $77 * $61;
  $79 = $78 + 0.5;
  $80 = (+Math_floor((+$79)));
  $81 = (~~(($80)));
  $82 = ($81|0)>($6|0);
  $$2 = $82 ? $6 : $81;
  $83 = (($partition) + ($$2<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($partition) + ($$<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + ($84))|0;
  $88 = (($87|0) / 2)&-1;
  $89 = (((($gd)) + 1972|0) + ($sfb$05<<2)|0);
  HEAP32[$89>>2] = $88;
  $90 = (((($gd)) + 2060|0) + ($sfb$05<<2)|0);
  HEAP32[$90>>2] = $84;
  $91 = (+($68|0));
  $92 = $91 * $2;
  $93 = (($b_frq) + ($84<<2)|0);
  $94 = +HEAPF32[$93>>2];
  $95 = $92 - $94;
  $96 = (($84) + 1)|0;
  $97 = (($b_frq) + ($96<<2)|0);
  $98 = +HEAPF32[$97>>2];
  $99 = $98 - $94;
  $100 = $95 / $99;
  $101 = $100 < 0.0;
  if ($101) {
   $bo_w$0 = 0.0;
  } else {
   $102 = $100 > 1.0;
   if ($102) {
    $bo_w$0 = 1.0;
   } else {
    $bo_w$0 = $100;
   }
  }
  $103 = (((($gd)) + 1112|0) + ($sfb$05<<2)|0);
  HEAPF32[$103>>2] = $bo_w$0;
  $104 = (+($65|0));
  $105 = $104 * $2;
  $106 = (+_freq2bark($105));
  $107 = $106;
  $108 = $106 < 15.5;
  $$op$op$i3 = $107 * 0.2026833970057931;
  $109 = $108 ? $$op$op$i3 : 3.1415926535897931;
  $110 = (+Math_cos((+$109)));
  $111 = 1.0 - $110;
  $112 = $111 * 1.25;
  $113 = $112 + -2.5;
  $114 = (+Math_pow(10.0,(+$113)));
  $115 = $114;
  $116 = (((($gd)) + 1024|0) + ($sfb$05<<2)|0);
  HEAPF32[$116>>2] = $115;
  $exitcond = ($66|0)==($sbmax|0);
  if ($exitcond) {
   break;
  } else {
   $sfb$05 = $66;
  }
 }
 STACKTOP = sp;return;
}
function _init_s3_values($p,$s3ind,$npart,$bval,$bval_width,$norm) {
 $p = $p|0;
 $s3ind = $s3ind|0;
 $npart = $npart|0;
 $bval = $bval|0;
 $bval_width = $bval_width|0;
 $norm = $norm|0;
 var $$0 = 0, $$0$i = 0.0, $$lcssa = 0, $$mux = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0;
 var $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0;
 var $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0;
 var $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $8 = 0, $9 = 0.0, $brmerge = 0, $exitcond = 0, $exitcond34 = 0, $exitcond35 = 0, $exitcond36 = 0, $i$024 = 0, $i$117 = 0, $i$27 = 0, $j$021 = 0, $j$111 = 0, $j$2 = 0, $j$2$in = 0, $j$2$in$lcssa = 0, $j$2$lcssa = 0, $k$09 = 0, $k$1$lcssa = 0, $numberOfNoneZero$0$lcssa = 0;
 var $numberOfNoneZero$018 = 0, $or$cond$i = 0, $phitmp = 0, $s3 = 0, $scevgep = 0, $scevgep31 = 0, $tempx$0$i = 0.0, $tempx$0$v$i = 0.0, $x$0$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16384|0;
 $s3 = sp;
 _memset(($s3|0),0,16384)|0;
 $0 = ($npart|0)>(0);
 if ($0) {
  $i$024 = 0;
  while(1) {
   $1 = (($bval) + ($i$024<<2)|0);
   $2 = +HEAPF32[$1>>2];
   $3 = (($norm) + ($i$024<<2)|0);
   $4 = +HEAPF32[$3>>2];
   $j$021 = 0;
   while(1) {
    $5 = (($bval) + ($j$021<<2)|0);
    $6 = +HEAPF32[$5>>2];
    $7 = $2 - $6;
    $8 = !($7 >= 0.0);
    $tempx$0$v$i = $8 ? 1.5 : 3.0;
    $tempx$0$i = $7 * $tempx$0$v$i;
    $9 = $tempx$0$i;
    $10 = !($tempx$0$i >= 0.5);
    $11 = !($tempx$0$i <= 2.5);
    $or$cond$i = $10 | $11;
    if ($or$cond$i) {
     $x$0$i = 0.0;
    } else {
     $12 = $tempx$0$i + -0.5;
     $13 = $12 * $12;
     $14 = $13;
     $15 = $12;
     $16 = $15 * 2.0;
     $17 = $14 - $16;
     $18 = $17 * 8.0;
     $19 = $18;
     $x$0$i = $19;
    }
    $20 = $9 + 0.47399999999999998;
    $21 = $20;
    $22 = $21;
    $23 = $22 * 7.5;
    $24 = $23 + 15.811389;
    $25 = $21 * $21;
    $26 = $25;
    $27 = $26 + 1.0;
    $28 = (+Math_sqrt((+$27)));
    $29 = $28 * 17.5;
    $30 = $24 - $29;
    $31 = $30;
    $32 = !($31 <= -60.0);
    if ($32) {
     $33 = $31 + $x$0$i;
     $34 = $33;
     $35 = $34 * 0.23025850929940458;
     $36 = (+Math_exp((+$35)));
     $37 = $36;
     $38 = $37;
     $39 = $38 * 1.5130440282194817;
     $40 = $39;
     $$0$i = $40;
    } else {
     $$0$i = 0.0;
    }
    $41 = (($bval_width) + ($j$021<<2)|0);
    $42 = +HEAPF32[$41>>2];
    $43 = $42 * $$0$i;
    $44 = $43 * $4;
    $45 = ((($s3) + ($i$024<<8)|0) + ($j$021<<2)|0);
    HEAPF32[$45>>2] = $44;
    $46 = (($j$021) + 1)|0;
    $exitcond35 = ($46|0)==($npart|0);
    if ($exitcond35) {
     break;
    } else {
     $j$021 = $46;
    }
   }
   $47 = (($i$024) + 1)|0;
   $exitcond36 = ($47|0)==($npart|0);
   if ($exitcond36) {
    break;
   } else {
    $i$024 = $47;
   }
  }
  if ($0) {
   $i$117 = 0;$numberOfNoneZero$018 = 0;
   while(1) {
    $j$111 = 0;
    while(1) {
     $48 = ((($s3) + ($i$117<<8)|0) + ($j$111<<2)|0);
     $49 = +HEAPF32[$48>>2];
     $50 = $49 > 0.0;
     if ($50) {
      $54 = $j$111;
      break;
     }
     $51 = (($j$111) + 1)|0;
     $52 = ($51|0)<($npart|0);
     if ($52) {
      $j$111 = $51;
     } else {
      $54 = $51;
      break;
     }
    }
    $53 = (($s3ind) + ($i$117<<3)|0);
    HEAP32[$53>>2] = $54;
    $j$2$in = $npart;
    while(1) {
     $j$2 = (($j$2$in) + -1)|0;
     $55 = ($j$2$in|0)>(1);
     if (!($55)) {
      $j$2$in$lcssa = $j$2$in;$j$2$lcssa = $j$2;
      break;
     }
     $56 = ((($s3) + ($i$117<<8)|0) + ($j$2<<2)|0);
     $57 = +HEAPF32[$56>>2];
     $58 = $57 > 0.0;
     if ($58) {
      $j$2$in$lcssa = $j$2$in;$j$2$lcssa = $j$2;
      break;
     } else {
      $j$2$in = $j$2;
     }
    }
    $59 = (((($s3ind) + ($i$117<<3)|0)) + 4|0);
    HEAP32[$59>>2] = $j$2$lcssa;
    $60 = (($numberOfNoneZero$018) + ($j$2$in$lcssa))|0;
    $61 = (($60) - ($54))|0;
    $62 = (($i$117) + 1)|0;
    $exitcond34 = ($62|0)==($npart|0);
    if ($exitcond34) {
     $$lcssa = $61;
     break;
    } else {
     $i$117 = $62;$numberOfNoneZero$018 = $61;
    }
   }
   $phitmp = $$lcssa << 2;
   $numberOfNoneZero$0$lcssa = $phitmp;
  } else {
   $numberOfNoneZero$0$lcssa = 0;
  }
 } else {
  $numberOfNoneZero$0$lcssa = 0;
 }
 $63 = (_malloc($numberOfNoneZero$0$lcssa)|0);
 HEAP32[$p>>2] = $63;
 $64 = ($63|0)==(0|0);
 $$not = $0 ^ 1;
 $brmerge = $64 | $$not;
 $$mux = $64 << 31 >> 31;
 if ($brmerge) {
  $$0 = $$mux;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$27 = 0;$k$09 = 0;
 }
 while(1) {
  $65 = (($s3ind) + ($i$27<<3)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (((($s3ind) + ($i$27<<3)|0)) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($66|0)>($68|0);
  if ($69) {
   $k$1$lcssa = $k$09;
  } else {
   $70 = HEAP32[$p>>2]|0;
   $71 = (($k$09) + 1)|0;
   $72 = (($71) + ($68))|0;
   $scevgep = (($70) + ($k$09<<2)|0);
   $scevgep31 = ((($s3) + ($i$27<<8)|0) + ($66<<2)|0);
   $73 = (($68) + 1)|0;
   $74 = (($73) - ($66))|0;
   $75 = $74 << 2;
   _memcpy(($scevgep|0),($scevgep31|0),($75|0))|0;
   $76 = (($72) - ($66))|0;
   $k$1$lcssa = $76;
  }
  $77 = (($i$27) + 1)|0;
  $exitcond = ($77|0)==($npart|0);
  if ($exitcond) {
   $$0 = 0;
   break;
  } else {
   $i$27 = $77;$k$09 = $k$1$lcssa;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _init_xrpow_core_init($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $init_xrpow_core_c$init_xrpow_core_sse = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 85824|0);
 $1 = ((($gfc)) + 85756|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 $init_xrpow_core_c$init_xrpow_core_sse = $4 ? 6 : 5;
 HEAP32[$0>>2] = $init_xrpow_core_c$init_xrpow_core_sse;
 return;
}
function _VBR_old_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 var $$$i = 0, $$$i6 = 0.0, $$0$i1 = 0, $$01$i = 0, $$1$i = 0, $$12$i = 0, $$lcssa = 0, $$lcssa63 = 0, $$lobit$i = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre$pre$pre = 0, $$pre29$i = 0, $$pre29$i$lcssa = 0, $$pre34 = 0, $$pre35 = 0, $$pre38 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0;
 var $208 = 0.0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0;
 var $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0;
 var $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $analog_silence$0$lcssa34$i = 0, $analog_silence$023$i = 0, $analog_silence$1$$i = 0, $analog_silence$1$lcssa$i = 0, $analog_silence$1$lcssa$i$lcssa = 0, $analog_silence$115$i = 0, $bits$024$i = 0, $bits$1$lcssa$i = 0, $bits$1$lcssa$i$lcssa = 0;
 var $bits$116$i = 0, $bst_cod_info$i = 0, $bst_xrpow$i = 0, $ch$014$i = 0, $ch$022 = 0, $ch$07$i = 0, $ch$115 = 0, $ch$16$i = 0, $ch$16$us$us$i = 0, $dbits$0$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i = 0, $found$0$i = 0, $found$1$i = 0, $found$1$i$lcssa = 0, $frameBits = 0, $gr$0 = 0, $gr$010$i = 0, $gr$020$i = 0;
 var $gr$116 = 0, $gr$17$i = 0, $gr$17$us$i = 0, $i$01$i = 0, $i$01$i$i = 0, $i$01$i2$i = 0, $indvars$iv$i = 0, $indvars$iv13$i = 0, $l3_xmin = 0, $masking_lower_db$0$i = 0.0, $max_bits = 0, $mean_bits = 0, $min_bits = 0, $pxmin$0$lcssa$i = 0, $pxmin$02$i = 0, $pxmin$14$i = 0, $scevgep$i = 0, $scevgep14$i = 0, $scevgep15$i = 0, $sfb$01$i = 0;
 var $sfb$13$i = 0, $smax$i = 0, $storemerge = 0, $this_bits$0$i = 0, $this_bits$1$i = 0, $used_bits$0 = 0, $used_bits$1$lcssa = 0, $used_bits$124 = 0, $used_bits$2 = 0, $used_bits$2$lcssa = 0, $xrpow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10592|0;
 $bst_cod_info$i = sp + 5336|0;
 $bst_xrpow$i = sp + 3032|0;
 $l3_xmin = sp + 2408|0;
 $xrpow = sp + 104|0;
 $frameBits = sp + 40|0;
 $min_bits = sp + 24|0;
 $max_bits = sp + 8|0;
 $mean_bits = sp;
 $0 = ((($gfc)) + 116|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($gfc)) + 84744|0);
 HEAP32[$2>>2] = $1;
 $3 = (_ResvFrameBegin($gfc,$bst_xrpow$i)|0);
 $4 = ((($gfc)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3|0) / ($5|0))&-1;
 HEAP32[$bst_xrpow$i>>2] = $6;
 $7 = ((($gfc)) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$2>>2] = $8;
 HEAP32[$2>>2] = 1;
 $9 = (_getframebits($gfc)|0);
 HEAP32[$bst_cod_info$i>>2] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)<(1);
 if (!($11)) {
  $i$01$i$i = 1;
  while(1) {
   HEAP32[$2>>2] = $i$01$i$i;
   $12 = (_ResvFrameBegin($gfc,$bst_cod_info$i)|0);
   $13 = (($frameBits) + ($i$01$i$i<<2)|0);
   HEAP32[$13>>2] = $12;
   $14 = (($i$01$i$i) + 1)|0;
   $15 = HEAP32[$0>>2]|0;
   $16 = ($i$01$i$i|0)<($15|0);
   if ($16) {
    $i$01$i$i = $14;
   } else {
    break;
   }
  }
 }
 $17 = HEAP32[$4>>2]|0;
 $18 = ($17|0)>(0);
 L5: do {
  if ($18) {
   $19 = ((($gfc)) + 84756|0);
   $20 = ((($gfc)) + 72|0);
   $21 = ((($gfc)) + 84916|0);
   $22 = ((($gfc)) + 84908|0);
   $23 = ((($gfc)) + 84912|0);
   $analog_silence$023$i = 1;$bits$024$i = 0;$gr$020$i = 0;
   while(1) {
    $43 = (($max_bits) + ($gr$020$i<<3)|0);
    $44 = HEAP32[$bst_xrpow$i>>2]|0;
    $45 = (_on_pe($gfc,$pe,$43,$44,$gr$020$i,0)|0);
    $46 = HEAP32[$19>>2]|0;
    $47 = ($46|0)==(2);
    if ($47) {
     $i$01$i2$i = 0;
     while(1) {
      $48 = ((((($gfc)) + 304|0) + (($gr$020$i*10504)|0)|0) + ($i$01$i2$i<<2)|0);
      $49 = +HEAPF32[$48>>2];
      $50 = ((((((($gfc)) + 304|0) + (($gr$020$i*10504)|0)|0)) + 5252|0) + ($i$01$i2$i<<2)|0);
      $51 = +HEAPF32[$50>>2];
      $52 = $51 + $49;
      $53 = $52 * 0.70710676908493042;
      HEAPF32[$48>>2] = $53;
      $54 = $49 - $51;
      $55 = $54 * 0.70710676908493042;
      HEAPF32[$50>>2] = $55;
      $56 = (($i$01$i2$i) + 1)|0;
      $exitcond$i$i = ($56|0)==(576);
      if ($exitcond$i$i) {
       break;
      } else {
       $i$01$i2$i = $56;
      }
     }
     $57 = (($ms_ener_ratio) + ($gr$020$i<<2)|0);
     $58 = +HEAPF32[$57>>2];
     $59 = HEAP32[$bst_xrpow$i>>2]|0;
     _reduce_side($43,$58,$59,$45);
    }
    $60 = HEAP32[$20>>2]|0;
    $61 = ($60|0)>(0);
    if ($61) {
     $analog_silence$115$i = $analog_silence$023$i;$bits$116$i = $bits$024$i;$ch$014$i = 0;
     while(1) {
      $62 = ((((($gfc)) + 304|0) + (($gr$020$i*10504)|0)|0) + (($ch$014$i*5252)|0)|0);
      $63 = ((((((($gfc)) + 304|0) + (($gr$020$i*10504)|0)|0) + (($ch$014$i*5252)|0)|0)) + 4788|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(2);
      $66 = ((($pe) + ($gr$020$i<<3)|0) + ($ch$014$i<<2)|0);
      $67 = +HEAPF32[$66>>2];
      $68 = $67;
      $69 = $68 * 0.0033333333333333335;
      $70 = 3.5 - $69;
      $71 = (+Math_exp((+$70)));
      $72 = $71 + 1.0;
      if ($65) {
       $78 = 2.5600000000000001 / $72;
       $79 = $78 + -0.14000000000000001;
       $80 = $79;
       $81 = +HEAPF32[$21>>2];
       $82 = $81 - $80;
       $masking_lower_db$0$i = $82;
      } else {
       $73 = 1.28 / $72;
       $74 = $73 + -0.050000000000000003;
       $75 = $74;
       $76 = +HEAPF32[$23>>2];
       $77 = $76 - $75;
       $masking_lower_db$0$i = $77;
      }
      $83 = $masking_lower_db$0$i;
      $84 = $83 * 0.10000000000000001;
      $85 = (+Math_pow(10.0,(+$84)));
      $86 = $85;
      HEAPF32[$22>>2] = $86;
      _init_outer_loop($gfc,$62);
      $87 = ((($ratio) + (($gr$020$i*976)|0)|0) + (($ch$014$i*488)|0)|0);
      $88 = ((($l3_xmin) + (($gr$020$i*312)|0)|0) + (($ch$014$i*156)|0)|0);
      $89 = (_calc_xmin($gfc,$87,$62,$88)|0);
      $90 = ($89|0)==(0);
      $analog_silence$1$$i = $90 ? $analog_silence$115$i : 0;
      $91 = ((($min_bits) + ($gr$020$i<<3)|0) + ($ch$014$i<<2)|0);
      HEAP32[$91>>2] = 126;
      $92 = ((($max_bits) + ($gr$020$i<<3)|0) + ($ch$014$i<<2)|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($93) + ($bits$116$i))|0;
      $95 = (($ch$014$i) + 1)|0;
      $96 = HEAP32[$20>>2]|0;
      $97 = ($95|0)<($96|0);
      if ($97) {
       $analog_silence$115$i = $analog_silence$1$$i;$bits$116$i = $94;$ch$014$i = $95;
      } else {
       $$pre29$i = $96;$analog_silence$1$lcssa$i = $analog_silence$1$$i;$bits$1$lcssa$i = $94;
       break;
      }
     }
    } else {
     $$pre29$i = $60;$analog_silence$1$lcssa$i = $analog_silence$023$i;$bits$1$lcssa$i = $bits$024$i;
    }
    $98 = (($gr$020$i) + 1)|0;
    $99 = HEAP32[$4>>2]|0;
    $100 = ($98|0)<($99|0);
    if ($100) {
     $analog_silence$023$i = $analog_silence$1$lcssa$i;$bits$024$i = $bits$1$lcssa$i;$gr$020$i = $98;
    } else {
     $$lcssa63 = $99;$$pre29$i$lcssa = $$pre29$i;$analog_silence$1$lcssa$i$lcssa = $analog_silence$1$lcssa$i;$bits$1$lcssa$i$lcssa = $bits$1$lcssa$i;
     break;
    }
   }
   $24 = ($$lcssa63|0)>(0);
   if ($24) {
    $25 = ($bits$1$lcssa$i$lcssa|0)>(0);
    if (!($25)) {
     $101 = $$pre29$i$lcssa;$267 = $$pre29$i$lcssa;$gr$17$i = 0;
     while(1) {
      $102 = ($101|0)>(0);
      if ($102) {
       $268 = $267;$ch$16$i = 0;
       while(1) {
        $103 = ((($min_bits) + ($gr$17$i<<3)|0) + ($ch$16$i<<2)|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = ((($max_bits) + ($gr$17$i<<3)|0) + ($ch$16$i<<2)|0);
        $106 = HEAP32[$105>>2]|0;
        $107 = ($104|0)>($106|0);
        if ($107) {
         HEAP32[$103>>2] = $106;
         $110 = $$pre29$i$lcssa;
        } else {
         $110 = $268;
        }
        $108 = (($ch$16$i) + 1)|0;
        $109 = ($108|0)<($110|0);
        if ($109) {
         $268 = $110;$ch$16$i = $108;
        } else {
         $269 = $110;$270 = $110;
         break;
        }
       }
      } else {
       $269 = $267;$270 = $101;
      }
      $111 = (($gr$17$i) + 1)|0;
      $112 = ($111|0)<($$lcssa63|0);
      if ($112) {
       $101 = $270;$267 = $269;$gr$17$i = $111;
      } else {
       $$pre$phiZ2D = $20;$266 = $$lcssa63;$analog_silence$0$lcssa34$i = $analog_silence$1$lcssa$i$lcssa;
       break L5;
      }
     }
    }
    $26 = ($$pre29$i$lcssa|0)>(0);
    $gr$17$us$i = 0;
    while(1) {
     if ($26) {
      $27 = HEAP32[$0>>2]|0;
      $28 = (($frameBits) + ($27<<2)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($bits$1$lcssa$i$lcssa|0)>($29|0);
      $ch$16$us$us$i = 0;
      while(1) {
       $33 = ((($max_bits) + ($gr$17$us$i<<3)|0) + ($ch$16$us$us$i<<2)|0);
       $34 = HEAP32[$33>>2]|0;
       if ($30) {
        $35 = Math_imul($34, $29)|0;
        $36 = (($35|0) / ($bits$1$lcssa$i$lcssa|0))&-1;
        HEAP32[$33>>2] = $36;
        $40 = $36;
       } else {
        $40 = $34;
       }
       $37 = ((($min_bits) + ($gr$17$us$i<<3)|0) + ($ch$16$us$us$i<<2)|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)>($40|0);
       if ($39) {
        HEAP32[$37>>2] = $40;
       }
       $41 = (($ch$16$us$us$i) + 1)|0;
       $42 = ($41|0)<($$pre29$i$lcssa|0);
       if ($42) {
        $ch$16$us$us$i = $41;
       } else {
        break;
       }
      }
     }
     $31 = (($gr$17$us$i) + 1)|0;
     $32 = ($31|0)<($$lcssa63|0);
     if ($32) {
      $gr$17$us$i = $31;
     } else {
      $$pre$phiZ2D = $20;$266 = $$lcssa63;$analog_silence$0$lcssa34$i = $analog_silence$1$lcssa$i$lcssa;
      break;
     }
    }
   } else {
    $$pre$phiZ2D = $20;$266 = $$lcssa63;$analog_silence$0$lcssa34$i = $analog_silence$1$lcssa$i$lcssa;
   }
  } else {
   $$pre38 = ((($gfc)) + 72|0);
   $$pre$phiZ2D = $$pre38;$266 = $17;$analog_silence$0$lcssa34$i = 1;
  }
 } while(0);
 $113 = ($analog_silence$0$lcssa34$i|0)==(0);
 $114 = ((($gfc)) + 124|0);
 $115 = ((($gfc)) + 85824|0);
 $116 = ((($gfc)) + 85096|0);
 $117 = ((($gfc)) + 85092|0);
 $118 = ((($bst_cod_info$i)) + 2304|0);
 $120 = $266;$gr$0 = 0;$used_bits$0 = 0;
 L50: while(1) {
  $119 = ($gr$0|0)<($120|0);
  if (!($119)) {
   if ($113) {
    label = 55;
   } else {
    $182 = HEAP32[$114>>2]|0;
    $183 = ($182|0)==(0);
    if ($183) {
     $storemerge = 1;
    } else {
     label = 55;
    }
   }
   if ((label|0) == 55) {
    label = 0;
    $184 = HEAP32[$7>>2]|0;
    $storemerge = $184;
   }
   HEAP32[$2>>2] = $storemerge;
   $185 = HEAP32[$0>>2]|0;
   $186 = ($storemerge|0)<($185|0);
   L59: do {
    if ($186) {
     $188 = $storemerge;
     while(1) {
      $187 = (($frameBits) + ($188<<2)|0);
      $189 = HEAP32[$187>>2]|0;
      $190 = ($used_bits$0|0)>($189|0);
      if (!($190)) {
       break L59;
      }
      $191 = (($188) + 1)|0;
      HEAP32[$2>>2] = $191;
      $192 = ($191|0)<($185|0);
      if ($192) {
       $188 = $191;
      } else {
       break;
      }
     }
    }
   } while(0);
   $193 = (_ResvFrameBegin($gfc,$mean_bits)|0);
   $194 = ($used_bits$0|0)>($193|0);
   $195 = HEAP32[$4>>2]|0;
   $196 = ($195|0)>(0);
   if (!($194)) {
    break;
   }
   if (!($196)) {
    $120 = $195;$gr$0 = 0;$used_bits$0 = 0;
    continue;
   }
   $$pre$i = HEAP32[$$pre$phiZ2D>>2]|0;
   $199 = ($$pre$i|0)>(0);
   $gr$010$i = 0;$indvars$iv$i = $l3_xmin;
   while(1) {
    if ($199) {
     $ch$07$i = 0;$indvars$iv13$i = $indvars$iv$i;
     while(1) {
      $200 = ((($l3_xmin) + (($gr$010$i*312)|0)|0) + (($ch$07$i*156)|0)|0);
      $201 = ((((((($gfc)) + 304|0) + (($gr$010$i*10504)|0)|0) + (($ch$07$i*5252)|0)|0)) + 4856|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)>(0);
      if ($203) {
       $204 = ($202|0)>(1);
       $pxmin$02$i = $200;$sfb$01$i = 0;
       while(1) {
        $205 = (+($sfb$01$i|0));
        $206 = $205 * $205;
        $207 = $206 * 5.9917355371900827E-5;
        $208 = $207 + 1.0;
        $209 = ((($pxmin$02$i)) + 4|0);
        $210 = +HEAPF32[$pxmin$02$i>>2];
        $211 = $210;
        $212 = $208 * $211;
        $213 = $212;
        HEAPF32[$pxmin$02$i>>2] = $213;
        $214 = (($sfb$01$i) + 1)|0;
        $exitcond = ($214|0)==($202|0);
        if ($exitcond) {
         break;
        } else {
         $pxmin$02$i = $209;$sfb$01$i = $214;
        }
       }
       $smax$i = $204 ? $202 : 1;
       $scevgep15$i = (($indvars$iv13$i) + ($smax$i<<2)|0);
       $pxmin$0$lcssa$i = $scevgep15$i;
      } else {
       $pxmin$0$lcssa$i = $200;
      }
      $215 = ((((((($gfc)) + 304|0) + (($gr$010$i*10504)|0)|0) + (($ch$07$i*5252)|0)|0)) + 4788|0);
      $216 = HEAP32[$215>>2]|0;
      $217 = ($216|0)==(2);
      if ($217) {
       $218 = ((((((($gfc)) + 304|0) + (($gr$010$i*10504)|0)|0) + (($ch$07$i*5252)|0)|0)) + 4852|0);
       $219 = HEAP32[$218>>2]|0;
       $220 = ($219|0)<(13);
       if ($220) {
        $pxmin$14$i = $pxmin$0$lcssa$i;$sfb$13$i = $219;
        while(1) {
         $221 = (+($sfb$13$i|0));
         $222 = $221 * $221;
         $223 = $222 * 1.7159763313609469E-4;
         $224 = $223 + 1.0;
         $225 = ((($pxmin$14$i)) + 4|0);
         $226 = +HEAPF32[$pxmin$14$i>>2];
         $227 = $226;
         $228 = $224 * $227;
         $229 = $228;
         HEAPF32[$pxmin$14$i>>2] = $229;
         $230 = ((($pxmin$14$i)) + 8|0);
         $231 = +HEAPF32[$225>>2];
         $232 = $231;
         $233 = $224 * $232;
         $234 = $233;
         HEAPF32[$225>>2] = $234;
         $235 = ((($pxmin$14$i)) + 12|0);
         $236 = +HEAPF32[$230>>2];
         $237 = $236;
         $238 = $237 * $224;
         $239 = $238;
         HEAPF32[$230>>2] = $239;
         $240 = (($sfb$13$i) + 1)|0;
         $exitcond$i = ($240|0)==(13);
         if ($exitcond$i) {
          break;
         } else {
          $pxmin$14$i = $235;$sfb$13$i = $240;
         }
        }
       }
      }
      $241 = ((($min_bits) + ($gr$010$i<<3)|0) + ($ch$07$i<<2)|0);
      $242 = HEAP32[$241>>2]|0;
      $243 = (+($242|0));
      $244 = ((($max_bits) + ($gr$010$i<<3)|0) + ($ch$07$i<<2)|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = (+($245|0));
      $247 = $246 * 0.90000000000000002;
      $248 = $243 > $247;
      $$$i6 = $248 ? $243 : $247;
      $249 = (~~(($$$i6)));
      HEAP32[$244>>2] = $249;
      $250 = (($ch$07$i) + 1)|0;
      $251 = ($250|0)<($$pre$i|0);
      $scevgep14$i = ((($indvars$iv13$i)) + 156|0);
      if ($251) {
       $ch$07$i = $250;$indvars$iv13$i = $scevgep14$i;
      } else {
       break;
      }
     }
    }
    $252 = (($gr$010$i) + 1)|0;
    $253 = ($252|0)<($195|0);
    $scevgep$i = ((($indvars$iv$i)) + 312|0);
    if ($253) {
     $gr$010$i = $252;$indvars$iv$i = $scevgep$i;
    } else {
     $120 = $195;$gr$0 = 0;$used_bits$0 = 0;
     continue L50;
    }
   }
  }
  $121 = HEAP32[$$pre$phiZ2D>>2]|0;
  $122 = ($121|0)>(0);
  if ($122) {
   $ch$022 = 0;$used_bits$124 = $used_bits$0;
   while(1) {
    $123 = ((((($gfc)) + 304|0) + (($gr$0*10504)|0)|0) + (($ch$022*5252)|0)|0);
    HEAPF32[$bst_cod_info$i>>2] = 0.0;
    $124 = ((((((($gfc)) + 304|0) + (($gr$0*10504)|0)|0) + (($ch$022*5252)|0)|0)) + 5208|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ((((((($gfc)) + 304|0) + (($gr$0*10504)|0)|0) + (($ch$022*5252)|0)|0)) + 4764|0);
    HEAPF32[$126>>2] = 0.0;
    $127 = (($xrpow) + ($125<<2)|0);
    $128 = (576 - ($125))|0;
    $129 = $128 << 2;
    _memset(($127|0),0,($129|0))|0;
    $130 = HEAP32[$115>>2]|0;
    FUNCTION_TABLE_viiii[$130 & 7]($123,$xrpow,$125,$bst_cod_info$i);
    $131 = +HEAPF32[$bst_cod_info$i>>2];
    $132 = $131 > 9.9999996826552254E-21;
    if ($132) {
     $133 = HEAP32[$116>>2]|0;
     $134 = $133 >>> 1;
     $$lobit$i = $134 & 1;
     $135 = ((((((($gfc)) + 304|0) + (($gr$0*10504)|0)|0) + (($ch$022*5252)|0)|0)) + 4864|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)>(0);
     if ($137) {
      $i$01$i = 0;
      while(1) {
       $138 = (((($gfc)) + 84936|0) + ($i$01$i<<2)|0);
       HEAP32[$138>>2] = $$lobit$i;
       $139 = (($i$01$i) + 1)|0;
       $140 = HEAP32[$135>>2]|0;
       $141 = ($139|0)<($140|0);
       if ($141) {
        $i$01$i = $139;
       } else {
        break;
       }
      }
     }
     $143 = ((($max_bits) + ($gr$0<<3)|0) + ($ch$022<<2)|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($144|0)==(0);
     if ($145) {
      $used_bits$2 = $used_bits$124;
     } else {
      $146 = ((($l3_xmin) + (($gr$0*312)|0)|0) + (($ch$022*156)|0)|0);
      $147 = ((($min_bits) + ($gr$0<<3)|0) + ($ch$022<<2)|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (($148) + ($144))|0;
      $150 = (($149|0) / 2)&-1;
      $151 = HEAP32[$117>>2]|0;
      _memset(($118|0),0,2304)|0;
      $152 = (($144) + -42)|0;
      $153 = ((((((($gfc)) + 304|0) + (($gr$0*10504)|0)|0) + (($ch$022*5252)|0)|0)) + 4768|0);
      $$0$i1 = $148;$$01$i = $144;$found$0$i = 0;$this_bits$0$i = $150;
      while(1) {
       $154 = ($this_bits$0$i|0)>($152|0);
       $$$i = $154 ? 0 : $151;
       HEAP32[$117>>2] = $$$i;
       $155 = (_outer_loop($gfc,$123,$146,$xrpow,$ch$022,$this_bits$0$i)|0);
       $156 = ($155|0)<(1);
       if ($156) {
        $157 = HEAP32[$153>>2]|0;
        _memcpy(($bst_cod_info$i|0),($123|0),5252)|0;
        _memcpy(($bst_xrpow$i|0),($xrpow|0),2304)|0;
        $158 = (($157) + -32)|0;
        $159 = (($158) - ($$0$i1))|0;
        $160 = (($158) + ($$0$i1))|0;
        $161 = (($160|0) / 2)&-1;
        $$1$i = $$0$i1;$$12$i = $158;$dbits$0$i = $159;$found$1$i = 1;$this_bits$1$i = $161;
       } else {
        $162 = (($this_bits$0$i) + 32)|0;
        $163 = (($$01$i) - ($162))|0;
        $164 = (($$01$i) + ($162))|0;
        $165 = (($164|0) / 2)&-1;
        $166 = ($found$0$i|0)==(0);
        if ($166) {
         $$1$i = $162;$$12$i = $$01$i;$dbits$0$i = $163;$found$1$i = 0;$this_bits$1$i = $165;
        } else {
         _memcpy(($123|0),($bst_cod_info$i|0),5252)|0;
         _memcpy(($xrpow|0),($bst_xrpow$i|0),2304)|0;
         $$1$i = $162;$$12$i = $$01$i;$dbits$0$i = $163;$found$1$i = 2;$this_bits$1$i = $165;
        }
       }
       $167 = ($dbits$0$i|0)>(12);
       if ($167) {
        $$0$i1 = $$1$i;$$01$i = $$12$i;$found$0$i = $found$1$i;$this_bits$0$i = $this_bits$1$i;
       } else {
        $found$1$i$lcssa = $found$1$i;
        break;
       }
      }
      HEAP32[$117>>2] = $151;
      $168 = ($found$1$i$lcssa|0)==(2);
      if ($168) {
       $169 = ((((((($gfc)) + 304|0) + (($gr$0*10504)|0)|0) + (($ch$022*5252)|0)|0)) + 2304|0);
       _memcpy(($169|0),($118|0),2304)|0;
      }
      $170 = HEAP32[$116>>2]|0;
      $171 = $170 & 1;
      $172 = ($171|0)==(0);
      if (!($172)) {
       _trancate_smallspectrums($gfc,$123,$146,$xrpow);
      }
      $173 = HEAP32[$153>>2]|0;
      $174 = ((((((($gfc)) + 304|0) + (($gr$0*10504)|0)|0) + (($ch$022*5252)|0)|0)) + 4844|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = (($173) + ($used_bits$124))|0;
      $177 = (($176) + ($175))|0;
      $used_bits$2 = $177;
     }
    } else {
     $142 = ((((((($gfc)) + 304|0) + (($gr$0*10504)|0)|0) + (($ch$022*5252)|0)|0)) + 2304|0);
     _memset(($142|0),0,2304)|0;
     $used_bits$2 = $used_bits$124;
    }
    $178 = (($ch$022) + 1)|0;
    $179 = HEAP32[$$pre$phiZ2D>>2]|0;
    $180 = ($178|0)<($179|0);
    if ($180) {
     $ch$022 = $178;$used_bits$124 = $used_bits$2;
    } else {
     $used_bits$2$lcssa = $used_bits$2;
     break;
    }
   }
   $$pre$pre$pre = HEAP32[$4>>2]|0;
   $$pre$pre = $$pre$pre$pre;$used_bits$1$lcssa = $used_bits$2$lcssa;
  } else {
   $$pre$pre = $120;$used_bits$1$lcssa = $used_bits$0;
  }
  $181 = (($gr$0) + 1)|0;
  $120 = $$pre$pre;$gr$0 = $181;$used_bits$0 = $used_bits$1$lcssa;
 }
 if (!($196)) {
  $265 = HEAP32[$mean_bits>>2]|0;
  _ResvFrameEnd($gfc,$265);
  STACKTOP = sp;return;
 }
 $197 = ((($gfc)) + 304|0);
 $198 = ((($gfc)) + 36|0);
 $$pre34 = HEAP32[$$pre$phiZ2D>>2]|0;
 $254 = $$pre34;$271 = $195;$gr$116 = 0;
 while(1) {
  $255 = ($254|0)>(0);
  if ($255) {
   $ch$115 = 0;
   while(1) {
    $256 = ((((($gfc)) + 304|0) + (($gr$116*10504)|0)|0) + (($ch$115*5252)|0)|0);
    _best_scalefac_store($gfc,$gr$116,$ch$115,$197);
    $257 = HEAP32[$198>>2]|0;
    $258 = ($257|0)==(1);
    if ($258) {
     _best_huffman_divide($gfc,$256);
    }
    _ResvAdjust($gfc,$256);
    $259 = (($ch$115) + 1)|0;
    $260 = HEAP32[$$pre$phiZ2D>>2]|0;
    $261 = ($259|0)<($260|0);
    if ($261) {
     $ch$115 = $259;
    } else {
     $$lcssa = $260;
     break;
    }
   }
   $$pre35 = HEAP32[$4>>2]|0;
   $264 = $$pre35;$272 = $$lcssa;
  } else {
   $264 = $271;$272 = $254;
  }
  $262 = (($gr$116) + 1)|0;
  $263 = ($262|0)<($264|0);
  if ($263) {
   $254 = $272;$271 = $264;$gr$116 = $262;
  } else {
   break;
  }
 }
 $265 = HEAP32[$mean_bits>>2]|0;
 _ResvFrameEnd($gfc,$265);
 STACKTOP = sp;return;
}
function _VBR_new_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 var $$i$0 = 0, $$lcssa = 0, $$lcssa65 = 0, $$lcssa69 = 0, $$lobit$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$lcssa = 0, $$pre44 = 0, $$pre45 = 0, $$pre46 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0;
 var $98 = 0, $99 = 0, $analog_silence$0$lcssa2526$i = 0, $analog_silence$0$lcssa2527$i = 0, $analog_silence$014$i = 0, $analog_silence$1$$i = 0, $analog_silence$1$lcssa$i = 0, $analog_silence$1$lcssa$i$lcssa = 0, $analog_silence$110$i = 0, $avg$i = 0, $bits$015$i = 0, $bits$1$lcssa$i = 0, $bits$1$lcssa$i$lcssa = 0, $bits$111$i = 0, $ch$026 = 0, $ch$09$i = 0, $ch$15$i = 0, $ch$19 = 0, $exitcond$i$i = 0, $frameBits = 0;
 var $gr$016$i = 0, $gr$029 = 0, $gr$110 = 0, $gr$16$i = 0, $i$0$lcssa = 0, $i$0$ph = 0, $i$01$i = 0, $i$01$i$i = 0, $i$01$i2$i = 0, $i$018 = 0, $j$0$lcssa = 0, $j$013 = 0, $l3_xmin = 0, $max_bits = 0, $maximum_framebits$0$i = 0, $mean_bits = 0, $or$cond$i = 0, $sum$i = 0, $vararg_buffer = 0, $xrpow = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 9936|0;
 $vararg_buffer = sp;
 $sum$i = sp + 9932|0;
 $avg$i = sp + 9928|0;
 $l3_xmin = sp + 9304|0;
 $xrpow = sp + 88|0;
 $frameBits = sp + 24|0;
 $max_bits = sp + 8|0;
 $mean_bits = sp + 4|0;
 _memset(($xrpow|0),0,9216)|0;
 $0 = ((($gfc)) + 152|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($gfc)) + 116|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($gfc)) + 84744|0);
  HEAP32[$5>>2] = $4;
  (_ResvFrameBegin($gfc,$avg$i)|0);
  $6 = ((($gfc)) + 52144|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($gfc)) + 112|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$5>>2] = $9;
  HEAP32[$5>>2] = 1;
  $10 = (_getframebits($gfc)|0);
  HEAP32[$sum$i>>2] = $10;
  $11 = HEAP32[$3>>2]|0;
  $12 = ($11|0)<(1);
  if ($12) {
   $19 = $11;
  } else {
   $i$01$i$i = 1;
   while(1) {
    HEAP32[$5>>2] = $i$01$i$i;
    $13 = (_ResvFrameBegin($gfc,$sum$i)|0);
    $14 = (($frameBits) + ($i$01$i$i<<2)|0);
    HEAP32[$14>>2] = $13;
    $15 = (($i$01$i$i) + 1)|0;
    $16 = HEAP32[$3>>2]|0;
    $17 = ($i$01$i$i|0)<($16|0);
    if ($17) {
     $i$01$i$i = $15;
    } else {
     $19 = $16;
     break;
    }
   }
  }
  $18 = (($frameBits) + ($19<<2)|0);
  $20 = HEAP32[$18>>2]|0;
  $163 = $7;$maximum_framebits$0$i = $20;
 } else {
  $21 = ((($gfc)) + 84744|0);
  HEAP32[$21>>2] = 0;
  $22 = (_ResvFrameBegin($gfc,$avg$i)|0);
  HEAP32[$frameBits>>2] = $22;
  $23 = ((($gfc)) + 52144|0);
  $24 = HEAP32[$23>>2]|0;
  $163 = $24;$maximum_framebits$0$i = $22;
 }
 $25 = ((($gfc)) + 76|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)>(0);
 if ($27) {
  $28 = ((($gfc)) + 84756|0);
  $29 = ((($gfc)) + 72|0);
  $30 = ((($gfc)) + 84912|0);
  $31 = ((($gfc)) + 84908|0);
  $analog_silence$014$i = 1;$bits$015$i = 0;$gr$016$i = 0;
  while(1) {
   $35 = (($max_bits) + ($gr$016$i<<3)|0);
   $36 = HEAP32[$avg$i>>2]|0;
   (_on_pe($gfc,$pe,$35,$36,$gr$016$i,0)|0);
   $37 = HEAP32[$28>>2]|0;
   $38 = ($37|0)==(2);
   if ($38) {
    $i$01$i2$i = 0;
    while(1) {
     $39 = ((((($gfc)) + 304|0) + (($gr$016$i*10504)|0)|0) + ($i$01$i2$i<<2)|0);
     $40 = +HEAPF32[$39>>2];
     $41 = ((((((($gfc)) + 304|0) + (($gr$016$i*10504)|0)|0)) + 5252|0) + ($i$01$i2$i<<2)|0);
     $42 = +HEAPF32[$41>>2];
     $43 = $42 + $40;
     $44 = $43 * 0.70710676908493042;
     HEAPF32[$39>>2] = $44;
     $45 = $40 - $42;
     $46 = $45 * 0.70710676908493042;
     HEAPF32[$41>>2] = $46;
     $47 = (($i$01$i2$i) + 1)|0;
     $exitcond$i$i = ($47|0)==(576);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i2$i = $47;
     }
    }
   }
   $48 = HEAP32[$29>>2]|0;
   $49 = ($48|0)>(0);
   if ($49) {
    $analog_silence$110$i = $analog_silence$014$i;$bits$111$i = $bits$015$i;$ch$09$i = 0;
    while(1) {
     $50 = ((((($gfc)) + 304|0) + (($gr$016$i*10504)|0)|0) + (($ch$09$i*5252)|0)|0);
     $51 = +HEAPF32[$30>>2];
     $52 = $51;
     $53 = $52 * 0.10000000000000001;
     $54 = (+Math_pow(10.0,(+$53)));
     $55 = $54;
     HEAPF32[$31>>2] = $55;
     _init_outer_loop($gfc,$50);
     $56 = ((($ratio) + (($gr$016$i*976)|0)|0) + (($ch$09$i*488)|0)|0);
     $57 = ((($l3_xmin) + (($gr$016$i*312)|0)|0) + (($ch$09$i*156)|0)|0);
     $58 = (_calc_xmin($gfc,$56,$50,$57)|0);
     $59 = ($58|0)==(0);
     $analog_silence$1$$i = $59 ? $analog_silence$110$i : 0;
     $60 = ((($max_bits) + ($gr$016$i<<3)|0) + ($ch$09$i<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($61) + ($bits$111$i))|0;
     $63 = (($ch$09$i) + 1)|0;
     $64 = HEAP32[$29>>2]|0;
     $65 = ($63|0)<($64|0);
     if ($65) {
      $analog_silence$110$i = $analog_silence$1$$i;$bits$111$i = $62;$ch$09$i = $63;
     } else {
      $$pre$i = $64;$analog_silence$1$lcssa$i = $analog_silence$1$$i;$bits$1$lcssa$i = $62;
      break;
     }
    }
   } else {
    $$pre$i = $48;$analog_silence$1$lcssa$i = $analog_silence$014$i;$bits$1$lcssa$i = $bits$015$i;
   }
   $66 = (($gr$016$i) + 1)|0;
   $67 = HEAP32[$25>>2]|0;
   $68 = ($66|0)<($67|0);
   if ($68) {
    $analog_silence$014$i = $analog_silence$1$lcssa$i;$bits$015$i = $bits$1$lcssa$i;$gr$016$i = $66;
   } else {
    $$lcssa69 = $67;$$pre$i$lcssa = $$pre$i;$analog_silence$1$lcssa$i$lcssa = $analog_silence$1$lcssa$i;$bits$1$lcssa$i$lcssa = $bits$1$lcssa$i;
    break;
   }
  }
  $32 = ($$lcssa69|0)>(0);
  if ($32) {
   $33 = ($bits$1$lcssa$i$lcssa|0)>($maximum_framebits$0$i|0);
   $34 = ($bits$1$lcssa$i$lcssa|0)>(0);
   $or$cond$i = $33 & $34;
   $69 = $$pre$i$lcssa;$gr$16$i = 0;
   while(1) {
    $70 = ($69|0)>(0);
    if ($70) {
     $165 = $69;$ch$15$i = 0;
     while(1) {
      if ($or$cond$i) {
       $71 = ((($max_bits) + ($gr$16$i<<3)|0) + ($ch$15$i<<2)|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = Math_imul($72, $maximum_framebits$0$i)|0;
       $74 = (($73|0) / ($bits$1$lcssa$i$lcssa|0))&-1;
       HEAP32[$71>>2] = $74;
       $77 = $$pre$i$lcssa;
      } else {
       $77 = $165;
      }
      $75 = (($ch$15$i) + 1)|0;
      $76 = ($75|0)<($77|0);
      if ($76) {
       $165 = $77;$ch$15$i = $75;
      } else {
       $166 = $77;
       break;
      }
     }
    } else {
     $166 = $69;
    }
    $78 = (($gr$16$i) + 1)|0;
    $79 = ($78|0)<($$lcssa69|0);
    if ($79) {
     $69 = $166;$gr$16$i = $78;
    } else {
     break;
    }
   }
  }
  $80 = ($analog_silence$1$lcssa$i$lcssa|0)==(0);
  if ($80) {
   $134 = $163;$81 = $$lcssa69;$analog_silence$0$lcssa2527$i = 0;
  } else {
   $164 = $$lcssa69;$analog_silence$0$lcssa2526$i = $analog_silence$1$lcssa$i$lcssa;
   label = 21;
  }
 } else {
  $164 = $26;$analog_silence$0$lcssa2526$i = 1;
  label = 21;
 }
 if ((label|0) == 21) {
  $134 = 0;$81 = $164;$analog_silence$0$lcssa2527$i = $analog_silence$0$lcssa2526$i;
 }
 $82 = ($81|0)>(0);
 if ($82) {
  $83 = ((($gfc)) + 72|0);
  $84 = ((($gfc)) + 85824|0);
  $85 = ((($gfc)) + 85096|0);
  $$pre = HEAP32[$83>>2]|0;
  $167 = $81;$86 = $$pre;$gr$029 = 0;
  while(1) {
   $87 = ($86|0)>(0);
   if ($87) {
    $ch$026 = 0;
    while(1) {
     $88 = ((((($gfc)) + 304|0) + (($gr$029*10504)|0)|0) + (($ch$026*5252)|0)|0);
     $89 = ((($xrpow) + (($gr$029*4608)|0)|0) + (($ch$026*2304)|0)|0);
     HEAPF32[$sum$i>>2] = 0.0;
     $90 = ((((((($gfc)) + 304|0) + (($gr$029*10504)|0)|0) + (($ch$026*5252)|0)|0)) + 5208|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ((((((($gfc)) + 304|0) + (($gr$029*10504)|0)|0) + (($ch$026*5252)|0)|0)) + 4764|0);
     HEAPF32[$92>>2] = 0.0;
     $93 = (((($xrpow) + (($gr$029*4608)|0)|0) + (($ch$026*2304)|0)|0) + ($91<<2)|0);
     $94 = (576 - ($91))|0;
     $95 = $94 << 2;
     _memset(($93|0),0,($95|0))|0;
     $96 = HEAP32[$84>>2]|0;
     FUNCTION_TABLE_viiii[$96 & 7]($88,$89,$91,$sum$i);
     $97 = +HEAPF32[$sum$i>>2];
     $98 = $97 > 9.9999996826552254E-21;
     if ($98) {
      $99 = HEAP32[$85>>2]|0;
      $100 = $99 >>> 1;
      $$lobit$i = $100 & 1;
      $101 = ((((((($gfc)) + 304|0) + (($gr$029*10504)|0)|0) + (($ch$026*5252)|0)|0)) + 4864|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($102|0)>(0);
      if ($103) {
       $i$01$i = 0;
       while(1) {
        $104 = (((($gfc)) + 84936|0) + ($i$01$i<<2)|0);
        HEAP32[$104>>2] = $$lobit$i;
        $105 = (($i$01$i) + 1)|0;
        $106 = HEAP32[$101>>2]|0;
        $107 = ($105|0)<($106|0);
        if ($107) {
         $i$01$i = $105;
        } else {
         break;
        }
       }
      }
     } else {
      $108 = ((((((($gfc)) + 304|0) + (($gr$029*10504)|0)|0) + (($ch$026*5252)|0)|0)) + 2304|0);
      _memset(($108|0),0,2304)|0;
      $109 = ((($max_bits) + ($gr$029<<3)|0) + ($ch$026<<2)|0);
      HEAP32[$109>>2] = 0;
     }
     $110 = (($ch$026) + 1)|0;
     $111 = HEAP32[$83>>2]|0;
     $112 = ($110|0)<($111|0);
     if ($112) {
      $ch$026 = $110;
     } else {
      $$lcssa65 = $111;
      break;
     }
    }
    $$pre44 = HEAP32[$25>>2]|0;
    $115 = $$pre44;$168 = $$lcssa65;
   } else {
    $115 = $167;$168 = $86;
   }
   $113 = (($gr$029) + 1)|0;
   $114 = ($113|0)<($115|0);
   if ($114) {
    $167 = $115;$86 = $168;$gr$029 = $113;
   } else {
    break;
   }
  }
 }
 $116 = (_VBR_encode_frame(($gfc|0),($xrpow|0),($l3_xmin|0),($max_bits|0))|0);
 $117 = HEAP32[$0>>2]|0;
 $118 = ($117|0)==(0);
 do {
  if ($118) {
   $119 = ($analog_silence$0$lcssa2527$i|0)==(0);
   if ($119) {
    label = 36;
   } else {
    $120 = ((($gfc)) + 124|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(0);
    if ($122) {
     $i$0$ph = 1;
    } else {
     label = 36;
    }
   }
   if ((label|0) == 36) {
    $123 = ((($gfc)) + 112|0);
    $124 = HEAP32[$123>>2]|0;
    $i$0$ph = $124;
   }
   $125 = ((($gfc)) + 116|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($i$0$ph|0)<($126|0);
   L63: do {
    if ($127) {
     $i$018 = $i$0$ph;
     while(1) {
      $128 = (($frameBits) + ($i$018<<2)|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ($116|0)>($129|0);
      if (!($130)) {
       $i$0$lcssa = $i$018;
       break L63;
      }
      $131 = (($i$018) + 1)|0;
      $132 = ($131|0)<($126|0);
      if ($132) {
       $i$018 = $131;
      } else {
       $i$0$lcssa = $131;
       break;
      }
     }
    } else {
     $i$0$lcssa = $i$0$ph;
    }
   } while(0);
   $133 = ($i$0$lcssa|0)>($126|0);
   $$i$0 = $133 ? $126 : $i$0$lcssa;
   $135 = ($134|0)>(0);
   if (!($135)) {
    $144 = ((($gfc)) + 84744|0);
    HEAP32[$144>>2] = $$i$0;
    $147 = $$i$0;
    break;
   }
   $136 = ($126|0)>($$i$0|0);
   L71: do {
    if ($136) {
     $j$013 = $126;
     while(1) {
      $137 = (($frameBits) + ($j$013<<2)|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = (($138) - ($116))|0;
      $140 = ($139|0)>($134|0);
      if (!($140)) {
       $j$0$lcssa = $j$013;
       break L71;
      }
      $141 = (($j$013) + -1)|0;
      $142 = ($141|0)>($$i$0|0);
      if ($142) {
       $j$013 = $141;
      } else {
       $j$0$lcssa = $141;
       break;
      }
     }
    } else {
     $j$0$lcssa = $126;
    }
   } while(0);
   $143 = ((($gfc)) + 84744|0);
   HEAP32[$143>>2] = $j$0$lcssa;
   $147 = $j$0$lcssa;
  } else {
   $145 = ((($gfc)) + 84744|0);
   HEAP32[$145>>2] = 0;
   $147 = 0;
  }
 } while(0);
 $146 = (($frameBits) + ($147<<2)|0);
 $148 = HEAP32[$146>>2]|0;
 $149 = ($116|0)>($148|0);
 if ($149) {
  _lame_errorf($gfc,11768,$vararg_buffer);
  _exit(-1);
  // unreachable;
 }
 (_ResvFrameBegin($gfc,$mean_bits)|0);
 $150 = HEAP32[$25>>2]|0;
 $151 = ($150|0)>(0);
 if (!($151)) {
  $162 = HEAP32[$mean_bits>>2]|0;
  _ResvFrameEnd($gfc,$162);
  STACKTOP = sp;return;
 }
 $152 = ((($gfc)) + 72|0);
 $$pre45 = HEAP32[$152>>2]|0;
 $153 = $$pre45;$169 = $150;$gr$110 = 0;
 while(1) {
  $154 = ($153|0)>(0);
  if ($154) {
   $ch$19 = 0;
   while(1) {
    $155 = ((((($gfc)) + 304|0) + (($gr$110*10504)|0)|0) + (($ch$19*5252)|0)|0);
    _ResvAdjust($gfc,$155);
    $156 = (($ch$19) + 1)|0;
    $157 = HEAP32[$152>>2]|0;
    $158 = ($156|0)<($157|0);
    if ($158) {
     $ch$19 = $156;
    } else {
     $$lcssa = $157;
     break;
    }
   }
   $$pre46 = HEAP32[$25>>2]|0;
   $161 = $$pre46;$170 = $$lcssa;
  } else {
   $161 = $169;$170 = $153;
  }
  $159 = (($gr$110) + 1)|0;
  $160 = ($159|0)<($161|0);
  if ($160) {
   $153 = $170;$169 = $161;$gr$110 = $159;
  } else {
   break;
  }
 }
 $162 = HEAP32[$mean_bits>>2]|0;
 _ResvFrameEnd($gfc,$162);
 STACKTOP = sp;return;
}
function _ABR_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 var $$add_bits$0$i = 0, $$lcssa39 = 0, $$lobit$i = 0, $$pre = 0, $$pre$i = 0, $$pre37$i = 0, $$pre38$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0;
 var $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0;
 var $add_bits$0$i = 0, $add_bits$1$i = 0, $ch$013 = 0, $ch$023$i = 0, $ch$128$i = 0, $ch$212$i = 0, $ch$39$i = 0, $exitcond$i = 0, $gr$015 = 0, $gr$030$i = 0, $gr$217$i = 0, $gr$310$i = 0, $i$01$i = 0, $i$01$i1 = 0, $l3_xmin = 0, $masking_lower_db$0 = 0.0, $masking_lower_db$0$in = 0, $mean_bits = 0, $or$cond$i = 0, $res_factor$0$i = 0.0;
 var $res_factor$1$i = 0.0, $sum$024$i = 0, $sum$i = 0, $targ_bits = 0, $totbits$016$i = 0, $totbits$1$lcssa$i = 0, $totbits$1$lcssa$i$lcssa = 0, $totbits$113$i = 0, $xrpow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2496|0;
 $sum$i = sp + 2484|0;
 $l3_xmin = sp + 2328|0;
 $xrpow = sp + 24|0;
 $targ_bits = sp + 8|0;
 $mean_bits = sp;
 $0 = ((($gfc)) + 304|0);
 HEAP32[$mean_bits>>2] = 0;
 $1 = ((($gfc)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($gfc)) + 116|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($gfc)) + 84744|0);
 HEAP32[$5>>2] = $4;
 $6 = (_ResvFrameBegin($gfc,$sum$i)|0);
 HEAP32[$5>>2] = 1;
 $7 = (_getframebits($gfc)|0);
 $8 = ((($gfc)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 << 3;
 $11 = (($7) - ($10))|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = ((($gfc)) + 72|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = Math_imul($14, $12)|0;
 $16 = (($11|0) / ($15|0))&-1;
 $17 = ((($gfc)) + 108|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($2*576000)|0;
 $20 = Math_imul($19, $18)|0;
 HEAP32[$sum$i>>2] = $20;
 $21 = ((($gfc)) + 85096|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 1;
 $24 = ($23|0)==(0);
 if ($24) {
  $31 = $20;
 } else {
  $25 = (+($20|0));
  $26 = $25 * 1.0900000000000001;
  $27 = (~~(($26)));
  HEAP32[$sum$i>>2] = $27;
  $31 = $27;
 }
 $28 = ((($gfc)) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($31|0) / ($29|0))&-1;
 $32 = (($30) - ($10))|0;
 $33 = (($32|0) / ($15|0))&-1;
 HEAP32[$sum$i>>2] = $33;
 $34 = ((($gfc)) + 244|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $35;
 $37 = 11.0 - $36;
 $38 = $37 * 0.012727272727272728;
 $39 = $38 + 0.93000000000000005;
 $40 = $39;
 $41 = $40;
 $42 = $41 < 0.90000000000000002;
 $res_factor$0$i = $42 ? 0.89999997615814208 : $40;
 $43 = ($12|0)>(0);
 if ($43) {
  $44 = $res_factor$0$i > 1.0;
  $res_factor$1$i = $44 ? 1.0 : $res_factor$0$i;
  $45 = (+($33|0));
  $46 = $res_factor$1$i * $45;
  $47 = (~~(($46)));
  $48 = (($33|0) / 2)&-1;
  $49 = ($33*3)|0;
  $50 = (($49|0) / 2)&-1;
  $51 = ($14|0)>(0);
  $gr$030$i = 0;
  while(1) {
   if ($51) {
    $ch$023$i = 0;$sum$024$i = 0;
    while(1) {
     $52 = ((($targ_bits) + ($gr$030$i<<3)|0) + ($ch$023$i<<2)|0);
     HEAP32[$52>>2] = $47;
     $53 = ((($pe) + ($gr$030$i<<3)|0) + ($ch$023$i<<2)|0);
     $54 = +HEAPF32[$53>>2];
     $55 = $54 > 700.0;
     if ($55) {
      $56 = $54 + -700.0;
      $57 = $56;
      $58 = $57 * 0.7142857142857143;
      $59 = (~~(($58)));
      $60 = ((((((($gfc)) + 304|0) + (($gr$030$i*10504)|0)|0) + (($ch$023$i*5252)|0)|0)) + 4788|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(2);
      $63 = ($59|0)<($48|0);
      $64 = $63 & $62;
      $add_bits$0$i = $64 ? $48 : $59;
      $65 = ($add_bits$0$i|0)>($50|0);
      $66 = ($add_bits$0$i|0)<(0);
      $$add_bits$0$i = $66 ? 0 : $add_bits$0$i;
      $add_bits$1$i = $65 ? $50 : $$add_bits$0$i;
      $67 = (($add_bits$1$i) + ($47))|0;
      HEAP32[$52>>2] = $67;
      $68 = $67;
     } else {
      $68 = $47;
     }
     $69 = ($68|0)>(4095);
     if ($69) {
      HEAP32[$52>>2] = 4095;
      $71 = 4095;
     } else {
      $71 = $68;
     }
     $70 = (($71) + ($sum$024$i))|0;
     $72 = (($ch$023$i) + 1)|0;
     $73 = ($72|0)<($14|0);
     if ($73) {
      $ch$023$i = $72;$sum$024$i = $70;
     } else {
      $$lcssa39 = $70;
      break;
     }
    }
    $74 = ($$lcssa39|0)>(7680);
    if ($74) {
     $ch$128$i = 0;
     while(1) {
      $75 = ((($targ_bits) + ($gr$030$i<<3)|0) + ($ch$128$i<<2)|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76*7680)|0;
      $78 = (($77|0) / ($$lcssa39|0))&-1;
      HEAP32[$75>>2] = $78;
      $79 = (($ch$128$i) + 1)|0;
      $80 = ($79|0)<($14|0);
      if ($80) {
       $ch$128$i = $79;
      } else {
       break;
      }
     }
    }
   }
   $81 = (($gr$030$i) + 1)|0;
   $82 = ($81|0)<($12|0);
   if ($82) {
    $gr$030$i = $81;
   } else {
    break;
   }
  }
 }
 $83 = ((($gfc)) + 84756|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(2);
 if ($85) {
  if ($43) {
   $86 = +HEAPF32[$ms_ener_ratio>>2];
   $87 = Math_imul($33, $14)|0;
   _reduce_side($targ_bits,$86,$87,7680);
   $88 = HEAP32[$1>>2]|0;
   $89 = ($88|0)>(1);
   if ($89) {
    $94 = 1;
    while(1) {
     $$pre$i = HEAP32[$sum$i>>2]|0;
     $$pre37$i = HEAP32[$13>>2]|0;
     $93 = (($targ_bits) + ($94<<3)|0);
     $95 = (($ms_ener_ratio) + ($94<<2)|0);
     $96 = +HEAPF32[$95>>2];
     $97 = Math_imul($$pre$i, $$pre37$i)|0;
     _reduce_side($93,$96,$97,7680);
     $98 = (($94) + 1)|0;
     $99 = HEAP32[$1>>2]|0;
     $100 = ($98|0)<($99|0);
     if ($100) {
      $94 = $98;
     } else {
      $90 = $99;
      label = 17;
      break;
     }
    }
   } else {
    $90 = $88;
    label = 17;
   }
  } else {
   label = 30;
  }
 } else {
  $90 = $12;
  label = 17;
 }
 if ((label|0) == 17) {
  $91 = ($90|0)>(0);
  if ($91) {
   $$pre38$i = HEAP32[$13>>2]|0;
   $92 = ($$pre38$i|0)>(0);
   $gr$217$i = 0;$totbits$016$i = 0;
   while(1) {
    if ($92) {
     $ch$212$i = 0;$totbits$113$i = $totbits$016$i;
     while(1) {
      $101 = ((($targ_bits) + ($gr$217$i<<3)|0) + ($ch$212$i<<2)|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($102|0)>(4095);
      if ($103) {
       HEAP32[$101>>2] = 4095;
       $105 = 4095;
      } else {
       $105 = $102;
      }
      $104 = (($105) + ($totbits$113$i))|0;
      $106 = (($ch$212$i) + 1)|0;
      $107 = ($106|0)<($$pre38$i|0);
      if ($107) {
       $ch$212$i = $106;$totbits$113$i = $104;
      } else {
       $totbits$1$lcssa$i = $104;
       break;
      }
     }
    } else {
     $totbits$1$lcssa$i = $totbits$016$i;
    }
    $108 = (($gr$217$i) + 1)|0;
    $109 = ($108|0)<($90|0);
    if ($109) {
     $gr$217$i = $108;$totbits$016$i = $totbits$1$lcssa$i;
    } else {
     $totbits$1$lcssa$i$lcssa = $totbits$1$lcssa$i;
     break;
    }
   }
   $110 = ($totbits$1$lcssa$i$lcssa|0)>($6|0);
   $111 = ($totbits$1$lcssa$i$lcssa|0)>(0);
   $or$cond$i = $111 & $110;
   if ($or$cond$i) {
    $112 = ($$pre38$i|0)>(0);
    $192 = $90;$gr$310$i = 0;
    while(1) {
     if ($112) {
      $ch$39$i = 0;
      while(1) {
       $113 = ((($targ_bits) + ($gr$310$i<<3)|0) + ($ch$39$i<<2)|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = Math_imul($114, $6)|0;
       $116 = (($115|0) / ($totbits$1$lcssa$i$lcssa|0))&-1;
       HEAP32[$113>>2] = $116;
       $117 = (($ch$39$i) + 1)|0;
       $118 = ($117|0)<($$pre38$i|0);
       if ($118) {
        $ch$39$i = $117;
       } else {
        $121 = $90;
        break;
       }
      }
     } else {
      $121 = $192;
     }
     $119 = (($gr$310$i) + 1)|0;
     $120 = ($119|0)<($121|0);
     if ($120) {
      $192 = $121;$gr$310$i = $119;
     } else {
      break;
     }
    }
   }
   $122 = ($90|0)>(0);
   if ($122) {
    $123 = ((($gfc)) + 84912|0);
    $124 = ((($gfc)) + 84916|0);
    $125 = ((($gfc)) + 84908|0);
    $126 = ((($gfc)) + 85824|0);
    $127 = ((($gfc)) + 36|0);
    $gr$015 = 0;
    while(1) {
     $128 = HEAP32[$83>>2]|0;
     $129 = ($128|0)==(2);
     if ($129) {
      $i$01$i = 0;
      while(1) {
       $130 = ((((($gfc)) + 304|0) + (($gr$015*10504)|0)|0) + ($i$01$i<<2)|0);
       $131 = +HEAPF32[$130>>2];
       $132 = ((((((($gfc)) + 304|0) + (($gr$015*10504)|0)|0)) + 5252|0) + ($i$01$i<<2)|0);
       $133 = +HEAPF32[$132>>2];
       $134 = $133 + $131;
       $135 = $134 * 0.70710676908493042;
       HEAPF32[$130>>2] = $135;
       $136 = $131 - $133;
       $137 = $136 * 0.70710676908493042;
       HEAPF32[$132>>2] = $137;
       $138 = (($i$01$i) + 1)|0;
       $exitcond$i = ($138|0)==(576);
       if ($exitcond$i) {
        break;
       } else {
        $i$01$i = $138;
       }
      }
     }
     $139 = HEAP32[$13>>2]|0;
     $140 = ($139|0)>(0);
     if ($140) {
      $ch$013 = 0;
      while(1) {
       $141 = ((((($gfc)) + 304|0) + (($gr$015*10504)|0)|0) + (($ch$013*5252)|0)|0);
       $142 = ((((((($gfc)) + 304|0) + (($gr$015*10504)|0)|0) + (($ch$013*5252)|0)|0)) + 4788|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(2);
       $masking_lower_db$0$in = $144 ? $124 : $123;
       $masking_lower_db$0 = +HEAPF32[$masking_lower_db$0$in>>2];
       $145 = $masking_lower_db$0;
       $146 = $145 * 0.10000000000000001;
       $147 = (+Math_pow(10.0,(+$146)));
       $148 = $147;
       HEAPF32[$125>>2] = $148;
       _init_outer_loop($gfc,$141);
       HEAPF32[$sum$i>>2] = 0.0;
       $149 = ((((((($gfc)) + 304|0) + (($gr$015*10504)|0)|0) + (($ch$013*5252)|0)|0)) + 5208|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = ((((((($gfc)) + 304|0) + (($gr$015*10504)|0)|0) + (($ch$013*5252)|0)|0)) + 4764|0);
       HEAPF32[$151>>2] = 0.0;
       $152 = (($xrpow) + ($150<<2)|0);
       $153 = (576 - ($150))|0;
       $154 = $153 << 2;
       _memset(($152|0),0,($154|0))|0;
       $155 = HEAP32[$126>>2]|0;
       FUNCTION_TABLE_viiii[$155 & 7]($141,$xrpow,$150,$sum$i);
       $156 = +HEAPF32[$sum$i>>2];
       $157 = $156 > 9.9999996826552254E-21;
       if ($157) {
        $158 = HEAP32[$21>>2]|0;
        $159 = $158 >>> 1;
        $$lobit$i = $159 & 1;
        $160 = ((((((($gfc)) + 304|0) + (($gr$015*10504)|0)|0) + (($ch$013*5252)|0)|0)) + 4864|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = ($161|0)>(0);
        if ($162) {
         $i$01$i1 = 0;
         while(1) {
          $163 = (((($gfc)) + 84936|0) + ($i$01$i1<<2)|0);
          HEAP32[$163>>2] = $$lobit$i;
          $164 = (($i$01$i1) + 1)|0;
          $165 = HEAP32[$160>>2]|0;
          $166 = ($164|0)<($165|0);
          if ($166) {
           $i$01$i1 = $164;
          } else {
           break;
          }
         }
        }
        $168 = ((($ratio) + (($gr$015*976)|0)|0) + (($ch$013*488)|0)|0);
        $169 = (_calc_xmin($gfc,$168,$141,$l3_xmin)|0);
        $170 = ($169|0)==(0);
        $171 = ((($targ_bits) + ($gr$015<<3)|0) + ($ch$013<<2)|0);
        if ($170) {
         HEAP32[$171>>2] = $16;
         $172 = $16;
        } else {
         $$pre = HEAP32[$171>>2]|0;
         $172 = $$pre;
        }
        (_outer_loop($gfc,$141,$l3_xmin,$xrpow,$ch$013,$172)|0);
       } else {
        $167 = ((((((($gfc)) + 304|0) + (($gr$015*10504)|0)|0) + (($ch$013*5252)|0)|0)) + 2304|0);
        _memset(($167|0),0,2304)|0;
       }
       _best_scalefac_store($gfc,$gr$015,$ch$013,$0);
       $173 = HEAP32[$127>>2]|0;
       $174 = ($173|0)==(1);
       if ($174) {
        _best_huffman_divide($gfc,$141);
       }
       _ResvAdjust($gfc,$141);
       $175 = (($ch$013) + 1)|0;
       $176 = HEAP32[$13>>2]|0;
       $177 = ($175|0)<($176|0);
       if ($177) {
        $ch$013 = $175;
       } else {
        break;
       }
      }
     }
     $178 = (($gr$015) + 1)|0;
     $179 = HEAP32[$1>>2]|0;
     $180 = ($178|0)<($179|0);
     if ($180) {
      $gr$015 = $178;
     } else {
      break;
     }
    }
   }
  } else {
   label = 30;
  }
 }
 if ((label|0) == 30) {
 }
 $181 = ((($gfc)) + 112|0);
 $182 = HEAP32[$181>>2]|0;
 HEAP32[$5>>2] = $182;
 $183 = HEAP32[$3>>2]|0;
 $184 = ($182|0)>($183|0);
 if ($184) {
  $191 = HEAP32[$mean_bits>>2]|0;
  _ResvFrameEnd($gfc,$191);
  STACKTOP = sp;return;
 }
 while(1) {
  $185 = (_ResvFrameBegin($gfc,$mean_bits)|0);
  $186 = ($185|0)>(-1);
  if ($186) {
   label = 51;
   break;
  }
  $187 = HEAP32[$5>>2]|0;
  $188 = (($187) + 1)|0;
  HEAP32[$5>>2] = $188;
  $189 = HEAP32[$3>>2]|0;
  $190 = ($187|0)<($189|0);
  if (!($190)) {
   label = 51;
   break;
  }
 }
 if ((label|0) == 51) {
  $191 = HEAP32[$mean_bits>>2]|0;
  _ResvFrameEnd($gfc,$191);
  STACKTOP = sp;return;
 }
}
function _CBR_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 var $$lobit$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$03 = 0, $exitcond$i = 0, $gr$04 = 0, $i$01$i = 0, $i$01$i1 = 0, $l3_xmin = 0, $masking_lower_db$0 = 0.0, $masking_lower_db$0$in = 0, $mean_bits = 0, $sum$i = 0;
 var $targ_bits = 0, $xrpow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2480|0;
 $sum$i = sp + 2476|0;
 $l3_xmin = sp + 2320|0;
 $xrpow = sp + 16|0;
 $targ_bits = sp + 8|0;
 $mean_bits = sp;
 $0 = ((($gfc)) + 304|0);
 (_ResvFrameBegin($gfc,$mean_bits)|0);
 $1 = ((($gfc)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $68 = HEAP32[$mean_bits>>2]|0;
  _ResvFrameEnd($gfc,$68);
  STACKTOP = sp;return;
 }
 $4 = ((($gfc)) + 84756|0);
 $5 = ((($gfc)) + 72|0);
 $6 = ((($gfc)) + 84912|0);
 $7 = ((($gfc)) + 84916|0);
 $8 = ((($gfc)) + 84908|0);
 $9 = ((($gfc)) + 85824|0);
 $10 = ((($gfc)) + 85096|0);
 $11 = ((($gfc)) + 36|0);
 $gr$04 = 0;
 while(1) {
  $12 = HEAP32[$mean_bits>>2]|0;
  $13 = (_on_pe($gfc,$pe,$targ_bits,$12,$gr$04,$gr$04)|0);
  $14 = HEAP32[$4>>2]|0;
  $15 = ($14|0)==(2);
  if ($15) {
   $i$01$i = 0;
   while(1) {
    $16 = ((((($gfc)) + 304|0) + (($gr$04*10504)|0)|0) + ($i$01$i<<2)|0);
    $17 = +HEAPF32[$16>>2];
    $18 = ((((((($gfc)) + 304|0) + (($gr$04*10504)|0)|0)) + 5252|0) + ($i$01$i<<2)|0);
    $19 = +HEAPF32[$18>>2];
    $20 = $19 + $17;
    $21 = $20 * 0.70710676908493042;
    HEAPF32[$16>>2] = $21;
    $22 = $17 - $19;
    $23 = $22 * 0.70710676908493042;
    HEAPF32[$18>>2] = $23;
    $24 = (($i$01$i) + 1)|0;
    $exitcond$i = ($24|0)==(576);
    if ($exitcond$i) {
     break;
    } else {
     $i$01$i = $24;
    }
   }
   $25 = (($ms_ener_ratio) + ($gr$04<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = HEAP32[$mean_bits>>2]|0;
   _reduce_side($targ_bits,$26,$27,$13);
  }
  $28 = HEAP32[$5>>2]|0;
  $29 = ($28|0)>(0);
  if ($29) {
   $ch$03 = 0;
   while(1) {
    $30 = ((((($gfc)) + 304|0) + (($gr$04*10504)|0)|0) + (($ch$03*5252)|0)|0);
    $31 = ((((((($gfc)) + 304|0) + (($gr$04*10504)|0)|0) + (($ch$03*5252)|0)|0)) + 4788|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(2);
    $masking_lower_db$0$in = $33 ? $7 : $6;
    $masking_lower_db$0 = +HEAPF32[$masking_lower_db$0$in>>2];
    $34 = $masking_lower_db$0;
    $35 = $34 * 0.10000000000000001;
    $36 = (+Math_pow(10.0,(+$35)));
    $37 = $36;
    HEAPF32[$8>>2] = $37;
    _init_outer_loop($gfc,$30);
    HEAPF32[$sum$i>>2] = 0.0;
    $38 = ((((((($gfc)) + 304|0) + (($gr$04*10504)|0)|0) + (($ch$03*5252)|0)|0)) + 5208|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((((((($gfc)) + 304|0) + (($gr$04*10504)|0)|0) + (($ch$03*5252)|0)|0)) + 4764|0);
    HEAPF32[$40>>2] = 0.0;
    $41 = (($xrpow) + ($39<<2)|0);
    $42 = (576 - ($39))|0;
    $43 = $42 << 2;
    _memset(($41|0),0,($43|0))|0;
    $44 = HEAP32[$9>>2]|0;
    FUNCTION_TABLE_viiii[$44 & 7]($30,$xrpow,$39,$sum$i);
    $45 = +HEAPF32[$sum$i>>2];
    $46 = $45 > 9.9999996826552254E-21;
    if ($46) {
     $47 = HEAP32[$10>>2]|0;
     $48 = $47 >>> 1;
     $$lobit$i = $48 & 1;
     $49 = ((((((($gfc)) + 304|0) + (($gr$04*10504)|0)|0) + (($ch$03*5252)|0)|0)) + 4864|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)>(0);
     if ($51) {
      $i$01$i1 = 0;
      while(1) {
       $52 = (((($gfc)) + 84936|0) + ($i$01$i1<<2)|0);
       HEAP32[$52>>2] = $$lobit$i;
       $53 = (($i$01$i1) + 1)|0;
       $54 = HEAP32[$49>>2]|0;
       $55 = ($53|0)<($54|0);
       if ($55) {
        $i$01$i1 = $53;
       } else {
        break;
       }
      }
     }
     $57 = ((($ratio) + (($gr$04*976)|0)|0) + (($ch$03*488)|0)|0);
     (_calc_xmin($gfc,$57,$30,$l3_xmin)|0);
     $58 = (($targ_bits) + ($ch$03<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     (_outer_loop($gfc,$30,$l3_xmin,$xrpow,$ch$03,$59)|0);
    } else {
     $56 = ((((((($gfc)) + 304|0) + (($gr$04*10504)|0)|0) + (($ch$03*5252)|0)|0)) + 2304|0);
     _memset(($56|0),0,2304)|0;
    }
    _best_scalefac_store($gfc,$gr$04,$ch$03,$0);
    $60 = HEAP32[$11>>2]|0;
    $61 = ($60|0)==(1);
    if ($61) {
     _best_huffman_divide($gfc,$30);
    }
    _ResvAdjust($gfc,$30);
    $62 = (($ch$03) + 1)|0;
    $63 = HEAP32[$5>>2]|0;
    $64 = ($62|0)<($63|0);
    if ($64) {
     $ch$03 = $62;
    } else {
     break;
    }
   }
  }
  $65 = (($gr$04) + 1)|0;
  $66 = HEAP32[$1>>2]|0;
  $67 = ($65|0)<($66|0);
  if ($67) {
   $gr$04 = $65;
  } else {
   break;
  }
 }
 $68 = HEAP32[$mean_bits>>2]|0;
 _ResvFrameEnd($gfc,$68);
 STACKTOP = sp;return;
}
function _init_xrpow_core_c($cod_info,$xrpow,$upper,$sum) {
 $cod_info = $cod_info|0;
 $xrpow = $xrpow|0;
 $upper = $upper|0;
 $sum = $sum|0;
 var $$pre = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $fabsf = 0.0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF32[$sum>>2] = 0.0;
 $0 = ($upper|0)<(0);
 if ($0) {
  return;
 }
 $1 = ((($cod_info)) + 4764|0);
 $5 = 0.0;$i$01 = 0;
 while(1) {
  $2 = (($cod_info) + ($i$01<<2)|0);
  $3 = +HEAPF32[$2>>2];
  $fabsf = (+Math_abs((+$3)));
  $4 = $5 + $fabsf;
  HEAPF32[$sum>>2] = $4;
  $6 = $fabsf;
  $7 = (+Math_sqrt((+$6)));
  $8 = $7 * $6;
  $9 = (+Math_sqrt((+$8)));
  $10 = $9;
  $11 = (($xrpow) + ($i$01<<2)|0);
  HEAPF32[$11>>2] = $10;
  $12 = +HEAPF32[$1>>2];
  $13 = $10 > $12;
  if ($13) {
   HEAPF32[$1>>2] = $10;
  }
  $exitcond = ($i$01|0)==($upper|0);
  if ($exitcond) {
   break;
  }
  $14 = (($i$01) + 1)|0;
  $$pre = +HEAPF32[$sum>>2];
  $5 = $$pre;$i$01 = $14;
 }
 return;
}
function _init_outer_loop($gfc,$cod_info) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$sink = 0, $$sink27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0;
 var $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0;
 var $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0;
 var $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ath12$0$i = 0.0, $ath12$0$i$1 = 0.0, $ath12$0$i$2 = 0.0, $ath21$0$i = 0.0, $exitcond = 0, $exitcond20 = 0, $exitcond20$1 = 0, $exitcond20$2 = 0, $exitcond25 = 0, $exitcond26 = 0, $fabsf$i = 0.0;
 var $fabsf$i$1 = 0.0, $fabsf$i$2 = 0.0, $fabsf2$i = 0.0, $gsfb$022$i = 0, $gsfb1$011$i = 0, $gsfb1$011$i$1 = 0, $gsfb1$011$i$2 = 0, $ix$013 = 0, $ix$1$lcssa = 0, $ix$26$us = 0, $ix$26$us$1 = 0, $ix$26$us$2 = 0, $ixwork = 0, $j$015$i = 0, $j$015$in$i = 0, $j$04 = 0, $j5$08$i = 0, $j5$08$i$1 = 0, $j5$08$i$2 = 0, $j5$08$in$i = 0;
 var $j5$08$in$i$1 = 0, $j5$08$in$i$2 = 0, $l$07$us = 0, $l$07$us$1 = 0, $l$07$us$2 = 0, $scevgep = 0, $scevgep$1 = 0, $scevgep$1$sum = 0, $scevgep$2 = 0, $scevgep$sum = 0, $sfb$018 = 0, $sfb$114 = 0, $sfb$25 = 0, $storemerge = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2304|0;
 $ixwork = sp;
 $0 = ((($cod_info)) + 4768|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($cod_info)) + 4772|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($cod_info)) + 4776|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($cod_info)) + 4780|0);
 HEAP32[$3>>2] = 210;
 $4 = ((($cod_info)) + 4784|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($cod_info)) + 4796|0);
 $6 = ((($gfc)) + 64|0);
 dest=$5; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)<(8001);
 $9 = ((($cod_info)) + 4848|0);
 if ($8) {
  HEAP32[$9>>2] = 17;
  $$sink = 17;$$sink27 = 9;$18 = 17;
 } else {
  HEAP32[$9>>2] = 21;
  $10 = ((($gfc)) + 85092|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  $13 = $12 ? 22 : 21;
  $$sink = $13;$$sink27 = 12;$18 = 21;
 }
 $14 = ((($cod_info)) + 4852|0);
 HEAP32[$14>>2] = $$sink27;
 $15 = ((($cod_info)) + 4856|0);
 HEAP32[$15>>2] = $$sink;
 $16 = ((($cod_info)) + 4864|0);
 HEAP32[$16>>2] = $$sink;
 $17 = ((($cod_info)) + 4860|0);
 HEAP32[$17>>2] = $18;
 $19 = ((($cod_info)) + 4868|0);
 HEAP32[$19>>2] = 11;
 $sfb$018 = 0;
 while(1) {
  $20 = (($sfb$018) + 1)|0;
  $21 = (((($gfc)) + 21360|0) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (((($gfc)) + 21360|0) + ($sfb$018<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) - ($24))|0;
  $26 = (((($cod_info)) + 4872|0) + ($sfb$018<<2)|0);
  HEAP32[$26>>2] = $25;
  $27 = (((($cod_info)) + 5028|0) + ($sfb$018<<2)|0);
  HEAP32[$27>>2] = 3;
  $exitcond26 = ($20|0)==(22);
  if ($exitcond26) {
   break;
  } else {
   $sfb$018 = $20;
  }
 }
 $28 = ((($cod_info)) + 4788|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(2);
 if ($30) {
  HEAP32[$14>>2] = 0;
  HEAP32[$9>>2] = 0;
  $31 = ((($cod_info)) + 4792|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0);
  if ($33) {
   $41 = 0;$44 = 0;
  } else {
   HEAP32[$14>>2] = 3;
   $34 = ((($gfc)) + 76|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 << 1;
   $37 = (($36) + 4)|0;
   HEAP32[$9>>2] = $37;
   $41 = 3;$44 = $37;
  }
  $38 = HEAP32[$6>>2]|0;
  $39 = ($38|0)<(8001);
  if ($39) {
   $40 = (9 - ($41))|0;
   $42 = ($40*3)|0;
   $43 = (($42) + ($44))|0;
   HEAP32[$16>>2] = $43;
   $storemerge = $43;
  } else {
   $45 = ((($gfc)) + 85092|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)!=(0);
   $48 = $47 ? 13 : 12;
   $49 = (($48) - ($41))|0;
   $50 = ($49*3)|0;
   $51 = (($50) + ($44))|0;
   HEAP32[$16>>2] = $51;
   $52 = (12 - ($41))|0;
   $53 = ($52*3)|0;
   $54 = (($53) + ($44))|0;
   $storemerge = $54;
  }
  HEAP32[$17>>2] = $storemerge;
  $55 = (($storemerge) + -18)|0;
  HEAP32[$19>>2] = $55;
  HEAP32[$15>>2] = $44;
  $56 = (((($gfc)) + 21360|0) + ($44<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  _memcpy(($ixwork|0),($cod_info|0),2304)|0;
  $58 = (($cod_info) + ($57<<2)|0);
  $$phi$trans$insert = (((($gfc)) + 21452|0) + ($41<<2)|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $63 = $$pre;$ix$013 = $58;$sfb$114 = $41;
  while(1) {
   $59 = (($sfb$114) + 1)|0;
   $60 = (((($gfc)) + 21452|0) + ($59<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)>($63|0);
   if ($62) {
    $69 = (($61) - ($63))|0;
    $ix$26$us = $ix$013;$l$07$us = $63;
    while(1) {
     $64 = ($l$07$us*3)|0;
     $65 = (($ixwork) + ($64<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($ix$26$us)) + 4|0);
     HEAP32[$ix$26$us>>2] = $66;
     $68 = (($l$07$us) + 1)|0;
     $exitcond20 = ($68|0)==($61|0);
     if ($exitcond20) {
      break;
     } else {
      $ix$26$us = $67;$l$07$us = $68;
     }
    }
    $scevgep = (($ix$013) + ($69<<2)|0);
    $ix$26$us$1 = $scevgep;$l$07$us$1 = $63;
    while(1) {
     $213 = ($l$07$us$1*3)|0;
     $214 = (($213) + 1)|0;
     $215 = (($ixwork) + ($214<<2)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ((($ix$26$us$1)) + 4|0);
     HEAP32[$ix$26$us$1>>2] = $216;
     $218 = (($l$07$us$1) + 1)|0;
     $exitcond20$1 = ($218|0)==($61|0);
     if ($exitcond20$1) {
      break;
     } else {
      $ix$26$us$1 = $217;$l$07$us$1 = $218;
     }
    }
    $scevgep$sum = $69 << 1;
    $scevgep$1 = (($ix$013) + ($scevgep$sum<<2)|0);
    $ix$26$us$2 = $scevgep$1;$l$07$us$2 = $63;
    while(1) {
     $219 = ($l$07$us$2*3)|0;
     $220 = (($219) + 2)|0;
     $221 = (($ixwork) + ($220<<2)|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ((($ix$26$us$2)) + 4|0);
     HEAP32[$ix$26$us$2>>2] = $222;
     $224 = (($l$07$us$2) + 1)|0;
     $exitcond20$2 = ($224|0)==($61|0);
     if ($exitcond20$2) {
      break;
     } else {
      $ix$26$us$2 = $223;$l$07$us$2 = $224;
     }
    }
    $scevgep$1$sum = ($69*3)|0;
    $scevgep$2 = (($ix$013) + ($scevgep$1$sum<<2)|0);
    $ix$1$lcssa = $scevgep$2;
   } else {
    $ix$1$lcssa = $ix$013;
   }
   $exitcond25 = ($59|0)==(13);
   if ($exitcond25) {
    $j$04 = $44;$sfb$25 = $41;
    break;
   } else {
    $63 = $61;$ix$013 = $ix$1$lcssa;$sfb$114 = $59;
   }
  }
  while(1) {
   $70 = (($sfb$25) + 1)|0;
   $71 = (((($gfc)) + 21452|0) + ($70<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (((($gfc)) + 21452|0) + ($sfb$25<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($72) - ($74))|0;
   $76 = (($j$04) + 2)|0;
   $77 = (((($cod_info)) + 4872|0) + ($76<<2)|0);
   HEAP32[$77>>2] = $75;
   $78 = (($j$04) + 1)|0;
   $79 = (((($cod_info)) + 4872|0) + ($78<<2)|0);
   HEAP32[$79>>2] = $75;
   $80 = (((($cod_info)) + 4872|0) + ($j$04<<2)|0);
   HEAP32[$80>>2] = $75;
   $81 = (((($cod_info)) + 5028|0) + ($j$04<<2)|0);
   HEAP32[$81>>2] = 0;
   $82 = (((($cod_info)) + 5028|0) + ($78<<2)|0);
   HEAP32[$82>>2] = 1;
   $83 = (((($cod_info)) + 5028|0) + ($76<<2)|0);
   HEAP32[$83>>2] = 2;
   $84 = (($j$04) + 3)|0;
   $exitcond = ($70|0)==(13);
   if ($exitcond) {
    break;
   } else {
    $j$04 = $84;$sfb$25 = $70;
   }
  }
 }
 $85 = ((($cod_info)) + 5184|0);
 HEAP32[$85>>2] = 0;
 $86 = ((($cod_info)) + 5188|0);
 HEAP32[$86>>2] = 11824;
 $87 = ((($cod_info)) + 5192|0);
 $88 = ((($cod_info)) + 5208|0);
 ;HEAP32[$87>>2]=0|0;HEAP32[$87+4>>2]=0|0;HEAP32[$87+8>>2]=0|0;HEAP32[$87+12>>2]=0|0;
 HEAP32[$88>>2] = 575;
 $89 = ((($cod_info)) + 4608|0);
 _memset(($89|0),0,156)|0;
 $90 = ((($gfc)) + 104|0);
 $91 = HEAP32[$90>>2]|0;
 if ((($91|0) == 0) | (($91|0) == 3) | (($91|0) == 4) | (($91|0) == 1)) {
  STACKTOP = sp;return;
 }
 $92 = ((($gfc)) + 85796|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = HEAP32[$28>>2]|0;
 $95 = ($94|0)==(2);
 if (!($95)) {
  $96 = ((($93)) + 8|0);
  $97 = ((($93)) + 20|0);
  $98 = ((($gfc)) + 84852|0);
  $gsfb$022$i = 5;
  L40: while(1) {
   $105 = (((($gfc)) + 21508|0) + ($gsfb$022$i<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($gsfb$022$i) + 1)|0;
   $108 = (((($gfc)) + 21508|0) + ($107<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = +HEAPF32[$96>>2];
   $111 = (((($93)) + 164|0) + ($gsfb$022$i<<2)|0);
   $112 = +HEAPF32[$111>>2];
   $113 = +HEAPF32[$97>>2];
   $114 = (+_athAdjust($110,$112,$113,0.0));
   $115 = +HEAPF32[$98>>2];
   $116 = $115 > 9.999999960041972E-13;
   $117 = $115 * $114;
   $ath21$0$i = $116 ? $117 : $114;
   $118 = ($109|0)>($106|0);
   if ($118) {
    $j$015$in$i = $109;
    while(1) {
     $j$015$i = (($j$015$in$i) + -1)|0;
     $119 = (($cod_info) + ($j$015$i<<2)|0);
     $120 = +HEAPF32[$119>>2];
     $fabsf2$i = (+Math_abs((+$120)));
     $121 = $fabsf2$i < $ath21$0$i;
     if (!($121)) {
      label = 32;
      break L40;
     }
     HEAPF32[$119>>2] = 0.0;
     $122 = ($j$015$i|0)>($106|0);
     if ($122) {
      $j$015$in$i = $j$015$i;
     } else {
      break;
     }
    }
   }
   $123 = (($gsfb$022$i) + -1)|0;
   $124 = ($gsfb$022$i|0)>(0);
   if ($124) {
    $gsfb$022$i = $123;
   } else {
    label = 32;
    break;
   }
  }
  if ((label|0) == 32) {
   STACKTOP = sp;return;
  }
 }
 $99 = ((($gfc)) + 21500|0);
 $100 = ((($gfc)) + 21504|0);
 $101 = ((($gfc)) + 21536|0);
 $102 = ((($93)) + 8|0);
 $103 = ((($93)) + 20|0);
 $104 = ((($gfc)) + 84904|0);
 $gsfb1$011$i = 5;
 L51: while(1) {
  $125 = HEAP32[$99>>2]|0;
  $126 = ($125*3)|0;
  $127 = (((($gfc)) + 21536|0) + ($gsfb1$011$i<<2)|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = HEAP32[$101>>2]|0;
  $130 = (($128) - ($129))|0;
  $131 = (($126) + ($130))|0;
  $132 = (($gsfb1$011$i) + 1)|0;
  $133 = (((($gfc)) + 21536|0) + ($132<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($134) - ($128))|0;
  $136 = +HEAPF32[$102>>2];
  $137 = (((($93)) + 188|0) + ($gsfb1$011$i<<2)|0);
  $138 = +HEAPF32[$137>>2];
  $139 = +HEAPF32[$103>>2];
  $140 = (+_athAdjust($136,$138,$139,0.0));
  $141 = +HEAPF32[$104>>2];
  $142 = $141 > 9.999999960041972E-13;
  $143 = $141 * $140;
  $ath12$0$i = $142 ? $143 : $140;
  $144 = ($135|0)>(0);
  if ($144) {
   $145 = (($135) + ($131))|0;
   $j5$08$in$i = $145;
   while(1) {
    $j5$08$i = (($j5$08$in$i) + -1)|0;
    $146 = (($cod_info) + ($j5$08$i<<2)|0);
    $147 = +HEAPF32[$146>>2];
    $fabsf$i = (+Math_abs((+$147)));
    $148 = $fabsf$i < $ath12$0$i;
    if (!($148)) {
     $gsfb1$011$i$1 = 5;
     break L51;
    }
    HEAPF32[$146>>2] = 0.0;
    $149 = ($j5$08$i|0)>($131|0);
    if ($149) {
     $j5$08$in$i = $j5$08$i;
    } else {
     break;
    }
   }
  }
  $150 = (($gsfb1$011$i) + -1)|0;
  $151 = ($gsfb1$011$i|0)>(0);
  if ($151) {
   $gsfb1$011$i = $150;
  } else {
   $gsfb1$011$i$1 = 5;
   break;
  }
 }
 L59: while(1) {
  $152 = HEAP32[$99>>2]|0;
  $153 = ($152*3)|0;
  $154 = HEAP32[$100>>2]|0;
  $155 = (($154) - ($152))|0;
  $156 = (($155) + ($153))|0;
  $157 = (((($gfc)) + 21536|0) + ($gsfb1$011$i$1<<2)|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = HEAP32[$101>>2]|0;
  $160 = (($158) - ($159))|0;
  $161 = (($156) + ($160))|0;
  $162 = (($gsfb1$011$i$1) + 1)|0;
  $163 = (((($gfc)) + 21536|0) + ($162<<2)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($164) - ($158))|0;
  $166 = +HEAPF32[$102>>2];
  $167 = (((($93)) + 188|0) + ($gsfb1$011$i$1<<2)|0);
  $168 = +HEAPF32[$167>>2];
  $169 = +HEAPF32[$103>>2];
  $170 = (+_athAdjust($166,$168,$169,0.0));
  $171 = +HEAPF32[$104>>2];
  $172 = $171 > 9.999999960041972E-13;
  $173 = $171 * $170;
  $ath12$0$i$1 = $172 ? $173 : $170;
  $174 = ($165|0)>(0);
  if ($174) {
   $175 = (($165) + ($161))|0;
   $j5$08$in$i$1 = $175;
   while(1) {
    $j5$08$i$1 = (($j5$08$in$i$1) + -1)|0;
    $176 = (($cod_info) + ($j5$08$i$1<<2)|0);
    $177 = +HEAPF32[$176>>2];
    $fabsf$i$1 = (+Math_abs((+$177)));
    $178 = $fabsf$i$1 < $ath12$0$i$1;
    if (!($178)) {
     $gsfb1$011$i$2 = 5;
     break L59;
    }
    HEAPF32[$176>>2] = 0.0;
    $179 = ($j5$08$i$1|0)>($161|0);
    if ($179) {
     $j5$08$in$i$1 = $j5$08$i$1;
    } else {
     break;
    }
   }
  }
  $180 = (($gsfb1$011$i$1) + -1)|0;
  $181 = ($gsfb1$011$i$1|0)>(0);
  if ($181) {
   $gsfb1$011$i$1 = $180;
  } else {
   $gsfb1$011$i$2 = 5;
   break;
  }
 }
 L67: while(1) {
  $182 = HEAP32[$99>>2]|0;
  $183 = ($182*3)|0;
  $184 = HEAP32[$100>>2]|0;
  $185 = (($184) - ($182))|0;
  $186 = $185 << 1;
  $187 = (($186) + ($183))|0;
  $188 = (((($gfc)) + 21536|0) + ($gsfb1$011$i$2<<2)|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = HEAP32[$101>>2]|0;
  $191 = (($189) - ($190))|0;
  $192 = (($187) + ($191))|0;
  $193 = (($gsfb1$011$i$2) + 1)|0;
  $194 = (((($gfc)) + 21536|0) + ($193<<2)|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($195) - ($189))|0;
  $197 = +HEAPF32[$102>>2];
  $198 = (((($93)) + 188|0) + ($gsfb1$011$i$2<<2)|0);
  $199 = +HEAPF32[$198>>2];
  $200 = +HEAPF32[$103>>2];
  $201 = (+_athAdjust($197,$199,$200,0.0));
  $202 = +HEAPF32[$104>>2];
  $203 = $202 > 9.999999960041972E-13;
  $204 = $202 * $201;
  $ath12$0$i$2 = $203 ? $204 : $201;
  $205 = ($196|0)>(0);
  if ($205) {
   $206 = (($196) + ($192))|0;
   $j5$08$in$i$2 = $206;
   while(1) {
    $j5$08$i$2 = (($j5$08$in$i$2) + -1)|0;
    $207 = (($cod_info) + ($j5$08$i$2<<2)|0);
    $208 = +HEAPF32[$207>>2];
    $fabsf$i$2 = (+Math_abs((+$208)));
    $209 = $fabsf$i$2 < $ath12$0$i$2;
    if (!($209)) {
     label = 32;
     break L67;
    }
    HEAPF32[$207>>2] = 0.0;
    $210 = ($j5$08$i$2|0)>($192|0);
    if ($210) {
     $j5$08$in$i$2 = $j5$08$i$2;
    } else {
     break;
    }
   }
  }
  $211 = (($gsfb1$011$i$2) + -1)|0;
  $212 = ($gsfb1$011$i$2|0)>(0);
  if ($212) {
   $gsfb1$011$i$2 = $211;
  } else {
   label = 32;
   break;
  }
 }
 if ((label|0) == 32) {
  STACKTOP = sp;return;
 }
}
function _outer_loop($gfc,$cod_info,$l3_xmin,$xrpow,$ch,$targ_bits) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 $l3_xmin = $l3_xmin|0;
 $xrpow = $xrpow|0;
 $ch = $ch|0;
 $targ_bits = $targ_bits|0;
 var $$ = 0, $$$$i = 0, $$$flag_GoneOver$3$i = 0, $$$i = 0, $$$i$i = 0.0, $$0 = 0, $$1$i$i = 0, $$6 = 0, $$flag_GoneOver$0$i = 0, $$flag_GoneOver$01$i = 0, $$lcssa$i = 0, $$lcssa120 = 0, $$lcssa26 = 0, $$lcssa27 = 0, $$not = 0, $$not84 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i10 = 0.0;
 var $$pre$i13$i = 0, $$pre$phi$i$iZ2D = 0, $$pre41$i$i = 0, $$pre61 = 0.0, $$pre62 = 0.0, $$pre63 = 0.0, $$pre64 = 0.0, $$pre65 = 0, $$s1$0$i$i = 0, $$s1$0$i$i$lcssa = 0, $$s2$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0.0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0.0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0.0;
 var $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0;
 var $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0, $405 = 0.0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0;
 var $412 = 0.0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0.0, $426 = 0, $427 = 0.0, $428 = 0, $429 = 0.0, $43 = 0;
 var $430 = 0.0, $431 = 0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0;
 var $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0.0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0.0, $464 = 0.0, $465 = 0, $466 = 0;
 var $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0.0;
 var $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0;
 var $502 = 0.0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0.0, $513 = 0.0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0.0;
 var $557 = 0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $CurrentStep$06$i = 0, $CurrentStep$1$i = 0, $CurrentStep$2$i = 0, $CurrentStep$3$i = 0, $Direction$08$i = 0, $Direction$1$i = 0, $age$1 = 0, $age$2 = 0;
 var $bRefine$041 = 0, $best_ggain_pass1$042 = 0, $best_noise_info = 0, $best_part2_3_length$040 = 0, $best_part2_3_length$1 = 0, $best_part2_3_length$2 = 0, $best_part2_3_length$3 = 0, $best_part2_3_length$3$ph = 0, $better$0 = 0, $better$0$i = 0, $better$0$in = 0, $better$1$i = 0, $brmerge = 0, $cod_info_w = 0, $distort = 0, $exitcond$i = 0, $fabs$i$i = 0.0, $fabsf$i = 0.0, $fabsf1$i = 0.0, $fabsf10$i = 0.0;
 var $fabsf11$i = 0.0, $fabsf2$i = 0.0, $fabsf3$i = 0.0, $fabsf4$i = 0.0, $fabsf5$i = 0.0, $fabsf6$i = 0.0, $fabsf7$i = 0.0, $fabsf8$i = 0.0, $fabsf9$i = 0.0, $factor$i = 0.0, $factor17$i = 0.0, $flag_GoneOver$07$i = 0, $flag_GoneOver$3$i = 0, $indvars$iv$i$i = 0, $indvars$iv$next$i$i = 0, $indvars$iv$next37$i$i = 0, $indvars$iv36$i$i = 0, $j$0$lcssa$i$i = 0, $j$019$i$i = 0, $j$03$i$i = 0;
 var $j$05$i$i = 0, $j$1$i$i = 0, $klemm_noise$0$lcssa$i$i = 0.0, $klemm_noise$02$i$i = 0.0, $l$01$i$i = 0, $l$015$i$i = 0, $l$02$i$i = 0, $l$126$i$i = 0, $nBits$0$lcssa$i = 0, $nBits$02$i = 0, $noise_info = 0, $noise_shaping_amp$0$i$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i13 = 0, $or$cond14$i = 0, $or$cond16 = 0, $or$cond3 = 0, $or$cond5$i = 0;
 var $or$cond8 = 0, $or$cond9 = 0, $prev_noise = 0, $s$0$i$i = 0, $s$1$i$i = 0, $s1$0$lcssa$i$i = 0, $s1$07$i$i = 0, $s2$0$lcssa$i$i = 0, $s2$010$i$i = 0, $save_xrpow = 0, $sfb$01$i$i = 0, $sfb$01$i$i11 = 0, $sfb$01$i5$i = 0, $sfb$011$i$i = 0, $sfb$02$i$i = 0, $sfb$031$i$i = 0, $sfb$1$lcssa$i$i = 0, $sfb$13$i$i = 0, $sfb$18$i$i = 0, $sfb$211$i$i = 0;
 var $sfb$3$lcssa$i$i = 0, $sfb$320$i$i = 0, $smax$i$i = 0, $sqrt$i$i = 0.0, $step$0$i = 0, $trigger$0$lcssa$i$i = 0.0, $trigger$012$i$i = 0.0, $trigger$1$i$i = 0.0, $trigger$2$i$i = 0.0, $window$029$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8256|0;
 $cod_info_w = sp + 2992|0;
 $save_xrpow = sp + 688|0;
 $distort = sp + 528|0;
 $best_noise_info = sp + 504|0;
 $prev_noise = sp + 24|0;
 $noise_info = sp;
 $0 = (((($gfc)) + 84928|0) + ($ch<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($gfc)) + 84920|0) + ($ch<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($cod_info)) + 4780|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($cod_info)) + 4844|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($targ_bits) - ($6))|0;
 $8 = (_count_bits($gfc,$xrpow,$cod_info,0)|0);
 $9 = ($1|0)==(1);
 $10 = ($8|0)==($7|0);
 $or$cond5$i = $9 | $10;
 if ($or$cond5$i) {
  $$lcssa$i = $8;
 } else {
  $12 = $8;$CurrentStep$06$i = $1;$Direction$08$i = 0;$flag_GoneOver$07$i = 0;
  while(1) {
   $13 = ($12|0)>($7|0);
   if ($13) {
    $14 = ($Direction$08$i|0)==(2);
    $$flag_GoneOver$0$i = $14 ? 1 : $flag_GoneOver$07$i;
    $15 = ($$flag_GoneOver$0$i|0)==(0);
    $16 = (($CurrentStep$06$i|0) / 2)&-1;
    $CurrentStep$1$i = $15 ? $CurrentStep$06$i : $16;
    $CurrentStep$3$i = $CurrentStep$1$i;$Direction$1$i = 1;$flag_GoneOver$3$i = $$flag_GoneOver$0$i;$step$0$i = $CurrentStep$1$i;
   } else {
    $17 = ($Direction$08$i|0)==(1);
    $$flag_GoneOver$01$i = $17 ? 1 : $flag_GoneOver$07$i;
    $18 = ($$flag_GoneOver$01$i|0)==(0);
    $19 = (($CurrentStep$06$i|0) / 2)&-1;
    $CurrentStep$2$i = $18 ? $CurrentStep$06$i : $19;
    $20 = (0 - ($CurrentStep$2$i))|0;
    $CurrentStep$3$i = $CurrentStep$2$i;$Direction$1$i = 2;$flag_GoneOver$3$i = $$flag_GoneOver$01$i;$step$0$i = $20;
   }
   $21 = HEAP32[$4>>2]|0;
   $22 = (($21) + ($step$0$i))|0;
   $23 = ($22|0)<(0);
   $$$i = $23 ? 0 : $22;
   $24 = ($$$i|0)>(255);
   $$$$i = $24 ? 255 : $$$i;
   HEAP32[$4>>2] = $$$$i;
   $25 = $23 | $24;
   $$$flag_GoneOver$3$i = $25 ? 1 : $flag_GoneOver$3$i;
   $26 = (_count_bits($gfc,$xrpow,$cod_info,0)|0);
   $27 = ($CurrentStep$3$i|0)==(1);
   $28 = ($26|0)==($7|0);
   $or$cond$i = $27 | $28;
   if ($or$cond$i) {
    $$lcssa$i = $26;
    break;
   } else {
    $12 = $26;$CurrentStep$06$i = $CurrentStep$3$i;$Direction$08$i = $Direction$1$i;$flag_GoneOver$07$i = $$$flag_GoneOver$3$i;
   }
  }
 }
 $11 = ($$lcssa$i|0)>($7|0);
 L9: do {
  if ($11) {
   $nBits$02$i = $$lcssa$i;
   while(1) {
    $29 = HEAP32[$4>>2]|0;
    $30 = ($29|0)<(255);
    if (!($30)) {
     $nBits$0$lcssa$i = $nBits$02$i;
     break L9;
    }
    $31 = (($29) + 1)|0;
    HEAP32[$4>>2] = $31;
    $32 = (_count_bits($gfc,$xrpow,$cod_info,0)|0);
    $33 = ($32|0)>($7|0);
    if ($33) {
     $nBits$02$i = $32;
    } else {
     $nBits$0$lcssa$i = $32;
     break;
    }
   }
  } else {
   $nBits$0$lcssa$i = $$lcssa$i;
  }
 } while(0);
 $34 = HEAP32[$4>>2]|0;
 $35 = (($3) - ($34))|0;
 $36 = ($35|0)>(3);
 $37 = $36 ? 4 : 2;
 HEAP32[$0>>2] = $37;
 $38 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $38;
 $39 = ((($cod_info)) + 4768|0);
 HEAP32[$39>>2] = $nBits$0$lcssa$i;
 $40 = ((($gfc)) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0);
 if ($42) {
  $$0 = 100;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($prev_noise|0),0,476)|0;
 (_calc_noise($cod_info,$l3_xmin,$distort,$best_noise_info,$prev_noise)|0);
 $43 = HEAP32[$39>>2]|0;
 $44 = ((($best_noise_info)) + 20|0);
 HEAP32[$44>>2] = $43;
 _memcpy(($cod_info_w|0),($cod_info|0),5252)|0;
 _memcpy(($save_xrpow|0),($xrpow|0),2304)|0;
 $45 = ((($gfc)) + 85096|0);
 $46 = ((($gfc)) + 85092|0);
 $47 = ((($cod_info_w)) + 4836|0);
 $48 = ((($cod_info_w)) + 4860|0);
 $49 = ((($gfc)) + 40|0);
 $50 = ((($cod_info_w)) + 4764|0);
 $51 = ((($cod_info_w)) + 4844|0);
 $52 = ((($cod_info_w)) + 4768|0);
 $53 = ((($cod_info_w)) + 4780|0);
 $54 = ((($best_noise_info)) + 12|0);
 $55 = ((($noise_info)) + 20|0);
 $56 = ((($cod_info)) + 4788|0);
 $57 = ((($gfc)) + 84|0);
 $58 = ((($gfc)) + 88|0);
 $59 = ((($noise_info)) + 16|0);
 $60 = ((($best_noise_info)) + 16|0);
 $61 = ((($noise_info)) + 8|0);
 $62 = ((($best_noise_info)) + 8|0);
 $63 = ((($gfc)) + 48|0);
 $64 = ((($noise_info)) + 12|0);
 $65 = ((($noise_info)) + 4|0);
 $66 = ((($best_noise_info)) + 4|0);
 $67 = ((($cod_info_w)) + 4864|0);
 $68 = ((($gfc)) + 84936|0);
 $69 = ((($cod_info_w)) + 4832|0);
 $70 = ((($cod_info_w)) + 4788|0);
 $71 = ((($gfc)) + 32|0);
 $72 = ((($cod_info_w)) + 4848|0);
 $73 = ((($cod_info_w)) + 4868|0);
 $bRefine$041 = 0;$best_ggain_pass1$042 = 0;$best_part2_3_length$040 = 9999999;
 while(1) {
  $74 = ($bRefine$041|0)==(1);
  $$1$i$i = $74 ? 2 : 1;
  $75 = ($bRefine$041|0)!=(0);
  $age$1 = 0;$best_part2_3_length$1 = $best_part2_3_length$040;
  L19: while(1) {
   $76 = HEAP32[$45>>2]|0;
   $77 = $76 & 2;
   $78 = ($77|0)==(0);
   $$ = $78 ? 3 : 20;
   $79 = HEAP32[$46>>2]|0;
   $80 = ($79|0)==(0);
   $$pre = HEAP32[$48>>2]|0;
   if (!($80)) {
    $81 = (($distort) + ($$pre<<2)|0);
    $82 = +HEAPF32[$81>>2];
    $83 = $82 > 1.0;
    if ($83) {
     $best_part2_3_length$3$ph = $best_part2_3_length$1;
     label = 167;
     break;
    }
    $84 = HEAP32[$70>>2]|0;
    $85 = ($84|0)==(2);
    if ($85) {
     $86 = (($$pre) + 1)|0;
     $87 = (($distort) + ($86<<2)|0);
     $88 = +HEAPF32[$87>>2];
     $89 = $88 > 1.0;
     if ($89) {
      $best_part2_3_length$3$ph = $best_part2_3_length$1;
      label = 167;
      break;
     }
     $90 = (($$pre) + 2)|0;
     $91 = (($distort) + ($90<<2)|0);
     $92 = +HEAPF32[$91>>2];
     $93 = $92 > 1.0;
     if ($93) {
      $best_part2_3_length$3$ph = $best_part2_3_length$1;
      label = 167;
      break;
     }
    }
   }
   $94 = HEAP32[$47>>2]|0;
   $95 = ($94|0)==(0);
   $$$i$i = $95 ? 1.2968395948410034 : 1.6817928552627563;
   $96 = ($$pre|0)>(0);
   if ($96) {
    $sfb$011$i$i = 0;$trigger$012$i$i = 0.0;
    while(1) {
     $97 = (($distort) + ($sfb$011$i$i<<2)|0);
     $98 = +HEAPF32[$97>>2];
     $99 = $trigger$012$i$i < $98;
     $trigger$1$i$i = $99 ? $98 : $trigger$012$i$i;
     $100 = (($sfb$011$i$i) + 1)|0;
     $exitcond$i = ($100|0)==($$pre|0);
     if ($exitcond$i) {
      $trigger$0$lcssa$i$i = $trigger$1$i$i;
      break;
     } else {
      $sfb$011$i$i = $100;$trigger$012$i$i = $trigger$1$i$i;
     }
    }
   } else {
    $trigger$0$lcssa$i$i = 0.0;
   }
   $101 = HEAP32[$49>>2]|0;
   $102 = ($101|0)==(3);
   $noise_shaping_amp$0$i$i = $102 ? $$1$i$i : $101;
   do {
    if ((($noise_shaping_amp$0$i$i|0) == 1)) {
     $103 = $trigger$0$lcssa$i$i;
     $104 = $trigger$0$lcssa$i$i > 1.0;
     if ($104) {
      $sqrt$i$i = (+Math_sqrt((+$103)));
      $fabs$i$i = (+Math_abs((+$sqrt$i$i)));
      $105 = $trigger$0$lcssa$i$i == -inf;
      $106 = $fabs$i$i;
      $107 = $105 ? inf : $106;
      $trigger$2$i$i = $107;
      break;
     } else {
      $108 = $103 * 0.94999999999999996;
      $109 = $108;
      $trigger$2$i$i = $109;
      break;
     }
    } else if ((($noise_shaping_amp$0$i$i|0) == 2)) {
     $trigger$2$i$i = $trigger$0$lcssa$i$i;
    } else {
     $110 = $trigger$0$lcssa$i$i > 1.0;
     if ($110) {
      $trigger$2$i$i = 1.0;
     } else {
      $111 = $trigger$0$lcssa$i$i;
      $112 = $111 * 0.94999999999999996;
      $113 = $112;
      $trigger$2$i$i = $113;
     }
    }
   } while(0);
   if ($96) {
    $551 = $101;$552 = $$pre;$j$05$i$i = 0;$sfb$13$i$i = 0;
   } else {
    $best_part2_3_length$3$ph = $best_part2_3_length$1;
    label = 167;
    break;
   }
   while(1) {
    $114 = (((($cod_info_w)) + 4872|0) + ($sfb$13$i$i<<2)|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($115) + ($j$05$i$i))|0;
    $117 = (($distort) + ($sfb$13$i$i<<2)|0);
    $118 = +HEAPF32[$117>>2];
    $119 = $118 < $trigger$2$i$i;
    if ($119) {
     $146 = $552;$553 = $551;
    } else {
     $120 = HEAP32[$45>>2]|0;
     $121 = $120 & 2;
     $122 = ($121|0)==(0);
     if (!($122)) {
      $123 = (((($gfc)) + 84936|0) + ($sfb$13$i$i<<2)|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0);
      $126 = $125&1;
      HEAP32[$123>>2] = $126;
      if (!($125)) {
       $127 = HEAP32[$49>>2]|0;
       $128 = ($127|0)==(2);
       if ($128) {
        $554 = 2;
        break;
       }
      }
     }
     $129 = (((($cod_info_w)) + 4608|0) + ($sfb$13$i$i<<2)|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($130) + 1)|0;
     HEAP32[$129>>2] = $131;
     $132 = ($115|0)>(0);
     if ($132) {
      $133 = (0 - ($115))|0;
      $$pre61 = +HEAPF32[$50>>2];
      $139 = $$pre61;$l$02$i$i = $133;
      while(1) {
       $134 = (($l$02$i$i) + ($116))|0;
       $135 = (($xrpow) + ($134<<2)|0);
       $136 = +HEAPF32[$135>>2];
       $137 = $136 * $$$i$i;
       HEAPF32[$135>>2] = $137;
       $138 = $137 > $139;
       if ($138) {
        HEAPF32[$50>>2] = $137;
        $555 = $137;
       } else {
        $555 = $139;
       }
       $140 = (($l$02$i$i) + 1)|0;
       $141 = ($l$02$i$i|0)<(-1);
       if ($141) {
        $139 = $555;$l$02$i$i = $140;
       } else {
        break;
       }
      }
     }
     $142 = HEAP32[$49>>2]|0;
     $143 = ($142|0)==(2);
     if ($143) {
      $554 = 2;
      break;
     }
     $$pre$i$i = HEAP32[$48>>2]|0;
     $146 = $$pre$i$i;$553 = $142;
    }
    $144 = (($sfb$13$i$i) + 1)|0;
    $145 = ($144|0)<($146|0);
    if ($145) {
     $551 = $553;$552 = $146;$j$05$i$i = $116;$sfb$13$i$i = $144;
    } else {
     $554 = $553;
     break;
    }
   }
   $$pre$i = HEAP32[$48>>2]|0;
   $147 = ($$pre$i|0)>(0);
   if ($147) {
    $sfb$01$i$i = 0;
   } else {
    $best_part2_3_length$3$ph = $best_part2_3_length$1;
    label = 167;
    break;
   }
   while(1) {
    $150 = (((($cod_info_w)) + 4608|0) + ($sfb$01$i$i<<2)|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (((($cod_info_w)) + 5028|0) + ($sfb$01$i$i<<2)|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (((($cod_info_w)) + 4808|0) + ($153<<2)|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = (0 - ($155))|0;
    $157 = ($151|0)==($156|0);
    $148 = (($sfb$01$i$i) + 1)|0;
    if ($157) {
     break;
    }
    $149 = ($148|0)<($$pre$i|0);
    if ($149) {
     $sfb$01$i$i = $148;
    } else {
     $541 = $554;$best_part2_3_length$3 = $best_part2_3_length$1;
     break L19;
    }
   }
   $158 = (_scale_bitcount($gfc,$cod_info_w)|0);
   $159 = ($158|0)==(0);
   if (!($159)) {
    $160 = HEAP32[$40>>2]|0;
    $161 = ($160|0)>(1);
    if (!($161)) {
     $best_part2_3_length$3$ph = $best_part2_3_length$1;
     label = 167;
     break;
    }
    _memset(($68|0),0,156)|0;
    $162 = HEAP32[$47>>2]|0;
    $163 = ($162|0)==(0);
    L65: do {
     if ($163) {
      $164 = HEAP32[$48>>2]|0;
      $165 = ($164|0)>(0);
      if ($165) {
       $j$03$i$i = 0;$sfb$02$i$i = 0;
       while(1) {
        $166 = (((($cod_info_w)) + 4872|0) + ($sfb$02$i$i<<2)|0);
        $167 = HEAP32[$166>>2]|0;
        $168 = (((($cod_info_w)) + 4608|0) + ($sfb$02$i$i<<2)|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = HEAP32[$69>>2]|0;
        $171 = ($170|0)==(0);
        if ($171) {
         $s$0$i$i = $169;
        } else {
         $172 = (12112 + ($sfb$02$i$i<<2)|0);
         $173 = HEAP32[$172>>2]|0;
         $174 = (($173) + ($169))|0;
         $s$0$i$i = $174;
        }
        $175 = (($167) + ($j$03$i$i))|0;
        $176 = $s$0$i$i & 1;
        $177 = ($176|0)==(0);
        do {
         if ($177) {
          $s$1$i$i = $s$0$i$i;
         } else {
          $178 = (($s$0$i$i) + 1)|0;
          $179 = ($167|0)>(0);
          if (!($179)) {
           $s$1$i$i = $178;
           break;
          }
          $180 = (0 - ($167))|0;
          $$pre64 = +HEAPF32[$50>>2];
          $186 = $$pre64;$l$01$i$i = $180;
          while(1) {
           $181 = (($l$01$i$i) + ($175))|0;
           $182 = (($xrpow) + ($181<<2)|0);
           $183 = +HEAPF32[$182>>2];
           $184 = $183 * 1.2968395948410034;
           HEAPF32[$182>>2] = $184;
           $185 = $184 > $186;
           if ($185) {
            HEAPF32[$50>>2] = $184;
            $556 = $184;
           } else {
            $556 = $186;
           }
           $187 = (($l$01$i$i) + 1)|0;
           $188 = ($l$01$i$i|0)<(-1);
           if ($188) {
            $186 = $556;$l$01$i$i = $187;
           } else {
            $s$1$i$i = $178;
            break;
           }
          }
         }
        } while(0);
        $189 = $s$1$i$i >> 1;
        HEAP32[$168>>2] = $189;
        $190 = (($sfb$02$i$i) + 1)|0;
        $191 = HEAP32[$48>>2]|0;
        $192 = ($190|0)<($191|0);
        if ($192) {
         $j$03$i$i = $175;$sfb$02$i$i = $190;
        } else {
         break;
        }
       }
      }
      HEAP32[$69>>2] = 0;
      HEAP32[$47>>2] = 1;
     } else {
      $193 = HEAP32[$70>>2]|0;
      $194 = ($193|0)==(2);
      if (!($194)) {
       $best_part2_3_length$3$ph = $best_part2_3_length$1;
       label = 167;
       break L19;
      }
      $195 = HEAP32[$71>>2]|0;
      $196 = ($195|0)>(0);
      if (!($196)) {
       $best_part2_3_length$3$ph = $best_part2_3_length$1;
       label = 167;
       break L19;
      }
      $197 = HEAP32[$72>>2]|0;
      $198 = ($197|0)>(0);
      if ($198) {
       $sfb$031$i$i = 0;
       while(1) {
        $201 = (((($cod_info_w)) + 4608|0) + ($sfb$031$i$i<<2)|0);
        $202 = HEAP32[$201>>2]|0;
        $203 = ($202|0)>(15);
        $199 = (($sfb$031$i$i) + 1)|0;
        if ($203) {
         $best_part2_3_length$3$ph = $best_part2_3_length$1;
         label = 167;
         break L19;
        }
        $200 = ($199|0)<($197|0);
        if ($200) {
         $sfb$031$i$i = $199;
        } else {
         $205 = $197;$indvars$iv$i$i = 3;$indvars$iv36$i$i = -1;$window$029$i$i = 0;
         break;
        }
       }
      } else {
       $205 = $197;$indvars$iv$i$i = 3;$indvars$iv36$i$i = -1;$window$029$i$i = 0;
      }
      while(1) {
       $204 = (($window$029$i$i) + ($205))|0;
       $206 = HEAP32[$73>>2]|0;
       $207 = ($204|0)<($206|0);
       if ($207) {
        $208 = (($indvars$iv$i$i) + ($205))|0;
        $209 = ($206|0)>($208|0);
        $210 = (($indvars$iv36$i$i) - ($205))|0;
        $s1$07$i$i = 0;$sfb$18$i$i = $204;
        while(1) {
         $217 = (((($cod_info_w)) + 4608|0) + ($sfb$18$i$i<<2)|0);
         $218 = HEAP32[$217>>2]|0;
         $219 = ($s1$07$i$i|0)<($218|0);
         $$s1$0$i$i = $219 ? $218 : $s1$07$i$i;
         $220 = (($sfb$18$i$i) + 3)|0;
         $221 = ($220|0)<($206|0);
         if ($221) {
          $s1$07$i$i = $$s1$0$i$i;$sfb$18$i$i = $220;
         } else {
          $$s1$0$i$i$lcssa = $$s1$0$i$i;
          break;
         }
        }
        $smax$i$i = $209 ? $206 : $208;
        $211 = (($smax$i$i) + ($210))|0;
        $212 = (($211>>>0) % 3)&-1;
        $213 = (($211) + ($208))|0;
        $214 = (($213) - ($212))|0;
        $s1$0$lcssa$i$i = $$s1$0$i$i$lcssa;$sfb$1$lcssa$i$i = $214;
       } else {
        $s1$0$lcssa$i$i = 0;$sfb$1$lcssa$i$i = $204;
       }
       $215 = HEAP32[$48>>2]|0;
       $216 = ($sfb$1$lcssa$i$i|0)<($215|0);
       if ($216) {
        $s2$010$i$i = 0;$sfb$211$i$i = $sfb$1$lcssa$i$i;
        while(1) {
         $222 = (((($cod_info_w)) + 4608|0) + ($sfb$211$i$i<<2)|0);
         $223 = HEAP32[$222>>2]|0;
         $224 = ($s2$010$i$i|0)<($223|0);
         $$s2$0$i$i = $224 ? $223 : $s2$010$i$i;
         $225 = (($sfb$211$i$i) + 3)|0;
         $226 = ($225|0)<($215|0);
         if ($226) {
          $s2$010$i$i = $$s2$0$i$i;$sfb$211$i$i = $225;
         } else {
          $s2$0$lcssa$i$i = $$s2$0$i$i;
          break;
         }
        }
       } else {
        $s2$0$lcssa$i$i = 0;
       }
       $227 = ($s1$0$lcssa$i$i|0)<(16);
       $228 = ($s2$0$lcssa$i$i|0)<(8);
       $or$cond$i$i = $227 & $228;
       do {
        if ($or$cond$i$i) {
         $$pre41$i$i = (($window$029$i$i) + 1)|0;
         $$pre$phi$i$iZ2D = $$pre41$i$i;$557 = $215;
        } else {
         $229 = (((($cod_info_w)) + 4808|0) + ($window$029$i$i<<2)|0);
         $230 = HEAP32[$229>>2]|0;
         $231 = ($230|0)>(6);
         if ($231) {
          $best_part2_3_length$3$ph = $best_part2_3_length$1;
          label = 167;
          break L19;
         }
         $232 = (($230) + 1)|0;
         HEAP32[$229>>2] = $232;
         $233 = HEAP32[$72>>2]|0;
         $234 = (((($gfc)) + 21360|0) + ($233<<2)|0);
         $235 = HEAP32[$234>>2]|0;
         $236 = (($233) + ($window$029$i$i))|0;
         $237 = HEAP32[$48>>2]|0;
         $238 = ($236|0)<($237|0);
         $239 = (($window$029$i$i) + 1)|0;
         if ($238) {
          $240 = (2 - ($window$029$i$i))|0;
          $j$019$i$i = $235;$sfb$320$i$i = $236;
          while(1) {
           $241 = (((($cod_info_w)) + 4872|0) + ($sfb$320$i$i<<2)|0);
           $242 = HEAP32[$241>>2]|0;
           $243 = (((($cod_info_w)) + 4608|0) + ($sfb$320$i$i<<2)|0);
           $244 = HEAP32[$243>>2]|0;
           $245 = HEAP32[$47>>2]|0;
           $246 = 4 >>> $245;
           $247 = (($244) - ($246))|0;
           $248 = ($247|0)>(-1);
           if ($248) {
            HEAP32[$243>>2] = $247;
            $249 = ($242*3)|0;
            $250 = (($249) + ($j$019$i$i))|0;
            $j$1$i$i = $250;
           } else {
            HEAP32[$243>>2] = 0;
            $251 = HEAP32[$47>>2]|0;
            $252 = (($251) + 1)|0;
            $253 = $247 << $252;
            $254 = (($253) + 210)|0;
            $255 = (79704 + ($254<<2)|0);
            $256 = +HEAPF32[$255>>2];
            $257 = Math_imul($242, $239)|0;
            $258 = (($257) + ($j$019$i$i))|0;
            $259 = ($242|0)>(0);
            if ($259) {
             $260 = (0 - ($242))|0;
             $$pre62 = +HEAPF32[$50>>2];
             $266 = $$pre62;$l$015$i$i = $260;
             while(1) {
              $261 = (($l$015$i$i) + ($258))|0;
              $262 = (($xrpow) + ($261<<2)|0);
              $263 = +HEAPF32[$262>>2];
              $264 = $263 * $256;
              HEAPF32[$262>>2] = $264;
              $265 = $264 > $266;
              if ($265) {
               HEAPF32[$50>>2] = $264;
               $559 = $264;
              } else {
               $559 = $266;
              }
              $267 = (($l$015$i$i) + 1)|0;
              $268 = ($l$015$i$i|0)<(-1);
              if ($268) {
               $266 = $559;$l$015$i$i = $267;
              } else {
               break;
              }
             }
            }
            $269 = Math_imul($242, $240)|0;
            $270 = (($258) + ($269))|0;
            $j$1$i$i = $270;
           }
           $271 = (($sfb$320$i$i) + 3)|0;
           $272 = HEAP32[$48>>2]|0;
           $273 = ($271|0)<($272|0);
           if ($273) {
            $j$019$i$i = $j$1$i$i;$sfb$320$i$i = $271;
           } else {
            $558 = $272;$j$0$lcssa$i$i = $j$1$i$i;$sfb$3$lcssa$i$i = $271;
            break;
           }
          }
         } else {
          $558 = $237;$j$0$lcssa$i$i = $235;$sfb$3$lcssa$i$i = $236;
         }
         $274 = +HEAPF32[(80512)>>2];
         $275 = (((($cod_info_w)) + 4872|0) + ($sfb$3$lcssa$i$i<<2)|0);
         $276 = HEAP32[$275>>2]|0;
         $277 = Math_imul($276, $239)|0;
         $278 = (($277) + ($j$0$lcssa$i$i))|0;
         $279 = ($276|0)>(0);
         if (!($279)) {
          $$pre$phi$i$iZ2D = $239;$557 = $558;
          break;
         }
         $280 = (0 - ($276))|0;
         $$pre63 = +HEAPF32[$50>>2];
         $286 = $$pre63;$l$126$i$i = $280;
         while(1) {
          $281 = (($278) + ($l$126$i$i))|0;
          $282 = (($xrpow) + ($281<<2)|0);
          $283 = +HEAPF32[$282>>2];
          $284 = $283 * $274;
          HEAPF32[$282>>2] = $284;
          $285 = $284 > $286;
          if ($285) {
           HEAPF32[$50>>2] = $284;
           $560 = $284;
          } else {
           $560 = $286;
          }
          $287 = (($l$126$i$i) + 1)|0;
          $288 = ($l$126$i$i|0)<(-1);
          if ($288) {
           $286 = $560;$l$126$i$i = $287;
          } else {
           $$pre$phi$i$iZ2D = $239;$557 = $558;
           break;
          }
         }
        }
       } while(0);
       $289 = ($$pre$phi$i$iZ2D|0)<(3);
       if (!($289)) {
        $$lcssa120 = $557;
        break;
       }
       $indvars$iv$next37$i$i = (($indvars$iv36$i$i) + -1)|0;
       $indvars$iv$next$i$i = (($indvars$iv$i$i) + 1)|0;
       $$pre$i13$i = HEAP32[$72>>2]|0;
       $205 = $$pre$i13$i;$indvars$iv$i$i = $indvars$iv$next$i$i;$indvars$iv36$i$i = $indvars$iv$next37$i$i;$window$029$i$i = $$pre$phi$i$iZ2D;
      }
      $290 = ($$lcssa120|0)>(0);
      if ($290) {
       $sfb$01$i5$i = 0;
      } else {
       $best_part2_3_length$3$ph = $best_part2_3_length$1;
       label = 167;
       break L19;
      }
      while(1) {
       $293 = (((($cod_info_w)) + 4608|0) + ($sfb$01$i5$i<<2)|0);
       $294 = HEAP32[$293>>2]|0;
       $295 = (((($cod_info_w)) + 5028|0) + ($sfb$01$i5$i<<2)|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = (((($cod_info_w)) + 4808|0) + ($296<<2)|0);
       $298 = HEAP32[$297>>2]|0;
       $299 = (0 - ($298))|0;
       $300 = ($294|0)==($299|0);
       $291 = (($sfb$01$i5$i) + 1)|0;
       if ($300) {
        break L65;
       }
       $292 = ($291|0)<($$lcssa120|0);
       if ($292) {
        $sfb$01$i5$i = $291;
       } else {
        $best_part2_3_length$3$ph = $best_part2_3_length$1;
        label = 167;
        break L19;
       }
      }
     }
    } while(0);
    $301 = (_scale_bitcount($gfc,$cod_info_w)|0);
    $302 = ($301|0)==(0);
    if (!($302)) {
     $best_part2_3_length$3$ph = $best_part2_3_length$1;
     label = 167;
     break;
    }
   }
   $303 = HEAP32[$47>>2]|0;
   $304 = ($303|0)==(0);
   $$6 = $304 ? 255 : 254;
   $305 = HEAP32[$51>>2]|0;
   $306 = (($targ_bits) - ($305))|0;
   $307 = ($306|0)<(1);
   if ($307) {
    $best_part2_3_length$3$ph = $best_part2_3_length$1;
    label = 167;
    break;
   }
   $308 = (_count_bits($gfc,$xrpow,$cod_info_w,$prev_noise)|0);
   HEAP32[$52>>2] = $308;
   $309 = ($308|0)>($306|0);
   $310 = HEAP32[$53>>2]|0;
   $311 = ($310|0)<=($$6|0);
   $312 = $309 & $311;
   if ($312) {
    $314 = $310;
    while(1) {
     $313 = (($314) + 1)|0;
     HEAP32[$53>>2] = $313;
     $315 = (_count_bits($gfc,$xrpow,$cod_info_w,$prev_noise)|0);
     HEAP32[$52>>2] = $315;
     $316 = ($315|0)>($306|0);
     $317 = HEAP32[$53>>2]|0;
     $318 = ($317|0)<=($$6|0);
     $319 = $316 & $318;
     if ($319) {
      $314 = $317;
     } else {
      $$lcssa26 = $317;
      break;
     }
    }
   } else {
    $$lcssa26 = $310;
   }
   $320 = ($$lcssa26|0)>($$6|0);
   if ($320) {
    $best_part2_3_length$3$ph = $best_part2_3_length$1;
    label = 167;
    break;
   }
   $321 = HEAP32[$54>>2]|0;
   $322 = ($321|0)==(0);
   if ($322) {
    $323 = (_count_bits($gfc,$xrpow,$cod_info_w,$prev_noise)|0);
    HEAP32[$52>>2] = $323;
    $324 = ($323|0)>($best_part2_3_length$1|0);
    $325 = HEAP32[$53>>2]|0;
    $326 = ($325|0)<=($$6|0);
    $327 = $324 & $326;
    if ($327) {
     $329 = $325;
     while(1) {
      $328 = (($329) + 1)|0;
      HEAP32[$53>>2] = $328;
      $330 = (_count_bits($gfc,$xrpow,$cod_info_w,$prev_noise)|0);
      HEAP32[$52>>2] = $330;
      $331 = ($330|0)>($best_part2_3_length$1|0);
      $332 = HEAP32[$53>>2]|0;
      $333 = ($332|0)<=($$6|0);
      $334 = $331 & $333;
      if ($334) {
       $329 = $332;
      } else {
       $$lcssa27 = $332;
       break;
      }
     }
    } else {
     $$lcssa27 = $325;
    }
    $335 = ($$lcssa27|0)>($$6|0);
    if ($335) {
     $best_part2_3_length$3$ph = $best_part2_3_length$1;
     label = 167;
     break;
    }
   }
   (_calc_noise($cod_info_w,$l3_xmin,$distort,$noise_info,$prev_noise)|0);
   $336 = HEAP32[$52>>2]|0;
   HEAP32[$55>>2] = $336;
   $337 = HEAP32[$56>>2]|0;
   $338 = ($337|0)==(2);
   $better$0$in = $338 ? $58 : $57;
   $better$0 = HEAP32[$better$0$in>>2]|0;
   L150: do {
    switch ($better$0|0) {
    case 2:  {
     $407 = +HEAPF32[$65>>2];
     $408 = +HEAPF32[$66>>2];
     $409 = $407 < $408;
     $410 = $409&1;
     $better$0$i = $410;
     break;
    }
    case 3:  {
     $411 = +HEAPF32[$65>>2];
     $412 = +HEAPF32[$66>>2];
     $413 = $411 < $412;
     if ($413) {
      $414 = +HEAPF32[$61>>2];
      $415 = +HEAPF32[$62>>2];
      $416 = $414 < $415;
      $418 = $416;
     } else {
      $418 = 0;
     }
     $417 = $418&1;
     $better$0$i = $417;
     break;
    }
    case 8:  {
     $383 = HEAP32[$67>>2]|0;
     $384 = ($383|0)>(0);
     if ($384) {
      $klemm_noise$02$i$i = 1.0000000000000001E-37;$sfb$01$i$i11 = 0;
      while(1) {
       $385 = (($distort) + ($sfb$01$i$i11<<2)|0);
       $386 = +HEAPF32[$385>>2];
       $387 = $386;
       $388 = $387 * $387;
       $389 = $388 * 0.63200000000000001;
       $390 = $389 * $387;
       $391 = $390 + 0.36799999999999999;
       $392 = $391;
       $393 = (+_fast_log2($392));
       $394 = $393;
       $395 = $394 * 0.30102999566398114;
       $396 = $395 + $klemm_noise$02$i$i;
       $397 = (($sfb$01$i$i11) + 1)|0;
       $398 = HEAP32[$67>>2]|0;
       $399 = ($397|0)<($398|0);
       if ($399) {
        $klemm_noise$02$i$i = $396;$sfb$01$i$i11 = $397;
       } else {
        $klemm_noise$0$lcssa$i$i = $396;
        break;
       }
      }
     } else {
      $klemm_noise$0$lcssa$i$i = 1.0000000000000001E-37;
     }
     $400 = $klemm_noise$0$lcssa$i$i < 9.9999999999999995E-21;
     $401 = $klemm_noise$0$lcssa$i$i;
     $402 = $400 ? 9.9999996826552254E-21 : $401;
     HEAPF32[$61>>2] = $402;
     $405 = $402;
     label = 118;
     break;
    }
    case 1:  {
     $$pre$i10 = +HEAPF32[$61>>2];
     $405 = $$pre$i10;
     label = 118;
     break;
    }
    case 0:  {
     $362 = HEAP32[$64>>2]|0;
     $363 = HEAP32[$54>>2]|0;
     $364 = ($362|0)<($363|0);
     do {
      if ($364) {
       $382 = 1;
      } else {
       $365 = ($362|0)==($363|0);
       if ($365) {
        $366 = +HEAPF32[$noise_info>>2];
        $367 = +HEAPF32[$best_noise_info>>2];
        $368 = $366 < $367;
        if ($368) {
         $382 = 1;
        } else {
         $fabsf9$i = (+Math_abs((+$366)));
         $fabsf10$i = (+Math_abs((+$367)));
         $369 = $fabsf9$i > $fabsf10$i;
         $370 = $366 - $367;
         $fabsf11$i = (+Math_abs((+$370)));
         $371 = $fabsf11$i;
         if ($369) {
          $372 = $fabsf9$i;
          $373 = $372 * 9.9999999747524271E-7;
          $374 = !($371 <= $373);
          if ($374) {
           $382 = 0;
           break;
          }
         } else {
          $375 = $fabsf10$i;
          $376 = $375 * 9.9999999747524271E-7;
          $377 = !($371 <= $376);
          if ($377) {
           $382 = 0;
           break;
          }
         }
         $378 = +HEAPF32[$65>>2];
         $379 = +HEAPF32[$66>>2];
         $380 = $378 < $379;
         $382 = $380;
        }
       } else {
        $382 = 0;
       }
      }
     } while(0);
     $381 = $382&1;
     $better$0$i = $381;
     break;
    }
    case 5:  {
     $463 = +HEAPF32[$noise_info>>2];
     $464 = +HEAPF32[$best_noise_info>>2];
     $465 = $463 < $464;
     do {
      if ($465) {
       $479 = 1;
      } else {
       $fabsf6$i = (+Math_abs((+$463)));
       $fabsf7$i = (+Math_abs((+$464)));
       $466 = $fabsf6$i > $fabsf7$i;
       $467 = $463 - $464;
       $fabsf8$i = (+Math_abs((+$467)));
       $468 = $fabsf8$i;
       if ($466) {
        $469 = $fabsf6$i;
        $470 = $469 * 9.9999999747524271E-7;
        $471 = !($468 <= $470);
        if ($471) {
         $479 = 0;
         break;
        }
       } else {
        $472 = $fabsf7$i;
        $473 = $472 * 9.9999999747524271E-7;
        $474 = !($468 <= $473);
        if ($474) {
         $479 = 0;
         break;
        }
       }
       $475 = +HEAPF32[$65>>2];
       $476 = +HEAPF32[$66>>2];
       $477 = $475 < $476;
       $479 = $477;
      }
     } while(0);
     $478 = $479&1;
     $better$0$i = $478;
     break;
    }
    case 4:  {
     $419 = +HEAPF32[$61>>2];
     $420 = !($419 <= 0.0);
     do {
      if ($420) {
       $421 = $419;
       $442 = $421;
       label = 130;
      } else {
       $422 = +HEAPF32[$62>>2];
       $423 = $422;
       $424 = $423 > 0.20000000000000001;
       if ($424) {
        $462 = 1;
       } else {
        $425 = $419;
        $426 = $422 < 0.0;
        $427 = $425 + -0.20000000000000001;
        $428 = $423 > $427;
        $or$cond16 = $426 & $428;
        if ($or$cond16) {
         $429 = +HEAPF32[$65>>2];
         $430 = +HEAPF32[$66>>2];
         $431 = $429 < $430;
         if ($431) {
          $462 = 1;
          break;
         }
        }
        $$not = !($422 > 0.0);
        $$not84 = $428 ^ 1;
        $brmerge = $$not | $$not84;
        if ($brmerge) {
         $442 = $425;
         label = 130;
        } else {
         $432 = +HEAPF32[$65>>2];
         $433 = +HEAPF32[$66>>2];
         $434 = +HEAPF32[$best_noise_info>>2];
         $435 = $434 + $433;
         $436 = $432 < $435;
         if ($436) {
          $462 = 1;
         } else {
          $442 = $425;
          label = 130;
         }
        }
       }
      }
     } while(0);
     do {
      if ((label|0) == 130) {
       label = 0;
       $437 = $419 > 0.0;
       if ($437) {
        $438 = +HEAPF32[$62>>2];
        $439 = $438;
        $440 = $439 > -0.050000000000000003;
        $441 = $442 + -0.10000000000000001;
        $443 = $439 > $441;
        $or$cond$i13 = $440 & $443;
        if ($or$cond$i13) {
         $444 = +HEAPF32[$65>>2];
         $445 = +HEAPF32[$noise_info>>2];
         $446 = $445 + $444;
         $447 = +HEAPF32[$66>>2];
         $448 = +HEAPF32[$best_noise_info>>2];
         $449 = $448 + $447;
         $450 = $446 < $449;
         if ($450) {
          $462 = 1;
          break;
         }
        }
        $451 = $439 > -0.10000000000000001;
        $452 = $442 + -0.14999999999999999;
        $453 = $439 > $452;
        $or$cond14$i = $451 & $453;
        if ($or$cond14$i) {
         $454 = +HEAPF32[$65>>2];
         $455 = +HEAPF32[$noise_info>>2];
         $factor$i = $455 * 2.0;
         $456 = $factor$i + $454;
         $457 = +HEAPF32[$66>>2];
         $458 = +HEAPF32[$best_noise_info>>2];
         $factor17$i = $458 * 2.0;
         $459 = $factor17$i + $457;
         $460 = $456 < $459;
         $462 = $460;
        } else {
         $462 = 0;
        }
       } else {
        $462 = 0;
       }
      }
     } while(0);
     $461 = $462&1;
     $better$0$i = $461;
     break;
    }
    case 7:  {
     $509 = HEAP32[$64>>2]|0;
     $510 = HEAP32[$54>>2]|0;
     $511 = ($509|0)<($510|0);
     if ($511) {
      $516 = 1;
     } else {
      $512 = +HEAPF32[$noise_info>>2];
      $513 = +HEAPF32[$best_noise_info>>2];
      $514 = $512 < $513;
      $516 = $514;
     }
     $515 = $516&1;
     $better$0$i = $515;
     break;
    }
    case 6:  {
     $480 = +HEAPF32[$noise_info>>2];
     $481 = +HEAPF32[$best_noise_info>>2];
     $482 = $480 < $481;
     do {
      if ($482) {
       $508 = 1;
      } else {
       $fabsf$i = (+Math_abs((+$480)));
       $fabsf1$i = (+Math_abs((+$481)));
       $483 = $fabsf$i > $fabsf1$i;
       $484 = $480 - $481;
       $fabsf2$i = (+Math_abs((+$484)));
       $485 = $fabsf2$i;
       if ($483) {
        $486 = $fabsf$i;
        $487 = $486 * 9.9999999747524271E-7;
        $488 = !($485 <= $487);
        if ($488) {
         $508 = 0;
         break;
        }
       } else {
        $489 = $fabsf1$i;
        $490 = $489 * 9.9999999747524271E-7;
        $491 = !($485 <= $490);
        if ($491) {
         $508 = 0;
         break;
        }
       }
       $492 = +HEAPF32[$61>>2];
       $493 = +HEAPF32[$62>>2];
       $494 = $492 < $493;
       if ($494) {
        $508 = 1;
       } else {
        $fabsf3$i = (+Math_abs((+$492)));
        $fabsf4$i = (+Math_abs((+$493)));
        $495 = $fabsf3$i > $fabsf4$i;
        $496 = $492 - $493;
        $fabsf5$i = (+Math_abs((+$496)));
        $497 = $fabsf5$i;
        if ($495) {
         $498 = $fabsf3$i;
         $499 = $498 * 9.9999999747524271E-7;
         $500 = !($497 <= $499);
         if ($500) {
          $508 = 0;
          break;
         }
        } else {
         $501 = $fabsf4$i;
         $502 = $501 * 9.9999999747524271E-7;
         $503 = !($497 <= $502);
         if ($503) {
          $508 = 0;
          break;
         }
        }
        $504 = +HEAPF32[$65>>2];
        $505 = +HEAPF32[$66>>2];
        $506 = $504 <= $505;
        $508 = $506;
       }
      }
     } while(0);
     $507 = $508&1;
     $better$0$i = $507;
     break;
    }
    default: {
     $339 = HEAP32[$54>>2]|0;
     $340 = ($339|0)>(0);
     if ($340) {
      $341 = HEAP32[$59>>2]|0;
      $342 = HEAP32[$60>>2]|0;
      $343 = ($341|0)<=($342|0);
      $344 = $343&1;
      $345 = ($341|0)==($342|0);
      if (!($345)) {
       $better$0$i = $344;
       break L150;
      }
      $346 = HEAP32[$44>>2]|0;
      $347 = ($336|0)<($346|0);
      $348 = $347&1;
      $better$0$i = $348;
      break L150;
     }
     $349 = +HEAPF32[$61>>2];
     $350 = $349 < 0.0;
     if ($350) {
      $351 = $349 * 10.0;
      $352 = (+($336|0));
      $353 = $351 + $352;
      $354 = +HEAPF32[$62>>2];
      $355 = $354 * 10.0;
      $356 = HEAP32[$44>>2]|0;
      $357 = (+($356|0));
      $358 = $357 + $355;
      $359 = $353 <= $358;
      $361 = $359;
     } else {
      $361 = 0;
     }
     $360 = $361&1;
     $better$0$i = $360;
    }
    }
   } while(0);
   if ((label|0) == 118) {
    label = 0;
    $403 = +HEAPF32[$62>>2];
    $404 = $405 < $403;
    $406 = $404&1;
    $better$0$i = $406;
   }
   $517 = HEAP32[$54>>2]|0;
   $518 = ($517|0)==(0);
   if ($518) {
    $519 = ($better$0$i|0)==(0);
    if ($519) {
     $524 = 0;
    } else {
     $520 = HEAP32[$55>>2]|0;
     $521 = HEAP32[$44>>2]|0;
     $522 = ($520|0)<($521|0);
     $524 = $522;
    }
    $523 = $524&1;
    $better$1$i = $523;
   } else {
    $better$1$i = $better$0$i;
   }
   $525 = ($better$1$i|0)==(0);
   do {
    if ($525) {
     $527 = HEAP32[$63>>2]|0;
     $528 = ($527|0)==(0);
     if ($528) {
      $529 = (($age$1) + 1)|0;
      $530 = ($age$1|0)>=($$|0);
      $or$cond8 = $530 & $518;
      if ($or$cond8) {
       $best_part2_3_length$3$ph = $best_part2_3_length$1;
       label = 167;
       break L19;
      }
      $531 = HEAP32[$49>>2]|0;
      $532 = ($531|0)==(3);
      $or$cond = $75 & $532;
      $533 = ($age$1|0)>(29);
      $or$cond3 = $533 & $or$cond;
      if ($or$cond3) {
       $best_part2_3_length$3$ph = $best_part2_3_length$1;
       label = 167;
       break L19;
      }
      if (!($or$cond)) {
       $age$2 = $529;$best_part2_3_length$2 = $best_part2_3_length$1;
       break;
      }
      $534 = HEAP32[$53>>2]|0;
      $535 = (($534) - ($best_ggain_pass1$042))|0;
      $536 = ($535|0)>(15);
      if ($536) {
       $best_part2_3_length$3$ph = $best_part2_3_length$1;
       label = 167;
       break L19;
      } else {
       $age$2 = $529;$best_part2_3_length$2 = $best_part2_3_length$1;
      }
     } else {
      $age$2 = $age$1;$best_part2_3_length$2 = $best_part2_3_length$1;
     }
    } else {
     $526 = HEAP32[$39>>2]|0;
     ;HEAP32[$best_noise_info>>2]=HEAP32[$noise_info>>2]|0;HEAP32[$best_noise_info+4>>2]=HEAP32[$noise_info+4>>2]|0;HEAP32[$best_noise_info+8>>2]=HEAP32[$noise_info+8>>2]|0;HEAP32[$best_noise_info+12>>2]=HEAP32[$noise_info+12>>2]|0;HEAP32[$best_noise_info+16>>2]=HEAP32[$noise_info+16>>2]|0;HEAP32[$best_noise_info+20>>2]=HEAP32[$noise_info+20>>2]|0;
     _memcpy(($cod_info|0),($cod_info_w|0),5252)|0;
     _memcpy(($save_xrpow|0),($xrpow|0),2304)|0;
     $age$2 = 0;$best_part2_3_length$2 = $526;
    }
   } while(0);
   $537 = HEAP32[$53>>2]|0;
   $538 = HEAP32[$47>>2]|0;
   $539 = (($538) + ($537))|0;
   $540 = ($539|0)<(255);
   if ($540) {
    $age$1 = $age$2;$best_part2_3_length$1 = $best_part2_3_length$2;
   } else {
    $best_part2_3_length$3$ph = $best_part2_3_length$2;
    label = 167;
    break;
   }
  }
  if ((label|0) == 167) {
   label = 0;
   $$pre65 = HEAP32[$49>>2]|0;
   $541 = $$pre65;$best_part2_3_length$3 = $best_part2_3_length$3$ph;
  }
  $542 = ($541|0)==(3);
  $543 = ($bRefine$041|0)==(0);
  $or$cond9 = $543 & $542;
  if (!($or$cond9)) {
   break;
  }
  _memcpy(($cod_info_w|0),($cod_info|0),5252)|0;
  _memcpy(($xrpow|0),($save_xrpow|0),2304)|0;
  $544 = HEAP32[$53>>2]|0;
  $bRefine$041 = 1;$best_ggain_pass1$042 = $544;$best_part2_3_length$040 = $best_part2_3_length$3;
 }
 $545 = ((($gfc)) + 104|0);
 $546 = HEAP32[$545>>2]|0;
 if ((($546|0) == 1) | (($546|0) == 4) | (($546|0) == 2)) {
  _memcpy(($xrpow|0),($save_xrpow|0),2304)|0;
 } else {
  $547 = HEAP32[$45>>2]|0;
  $548 = $547 & 1;
  $549 = ($548|0)==(0);
  if (!($549)) {
   _trancate_smallspectrums($gfc,$cod_info,$l3_xmin,$xrpow);
  }
 }
 $550 = HEAP32[$54>>2]|0;
 $$0 = $550;
 STACKTOP = sp;return ($$0|0);
}
function _trancate_smallspectrums($gfc,$gi,$l3_xmin,$work) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 $l3_xmin = $l3_xmin|0;
 $work = $work|0;
 var $$ = 0, $$lcssa = 0, $$lcssa12 = 0, $$old = 0, $$old46 = 0, $$pre = 0, $$pre$phi$lcssaZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0;
 var $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0;
 var $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0;
 var $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $allowedNoise$0 = 0.0, $distort = 0, $dummy = 0, $exitcond = 0, $fabsf = 0.0, $fabsf1 = 0.0, $fabsf2 = 0.0, $fabsf3 = 0.0, $fabsf4 = 0.0, $fabsf5 = 0.0, $fabsf6 = 0.0, $j$027 = 0, $j$1 = 0, $nsame$0$lcssa = 0, $nsame$016 = 0, $or$cond = 0, $sfb$0 = 0, $start$0 = 0;
 var $start$0$lcssa = 0, $width$0 = 0, $xr$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $distort = sp + 24|0;
 $dummy = sp;
 $0 = ((($gfc)) + 85096|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($gi)) + 4788|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(2);
  $7 = $1 & 128;
  $8 = ($7|0)==(0);
  $or$cond = $6 & $8;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
 } else {
  $$old = $1 & 128;
  $$old46 = ($$old|0)==(0);
  if (!($$old46)) {
   STACKTOP = sp;return;
  }
 }
 (_calc_noise($gi,$l3_xmin,$distort,$dummy,0)|0);
 $j$027 = 0;
 while(1) {
  $9 = (((($gi)) + 2304|0) + ($j$027<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $xr$0 = 0.0;
  } else {
   $12 = (($gi) + ($j$027<<2)|0);
   $13 = +HEAPF32[$12>>2];
   $fabsf6 = (+Math_abs((+$13)));
   $xr$0 = $fabsf6;
  }
  $14 = (($work) + ($j$027<<2)|0);
  HEAPF32[$14>>2] = $xr$0;
  $15 = (($j$027) + 1)|0;
  $exitcond = ($15|0)==(576);
  if ($exitcond) {
   break;
  } else {
   $j$027 = $15;
  }
 }
 $16 = ((($gi)) + 4788|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 $$ = $18 ? 6 : 8;
 $19 = ((($gi)) + 4864|0);
 $j$1 = 0;$sfb$0 = $$;
 while(1) {
  $20 = (((($gi)) + 4872|0) + ($sfb$0<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($j$1))|0;
  $23 = (($distort) + ($sfb$0<<2)|0);
  $24 = +HEAPF32[$23>>2];
  $25 = !($24 >= 1.0);
  L15: do {
   if ($25) {
    $26 = (($work) + ($j$1<<2)|0);
    _qsort($26,$21,4,1);
    $27 = (($22) + -1)|0;
    $28 = (($work) + ($27<<2)|0);
    $29 = +HEAPF32[$28>>2];
    $fabsf = (+Math_abs((+$29)));
    $30 = $fabsf;
    $31 = ($29 != $29) | (0.0 != 0.0) |($29 == 0.0);
    if ($31) {
     $34 = $29 == 0.0;
     if ($34) {
      break;
     }
    } else {
     $32 = $30 * 9.9999999747524271E-7;
     $33 = !($30 <= $32);
     if (!($33)) {
      break;
     }
    }
    $35 = +HEAPF32[$23>>2];
    $36 = $35;
    $37 = 1.0 - $36;
    $38 = (($l3_xmin) + ($sfb$0<<2)|0);
    $39 = +HEAPF32[$38>>2];
    $40 = $39;
    $41 = $37 * $40;
    $42 = $41;
    $allowedNoise$0 = $42;$start$0 = 0;
    while(1) {
     $43 = (($start$0) + 1)|0;
     $44 = ($43|0)<($21|0);
     L23: do {
      if ($44) {
       $45 = (($start$0) + ($22))|0;
       $46 = (($45) - ($21))|0;
       $47 = (($work) + ($46<<2)|0);
       $48 = +HEAPF32[$47>>2];
       $fabsf3 = (+Math_abs((+$48)));
       $49 = (($start$0) + ($j$1))|0;
       $50 = $fabsf3;
       $51 = $50 * 9.9999999747524271E-7;
       $93 = $43;$nsame$016 = 1;
       while(1) {
        $52 = (($49) + ($nsame$016))|0;
        $53 = (($work) + ($52<<2)|0);
        $54 = +HEAPF32[$53>>2];
        $fabsf4 = (+Math_abs((+$54)));
        $55 = $fabsf3 > $fabsf4;
        $56 = $48 - $54;
        $fabsf5 = (+Math_abs((+$56)));
        $57 = $fabsf5;
        if ($55) {
         $58 = !($57 <= $51);
         if ($58) {
          $$lcssa = $93;$$lcssa12 = 1;$$pre$phiZ2D = $49;$nsame$0$lcssa = $nsame$016;
          break L23;
         }
        } else {
         $59 = $fabsf4;
         $60 = $59 * 9.9999999747524271E-7;
         $61 = !($57 <= $60);
         if ($61) {
          $$lcssa = $93;$$lcssa12 = 1;$$pre$phiZ2D = $49;$nsame$0$lcssa = $nsame$016;
          break L23;
         }
        }
        $62 = (($nsame$016) + 1)|0;
        $63 = (($62) + ($start$0))|0;
        $64 = ($63|0)<($21|0);
        if ($64) {
         $93 = $63;$nsame$016 = $62;
        } else {
         $$lcssa = $63;$$lcssa12 = 0;$$pre$phiZ2D = $49;$nsame$0$lcssa = $62;
         break;
        }
       }
      } else {
       $$pre = (($j$1) + ($start$0))|0;
       $$lcssa = $43;$$lcssa12 = 0;$$pre$phiZ2D = $$pre;$nsame$0$lcssa = 1;
      }
     } while(0);
     $65 = (($work) + ($$pre$phiZ2D<<2)|0);
     $66 = +HEAPF32[$65>>2];
     $67 = (+($nsame$0$lcssa|0));
     $68 = $66 * $66;
     $69 = $68 * $67;
     $70 = $allowedNoise$0 < $69;
     if ($70) {
      $$pre$phi$lcssaZ2D = $$pre$phiZ2D;$start$0$lcssa = $start$0;
      break;
     }
     $72 = $allowedNoise$0 - $69;
     if ($$lcssa12) {
      $allowedNoise$0 = $72;$start$0 = $$lcssa;
     } else {
      break L15;
     }
    }
    $71 = ($start$0$lcssa|0)==(0);
    if (!($71)) {
     $73 = (($$pre$phi$lcssaZ2D) + -1)|0;
     $74 = (($work) + ($73<<2)|0);
     $75 = +HEAPF32[$74>>2];
     $fabsf1 = (+Math_abs((+$75)));
     $76 = $fabsf1;
     $77 = ($75 != $75) | (0.0 != 0.0) |($75 == 0.0);
     if ($77) {
      $80 = $75 == 0.0;
      if ($80) {
       break;
      } else {
       $width$0 = $21;
      }
     } else {
      $78 = $76 * 9.9999999747524271E-7;
      $79 = !($76 <= $78);
      if ($79) {
       $width$0 = $21;
      } else {
       break;
      }
     }
     while(1) {
      $81 = (($22) - ($width$0))|0;
      $82 = (($gi) + ($81<<2)|0);
      $83 = +HEAPF32[$82>>2];
      $fabsf2 = (+Math_abs((+$83)));
      $84 = !($fabsf2 <= $75);
      if (!($84)) {
       $85 = (((($gi)) + 2304|0) + ($81<<2)|0);
       HEAP32[$85>>2] = 0;
      }
      $86 = (($width$0) + -1)|0;
      $87 = ($width$0|0)>(1);
      if ($87) {
       $width$0 = $86;
      } else {
       break;
      }
     }
    }
   }
  } while(0);
  $88 = (($sfb$0) + 1)|0;
  $89 = HEAP32[$19>>2]|0;
  $90 = ($88|0)<($89|0);
  if ($90) {
   $j$1 = $22;$sfb$0 = $88;
  } else {
   break;
  }
 }
 $91 = (_noquant_count_bits($gfc,$gi,0)|0);
 $92 = ((($gi)) + 4768|0);
 HEAP32[$92>>2] = $91;
 STACKTOP = sp;return;
}
function _floatcompare($v1,$v2) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $$ = 0, $$0 = 0, $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$v1>>2];
 $1 = +HEAPF32[$v2>>2];
 $2 = $0 > $1;
 $3 = $0 < $1;
 $$ = $3 << 31 >> 31;
 $$0 = $2 ? 1 : $$;
 return ($$0|0);
}
function _iteration_init($gfc) {
 $gfc = $gfc|0;
 var $$$i = 0.0, $$1$i = 0.0, $$2$i = 0.0, $$2$i$lcssa = 0.0, $$3$i = 0.0, $$phi$trans$insert$i = 0, $$pre = 0.0, $$pre$i = 0, $$pre50$i = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0;
 var $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0;
 var $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0;
 var $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0;
 var $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0.0;
 var $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0.0, $98 = 0.0, $99 = 0.0, $ath$0$i$i = 0.0, $ath$0$i11$i = 0.0, $ath$0$i5$i = 0.0, $ath$0$i7$i = 0.0, $ath$0$i9$i = 0.0, $ath$0$p$i$i = 0.0, $ath$0$p$i10$i = 0.0, $ath$0$p$i4$i = 0.0, $ath$0$p$i6$i = 0.0, $ath$0$p$i8$i = 0.0, $exitcond$i = 0, $exitcond43 = 0, $exitcond43$i = 0, $exitcond44 = 0, $exitcond44$i = 0, $exitcond45 = 0, $exitcond45$i = 0;
 var $exitcond46 = 0, $exitcond46$i = 0, $exitcond47$i = 0, $exitcond48$i = 0, $exitcond49$i = 0, $exp2 = 0.0, $exp21 = 0.0, $i$030 = 0, $i$035$i = 0, $i$129 = 0, $i$131$i = 0, $i$226$i = 0, $i$228 = 0, $i$324$i = 0, $i$327 = 0, $sfb$038$i = 0, $sfb$134$i = 0, $sfb$230$i = 0, $sfb$325$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  return;
 }
 HEAP32[$0>>2] = 1;
 $3 = ((($gfc)) + 21312|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($gfc)) + 16|0);
 $5 = ((($gfc)) + 85796|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($gfc)) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($8|0));
 $10 = $9 * 8.6805556202307343E-4;
 $11 = ((($gfc)) + 224|0);
 $12 = ((($gfc)) + 196|0);
 $sfb$038$i = 0;
 while(1) {
  $14 = (((($gfc)) + 21360|0) + ($sfb$038$i<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $13 = (($sfb$038$i) + 1)|0;
  $16 = (((($gfc)) + 21360|0) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (((($6)) + 24|0) + ($sfb$038$i<<2)|0);
  HEAPF32[$18>>2] = 9.9999999338158125E+36;
  $19 = ($15|0)<($17|0);
  if ($19) {
   $i$035$i = $15;
   while(1) {
    $20 = (+($i$035$i|0));
    $21 = $20 * $10;
    $22 = (+_ATHformula($4,$21));
    $23 = +HEAPF32[$11>>2];
    $24 = $23 > 0.0;
    $25 = -$23;
    $ath$0$p$i$i = $24 ? $25 : -100.0;
    $26 = +HEAPF32[$12>>2];
    $ath$0$i$i = $26 + $22;
    $27 = $ath$0$i$i + $ath$0$p$i$i;
    $28 = $27 * 0.10000000149011612;
    $29 = (+Math_pow(10.0,(+$28)));
    $30 = +HEAPF32[$18>>2];
    $31 = $30 < $29;
    $$$i = $31 ? $30 : $29;
    HEAPF32[$18>>2] = $$$i;
    $32 = (($i$035$i) + 1)|0;
    $exitcond48$i = ($32|0)==($17|0);
    if ($exitcond48$i) {
     break;
    } else {
     $i$035$i = $32;
    }
   }
  }
  $exitcond49$i = ($13|0)==(22);
  if ($exitcond49$i) {
   $sfb$134$i = 0;
   break;
  } else {
   $sfb$038$i = $13;
  }
 }
 while(1) {
  $35 = (((($gfc)) + 21508|0) + ($sfb$134$i<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $33 = (($sfb$134$i) + 1)|0;
  $37 = (((($gfc)) + 21508|0) + ($33<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (((($6)) + 164|0) + ($sfb$134$i<<2)|0);
  HEAPF32[$39>>2] = 9.9999999338158125E+36;
  $40 = ($36|0)<($38|0);
  if ($40) {
   $i$131$i = $36;
   while(1) {
    $41 = (+($i$131$i|0));
    $42 = $41 * $10;
    $43 = (+_ATHformula($4,$42));
    $44 = +HEAPF32[$11>>2];
    $45 = $44 > 0.0;
    $46 = -$44;
    $ath$0$p$i4$i = $45 ? $46 : -100.0;
    $47 = +HEAPF32[$12>>2];
    $ath$0$i5$i = $47 + $43;
    $48 = $ath$0$i5$i + $ath$0$p$i4$i;
    $49 = $48 * 0.10000000149011612;
    $50 = (+Math_pow(10.0,(+$49)));
    $51 = +HEAPF32[$39>>2];
    $52 = $51 < $50;
    $$1$i = $52 ? $51 : $50;
    HEAPF32[$39>>2] = $$1$i;
    $53 = (($i$131$i) + 1)|0;
    $exitcond46$i = ($53|0)==($38|0);
    if ($exitcond46$i) {
     break;
    } else {
     $i$131$i = $53;
    }
   }
  }
  $exitcond47$i = ($33|0)==(6);
  if ($exitcond47$i) {
   break;
  } else {
   $sfb$134$i = $33;
  }
 }
 $34 = $9 * 0.0026041667442768812;
 $$phi$trans$insert$i = ((($gfc)) + 21452|0);
 $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
 $61 = $$pre$i;$sfb$230$i = 0;
 while(1) {
  $56 = (((($gfc)) + 21452|0) + ($sfb$230$i<<2)|0);
  $57 = (($sfb$230$i) + 1)|0;
  $58 = (((($gfc)) + 21452|0) + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (((($6)) + 112|0) + ($sfb$230$i<<2)|0);
  HEAPF32[$60>>2] = 9.9999999338158125E+36;
  $62 = ($61|0)<($59|0);
  if ($62) {
   $i$226$i = $61;
   while(1) {
    $63 = (+($i$226$i|0));
    $64 = $63 * $34;
    $65 = (+_ATHformula($4,$64));
    $66 = +HEAPF32[$11>>2];
    $67 = $66 > 0.0;
    $68 = -$66;
    $ath$0$p$i6$i = $67 ? $68 : -100.0;
    $69 = +HEAPF32[$12>>2];
    $ath$0$i7$i = $69 + $65;
    $70 = $ath$0$i7$i + $ath$0$p$i6$i;
    $71 = $70 * 0.10000000149011612;
    $72 = (+Math_pow(10.0,(+$71)));
    $73 = +HEAPF32[$60>>2];
    $74 = $73 < $72;
    $$2$i = $74 ? $73 : $72;
    HEAPF32[$60>>2] = $$2$i;
    $75 = (($i$226$i) + 1)|0;
    $exitcond44$i = ($75|0)==($59|0);
    if ($exitcond44$i) {
     $$2$i$lcssa = $$2$i;
     break;
    } else {
     $i$226$i = $75;
    }
   }
   $$pre50$i = HEAP32[$58>>2]|0;
   $78 = $$pre50$i;$81 = $$2$i$lcssa;
  } else {
   $78 = $59;$81 = 9.9999999338158125E+36;
  }
  $76 = HEAP32[$56>>2]|0;
  $77 = (($78) - ($76))|0;
  $79 = (+($77|0));
  $80 = $79 * $81;
  HEAPF32[$60>>2] = $80;
  $exitcond45$i = ($57|0)==(13);
  if ($exitcond45$i) {
   break;
  } else {
   $61 = $78;$sfb$230$i = $57;
  }
 }
 $54 = ((($gfc)) + 21504|0);
 $55 = ((($gfc)) + 21500|0);
 $sfb$325$i = 0;
 while(1) {
  $82 = (((($gfc)) + 21536|0) + ($sfb$325$i<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($sfb$325$i) + 1)|0;
  $85 = (((($gfc)) + 21536|0) + ($84<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (((($6)) + 188|0) + ($sfb$325$i<<2)|0);
  HEAPF32[$87>>2] = 9.9999999338158125E+36;
  $88 = ($83|0)<($86|0);
  if ($88) {
   $i$324$i = $83;
   while(1) {
    $89 = (+($i$324$i|0));
    $90 = $89 * $34;
    $91 = (+_ATHformula($4,$90));
    $92 = +HEAPF32[$11>>2];
    $93 = $92 > 0.0;
    $94 = -$92;
    $ath$0$p$i8$i = $93 ? $94 : -100.0;
    $95 = +HEAPF32[$12>>2];
    $ath$0$i9$i = $95 + $91;
    $96 = $ath$0$i9$i + $ath$0$p$i8$i;
    $97 = $96 * 0.10000000149011612;
    $98 = (+Math_pow(10.0,(+$97)));
    $99 = +HEAPF32[$87>>2];
    $100 = $99 < $98;
    $$3$i = $100 ? $99 : $98;
    HEAPF32[$87>>2] = $$3$i;
    $101 = (($i$324$i) + 1)|0;
    $exitcond$i = ($101|0)==($86|0);
    if ($exitcond$i) {
     $107 = $$3$i;
     break;
    } else {
     $i$324$i = $101;
    }
   }
  } else {
   $107 = 9.9999999338158125E+36;
  }
  $102 = HEAP32[$54>>2]|0;
  $103 = HEAP32[$55>>2]|0;
  $104 = (($102) - ($103))|0;
  $105 = (+($104|0));
  $106 = $105 * $107;
  HEAPF32[$87>>2] = $106;
  $exitcond43$i = ($84|0)==(6);
  if ($exitcond43$i) {
   break;
  } else {
   $sfb$325$i = $84;
  }
 }
 $108 = ((($gfc)) + 220|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)==(0);
 if (!($110)) {
  $111 = ((($6)) + 24|0);
  HEAPF32[$111>>2] = 9.9999996826552254E-21;
  $112 = ((($6)) + 28|0);
  HEAPF32[$112>>2] = 9.9999996826552254E-21;
  $113 = ((($6)) + 32|0);
  HEAPF32[$113>>2] = 9.9999996826552254E-21;
  $114 = ((($6)) + 36|0);
  HEAPF32[$114>>2] = 9.9999996826552254E-21;
  $115 = ((($6)) + 40|0);
  HEAPF32[$115>>2] = 9.9999996826552254E-21;
  $116 = ((($6)) + 44|0);
  HEAPF32[$116>>2] = 9.9999996826552254E-21;
  $117 = ((($6)) + 48|0);
  HEAPF32[$117>>2] = 9.9999996826552254E-21;
  $118 = ((($6)) + 52|0);
  HEAPF32[$118>>2] = 9.9999996826552254E-21;
  $119 = ((($6)) + 56|0);
  HEAPF32[$119>>2] = 9.9999996826552254E-21;
  $120 = ((($6)) + 60|0);
  HEAPF32[$120>>2] = 9.9999996826552254E-21;
  $121 = ((($6)) + 64|0);
  HEAPF32[$121>>2] = 9.9999996826552254E-21;
  $122 = ((($6)) + 68|0);
  HEAPF32[$122>>2] = 9.9999996826552254E-21;
  $123 = ((($6)) + 72|0);
  HEAPF32[$123>>2] = 9.9999996826552254E-21;
  $124 = ((($6)) + 76|0);
  HEAPF32[$124>>2] = 9.9999996826552254E-21;
  $125 = ((($6)) + 80|0);
  HEAPF32[$125>>2] = 9.9999996826552254E-21;
  $126 = ((($6)) + 84|0);
  HEAPF32[$126>>2] = 9.9999996826552254E-21;
  $127 = ((($6)) + 88|0);
  HEAPF32[$127>>2] = 9.9999996826552254E-21;
  $128 = ((($6)) + 92|0);
  HEAPF32[$128>>2] = 9.9999996826552254E-21;
  $129 = ((($6)) + 96|0);
  HEAPF32[$129>>2] = 9.9999996826552254E-21;
  $130 = ((($6)) + 100|0);
  HEAPF32[$130>>2] = 9.9999996826552254E-21;
  $131 = ((($6)) + 104|0);
  HEAPF32[$131>>2] = 9.9999996826552254E-21;
  $132 = ((($6)) + 108|0);
  HEAPF32[$132>>2] = 9.9999996826552254E-21;
  $133 = ((($6)) + 164|0);
  HEAPF32[$133>>2] = 9.9999996826552254E-21;
  $134 = ((($6)) + 168|0);
  HEAPF32[$134>>2] = 9.9999996826552254E-21;
  $135 = ((($6)) + 172|0);
  HEAPF32[$135>>2] = 9.9999996826552254E-21;
  $136 = ((($6)) + 176|0);
  HEAPF32[$136>>2] = 9.9999996826552254E-21;
  $137 = ((($6)) + 180|0);
  HEAPF32[$137>>2] = 9.9999996826552254E-21;
  $138 = ((($6)) + 184|0);
  HEAPF32[$138>>2] = 9.9999996826552254E-21;
  $139 = ((($6)) + 112|0);
  HEAPF32[$139>>2] = 9.9999996826552254E-21;
  $140 = ((($6)) + 116|0);
  HEAPF32[$140>>2] = 9.9999996826552254E-21;
  $141 = ((($6)) + 120|0);
  HEAPF32[$141>>2] = 9.9999996826552254E-21;
  $142 = ((($6)) + 124|0);
  HEAPF32[$142>>2] = 9.9999996826552254E-21;
  $143 = ((($6)) + 128|0);
  HEAPF32[$143>>2] = 9.9999996826552254E-21;
  $144 = ((($6)) + 132|0);
  HEAPF32[$144>>2] = 9.9999996826552254E-21;
  $145 = ((($6)) + 136|0);
  HEAPF32[$145>>2] = 9.9999996826552254E-21;
  $146 = ((($6)) + 140|0);
  HEAPF32[$146>>2] = 9.9999996826552254E-21;
  $147 = ((($6)) + 144|0);
  HEAPF32[$147>>2] = 9.9999996826552254E-21;
  $148 = ((($6)) + 148|0);
  HEAPF32[$148>>2] = 9.9999996826552254E-21;
  $149 = ((($6)) + 152|0);
  HEAPF32[$149>>2] = 9.9999996826552254E-21;
  $150 = ((($6)) + 156|0);
  HEAPF32[$150>>2] = 9.9999996826552254E-21;
  $151 = ((($6)) + 160|0);
  HEAPF32[$151>>2] = 9.9999996826552254E-21;
  $152 = ((($6)) + 188|0);
  HEAPF32[$152>>2] = 9.9999996826552254E-21;
  $153 = ((($6)) + 192|0);
  HEAPF32[$153>>2] = 9.9999996826552254E-21;
  $154 = ((($6)) + 196|0);
  HEAPF32[$154>>2] = 9.9999996826552254E-21;
  $155 = ((($6)) + 200|0);
  HEAPF32[$155>>2] = 9.9999996826552254E-21;
  $156 = ((($6)) + 204|0);
  HEAPF32[$156>>2] = 9.9999996826552254E-21;
  $157 = ((($6)) + 208|0);
  HEAPF32[$157>>2] = 9.9999996826552254E-21;
 }
 $158 = (+_ATHformula($4,-1.0));
 $159 = +HEAPF32[$11>>2];
 $160 = $159 > 0.0;
 $161 = -$159;
 $ath$0$p$i10$i = $160 ? $161 : -100.0;
 $162 = +HEAPF32[$12>>2];
 $ath$0$i11$i = $162 + $158;
 $163 = $ath$0$i11$i + $ath$0$p$i10$i;
 $164 = $163 * 0.10000000149011612;
 $165 = (+Math_pow(10.0,(+$164)));
 $166 = $165;
 $167 = (+_log10($166));
 $168 = $167 * 10.0;
 $169 = $168;
 $170 = HEAP32[$5>>2]|0;
 $171 = ((($170)) + 20|0);
 HEAPF32[$171>>2] = $169;
 HEAPF32[14040>>2] = 0.0;
 $i$030 = 1;
 while(1) {
  $172 = (+($i$030|0));
  $173 = $172;
  $174 = (+Math_pow((+$173),1.3333333333333333));
  $175 = $174;
  $176 = (14040 + ($i$030<<2)|0);
  HEAPF32[$176>>2] = $175;
  $177 = (($i$030) + 1)|0;
  $exitcond46 = ($177|0)==(8208);
  if ($exitcond46) {
   break;
  } else {
   $i$030 = $177;
  }
 }
 HEAPF32[46872>>2] = 0.0;
 $$pre = +HEAPF32[14040>>2];
 $183 = $$pre;$i$129 = 1;
 while(1) {
  $178 = (+($i$129|0));
  $179 = $178 + -0.5;
  $180 = (14040 + ($i$129<<2)|0);
  $181 = +HEAPF32[$180>>2];
  $182 = $181 + $183;
  $184 = $182;
  $185 = $184 * 0.5;
  $186 = (+Math_pow((+$185),0.75));
  $187 = $179 - $186;
  $188 = $187;
  $189 = (46872 + ($i$129<<2)|0);
  HEAPF32[$189>>2] = $188;
  $190 = (($i$129) + 1)|0;
  $exitcond45 = ($190|0)==(8208);
  if ($exitcond45) {
   $i$228 = 0;
   break;
  } else {
   $183 = $181;$i$129 = $190;
  }
 }
 while(1) {
  $191 = (($i$228) + -210)|0;
  $192 = (+($191|0));
  $193 = $192 * -0.1875;
  $exp21 = (+_exp2($193));
  $194 = $exp21;
  $195 = (79704 + ($i$228<<2)|0);
  HEAPF32[$195>>2] = $194;
  $196 = (($i$228) + 1)|0;
  $exitcond44 = ($196|0)==(257);
  if ($exitcond44) {
   $i$327 = 0;
   break;
  } else {
   $i$228 = $196;
  }
 }
 while(1) {
  $197 = (($i$327) + -326)|0;
  $198 = (+($197|0));
  $199 = $198 * 0.25;
  $exp2 = (+_exp2($199));
  $200 = $exp2;
  $201 = (80736 + ($i$327<<2)|0);
  HEAPF32[$201>>2] = $200;
  $202 = (($i$327) + 1)|0;
  $exitcond43 = ($202|0)==(374);
  if ($exitcond43) {
   break;
  } else {
   $i$327 = $202;
  }
 }
 _huffman_init($gfc);
 _init_xrpow_core_init($gfc);
 $203 = ((($gfc)) + 232|0);
 $204 = +HEAPF32[$203>>2];
 $205 = $204 + -0.5;
 $206 = $205 * 0.10000000149011612;
 $207 = (+Math_pow(10.0,(+$206)));
 $208 = ((($gfc)) + 84768|0);
 HEAPF32[$208>>2] = $207;
 $209 = ((($gfc)) + 84772|0);
 HEAPF32[$209>>2] = $207;
 $210 = ((($gfc)) + 84776|0);
 HEAPF32[$210>>2] = $207;
 $211 = ((($gfc)) + 84780|0);
 HEAPF32[$211>>2] = $207;
 $212 = ((($gfc)) + 84784|0);
 HEAPF32[$212>>2] = $207;
 $213 = ((($gfc)) + 84788|0);
 HEAPF32[$213>>2] = $207;
 $214 = ((($gfc)) + 84792|0);
 HEAPF32[$214>>2] = $207;
 $215 = ((($gfc)) + 228|0);
 $216 = +HEAPF32[$215>>2];
 $217 = $216 + -0.25;
 $218 = $217 * 0.10000000149011612;
 $219 = (+Math_pow(10.0,(+$218)));
 $220 = ((($gfc)) + 84796|0);
 HEAPF32[$220>>2] = $219;
 $221 = ((($gfc)) + 84800|0);
 HEAPF32[$221>>2] = $219;
 $222 = ((($gfc)) + 84804|0);
 HEAPF32[$222>>2] = $219;
 $223 = ((($gfc)) + 84808|0);
 HEAPF32[$223>>2] = $219;
 $224 = ((($gfc)) + 84812|0);
 HEAPF32[$224>>2] = $219;
 $225 = ((($gfc)) + 84816|0);
 HEAPF32[$225>>2] = $219;
 $226 = ((($gfc)) + 84820|0);
 HEAPF32[$226>>2] = $219;
 $227 = ((($gfc)) + 236|0);
 $228 = +HEAPF32[$227>>2];
 $229 = $228 + -0.02500000037252903;
 $230 = $229 * 0.10000000149011612;
 $231 = (+Math_pow(10.0,(+$230)));
 $232 = ((($gfc)) + 84824|0);
 HEAPF32[$232>>2] = $231;
 $233 = ((($gfc)) + 84828|0);
 HEAPF32[$233>>2] = $231;
 $234 = ((($gfc)) + 84832|0);
 HEAPF32[$234>>2] = $231;
 $235 = ((($gfc)) + 84836|0);
 HEAPF32[$235>>2] = $231;
 $236 = ((($gfc)) + 84840|0);
 HEAPF32[$236>>2] = $231;
 $237 = ((($gfc)) + 84844|0);
 HEAPF32[$237>>2] = $231;
 $238 = ((($gfc)) + 84848|0);
 HEAPF32[$238>>2] = $231;
 $239 = ((($gfc)) + 240|0);
 $240 = +HEAPF32[$239>>2];
 $241 = $240 + 0.5;
 $242 = $241 * 0.10000000149011612;
 $243 = (+Math_pow(10.0,(+$242)));
 $244 = ((($gfc)) + 84852|0);
 HEAPF32[$244>>2] = $243;
 $245 = +HEAPF32[$203>>2];
 $246 = $245 + -2.0;
 $247 = $246 * 0.10000000149011612;
 $248 = (+Math_pow(10.0,(+$247)));
 $249 = ((($gfc)) + 84856|0);
 HEAPF32[$249>>2] = $248;
 $250 = ((($gfc)) + 84860|0);
 HEAPF32[$250>>2] = $248;
 $251 = ((($gfc)) + 84864|0);
 HEAPF32[$251>>2] = $248;
 $252 = +HEAPF32[$215>>2];
 $253 = $252 + -1.0;
 $254 = $253 * 0.10000000149011612;
 $255 = (+Math_pow(10.0,(+$254)));
 $256 = ((($gfc)) + 84868|0);
 HEAPF32[$256>>2] = $255;
 $257 = ((($gfc)) + 84872|0);
 HEAPF32[$257>>2] = $255;
 $258 = ((($gfc)) + 84876|0);
 HEAPF32[$258>>2] = $255;
 $259 = ((($gfc)) + 84880|0);
 HEAPF32[$259>>2] = $255;
 $260 = +HEAPF32[$227>>2];
 $261 = $260 + -0.05000000074505806;
 $262 = $261 * 0.10000000149011612;
 $263 = (+Math_pow(10.0,(+$262)));
 $264 = ((($gfc)) + 84884|0);
 HEAPF32[$264>>2] = $263;
 $265 = ((($gfc)) + 84888|0);
 HEAPF32[$265>>2] = $263;
 $266 = ((($gfc)) + 84892|0);
 HEAPF32[$266>>2] = $263;
 $267 = ((($gfc)) + 84896|0);
 HEAPF32[$267>>2] = $263;
 $268 = ((($gfc)) + 84900|0);
 HEAPF32[$268>>2] = $263;
 $269 = +HEAPF32[$239>>2];
 $270 = $269 + 0.5;
 $271 = $270 * 0.10000000149011612;
 $272 = (+Math_pow(10.0,(+$271)));
 $273 = ((($gfc)) + 84904|0);
 HEAPF32[$273>>2] = $272;
 return;
}
function _on_pe($gfc,$pe,$targ_bits,$mean_bits,$gr,$cbr) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $targ_bits = $targ_bits|0;
 $mean_bits = $mean_bits|0;
 $gr = $gr|0;
 $cbr = $cbr|0;
 var $$ = 0, $$3 = 0, $$4 = 0, $$lcssa = 0, $$lcssa43 = 0, $$lcssa44 = 0, $$lcssa45 = 0, $$lcssa46 = 0, $$not = 0, $$not34 = 0, $$storemerge = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add_bits = 0, $bits$017 = 0, $bits$19 = 0, $brmerge = 0, $ch$018 = 0, $ch$115 = 0, $ch$212 = 0, $ch$310 = 0, $ch$48 = 0, $extra_bits = 0, $or$cond = 0, $storemerge = 0, $storemerge26 = 0, $tbits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $extra_bits = sp + 12|0;
 $tbits = sp + 8|0;
 $add_bits = sp;
 HEAP32[$extra_bits>>2] = 0;
 $0 = $add_bits;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 _ResvMaxBits($gfc,$mean_bits,$tbits,$extra_bits,$cbr);
 $4 = HEAP32[$tbits>>2]|0;
 $5 = HEAP32[$extra_bits>>2]|0;
 $6 = (($5) + ($4))|0;
 $7 = ($6|0)>(7680);
 $$ = $7 ? 7680 : $6;
 $8 = ((($gfc)) + 72|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(0);
 if (!($10)) {
  STACKTOP = sp;return ($$|0);
 }
 $11 = ($mean_bits*3)|0;
 $12 = (($11|0) / 4)&-1;
 $14 = $9;$bits$017 = 0;$ch$018 = 0;
 while(1) {
  $13 = (($4|0) / ($14|0))&-1;
  $15 = ($13|0)>(4095);
  $$3 = $15 ? 4095 : $13;
  $16 = (($targ_bits) + ($ch$018<<2)|0);
  HEAP32[$16>>2] = $$3;
  $17 = (+($$3|0));
  $18 = ((($pe) + ($gr<<3)|0) + ($ch$018<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $17 * $19;
  $21 = $20;
  $22 = $21 * 0.0014285714285714286;
  $23 = (+($$3|0));
  $24 = $22 - $23;
  $25 = (~~(($24)));
  $26 = (($add_bits) + ($ch$018<<2)|0);
  $27 = ($25|0)>($12|0);
  $storemerge = $27 ? $12 : $25;
  $28 = ($storemerge|0)<(0);
  $$storemerge = $28 ? 0 : $storemerge;
  $29 = (($$storemerge) + ($$3))|0;
  $30 = ($29|0)>(4095);
  if ($30) {
   $31 = (4095 - ($$3))|0;
   $32 = ($31|0)<(0);
   $$4 = $32 ? 0 : $31;
   $storemerge26 = $$4;
  } else {
   $storemerge26 = $$storemerge;
  }
  HEAP32[$26>>2] = $storemerge26;
  $33 = (($storemerge26) + ($bits$017))|0;
  $34 = (($ch$018) + 1)|0;
  $35 = HEAP32[$8>>2]|0;
  $36 = ($34|0)<($35|0);
  if ($36) {
   $14 = $35;$bits$017 = $33;$ch$018 = $34;
  } else {
   $$lcssa45 = $33;$$lcssa46 = $35;
   break;
  }
 }
 $37 = ($$lcssa45|0)>($5|0);
 $38 = ($$lcssa45|0)>(0);
 $or$cond = $38 & $37;
 if ($or$cond) {
  $39 = ($$lcssa46|0)>(0);
  if ($39) {
   $ch$115 = 0;
   while(1) {
    $41 = (($add_bits) + ($ch$115<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = Math_imul($42, $5)|0;
    $44 = (($43|0) / ($$lcssa45|0))&-1;
    HEAP32[$41>>2] = $44;
    $45 = (($ch$115) + 1)|0;
    $46 = ($45|0)<($$lcssa46|0);
    if ($46) {
     $ch$115 = $45;
    } else {
     break;
    }
   }
  } else {
   STACKTOP = sp;return ($$|0);
  }
 }
 $40 = ($$lcssa46|0)>(0);
 if ($40) {
  $54 = $5;$ch$212 = 0;
 } else {
  STACKTOP = sp;return ($$|0);
 }
 while(1) {
  $48 = (($add_bits) + ($ch$212<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($targ_bits) + ($ch$212<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($49))|0;
  HEAP32[$50>>2] = $52;
  $53 = (($54) - ($49))|0;
  $55 = (($ch$212) + 1)|0;
  $56 = HEAP32[$8>>2]|0;
  $57 = ($55|0)<($56|0);
  if ($57) {
   $54 = $53;$ch$212 = $55;
  } else {
   $$lcssa43 = $53;$$lcssa44 = $56;
   break;
  }
 }
 HEAP32[$extra_bits>>2] = $$lcssa43;
 $47 = ($$lcssa44|0)>(0);
 if ($47) {
  $bits$19 = 0;$ch$310 = 0;
 } else {
  STACKTOP = sp;return ($$|0);
 }
 while(1) {
  $58 = (($targ_bits) + ($ch$310<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($bits$19))|0;
  $61 = (($ch$310) + 1)|0;
  $62 = ($61|0)<($$lcssa44|0);
  if ($62) {
   $bits$19 = $60;$ch$310 = $61;
  } else {
   $$lcssa = $60;
   break;
  }
 }
 $$not = ($$lcssa|0)<(7681);
 $$not34 = $47 ^ 1;
 $brmerge = $$not | $$not34;
 if ($brmerge) {
  STACKTOP = sp;return ($$|0);
 } else {
  $ch$48 = 0;
 }
 while(1) {
  $63 = (($targ_bits) + ($ch$48<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64*7680)|0;
  $66 = (($65|0) / ($$lcssa|0))&-1;
  HEAP32[$63>>2] = $66;
  $67 = (($ch$48) + 1)|0;
  $68 = HEAP32[$8>>2]|0;
  $69 = ($67|0)<($68|0);
  if ($69) {
   $ch$48 = $67;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($$|0);
}
function _reduce_side($targ_bits,$ms_ener_ratio,$mean_bits,$max_bits) {
 $targ_bits = $targ_bits|0;
 $ms_ener_ratio = +$ms_ener_ratio;
 $mean_bits = $mean_bits|0;
 $max_bits = $max_bits|0;
 var $$ = 0, $$op = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $fac$0 = 0.0, $move_bits$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $ms_ener_ratio;
 $1 = 0.5 - $0;
 $2 = $1 * 0.66000000000000003;
 $3 = $2;
 $4 = $3 < 0.0;
 $fac$0 = $4 ? 0.0 : $3;
 $5 = $fac$0 > 0.5;
 $6 = $fac$0;
 $$op = $6 * 0.5;
 $7 = $5 ? 0.25 : $$op;
 $8 = HEAP32[$targ_bits>>2]|0;
 $9 = ((($targ_bits)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8))|0;
 $12 = (+($11|0));
 $13 = $12 * $7;
 $14 = (~~(($13)));
 $15 = (4095 - ($8))|0;
 $16 = ($14|0)>($15|0);
 $$ = $16 ? $15 : $14;
 $17 = ($$|0)<(0);
 $move_bits$1 = $17 ? 0 : $$;
 $18 = ($10|0)>(124);
 do {
  if ($18) {
   $19 = (($10) - ($move_bits$1))|0;
   $20 = ($19|0)>(125);
   if (!($20)) {
    $23 = (($8) + -125)|0;
    $24 = (($23) + ($10))|0;
    HEAP32[$targ_bits>>2] = $24;
    HEAP32[$9>>2] = 125;
    $26 = $24;$27 = 125;
    break;
   }
   $21 = ($8|0)<($mean_bits|0);
   if ($21) {
    $22 = (($move_bits$1) + ($8))|0;
    HEAP32[$targ_bits>>2] = $22;
    $33 = $22;
   } else {
    $33 = $8;
   }
   HEAP32[$9>>2] = $19;
   $26 = $33;$27 = $19;
  } else {
   $26 = $8;$27 = $10;
  }
 } while(0);
 $25 = (($27) + ($26))|0;
 $28 = ($25|0)>($max_bits|0);
 if (!($28)) {
  return;
 }
 $29 = Math_imul($26, $max_bits)|0;
 $30 = (($29|0) / ($25|0))&-1;
 HEAP32[$targ_bits>>2] = $30;
 $31 = Math_imul($27, $max_bits)|0;
 $32 = (($31|0) / ($25|0))&-1;
 HEAP32[$9>>2] = $32;
 return;
}
function _athAdjust($a,$x,$athFloor,$ATHfixpoint) {
 $a = +$a;
 $x = +$x;
 $athFloor = +$athFloor;
 $ATHfixpoint = +$ATHfixpoint;
 var $$neg = 0.0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, $ATHfixpoint$op = 0.0, $w$0 = 0.0, $w$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $ATHfixpoint < 1.0;
 $1 = (+_fast_log2($x));
 $2 = $1;
 $3 = $2 * 3.0102999566398116;
 $4 = $3;
 $5 = $a * $a;
 $6 = $4 - $athFloor;
 $7 = $5 > 9.9999996826552254E-21;
 if ($7) {
  $8 = (+_fast_log2($5));
  $9 = $8;
  $10 = $9 * 0.03333343265598758;
  $11 = $10 + 1.0;
  $12 = $11;
  $w$0 = $12;
 } else {
  $w$0 = 0.0;
 }
 $13 = $w$0 < 0.0;
 $w$1 = $13 ? 0.0 : $w$0;
 $14 = $w$1 * $6;
 $15 = $athFloor + 90.308731079101563;
 $ATHfixpoint$op = -$ATHfixpoint;
 $$neg = $0 ? -94.824447631835938 : $ATHfixpoint$op;
 $16 = $15 + $$neg;
 $17 = $16 + $14;
 $18 = $17 * 0.10000000149011612;
 $19 = (+Math_pow(10.0,(+$18)));
 return (+$19);
}
function _calc_xmin($gfc,$ratio,$cod_info,$pxmin) {
 $gfc = $gfc|0;
 $ratio = $ratio|0;
 $cod_info = $cod_info|0;
 $pxmin = $pxmin|0;
 var $$0$lcssa = 0, $$040 = 0, $$122 = 0, $$2$lcssa = 0, $$lcssa = 0.0, $$lcssa93 = 0.0, $$lcssa94 = 0.0, $$lcssa95 = 0.0, $$lcssa96 = 0.0, $$lcssa97 = 0.0, $$lcssa98 = 0.0, $$lcssa99 = 0.0, $$neg$i = 0.0, $$neg$i4 = 0.0, $$pre = 0.0, $$rh2$0 = 0.0, $$rh26$0 = 0.0, $$rh26$0$us = 0.0, $$rh26$0$us$1 = 0.0, $$rh26$0$us$2 = 0.0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0.0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0.0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0.0;
 var $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ATHfixpoint$op$i = 0.0, $ATHfixpoint$op$i3 = 0.0, $ath_over$0$lcssa = 0, $ath_over$037 = 0, $ath_over$1 = 0, $ath_over$2$lcssa = 0, $ath_over$216 = 0, $ath_over$3$lcssa = 0, $ath_over$4 = 0, $ath_over$4$1 = 0, $ath_over$4$2 = 0, $ath_over$4$us = 0, $ath_over$4$us$1 = 0, $ath_over$4$us$2 = 0, $en0$0$lcssa = 0.0, $en0$030 = 0.0, $en03$07$us = 0.0;
 var $en03$07$us$1 = 0.0, $en03$07$us$2 = 0.0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond62 = 0, $fabsf = 0.0, $gsfb$0$lcssa = 0, $gsfb$039 = 0, $gsfb$118 = 0, $j$0$lcssa = 0, $j$038 = 0, $j$1$lcssa = 0, $j$131 = 0, $j$217 = 0, $j$3$lcssa = 0, $j$48$us = 0, $j$48$us$1 = 0, $j$48$us$2 = 0, $k$027 = 0;
 var $l$028 = 0, $l2$06$us = 0, $l2$06$us$1 = 0, $l2$06$us$2 = 0, $limit$0 = 0, $limit$0$in = 0, $limit$0$max_nonzero$1 = 0, $max_nonzero$0 = 0, $max_nonzero$1 = 0, $max_nonzero$2 = 0, $or$cond = 0, $or$cond73 = 0, $or$cond74 = 0, $rh2$0$lcssa = 0.0, $rh2$029 = 0.0, $rh26$09$us = 0.0, $rh26$09$us$1 = 0.0, $rh26$09$us$2 = 0.0, $rh3$0 = 0.0, $rh37$0 = 0.0;
 var $rh37$0$us = 0.0, $rh37$0$us$1 = 0.0, $rh37$0$us$2 = 0.0, $sfb$020 = 0, $w$0$i = 0.0, $w$0$i1 = 0.0, $w$1$i = 0.0, $w$1$i2 = 0.0, $xmin$0 = 0.0, $xmin4$0 = 0.0, $xmin4$0$1 = 0.0, $xmin4$0$2 = 0.0, $xmin4$0$us = 0.0, $xmin4$0$us$1 = 0.0, $xmin4$0$us$2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 85796|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($cod_info)) + 4856|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = ((($1)) + 8|0);
  $6 = ((($1)) + 20|0);
  $7 = ((($gfc)) + 224|0);
  $$040 = $pxmin;$ath_over$037 = 0;$gsfb$039 = 0;$j$038 = 0;
  while(1) {
   $8 = +HEAPF32[$5>>2];
   $9 = (((($1)) + 24|0) + ($gsfb$039<<2)|0);
   $10 = +HEAPF32[$9>>2];
   $11 = +HEAPF32[$6>>2];
   $12 = +HEAPF32[$7>>2];
   $13 = $12 < 1.0;
   $14 = (+_fast_log2($10));
   $15 = $14;
   $16 = $15 * 3.0102999566398116;
   $17 = $16;
   $18 = $8 * $8;
   $19 = $17 - $11;
   $20 = $18 > 9.9999996826552254E-21;
   if ($20) {
    $21 = (+_fast_log2($18));
    $22 = $21;
    $23 = $22 * 0.03333343265598758;
    $24 = $23 + 1.0;
    $25 = $24;
    $w$0$i = $25;
   } else {
    $w$0$i = 0.0;
   }
   $26 = $w$0$i < 0.0;
   $w$1$i = $26 ? 0.0 : $w$0$i;
   $27 = $w$1$i * $19;
   $28 = $11 + 90.308731079101563;
   $ATHfixpoint$op$i = -$12;
   $$neg$i = $13 ? -94.824447631835938 : $ATHfixpoint$op$i;
   $29 = $28 + $$neg$i;
   $30 = $29 + $27;
   $31 = $30 * 0.10000000149011612;
   $32 = (+Math_pow(10.0,(+$31)));
   $33 = (((($gfc)) + 84768|0) + ($gsfb$039<<2)|0);
   $34 = +HEAPF32[$33>>2];
   $35 = $34 * $32;
   $36 = (((($cod_info)) + 4872|0) + ($gsfb$039<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (+($37|0));
   $39 = $35 / $38;
   $40 = ($37|0)>(0);
   if ($40) {
    $en0$030 = 0.0;$j$131 = $j$038;$l$028 = 0;$rh2$029 = 2.2204460492503131E-16;
    while(1) {
     $41 = (($j$131) + 1)|0;
     $42 = (($cod_info) + ($j$131<<2)|0);
     $43 = +HEAPF32[$42>>2];
     $44 = $43 * $43;
     $45 = $44 + $en0$030;
     $46 = $44 < $39;
     $47 = $46 ? $44 : $39;
     $48 = $47 + $rh2$029;
     $49 = (($l$028) + 1)|0;
     $exitcond62 = ($49|0)==($37|0);
     if ($exitcond62) {
      $$lcssa98 = $45;$$lcssa99 = $48;
      break;
     } else {
      $en0$030 = $45;$j$131 = $41;$l$028 = $49;$rh2$029 = $48;
     }
    }
    $50 = (($j$038) + ($37))|0;
    $en0$0$lcssa = $$lcssa98;$j$1$lcssa = $50;$rh2$0$lcssa = $$lcssa99;
   } else {
    $en0$0$lcssa = 0.0;$j$1$lcssa = $j$038;$rh2$0$lcssa = 2.2204460492503131E-16;
   }
   $51 = $en0$0$lcssa > $35;
   $52 = $51&1;
   $ath_over$1 = (($52) + ($ath_over$037))|0;
   $53 = $en0$0$lcssa < $35;
   $54 = $rh2$0$lcssa < $35;
   $$rh2$0 = $54 ? $35 : $rh2$0$lcssa;
   $rh3$0 = $53 ? $en0$0$lcssa : $$rh2$0;
   $55 = (((($ratio)) + 244|0) + ($gsfb$039<<2)|0);
   $56 = +HEAPF32[$55>>2];
   $57 = $56 > 9.999999960041972E-13;
   if ($57) {
    $58 = (($ratio) + ($gsfb$039<<2)|0);
    $59 = +HEAPF32[$58>>2];
    $60 = $59 * $en0$0$lcssa;
    $61 = $60 / $56;
    $62 = $34 * $61;
    $63 = $rh3$0 < $62;
    if ($63) {
     $xmin$0 = $62;
    } else {
     $xmin$0 = $rh3$0;
    }
   } else {
    $xmin$0 = $rh3$0;
   }
   $64 = $xmin$0 > 2.2204460492503131E-16;
   $65 = $64 ? $xmin$0 : 2.2204460492503131E-16;
   $66 = $65 + 9.9999998245167004E-15;
   $67 = $en0$0$lcssa > $66;
   $68 = $67&1;
   $69 = (((($cod_info)) + 5212|0) + ($gsfb$039)|0);
   HEAP8[$69>>0] = $68;
   $70 = ((($$040)) + 4|0);
   HEAPF32[$$040>>2] = $65;
   $71 = (($gsfb$039) + 1)|0;
   $72 = HEAP32[$2>>2]|0;
   $73 = ($71|0)<($72|0);
   if ($73) {
    $$040 = $70;$ath_over$037 = $ath_over$1;$gsfb$039 = $71;$j$038 = $j$1$lcssa;
   } else {
    $$0$lcssa = $70;$ath_over$0$lcssa = $ath_over$1;$gsfb$0$lcssa = $71;$j$0$lcssa = $j$1$lcssa;
    break;
   }
  }
 } else {
  $$0$lcssa = $pxmin;$ath_over$0$lcssa = 0;$gsfb$0$lcssa = 0;$j$0$lcssa = 0;
 }
 $k$027 = 575;
 while(1) {
  $74 = (($cod_info) + ($k$027<<2)|0);
  $75 = +HEAPF32[$74>>2];
  $fabsf = (+Math_abs((+$75)));
  $76 = $fabsf > 9.999999960041972E-13;
  if ($76) {
   $max_nonzero$0 = $k$027;
   break;
  }
  $77 = (($k$027) + -1)|0;
  $78 = ($k$027|0)>(1);
  if ($78) {
   $k$027 = $77;
  } else {
   $max_nonzero$0 = 0;
   break;
  }
 }
 $79 = ((($cod_info)) + 4788|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)==(2);
 if ($81) {
  $83 = (($max_nonzero$0|0) % 6)&-1;
  $84 = (($max_nonzero$0) + 5)|0;
  $85 = (($84) - ($83))|0;
  $max_nonzero$1 = $85;
 } else {
  $82 = $max_nonzero$0 | 1;
  $max_nonzero$1 = $82;
 }
 $86 = ((($gfc)) + 85092|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0);
 if ($88) {
  $89 = ((($gfc)) + 64|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)<(44000);
  if ($91) {
   $92 = ($90|0)<(8001);
   if ($81) {
    $96 = $92 ? 9 : 12;
    $97 = (((($gfc)) + 21452|0) + ($96<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98*3)|0;
    $limit$0$in = $99;
   } else {
    $93 = $92 ? 17 : 21;
    $94 = (((($gfc)) + 21360|0) + ($93<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $limit$0$in = $95;
   }
   $limit$0 = (($limit$0$in) + -1)|0;
   $100 = ($max_nonzero$1|0)>($limit$0|0);
   $limit$0$max_nonzero$1 = $100 ? $limit$0 : $max_nonzero$1;
   $max_nonzero$2 = $limit$0$max_nonzero$1;
  } else {
   $max_nonzero$2 = $max_nonzero$1;
  }
 } else {
  $max_nonzero$2 = $max_nonzero$1;
 }
 $101 = ((($cod_info)) + 5208|0);
 HEAP32[$101>>2] = $max_nonzero$2;
 $102 = ((($cod_info)) + 4864|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($gsfb$0$lcssa|0)<($103|0);
 if (!($104)) {
  $ath_over$2$lcssa = $ath_over$0$lcssa;
  return ($ath_over$2$lcssa|0);
 }
 $105 = ((($cod_info)) + 4852|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ((($1)) + 8|0);
 $108 = ((($1)) + 20|0);
 $109 = ((($gfc)) + 224|0);
 $110 = ((($gfc)) + 92|0);
 $111 = ((($gfc)) + 85800|0);
 $$122 = $$0$lcssa;$ath_over$216 = $ath_over$0$lcssa;$gsfb$118 = $gsfb$0$lcssa;$j$217 = $j$0$lcssa;$sfb$020 = $106;
 while(1) {
  $112 = +HEAPF32[$107>>2];
  $113 = (((($1)) + 112|0) + ($sfb$020<<2)|0);
  $114 = +HEAPF32[$113>>2];
  $115 = +HEAPF32[$108>>2];
  $116 = +HEAPF32[$109>>2];
  $117 = $116 < 1.0;
  $118 = (+_fast_log2($114));
  $119 = $118;
  $120 = $119 * 3.0102999566398116;
  $121 = $120;
  $122 = $112 * $112;
  $123 = $121 - $115;
  $124 = $122 > 9.9999996826552254E-21;
  if ($124) {
   $125 = (+_fast_log2($122));
   $126 = $125;
   $127 = $126 * 0.03333343265598758;
   $128 = $127 + 1.0;
   $129 = $128;
   $w$0$i1 = $129;
  } else {
   $w$0$i1 = 0.0;
  }
  $130 = $w$0$i1 < 0.0;
  $w$1$i2 = $130 ? 0.0 : $w$0$i1;
  $131 = $w$1$i2 * $123;
  $132 = $115 + 90.308731079101563;
  $ATHfixpoint$op$i3 = -$116;
  $$neg$i4 = $117 ? -94.824447631835938 : $ATHfixpoint$op$i3;
  $133 = $132 + $$neg$i4;
  $134 = $133 + $131;
  $135 = $134 * 0.10000000149011612;
  $136 = (+Math_pow(10.0,(+$135)));
  $137 = (((($gfc)) + 84856|0) + ($sfb$020<<2)|0);
  $138 = +HEAPF32[$137>>2];
  $139 = $138 * $136;
  $140 = (((($cod_info)) + 4872|0) + ($gsfb$118<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (+($141|0));
  $143 = $139 / $142;
  $144 = ($141|0)>(0);
  if ($144) {
   $en03$07$us = 0.0;$j$48$us = $j$217;$l2$06$us = 0;$rh26$09$us = 2.2204460492503131E-16;
   while(1) {
    $159 = (($j$48$us) + 1)|0;
    $160 = (($cod_info) + ($j$48$us<<2)|0);
    $161 = +HEAPF32[$160>>2];
    $162 = $161 * $161;
    $163 = $162 + $en03$07$us;
    $164 = $162 < $143;
    $165 = $164 ? $162 : $143;
    $166 = $165 + $rh26$09$us;
    $167 = (($l2$06$us) + 1)|0;
    $exitcond = ($167|0)==($141|0);
    if ($exitcond) {
     $$lcssa = $163;$$lcssa93 = $166;
     break;
    } else {
     $en03$07$us = $163;$j$48$us = $159;$l2$06$us = $167;$rh26$09$us = $166;
    }
   }
   $145 = (($141) + ($j$217))|0;
   $146 = $$lcssa > $139;
   $147 = $146&1;
   $ath_over$4$us = (($147) + ($ath_over$216))|0;
   $148 = $$lcssa < $139;
   $149 = $$lcssa93 < $139;
   $$rh26$0$us = $149 ? $139 : $$lcssa93;
   $rh37$0$us = $148 ? $$lcssa : $$rh26$0$us;
   $150 = (((($ratio)) + 332|0) + (($sfb$020*12)|0)|0);
   $151 = +HEAPF32[$150>>2];
   $152 = $151 > 9.999999960041972E-13;
   if ($152) {
    $153 = (((($ratio)) + 88|0) + (($sfb$020*12)|0)|0);
    $154 = +HEAPF32[$153>>2];
    $155 = $154 * $$lcssa;
    $156 = $155 / $151;
    $157 = $138 * $156;
    $158 = $rh37$0$us < $157;
    if ($158) {
     $xmin4$0$us = $157;
    } else {
     $xmin4$0$us = $rh37$0$us;
    }
   } else {
    $xmin4$0$us = $rh37$0$us;
   }
   $232 = $xmin4$0$us > 2.2204460492503131E-16;
   $233 = $232 ? $xmin4$0$us : 2.2204460492503131E-16;
   $234 = $233 + 9.9999998245167004E-15;
   $235 = $$lcssa > $234;
   $236 = $235&1;
   $237 = (((($cod_info)) + 5212|0) + ($gsfb$118)|0);
   HEAP8[$237>>0] = $236;
   $238 = ((($$122)) + 4|0);
   HEAPF32[$$122>>2] = $233;
   $en03$07$us$1 = 0.0;$j$48$us$1 = $145;$l2$06$us$1 = 0;$rh26$09$us$1 = 2.2204460492503131E-16;
   while(1) {
    $239 = (($j$48$us$1) + 1)|0;
    $240 = (($cod_info) + ($j$48$us$1<<2)|0);
    $241 = +HEAPF32[$240>>2];
    $242 = $241 * $241;
    $243 = $242 + $en03$07$us$1;
    $244 = $242 < $143;
    $245 = $244 ? $242 : $143;
    $246 = $245 + $rh26$09$us$1;
    $247 = (($l2$06$us$1) + 1)|0;
    $exitcond$1 = ($247|0)==($141|0);
    if ($exitcond$1) {
     $$lcssa94 = $243;$$lcssa95 = $246;
     break;
    } else {
     $en03$07$us$1 = $243;$j$48$us$1 = $239;$l2$06$us$1 = $247;$rh26$09$us$1 = $246;
    }
   }
   $248 = (($141) + ($145))|0;
   $249 = $$lcssa94 > $139;
   $250 = $249&1;
   $ath_over$4$us$1 = (($250) + ($ath_over$4$us))|0;
   $251 = $$lcssa94 < $139;
   $252 = $$lcssa95 < $139;
   $$rh26$0$us$1 = $252 ? $139 : $$lcssa95;
   $rh37$0$us$1 = $251 ? $$lcssa94 : $$rh26$0$us$1;
   $253 = (((((($ratio)) + 332|0) + (($sfb$020*12)|0)|0)) + 4|0);
   $254 = +HEAPF32[$253>>2];
   $255 = $254 > 9.999999960041972E-13;
   if ($255) {
    $256 = (((((($ratio)) + 88|0) + (($sfb$020*12)|0)|0)) + 4|0);
    $257 = +HEAPF32[$256>>2];
    $258 = $257 * $$lcssa94;
    $259 = $258 / $254;
    $260 = +HEAPF32[$137>>2];
    $261 = $260 * $259;
    $262 = $rh37$0$us$1 < $261;
    if ($262) {
     $xmin4$0$us$1 = $261;
    } else {
     $xmin4$0$us$1 = $rh37$0$us$1;
    }
   } else {
    $xmin4$0$us$1 = $rh37$0$us$1;
   }
   $263 = $xmin4$0$us$1 > 2.2204460492503131E-16;
   $264 = $263 ? $xmin4$0$us$1 : 2.2204460492503131E-16;
   $265 = $264 + 9.9999998245167004E-15;
   $266 = $$lcssa94 > $265;
   $267 = $266&1;
   $268 = (($gsfb$118) + 1)|0;
   $269 = (((($cod_info)) + 5212|0) + ($268)|0);
   HEAP8[$269>>0] = $267;
   $270 = ((($$122)) + 8|0);
   HEAPF32[$238>>2] = $264;
   $en03$07$us$2 = 0.0;$j$48$us$2 = $248;$l2$06$us$2 = 0;$rh26$09$us$2 = 2.2204460492503131E-16;
   while(1) {
    $271 = (($j$48$us$2) + 1)|0;
    $272 = (($cod_info) + ($j$48$us$2<<2)|0);
    $273 = +HEAPF32[$272>>2];
    $274 = $273 * $273;
    $275 = $274 + $en03$07$us$2;
    $276 = $274 < $143;
    $277 = $276 ? $274 : $143;
    $278 = $277 + $rh26$09$us$2;
    $279 = (($l2$06$us$2) + 1)|0;
    $exitcond$2 = ($279|0)==($141|0);
    if ($exitcond$2) {
     $$lcssa96 = $275;$$lcssa97 = $278;
     break;
    } else {
     $en03$07$us$2 = $275;$j$48$us$2 = $271;$l2$06$us$2 = $279;$rh26$09$us$2 = $278;
    }
   }
   $280 = (($141) + ($248))|0;
   $281 = $$lcssa96 > $139;
   $282 = $281&1;
   $ath_over$4$us$2 = (($282) + ($ath_over$4$us$1))|0;
   $283 = $$lcssa96 < $139;
   $284 = $$lcssa97 < $139;
   $$rh26$0$us$2 = $284 ? $139 : $$lcssa97;
   $rh37$0$us$2 = $283 ? $$lcssa96 : $$rh26$0$us$2;
   $285 = (((((($ratio)) + 332|0) + (($sfb$020*12)|0)|0)) + 8|0);
   $286 = +HEAPF32[$285>>2];
   $287 = $286 > 9.999999960041972E-13;
   if ($287) {
    $288 = (((((($ratio)) + 88|0) + (($sfb$020*12)|0)|0)) + 8|0);
    $289 = +HEAPF32[$288>>2];
    $290 = $289 * $$lcssa96;
    $291 = $290 / $286;
    $292 = +HEAPF32[$137>>2];
    $293 = $292 * $291;
    $294 = $rh37$0$us$2 < $293;
    if ($294) {
     $xmin4$0$us$2 = $293;
    } else {
     $xmin4$0$us$2 = $rh37$0$us$2;
    }
   } else {
    $xmin4$0$us$2 = $rh37$0$us$2;
   }
   $295 = $xmin4$0$us$2 > 2.2204460492503131E-16;
   $296 = $295 ? $xmin4$0$us$2 : 2.2204460492503131E-16;
   $297 = $296 + 9.9999998245167004E-15;
   $298 = $$lcssa96 > $297;
   $299 = $298&1;
   $300 = (($gsfb$118) + 2)|0;
   $301 = (((($cod_info)) + 5212|0) + ($300)|0);
   HEAP8[$301>>0] = $299;
   HEAPF32[$270>>2] = $296;
   $302 = $296;$ath_over$3$lcssa = $ath_over$4$us$2;$j$3$lcssa = $280;
  } else {
   $168 = $139 < 0.0;
   $169 = $168&1;
   $ath_over$4 = (($169) + ($ath_over$216))|0;
   $170 = $139 > 0.0;
   $171 = $139 > 2.2204460492503131E-16;
   $$rh26$0 = $171 ? $139 : 2.2204460492503131E-16;
   $rh37$0 = $170 ? 0.0 : $$rh26$0;
   $172 = (((($ratio)) + 332|0) + (($sfb$020*12)|0)|0);
   $173 = +HEAPF32[$172>>2];
   $174 = $173 > 9.999999960041972E-13;
   $175 = $rh37$0 < 0.0;
   $or$cond = $174 & $175;
   $xmin4$0 = $or$cond ? 0.0 : $rh37$0;
   $176 = $xmin4$0 > 2.2204460492503131E-16;
   $177 = $176 ? $xmin4$0 : 2.2204460492503131E-16;
   $178 = $177 + 9.9999998245167004E-15;
   $179 = $178 < 0.0;
   $180 = $179&1;
   $181 = (((($cod_info)) + 5212|0) + ($gsfb$118)|0);
   HEAP8[$181>>0] = $180;
   $182 = ((($$122)) + 4|0);
   HEAPF32[$$122>>2] = $177;
   $ath_over$4$1 = (($169) + ($ath_over$4))|0;
   $183 = (((((($ratio)) + 332|0) + (($sfb$020*12)|0)|0)) + 4|0);
   $184 = +HEAPF32[$183>>2];
   $185 = $184 > 9.999999960041972E-13;
   $186 = $rh37$0 < 0.0;
   $or$cond73 = $185 & $186;
   $xmin4$0$1 = $or$cond73 ? 0.0 : $rh37$0;
   $187 = $xmin4$0$1 > 2.2204460492503131E-16;
   $188 = $187 ? $xmin4$0$1 : 2.2204460492503131E-16;
   $189 = $188 + 9.9999998245167004E-15;
   $190 = $189 < 0.0;
   $191 = $190&1;
   $192 = (($gsfb$118) + 1)|0;
   $193 = (((($cod_info)) + 5212|0) + ($192)|0);
   HEAP8[$193>>0] = $191;
   $194 = ((($$122)) + 8|0);
   HEAPF32[$182>>2] = $188;
   $ath_over$4$2 = (($169) + ($ath_over$4$1))|0;
   $195 = (((((($ratio)) + 332|0) + (($sfb$020*12)|0)|0)) + 8|0);
   $196 = +HEAPF32[$195>>2];
   $197 = $196 > 9.999999960041972E-13;
   $198 = $rh37$0 < 0.0;
   $or$cond74 = $197 & $198;
   $xmin4$0$2 = $or$cond74 ? 0.0 : $rh37$0;
   $199 = $xmin4$0$2 > 2.2204460492503131E-16;
   $200 = $199 ? $xmin4$0$2 : 2.2204460492503131E-16;
   $201 = $200 + 9.9999998245167004E-15;
   $202 = $201 < 0.0;
   $203 = $202&1;
   $204 = (($gsfb$118) + 2)|0;
   $205 = (((($cod_info)) + 5212|0) + ($204)|0);
   HEAP8[$205>>0] = $203;
   HEAPF32[$194>>2] = $200;
   $302 = $200;$ath_over$3$lcssa = $ath_over$4$2;$j$3$lcssa = $j$217;
  }
  $206 = ((($$122)) + 8|0);
  $$2$lcssa = ((($$122)) + 12|0);
  $207 = HEAP32[$110>>2]|0;
  $208 = ($207|0)==(0);
  if (!($208)) {
   $209 = +HEAPF32[$$122>>2];
   $210 = ((($$122)) + 4|0);
   $211 = +HEAPF32[$210>>2];
   $212 = $209 > $211;
   if ($212) {
    $213 = $209 - $211;
    $214 = HEAP32[$111>>2]|0;
    $215 = ((($214)) + 6496|0);
    $216 = +HEAPF32[$215>>2];
    $217 = $216 * $213;
    $218 = $217 + $211;
    HEAPF32[$210>>2] = $218;
    $$pre = +HEAPF32[$206>>2];
    $220 = $$pre;$221 = $218;
   } else {
    $220 = $302;$221 = $211;
   }
   $219 = $221 > $220;
   if ($219) {
    $222 = $221 - $220;
    $223 = HEAP32[$111>>2]|0;
    $224 = ((($223)) + 6496|0);
    $225 = +HEAPF32[$224>>2];
    $226 = $225 * $222;
    $227 = $226 + $220;
    HEAPF32[$206>>2] = $227;
   }
  }
  $228 = (($sfb$020) + 1)|0;
  $229 = (($gsfb$118) + 3)|0;
  $230 = HEAP32[$102>>2]|0;
  $231 = ($229|0)<($230|0);
  if ($231) {
   $$122 = $$2$lcssa;$ath_over$216 = $ath_over$3$lcssa;$gsfb$118 = $229;$j$217 = $j$3$lcssa;$sfb$020 = $228;
  } else {
   $ath_over$2$lcssa = $ath_over$3$lcssa;
   break;
  }
 }
 return ($ath_over$2$lcssa|0);
}
function _calc_noise($cod_info,$l3_xmin,$distort,$res,$prev_noise) {
 $cod_info = $cod_info|0;
 $l3_xmin = $l3_xmin|0;
 $distort = $distort|0;
 $res = $res|0;
 $prev_noise = $prev_noise|0;
 var $$ = 0, $$0114 = 0, $$015 = 0, $$09$i = 0, $$113$i = 0, $$219$i = 0, $$lcssa = 0.0, $$lcssa35 = 0.0, $$lcssa36 = 0.0, $$ph = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0;
 var $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0;
 var $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $distort_$0$ph = 0.0, $fabsf$i = 0.0, $fabsf1$i = 0.0, $fabsf2$i = 0.0, $fabsf3$i = 0.0;
 var $ix01$i = 0, $j$07$i = 0, $j$111$i = 0, $j$217$i = 0, $j$3$i = 0, $l$0 = 0, $max_noise$0$lcssa = 0.0, $max_noise$08 = 0.0, $noise$0$ph = 0.0, $noise$02 = 0.0, $noise$08$i = 0.0, $noise$112$i = 0.0, $noise$218$i = 0.0, $noise$3$i = 0.0, $over$0$lcssa = 0, $over$010 = 0, $over$1 = 0, $over_noise_db$0$lcssa = 0.0, $over_noise_db$06 = 0.0, $over_noise_db$1 = 0.0;
 var $scalefac$09 = 0, $sfb$011 = 0, $tot_noise_db$0$lcssa = 0.0, $tot_noise_db$07 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ix01$i = sp;
 $0 = ((($res)) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($cod_info)) + 4864|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $max_noise$0$lcssa = -20.0;$over$0$lcssa = 0;$over_noise_db$0$lcssa = 0.0;$tot_noise_db$0$lcssa = 0.0;
  $160 = ((($res)) + 12|0);
  HEAP32[$160>>2] = $over$0$lcssa;
  $161 = ((($res)) + 4|0);
  HEAPF32[$161>>2] = $tot_noise_db$0$lcssa;
  HEAPF32[$res>>2] = $over_noise_db$0$lcssa;
  $162 = ((($res)) + 8|0);
  HEAPF32[$162>>2] = $max_noise$0$lcssa;
  STACKTOP = sp;return ($over$0$lcssa|0);
 }
 $4 = ((($cod_info)) + 4608|0);
 $5 = ((($cod_info)) + 4780|0);
 $6 = ((($cod_info)) + 4832|0);
 $7 = ((($cod_info)) + 4836|0);
 $8 = ($prev_noise|0)!=(0|0);
 $9 = ((($cod_info)) + 5208|0);
 $10 = ((($cod_info)) + 4776|0);
 $11 = ((($cod_info)) + 4772|0);
 $12 = ((($ix01$i)) + 4|0);
 $$0114 = $distort;$$015 = $l3_xmin;$41 = 0;$max_noise$08 = -20.0;$over$010 = 0;$over_noise_db$06 = 0.0;$scalefac$09 = $4;$sfb$011 = 0;$tot_noise_db$07 = 0.0;
 while(1) {
  $13 = HEAP32[$5>>2]|0;
  $14 = ((($scalefac$09)) + 4|0);
  $15 = HEAP32[$scalefac$09>>2]|0;
  $16 = HEAP32[$6>>2]|0;
  $17 = ($16|0)==(0);
  if ($17) {
   $21 = 0;
  } else {
   $18 = (12112 + ($sfb$011<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $21 = $19;
  }
  $20 = (($21) + ($15))|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = (($22) + 1)|0;
  $24 = $20 << $23;
  $25 = (($13) - ($24))|0;
  $26 = (((($cod_info)) + 5028|0) + ($sfb$011<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (((($cod_info)) + 4808|0) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 << 3;
  $31 = (($25) - ($30))|0;
  $32 = ((($$015)) + 4|0);
  $33 = +HEAPF32[$$015>>2];
  $34 = 1.0 / $33;
  if ($8) {
   $35 = (((($prev_noise)) + 8|0) + ($sfb$011<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==($31|0);
   if ($37) {
    $38 = (((($cod_info)) + 4872|0) + ($sfb$011<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + ($41))|0;
    $42 = (((($prev_noise)) + 164|0) + ($sfb$011<<2)|0);
    $43 = +HEAPF32[$42>>2];
    $44 = $43 * $34;
    $45 = (((($prev_noise)) + 320|0) + ($sfb$011<<2)|0);
    $46 = +HEAPF32[$45>>2];
    $$ph = $40;$141 = $13;$distort_$0$ph = $44;$noise$0$ph = $46;
    label = 27;
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  do {
   if ((label|0) == 8) {
    label = 0;
    $47 = (($31) + 116)|0;
    $48 = (80736 + ($47<<2)|0);
    $49 = +HEAPF32[$48>>2];
    $50 = (((($cod_info)) + 4872|0) + ($sfb$011<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $51 >> 1;
    $53 = (($51) + ($41))|0;
    $54 = HEAP32[$9>>2]|0;
    $55 = ($53|0)>($54|0);
    if ($55) {
     $56 = (($54) - ($41))|0;
     $57 = ($56|0)>(-1);
     if ($57) {
      $58 = (($56) + 1)|0;
      $59 = $58 >> 1;
      $l$0 = $59;
     } else {
      $l$0 = 0;
     }
    } else {
     $l$0 = $52;
    }
    $60 = HEAP32[$10>>2]|0;
    $61 = ($41|0)>($60|0);
    do {
     if ($61) {
      $62 = ($l$0|0)==(0);
      if ($62) {
       $j$3$i = $41;$noise$3$i = 0.0;
      } else {
       $$09$i = $l$0;$j$07$i = $41;$noise$08$i = 0.0;
       while(1) {
        $63 = (($$09$i) + -1)|0;
        $64 = (($cod_info) + ($j$07$i<<2)|0);
        $65 = +HEAPF32[$64>>2];
        $66 = (($j$07$i) + 1)|0;
        $67 = $65 * $65;
        $68 = $67 + $noise$08$i;
        $69 = (($cod_info) + ($66<<2)|0);
        $70 = +HEAPF32[$69>>2];
        $71 = (($j$07$i) + 2)|0;
        $72 = $70 * $70;
        $73 = $68 + $72;
        $74 = ($63|0)==(0);
        if ($74) {
         $$lcssa36 = $73;
         break;
        } else {
         $$09$i = $63;$j$07$i = $71;$noise$08$i = $73;
        }
       }
       $125 = $l$0 << 1;
       $126 = (($125) + ($41))|0;
       $j$3$i = $126;$noise$3$i = $$lcssa36;
      }
     } else {
      $75 = HEAP32[$11>>2]|0;
      $76 = ($41|0)>($75|0);
      if ($76) {
       HEAPF32[$ix01$i>>2] = 0.0;
       HEAPF32[$12>>2] = $49;
       $78 = ($l$0|0)==(0);
       if ($78) {
        $j$3$i = $41;$noise$3$i = 0.0;
        break;
       } else {
        $$113$i = $l$0;$j$111$i = $41;$noise$112$i = 0.0;
       }
       while(1) {
        $79 = (($$113$i) + -1)|0;
        $80 = (($cod_info) + ($j$111$i<<2)|0);
        $81 = +HEAPF32[$80>>2];
        $fabsf2$i = (+Math_abs((+$81)));
        $82 = (((($cod_info)) + 2304|0) + ($j$111$i<<2)|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = (($ix01$i) + ($83<<2)|0);
        $85 = +HEAPF32[$84>>2];
        $86 = $fabsf2$i - $85;
        $87 = (($j$111$i) + 1)|0;
        $88 = $86 * $86;
        $89 = $88 + $noise$112$i;
        $90 = (($cod_info) + ($87<<2)|0);
        $91 = +HEAPF32[$90>>2];
        $fabsf3$i = (+Math_abs((+$91)));
        $92 = (((($cod_info)) + 2304|0) + ($87<<2)|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = (($ix01$i) + ($93<<2)|0);
        $95 = +HEAPF32[$94>>2];
        $96 = $fabsf3$i - $95;
        $97 = (($j$111$i) + 2)|0;
        $98 = $96 * $96;
        $99 = $89 + $98;
        $100 = ($79|0)==(0);
        if ($100) {
         $$lcssa35 = $99;
         break;
        } else {
         $$113$i = $79;$j$111$i = $97;$noise$112$i = $99;
        }
       }
       $127 = $l$0 << 1;
       $128 = (($127) + ($41))|0;
       $j$3$i = $128;$noise$3$i = $$lcssa35;
       break;
      } else {
       $77 = ($l$0|0)==(0);
       if ($77) {
        $j$3$i = $41;$noise$3$i = 0.0;
        break;
       } else {
        $$219$i = $l$0;$j$217$i = $41;$noise$218$i = 0.0;
       }
       while(1) {
        $101 = (($$219$i) + -1)|0;
        $102 = (($cod_info) + ($j$217$i<<2)|0);
        $103 = +HEAPF32[$102>>2];
        $fabsf$i = (+Math_abs((+$103)));
        $104 = (((($cod_info)) + 2304|0) + ($j$217$i<<2)|0);
        $105 = HEAP32[$104>>2]|0;
        $106 = (14040 + ($105<<2)|0);
        $107 = +HEAPF32[$106>>2];
        $108 = $107 * $49;
        $109 = $fabsf$i - $108;
        $110 = (($j$217$i) + 1)|0;
        $111 = $109 * $109;
        $112 = $111 + $noise$218$i;
        $113 = (($cod_info) + ($110<<2)|0);
        $114 = +HEAPF32[$113>>2];
        $fabsf1$i = (+Math_abs((+$114)));
        $115 = (((($cod_info)) + 2304|0) + ($110<<2)|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = (14040 + ($116<<2)|0);
        $118 = +HEAPF32[$117>>2];
        $119 = $118 * $49;
        $120 = $fabsf1$i - $119;
        $121 = (($j$217$i) + 2)|0;
        $122 = $120 * $120;
        $123 = $112 + $122;
        $124 = ($101|0)==(0);
        if ($124) {
         $$lcssa = $123;
         break;
        } else {
         $$219$i = $101;$j$217$i = $121;$noise$218$i = $123;
        }
       }
       $129 = $l$0 << 1;
       $130 = (($129) + ($41))|0;
       $j$3$i = $130;$noise$3$i = $$lcssa;
       break;
      }
     }
    } while(0);
    if ($8) {
     $131 = (((($prev_noise)) + 8|0) + ($sfb$011<<2)|0);
     HEAP32[$131>>2] = $31;
     $132 = (((($prev_noise)) + 164|0) + ($sfb$011<<2)|0);
     HEAPF32[$132>>2] = $noise$3$i;
    }
    $133 = $noise$3$i * $34;
    $134 = $133 > 9.9999996826552254E-21;
    $135 = $134 ? $133 : 9.9999996826552254E-21;
    $136 = (+_fast_log2($135));
    $137 = $136;
    $138 = $137 * 0.30102999566398114;
    $139 = $138;
    if ($8) {
     $140 = (((($prev_noise)) + 320|0) + ($sfb$011<<2)|0);
     HEAPF32[$140>>2] = $139;
     $$pre = HEAP32[$5>>2]|0;
     $$ph = $j$3$i;$141 = $$pre;$distort_$0$ph = $133;$noise$0$ph = $139;
     label = 27;
     break;
    } else {
     HEAPF32[$$0114>>2] = $133;
     $163 = $j$3$i;$noise$02 = $139;
     break;
    }
   }
  } while(0);
  if ((label|0) == 27) {
   label = 0;
   HEAPF32[$$0114>>2] = $distort_$0$ph;
   HEAP32[$prev_noise>>2] = $141;
   $163 = $$ph;$noise$02 = $noise$0$ph;
  }
  $142 = ((($$0114)) + 4|0);
  $143 = $noise$02 + $tot_noise_db$07;
  $144 = $noise$02 > 0.0;
  if ($144) {
   $145 = $noise$02 * 10.0;
   $146 = $145;
   $147 = $146 + 0.5;
   $148 = (~~(($147)));
   $149 = ($148|0)>(1);
   $$ = $149 ? $148 : 1;
   $150 = Math_imul($$, $$)|0;
   $151 = HEAP32[$0>>2]|0;
   $152 = (($151) + ($150))|0;
   HEAP32[$0>>2] = $152;
   $153 = (($over$010) + 1)|0;
   $154 = $noise$02 + $over_noise_db$06;
   $over$1 = $153;$over_noise_db$1 = $154;
  } else {
   $over$1 = $over$010;$over_noise_db$1 = $over_noise_db$06;
  }
  $155 = $max_noise$08 > $noise$02;
  $156 = $155 ? $max_noise$08 : $noise$02;
  $157 = (($sfb$011) + 1)|0;
  $158 = HEAP32[$1>>2]|0;
  $159 = ($157|0)<($158|0);
  if ($159) {
   $$0114 = $142;$$015 = $32;$41 = $163;$max_noise$08 = $156;$over$010 = $over$1;$over_noise_db$06 = $over_noise_db$1;$scalefac$09 = $14;$sfb$011 = $157;$tot_noise_db$07 = $143;
  } else {
   $max_noise$0$lcssa = $156;$over$0$lcssa = $over$1;$over_noise_db$0$lcssa = $over_noise_db$1;$tot_noise_db$0$lcssa = $143;
   break;
  }
 }
 $160 = ((($res)) + 12|0);
 HEAP32[$160>>2] = $over$0$lcssa;
 $161 = ((($res)) + 4|0);
 HEAPF32[$161>>2] = $tot_noise_db$0$lcssa;
 HEAPF32[$res>>2] = $over_noise_db$0$lcssa;
 $162 = ((($res)) + 8|0);
 HEAPF32[$162>>2] = $max_noise$0$lcssa;
 STACKTOP = sp;return ($over$0$lcssa|0);
}
function _set_frame_pinfo($gfc,$ratio) {
 $gfc = $gfc|0;
 $ratio = $ratio|0;
 var $$2$i = 0.0, $$3$i = 0.0, $$3$i$1 = 0.0, $$3$i$2 = 0.0, $$3$us$i = 0.0, $$4$i = 0.0, $$lcssa27 = 0.0, $$lcssa28 = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert43$i = 0, $$pre = 0, $$pre$i = 0, $$pre19 = 0, $$pre20 = 0, $$pre44$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0;
 var $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0;
 var $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0;
 var $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0;
 var $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0;
 var $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0;
 var $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0;
 var $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $32 = 0.0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $ch$06 = 0, $en0$0$lcssa$i = 0.0, $en0$019$i = 0.0, $en0$1$i = 0.0, $en0$28$us$i = 0.0, $en0$3$i = 0.0, $en0$3$i$1 = 0.0;
 var $en0$3$i$2 = 0.0, $en0$3$us$i = 0.0, $en0$4$i = 0.0, $en0$4$i$1 = 0.0, $en0$4$i$2 = 0.0, $en0$4$us$i = 0.0, $exitcond38$i = 0, $exitcond39$i = 0, $exitcond40$i = 0, $exitcond41$i = 0, $exitcond42$i = 0, $gr$010 = 0, $i$011$us$i = 0, $j$0$lcssa$i = 0, $j$025$i = 0, $j$1$lcssa$i = 0, $j$118$i = 0, $j$213$i = 0, $j$3$lcssa$i = 0, $j$310$us$i = 0;
 var $j$46$us$i = 0, $l$07$us$i = 0, $l3_xmin$i = 0, $noise$i = 0, $or$cond$i = 0, $scalefac_sav = 0, $sfb$0$lcssa$i = 0, $sfb$026$i = 0, $sfb$05 = 0, $sfb$115$i = 0, $sfb2$045$i = 0, $sfb2$114$i = 0, $sfb2$2$lcssa$i = 0, $sfb2$212$us$i = 0, $xfsf$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $l3_xmin$i = sp + 340|0;
 $xfsf$i = sp + 184|0;
 $noise$i = sp + 160|0;
 $scalefac_sav = sp;
 $0 = ((($gfc)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = ((($gfc)) + 72|0);
 $4 = ((($gfc)) + 85804|0);
 $5 = ((($gfc)) + 212|0);
 $6 = ((($gfc)) + 85796|0);
 $$phi$trans$insert$i = ((($gfc)) + 21360|0);
 $7 = ((($gfc)) + 216|0);
 $8 = ((($noise$i)) + 12|0);
 $9 = ((($noise$i)) + 8|0);
 $10 = ((($noise$i)) + 4|0);
 $11 = ((($noise$i)) + 16|0);
 $$pre = HEAP32[$3>>2]|0;
 $12 = $$pre;$315 = $1;$gr$010 = 0;
 while(1) {
  $13 = ($12|0)>(0);
  if ($13) {
   $14 = ($gr$010|0)==(1);
   $ch$06 = 0;
   while(1) {
    $15 = ((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0);
    $16 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4608|0);
    _memcpy(($scalefac_sav|0),($16|0),156)|0;
    if ($14) {
     $17 = (((((($gfc)) + 10808|0) + (($ch$06*5252)|0)|0)) + 4848|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)>(0);
     if ($19) {
      $317 = $18;$sfb$05 = 0;
      while(1) {
       $20 = ((((((($gfc)) + 10808|0) + (($ch$06*5252)|0)|0)) + 4608|0) + ($sfb$05<<2)|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = ($21|0)<(0);
       if ($22) {
        $23 = ((((((($gfc)) + 304|0) + (($ch$06*5252)|0)|0)) + 4608|0) + ($sfb$05<<2)|0);
        $24 = HEAP32[$23>>2]|0;
        HEAP32[$20>>2] = $24;
        $$pre19 = HEAP32[$17>>2]|0;
        $27 = $$pre19;
       } else {
        $27 = $317;
       }
       $25 = (($sfb$05) + 1)|0;
       $26 = ($25|0)<($27|0);
       if ($26) {
        $317 = $27;$sfb$05 = $25;
       } else {
        break;
       }
      }
     }
    }
    $28 = ((($ratio) + (($gr$010*976)|0)|0) + (($ch$06*488)|0)|0);
    $29 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4836|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0);
    $32 = $31 ? 0.5 : 1.0;
    (_calc_xmin($gfc,$28,$15,$l3_xmin$i)|0);
    (_calc_noise($15,$l3_xmin$i,$xfsf$i,$noise$i,0)|0);
    $33 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4848|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4788|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(2);
    if ($37) {
     label = 12;
    } else {
     $38 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4792|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0);
     if ($40) {
      $sfb2$045$i = 22;
      label = 13;
     } else {
      label = 12;
     }
    }
    if ((label|0) == 12) {
     label = 0;
     $41 = ($34|0)>(0);
     if ($41) {
      $sfb2$045$i = $34;
      label = 13;
     } else {
      $j$0$lcssa$i = 0;$sfb$0$lcssa$i = 0;
     }
    }
    if ((label|0) == 13) {
     label = 0;
     $42 = HEAP32[$4>>2]|0;
     $43 = HEAP32[$6>>2]|0;
     $44 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4832|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45|0)!=(0);
     $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
     $51 = $$pre$i;$j$025$i = 0;$sfb$026$i = 0;
     while(1) {
      $47 = (($sfb$026$i) + 1)|0;
      $48 = (((($gfc)) + 21360|0) + ($47<<2)|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = (($49) - ($51))|0;
      $52 = ($j$025$i|0)<($49|0);
      if ($52) {
       $en0$019$i = 0.0;$j$118$i = $j$025$i;
       while(1) {
        $53 = (((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0) + ($j$118$i<<2)|0);
        $54 = +HEAPF32[$53>>2];
        $55 = $54 * $54;
        $56 = $55 + $en0$019$i;
        $57 = (($j$118$i) + 1)|0;
        $exitcond41$i = ($57|0)==($49|0);
        if ($exitcond41$i) {
         $en0$0$lcssa$i = $56;$j$1$lcssa$i = $49;
         break;
        } else {
         $en0$019$i = $56;$j$118$i = $57;
        }
       }
      } else {
       $en0$0$lcssa$i = 0.0;$j$1$lcssa$i = $j$025$i;
      }
      $58 = (+($50|0));
      $59 = $en0$0$lcssa$i / $58;
      $60 = $59 * 999999986991104.0;
      $61 = $60;
      $62 = (((((($42)) + 190712|0) + (($gr$010*704)|0)|0) + (($ch$06*176)|0)|0) + ($sfb$026$i<<3)|0);
      HEAPF64[$62>>3] = $61;
      $63 = (($l3_xmin$i) + ($sfb$026$i<<2)|0);
      $64 = +HEAPF32[$63>>2];
      $65 = $64 * 999999986991104.0;
      $66 = (($xfsf$i) + ($sfb$026$i<<2)|0);
      $67 = +HEAPF32[$66>>2];
      $68 = $65 * $67;
      $69 = $68 / $58;
      $70 = $69;
      $71 = (((((($42)) + 201208|0) + (($gr$010*352)|0)|0) + (($ch$06*176)|0)|0) + ($sfb$026$i<<3)|0);
      HEAPF64[$71>>3] = $70;
      $72 = (((((($ratio) + (($gr$010*976)|0)|0) + (($ch$06*488)|0)|0)) + 244|0) + ($sfb$026$i<<2)|0);
      $73 = +HEAPF32[$72>>2];
      $74 = $73 > 0.0;
      if ($74) {
       $75 = HEAP32[$5>>2]|0;
       $76 = ($75|0)==(0);
       $77 = $59 / $73;
       $$4$i = $76 ? $77 : 0.0;
       $en0$1$i = $$4$i;
      } else {
       $en0$1$i = 0.0;
      }
      $78 = (((($ratio) + (($gr$010*976)|0)|0) + (($ch$06*488)|0)|0) + ($sfb$026$i<<2)|0);
      $79 = +HEAPF32[$78>>2];
      $80 = $79 * $en0$1$i;
      $81 = (((($43)) + 24|0) + ($sfb$026$i<<2)|0);
      $82 = +HEAPF32[$81>>2];
      $83 = $80 > $82;
      $$2$i = $83 ? $80 : $82;
      $84 = $$2$i * 999999986991104.0;
      $85 = $84;
      $86 = (((((($42)) + 189304|0) + (($gr$010*704)|0)|0) + (($ch$06*176)|0)|0) + ($sfb$026$i<<3)|0);
      HEAPF64[$86>>3] = $85;
      $87 = (((((($42)) + 199160|0) + (($gr$010*352)|0)|0) + (($ch$06*176)|0)|0) + ($sfb$026$i<<3)|0);
      HEAPF64[$87>>3] = 0.0;
      $88 = ($sfb$026$i|0)>(10);
      $or$cond$i = $46 & $88;
      if ($or$cond$i) {
       $89 = (12112 + ($sfb$026$i<<2)|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (+($90|0));
       $92 = $32 * $91;
       $93 = -$92;
       $94 = $93;
       HEAPF64[$87>>3] = $94;
       $102 = $94;
      } else {
       $102 = 0.0;
      }
      $95 = ($sfb$026$i|0)<(21);
      if ($95) {
       $96 = (((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4608|0) + ($sfb$026$i<<2)|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = (+($97|0));
       $99 = $98 * $32;
       $100 = $99;
       $101 = $102 - $100;
       HEAPF64[$87>>3] = $101;
      }
      $exitcond42$i = ($47|0)==($sfb2$045$i|0);
      if ($exitcond42$i) {
       $j$0$lcssa$i = $j$1$lcssa$i;$sfb$0$lcssa$i = $sfb2$045$i;
       break;
      } else {
       $51 = $49;$j$025$i = $j$1$lcssa$i;$sfb$026$i = $47;
      }
     }
    }
    if ($37) {
     $103 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4852|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)<(13);
     if ($105) {
      $106 = HEAP32[$4>>2]|0;
      $107 = HEAP32[$5>>2]|0;
      $108 = ($107|0)==(0);
      $109 = HEAP32[$6>>2]|0;
      $$phi$trans$insert43$i = (((($gfc)) + 21452|0) + ($104<<2)|0);
      $$pre44$i = HEAP32[$$phi$trans$insert43$i>>2]|0;
      $110 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4808|0);
      $111 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4812|0);
      $112 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4816|0);
      $116 = $$pre44$i;$j$213$i = $j$0$lcssa$i;$sfb$115$i = $104;$sfb2$114$i = $sfb$0$lcssa$i;
      while(1) {
       $118 = (($sfb$115$i) + 1)|0;
       $119 = (((($gfc)) + 21452|0) + ($118<<2)|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = (($120) - ($116))|0;
       $122 = ($120|0)>($116|0);
       $123 = (+($121|0));
       $124 = ($sfb$115$i*3)|0;
       $125 = (((($109)) + 112|0) + ($sfb$115$i<<2)|0);
       $126 = +HEAPF32[$125>>2];
       $127 = ($sfb$115$i|0)<(12);
       if ($122) {
        $114 = ($120*3)|0;
        $i$011$us$i = 0;$j$310$us$i = $j$213$i;$sfb2$212$us$i = $sfb2$114$i;
        while(1) {
         $en0$28$us$i = 0.0;$j$46$us$i = $j$310$us$i;$l$07$us$i = $116;
         while(1) {
          $184 = (((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0) + ($j$46$us$i<<2)|0);
          $185 = +HEAPF32[$184>>2];
          $186 = $185 * $185;
          $187 = $186 + $en0$28$us$i;
          $188 = (($j$46$us$i) + 1)|0;
          $189 = (($l$07$us$i) + 1)|0;
          $exitcond38$i = ($189|0)==($120|0);
          if ($exitcond38$i) {
           $$lcssa27 = $187;
           break;
          } else {
           $en0$28$us$i = $187;$j$46$us$i = $188;$l$07$us$i = $189;
          }
         }
         $140 = (($j$310$us$i) + ($121))|0;
         $141 = $$lcssa27 / $123;
         $142 = $141;
         $143 = $142 > 9.9999999999999995E-21;
         $144 = $143 ? $141 : 9.9999996826552254E-21;
         $145 = $144 * 999999986991104.0;
         $146 = $145;
         $147 = (($i$011$us$i) + ($124))|0;
         $148 = (((((($106)) + 194616|0) + (($gr$010*1248)|0)|0) + (($ch$06*312)|0)|0) + ($147<<3)|0);
         HEAPF64[$148>>3] = $146;
         $149 = (($l3_xmin$i) + ($sfb2$212$us$i<<2)|0);
         $150 = +HEAPF32[$149>>2];
         $151 = $150 * 999999986991104.0;
         $152 = (($xfsf$i) + ($sfb2$212$us$i<<2)|0);
         $153 = +HEAPF32[$152>>2];
         $154 = $151 * $153;
         $155 = $154 / $123;
         $156 = $155;
         $157 = (((((($106)) + 201912|0) + (($gr$010*624)|0)|0) + (($ch$06*312)|0)|0) + ($147<<3)|0);
         HEAPF64[$157>>3] = $156;
         $158 = ((((((($ratio) + (($gr$010*976)|0)|0) + (($ch$06*488)|0)|0)) + 332|0) + (($sfb$115$i*12)|0)|0) + ($i$011$us$i<<2)|0);
         $159 = +HEAPF32[$158>>2];
         if ($108) {
          $160 = $159 > 0.0;
          $161 = $144 / $159;
          $en0$3$us$i = $160 ? $161 : 0.0;
          $162 = HEAP32[$7>>2]|0;
          $163 = ($162|0)==(0);
          if ($163) {
           $en0$4$us$i = $en0$3$us$i;
          } else {
           label = 33;
          }
         } else {
          label = 33;
         }
         if ((label|0) == 33) {
          label = 0;
          $en0$4$us$i = 0.0;
         }
         $164 = ((((((($ratio) + (($gr$010*976)|0)|0) + (($ch$06*488)|0)|0)) + 88|0) + (($sfb$115$i*12)|0)|0) + ($i$011$us$i<<2)|0);
         $165 = +HEAPF32[$164>>2];
         $166 = $165 * $en0$4$us$i;
         $167 = $166 > $126;
         $$3$us$i = $167 ? $166 : $126;
         $168 = $$3$us$i * 999999986991104.0;
         $169 = $168;
         $170 = (((((($106)) + 192120|0) + (($gr$010*1248)|0)|0) + (($ch$06*312)|0)|0) + ($147<<3)|0);
         HEAPF64[$170>>3] = $169;
         $171 = (((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4808|0) + ($i$011$us$i<<2)|0);
         $172 = HEAP32[$171>>2]|0;
         $173 = (+($172|0));
         $174 = $173 * -2.0;
         $175 = (((((($106)) + 199864|0) + (($gr$010*624)|0)|0) + (($ch$06*312)|0)|0) + ($147<<3)|0);
         HEAPF64[$175>>3] = $174;
         if ($127) {
          $176 = (((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4608|0) + ($sfb2$212$us$i<<2)|0);
          $177 = HEAP32[$176>>2]|0;
          $178 = (+($177|0));
          $179 = $178 * $32;
          $180 = $179;
          $181 = $174 - $180;
          HEAPF64[$175>>3] = $181;
         }
         $182 = (($sfb2$212$us$i) + 1)|0;
         $183 = (($i$011$us$i) + 1)|0;
         $exitcond39$i = ($183|0)==(3);
         if ($exitcond39$i) {
          break;
         } else {
          $i$011$us$i = $183;$j$310$us$i = $140;$sfb2$212$us$i = $182;
         }
        }
        $113 = (($j$213$i) + ($114))|0;
        $115 = Math_imul($116, -3)|0;
        $117 = (($113) + ($115))|0;
        $j$3$lcssa$i = $117;
       } else {
        $128 = (((((($106)) + 194616|0) + (($gr$010*1248)|0)|0) + (($ch$06*312)|0)|0) + ($124<<3)|0);
        HEAPF64[$128>>3] = 9.9999997473787516E-6;
        $129 = (($l3_xmin$i) + ($sfb2$114$i<<2)|0);
        $130 = +HEAPF32[$129>>2];
        $131 = $130 * 999999986991104.0;
        $132 = (($xfsf$i) + ($sfb2$114$i<<2)|0);
        $133 = +HEAPF32[$132>>2];
        $134 = $131 * $133;
        $135 = $134 / $123;
        $136 = $135;
        $137 = (((((($106)) + 201912|0) + (($gr$010*624)|0)|0) + (($ch$06*312)|0)|0) + ($124<<3)|0);
        HEAPF64[$137>>3] = $136;
        $138 = (((((($ratio) + (($gr$010*976)|0)|0) + (($ch$06*488)|0)|0)) + 332|0) + (($sfb$115$i*12)|0)|0);
        $139 = +HEAPF32[$138>>2];
        if ($108) {
         $190 = $139 > 0.0;
         $191 = 9.9999996826552254E-21 / $139;
         $en0$3$i = $190 ? $191 : 0.0;
         $192 = HEAP32[$7>>2]|0;
         $193 = ($192|0)==(0);
         if ($193) {
          $en0$4$i = $en0$3$i;
         } else {
          label = 40;
         }
        } else {
         label = 40;
        }
        if ((label|0) == 40) {
         label = 0;
         $en0$4$i = 0.0;
        }
        $194 = (((((($ratio) + (($gr$010*976)|0)|0) + (($ch$06*488)|0)|0)) + 88|0) + (($sfb$115$i*12)|0)|0);
        $195 = +HEAPF32[$194>>2];
        $196 = $195 * $en0$4$i;
        $197 = $196 > $126;
        $$3$i = $197 ? $196 : $126;
        $198 = $$3$i * 999999986991104.0;
        $199 = $198;
        $200 = (((((($106)) + 192120|0) + (($gr$010*1248)|0)|0) + (($ch$06*312)|0)|0) + ($124<<3)|0);
        HEAPF64[$200>>3] = $199;
        $201 = HEAP32[$110>>2]|0;
        $202 = (+($201|0));
        $203 = $202 * -2.0;
        $204 = (((((($106)) + 199864|0) + (($gr$010*624)|0)|0) + (($ch$06*312)|0)|0) + ($124<<3)|0);
        HEAPF64[$204>>3] = $203;
        if ($127) {
         $205 = (((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4608|0) + ($sfb2$114$i<<2)|0);
         $206 = HEAP32[$205>>2]|0;
         $207 = (+($206|0));
         $208 = $207 * $32;
         $209 = $208;
         $210 = $203 - $209;
         HEAPF64[$204>>3] = $210;
        }
        $211 = (($sfb2$114$i) + 1)|0;
        $212 = (($124) + 1)|0;
        $213 = (((((($106)) + 194616|0) + (($gr$010*1248)|0)|0) + (($ch$06*312)|0)|0) + ($212<<3)|0);
        HEAPF64[$213>>3] = 9.9999997473787516E-6;
        $214 = (($l3_xmin$i) + ($211<<2)|0);
        $215 = +HEAPF32[$214>>2];
        $216 = $215 * 999999986991104.0;
        $217 = (($xfsf$i) + ($211<<2)|0);
        $218 = +HEAPF32[$217>>2];
        $219 = $216 * $218;
        $220 = $219 / $123;
        $221 = $220;
        $222 = (((((($106)) + 201912|0) + (($gr$010*624)|0)|0) + (($ch$06*312)|0)|0) + ($212<<3)|0);
        HEAPF64[$222>>3] = $221;
        $223 = (((((((($ratio) + (($gr$010*976)|0)|0) + (($ch$06*488)|0)|0)) + 332|0) + (($sfb$115$i*12)|0)|0)) + 4|0);
        $224 = +HEAPF32[$223>>2];
        if ($108) {
         $259 = $224 > 0.0;
         $260 = 9.9999996826552254E-21 / $224;
         $en0$3$i$1 = $259 ? $260 : 0.0;
         $261 = HEAP32[$7>>2]|0;
         $262 = ($261|0)==(0);
         if ($262) {
          $en0$4$i$1 = $en0$3$i$1;
         } else {
          label = 49;
         }
        } else {
         label = 49;
        }
        if ((label|0) == 49) {
         label = 0;
         $en0$4$i$1 = 0.0;
        }
        $263 = (((((((($ratio) + (($gr$010*976)|0)|0) + (($ch$06*488)|0)|0)) + 88|0) + (($sfb$115$i*12)|0)|0)) + 4|0);
        $264 = +HEAPF32[$263>>2];
        $265 = $264 * $en0$4$i$1;
        $266 = $265 > $126;
        $$3$i$1 = $266 ? $265 : $126;
        $267 = $$3$i$1 * 999999986991104.0;
        $268 = $267;
        $269 = (((((($106)) + 192120|0) + (($gr$010*1248)|0)|0) + (($ch$06*312)|0)|0) + ($212<<3)|0);
        HEAPF64[$269>>3] = $268;
        $270 = HEAP32[$111>>2]|0;
        $271 = (+($270|0));
        $272 = $271 * -2.0;
        $273 = (((((($106)) + 199864|0) + (($gr$010*624)|0)|0) + (($ch$06*312)|0)|0) + ($212<<3)|0);
        HEAPF64[$273>>3] = $272;
        if ($127) {
         $274 = (((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4608|0) + ($211<<2)|0);
         $275 = HEAP32[$274>>2]|0;
         $276 = (+($275|0));
         $277 = $276 * $32;
         $278 = $277;
         $279 = $272 - $278;
         HEAPF64[$273>>3] = $279;
        }
        $280 = (($sfb2$114$i) + 2)|0;
        $281 = (($124) + 2)|0;
        $282 = (((((($106)) + 194616|0) + (($gr$010*1248)|0)|0) + (($ch$06*312)|0)|0) + ($281<<3)|0);
        HEAPF64[$282>>3] = 9.9999997473787516E-6;
        $283 = (($l3_xmin$i) + ($280<<2)|0);
        $284 = +HEAPF32[$283>>2];
        $285 = $284 * 999999986991104.0;
        $286 = (($xfsf$i) + ($280<<2)|0);
        $287 = +HEAPF32[$286>>2];
        $288 = $285 * $287;
        $289 = $288 / $123;
        $290 = $289;
        $291 = (((((($106)) + 201912|0) + (($gr$010*624)|0)|0) + (($ch$06*312)|0)|0) + ($281<<3)|0);
        HEAPF64[$291>>3] = $290;
        $292 = (((((((($ratio) + (($gr$010*976)|0)|0) + (($ch$06*488)|0)|0)) + 332|0) + (($sfb$115$i*12)|0)|0)) + 8|0);
        $293 = +HEAPF32[$292>>2];
        if ($108) {
         $294 = $293 > 0.0;
         $295 = 9.9999996826552254E-21 / $293;
         $en0$3$i$2 = $294 ? $295 : 0.0;
         $296 = HEAP32[$7>>2]|0;
         $297 = ($296|0)==(0);
         if ($297) {
          $en0$4$i$2 = $en0$3$i$2;
         } else {
          label = 54;
         }
        } else {
         label = 54;
        }
        if ((label|0) == 54) {
         label = 0;
         $en0$4$i$2 = 0.0;
        }
        $298 = (((((((($ratio) + (($gr$010*976)|0)|0) + (($ch$06*488)|0)|0)) + 88|0) + (($sfb$115$i*12)|0)|0)) + 8|0);
        $299 = +HEAPF32[$298>>2];
        $300 = $299 * $en0$4$i$2;
        $301 = $300 > $126;
        $$3$i$2 = $301 ? $300 : $126;
        $302 = $$3$i$2 * 999999986991104.0;
        $303 = $302;
        $304 = (((((($106)) + 192120|0) + (($gr$010*1248)|0)|0) + (($ch$06*312)|0)|0) + ($281<<3)|0);
        HEAPF64[$304>>3] = $303;
        $305 = HEAP32[$112>>2]|0;
        $306 = (+($305|0));
        $307 = $306 * -2.0;
        $308 = (((((($106)) + 199864|0) + (($gr$010*624)|0)|0) + (($ch$06*312)|0)|0) + ($281<<3)|0);
        HEAPF64[$308>>3] = $307;
        if ($127) {
         $309 = (((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4608|0) + ($280<<2)|0);
         $310 = HEAP32[$309>>2]|0;
         $311 = (+($310|0));
         $312 = $311 * $32;
         $313 = $312;
         $314 = $307 - $313;
         HEAPF64[$308>>3] = $314;
         $j$3$lcssa$i = $j$213$i;
        } else {
         $j$3$lcssa$i = $j$213$i;
        }
       }
       $sfb2$2$lcssa$i = (($sfb2$114$i) + 3)|0;
       $exitcond40$i = ($118|0)==(13);
       if ($exitcond40$i) {
        break;
       } else {
        $116 = $120;$j$213$i = $j$3$lcssa$i;$sfb$115$i = $118;$sfb2$114$i = $sfb2$2$lcssa$i;
       }
      }
     }
    }
    $225 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4780|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = HEAP32[$4>>2]|0;
    $228 = ((((($227)) + 201112|0) + ($gr$010<<3)|0) + ($ch$06<<2)|0);
    HEAP32[$228>>2] = $226;
    $229 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4768|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = ((((((($gfc)) + 304|0) + (($gr$010*10504)|0)|0) + (($ch$06*5252)|0)|0)) + 4844|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = (($232) + ($230))|0;
    $234 = ((((($227)) + 203400|0) + ($gr$010<<3)|0) + ($ch$06<<2)|0);
    HEAP32[$234>>2] = $233;
    $235 = HEAP32[$231>>2]|0;
    $236 = ((((($227)) + 203416|0) + ($gr$010<<3)|0) + ($ch$06<<2)|0);
    HEAP32[$236>>2] = $235;
    $237 = HEAP32[$8>>2]|0;
    $238 = ((((($227)) + 203160|0) + ($gr$010<<3)|0) + ($ch$06<<2)|0);
    HEAP32[$238>>2] = $237;
    $239 = +HEAPF32[$9>>2];
    $240 = $239;
    $241 = $240 * 10.0;
    $242 = ((((($227)) + 203208|0) + ($gr$010<<4)|0) + ($ch$06<<3)|0);
    HEAPF64[$242>>3] = $241;
    $243 = +HEAPF32[$noise$i>>2];
    $244 = $243;
    $245 = $244 * 10.0;
    $246 = ((((($227)) + 203240|0) + ($gr$010<<4)|0) + ($ch$06<<3)|0);
    HEAPF64[$246>>3] = $245;
    $247 = +HEAPF32[$10>>2];
    $248 = $247;
    $249 = $248 * 10.0;
    $250 = ((((($227)) + 203176|0) + ($gr$010<<4)|0) + ($ch$06<<3)|0);
    HEAPF64[$250>>3] = $249;
    $251 = HEAP32[$11>>2]|0;
    $252 = ((((($227)) + 203272|0) + ($gr$010<<3)|0) + ($ch$06<<2)|0);
    HEAP32[$252>>2] = $251;
    _memcpy(($16|0),($scalefac_sav|0),156)|0;
    $253 = (($ch$06) + 1)|0;
    $254 = HEAP32[$3>>2]|0;
    $255 = ($253|0)<($254|0);
    if ($255) {
     $ch$06 = $253;
    } else {
     $$lcssa28 = $254;
     break;
    }
   }
   $$pre20 = HEAP32[$0>>2]|0;
   $258 = $$pre20;$316 = $$lcssa28;
  } else {
   $258 = $315;$316 = $12;
  }
  $256 = (($gr$010) + 1)|0;
  $257 = ($256|0)<($258|0);
  if ($257) {
   $12 = $316;$315 = $258;$gr$010 = $256;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _ResvFrameBegin($gfc,$mean_bits) {
 $gfc = $gfc|0;
 $mean_bits = $mean_bits|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fullFrameBits$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getframebits($gfc)|0);
 $1 = ((($gfc)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 3;
 $4 = (($0) - ($3))|0;
 $5 = ((($gfc)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4|0) / ($6|0))&-1;
 $8 = $6 << 11;
 $9 = (($8) + -8)|0;
 $10 = ((($gfc)) + 148|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) - ($0))|0;
 $13 = ((($gfc)) + 52144|0);
 $14 = ($12|0)>($9|0);
 $$ = $14 ? $9 : $12;
 HEAP32[$13>>2] = $$;
 $15 = ($$|0)<(0);
 if ($15) {
  label = 3;
 } else {
  $16 = ((($gfc)) + 144|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $23 = $$;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$13>>2] = 0;
  $23 = 0;
 }
 $19 = Math_imul($6, $7)|0;
 $20 = ((($gfc)) + 52140|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)<($23|0);
 $$1 = $22 ? $21 : $23;
 $24 = (($$1) + ($19))|0;
 $25 = ($24|0)>($11|0);
 $fullFrameBits$0 = $25 ? $11 : $24;
 $26 = ((($gfc)) + 21320|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($gfc)) + 85804|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  HEAP32[$mean_bits>>2] = $7;
  return ($fullFrameBits$0|0);
 }
 $30 = (($7|0) / 2)&-1;
 $31 = ((($28)) + 203484|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($28)) + 203488|0);
 HEAP32[$32>>2] = $21;
 HEAP32[$mean_bits>>2] = $7;
 return ($fullFrameBits$0|0);
}
function _ResvMaxBits($gfc,$mean_bits,$targ_bits,$extra_bits,$cbr) {
 $gfc = $gfc|0;
 $mean_bits = $mean_bits|0;
 $targ_bits = $targ_bits|0;
 $extra_bits = $extra_bits|0;
 $cbr = $cbr|0;
 var $$ = 0, $$1 = 0, $$1$ = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ResvMax$0 = 0, $add_bits$0 = 0, $targBits$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 52140|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($gfc)) + 52144|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($cbr|0)==(0);
 $5 = $4 ? 0 : $mean_bits;
 $$1 = (($1) + ($5))|0;
 $6 = ((($gfc)) + 85096|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $ResvMax$0 = $3;
 } else {
  $10 = (+($3|0));
  $11 = $10 * 0.90000000000000002;
  $12 = (~~(($11)));
  $ResvMax$0 = $12;
 }
 $13 = ($$1*10)|0;
 $14 = ($ResvMax$0*9)|0;
 $15 = ($13|0)>($14|0);
 if ($15) {
  $16 = (($14|0) / 10)&-1;
  $17 = (($$1) - ($16))|0;
  $18 = (($17) + ($mean_bits))|0;
  $19 = $7 | 128;
  HEAP32[$6>>2] = $19;
  $add_bits$0 = $17;$targBits$0 = $18;
 } else {
  $20 = $7 & 127;
  HEAP32[$6>>2] = $20;
  $21 = ((($gfc)) + 144|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 | $8;
  $24 = ($23|0)==(0);
  if ($24) {
   $25 = (+($mean_bits|0));
   $26 = $25 * 0.90000000000000002;
   $27 = (~~(($26)));
   $add_bits$0 = 0;$targBits$0 = $27;
  } else {
   $add_bits$0 = 0;$targBits$0 = $mean_bits;
  }
 }
 $28 = ($3*6)|0;
 $29 = (($28|0) / 10)&-1;
 $30 = ($$1|0)<($29|0);
 $$1$ = $30 ? $$1 : $29;
 $31 = (($$1$) - ($add_bits$0))|0;
 $32 = ($31|0)<(0);
 $$ = $32 ? 0 : $31;
 HEAP32[$targ_bits>>2] = $targBits$0;
 HEAP32[$extra_bits>>2] = $$;
 return;
}
function _ResvAdjust($gfc,$gi) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gi)) + 4768|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($gi)) + 4844|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($gfc)) + 52140|0);
 $5 = HEAP32[$4>>2]|0;
 $sum = (($3) + ($1))|0;
 $6 = (($5) - ($sum))|0;
 HEAP32[$4>>2] = $6;
 return;
}
function _ResvFrameEnd($gfc,$mean_bits) {
 $gfc = $gfc|0;
 $mean_bits = $mean_bits|0;
 var $$stuffingBits$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $stuffingBits$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = Math_imul($1, $mean_bits)|0;
 $3 = ((($gfc)) + 52140|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2))|0;
 $6 = ((($gfc)) + 21324|0);
 $7 = ((($gfc)) + 21320|0);
 $8 = (($5|0) % 8)&-1;
 $9 = (($5) - ($8))|0;
 $10 = ((($gfc)) + 52144|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) - ($11))|0;
 $13 = ($12|0)>(0);
 $14 = $13 ? $12 : 0;
 $stuffingBits$1 = (($14) + ($8))|0;
 $15 = ((($gfc)) + 21312|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 << 3;
 $18 = ($17|0)<($stuffingBits$1|0);
 $$stuffingBits$1 = $18 ? $17 : $stuffingBits$1;
 $19 = (($$stuffingBits$1|0) / 8)&-1;
 $20 = $19 << 3;
 HEAP32[$7>>2] = $20;
 $21 = (($stuffingBits$1) - ($20))|0;
 $22 = (($5) - ($20))|0;
 $23 = (($16) - ($19))|0;
 HEAP32[$15>>2] = $23;
 HEAP32[$6>>2] = $21;
 $24 = (($22) - ($21))|0;
 HEAP32[$3>>2] = $24;
 return;
}
function _lame_set_in_samplerate($gfp,$in_samplerate) {
 $gfp = $gfp|0;
 $in_samplerate = $in_samplerate|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 12|0);
 HEAP32[$2>>2] = $in_samplerate;
 $$0 = 0;
 return ($$0|0);
}
function _lame_set_num_channels($gfp,$num_channels) {
 $gfp = $gfp|0;
 $num_channels = $num_channels|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ($num_channels|0)>(2);
 $3 = ($num_channels|0)==(0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  $$0 = -1;
  return ($$0|0);
 }
 $4 = ((($gfp)) + 8|0);
 HEAP32[$4>>2] = $num_channels;
 $$0 = 0;
 return ($$0|0);
}
function _lame_set_scale($gfp,$scale) {
 $gfp = $gfp|0;
 $scale = +$scale;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 20|0);
 HEAPF32[$2>>2] = $scale;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_scale($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
  return (+$$0);
 }
 $2 = ((($gfp)) + 20|0);
 $3 = +HEAPF32[$2>>2];
 $$0 = $3;
 return (+$$0);
}
function _lame_set_mode($gfp,$mode) {
 $gfp = $gfp|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($mode>>>0)>(4);
 $or$cond = $2 | $1;
 if ($or$cond) {
  $$0 = -1;
  return ($$0|0);
 }
 $3 = ((($gfp)) + 48|0);
 HEAP32[$3>>2] = $mode;
 $$0 = 0;
 return ($$0|0);
}
function _lame_set_brate($gfp,$brate) {
 $gfp = $gfp|0;
 $brate = $brate|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 96|0);
 HEAP32[$2>>2] = $brate;
 $3 = ($brate|0)>(320);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($gfp)) + 128|0);
 HEAP32[$4>>2] = 1;
 $$0 = 0;
 return ($$0|0);
}
function _lame_set_quant_comp($gfp,$quant_type) {
 $gfp = $gfp|0;
 $quant_type = $quant_type|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 132|0);
 HEAP32[$2>>2] = $quant_type;
 $$0 = 0;
 return ($$0|0);
}
function _lame_set_quant_comp_short($gfp,$quant_type) {
 $gfp = $gfp|0;
 $quant_type = $quant_type|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 136|0);
 HEAP32[$2>>2] = $quant_type;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_quant_comp($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 132|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _lame_get_quant_comp_short($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 136|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _lame_set_experimentalY($gfp,$experimentalY) {
 $gfp = $gfp|0;
 $experimentalY = $experimentalY|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 140|0);
 HEAP32[$2>>2] = $experimentalY;
 $$0 = 0;
 return ($$0|0);
}
function _lame_set_exp_nspsytune($gfp,$exp_nspsytune) {
 $gfp = $gfp|0;
 $exp_nspsytune = $exp_nspsytune|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 148|0);
 HEAP32[$2>>2] = $exp_nspsytune;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_exp_nspsytune($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 148|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _lame_set_VBR($gfp,$VBR) {
 $gfp = $gfp|0;
 $VBR = $VBR|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 $2 = ($VBR>>>0)>(4);
 $or$cond = $2 | $1;
 if ($or$cond) {
  $$0 = -1;
  return ($$0|0);
 }
 $3 = ((($gfp)) + 156|0);
 HEAP32[$3>>2] = $VBR;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_VBR($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 156|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _lame_set_VBR_q($gfp,$VBR_q) {
 $gfp = $gfp|0;
 $VBR_q = $VBR_q|0;
 var $$01 = 0, $$1 = 0, $$VBR_q = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $VBR_q$lobit = 0, $ret$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$01 = -1;
  return ($$01|0);
 }
 $2 = ($VBR_q|0)<(0);
 $$VBR_q = $2 ? 0 : $VBR_q;
 $VBR_q$lobit = $VBR_q >> 31;
 $3 = ($$VBR_q|0)>(9);
 $$1 = $3 ? 9 : $$VBR_q;
 $ret$1 = $3 ? -1 : $VBR_q$lobit;
 $4 = ((($gfp)) + 164|0);
 HEAP32[$4>>2] = $$1;
 $5 = ((($gfp)) + 160|0);
 HEAPF32[$5>>2] = 0.0;
 $$01 = $ret$1;
 return ($$01|0);
}
function _lame_set_VBR_mean_bitrate_kbps($gfp,$VBR_mean_bitrate_kbps) {
 $gfp = $gfp|0;
 $VBR_mean_bitrate_kbps = $VBR_mean_bitrate_kbps|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 168|0);
 HEAP32[$2>>2] = $VBR_mean_bitrate_kbps;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_VBR_mean_bitrate_kbps($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 168|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _lame_set_maskingadjust($gfp,$adjust) {
 $gfp = $gfp|0;
 $adjust = +$adjust;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 200|0);
 HEAPF32[$2>>2] = $adjust;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_maskingadjust($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
  return (+$$0);
 }
 $2 = ((($gfp)) + 200|0);
 $3 = +HEAPF32[$2>>2];
 $$0 = $3;
 return (+$$0);
}
function _lame_set_maskingadjust_short($gfp,$adjust) {
 $gfp = $gfp|0;
 $adjust = +$adjust;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 204|0);
 HEAPF32[$2>>2] = $adjust;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_maskingadjust_short($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
  return (+$$0);
 }
 $2 = ((($gfp)) + 204|0);
 $3 = +HEAPF32[$2>>2];
 $$0 = $3;
 return (+$$0);
}
function _lame_set_ATHtype($gfp,$ATHtype) {
 $gfp = $gfp|0;
 $ATHtype = $ATHtype|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 220|0);
 HEAP32[$2>>2] = $ATHtype;
 $$0 = 0;
 return ($$0|0);
}
function _lame_set_ATHcurve($gfp,$ATHcurve) {
 $gfp = $gfp|0;
 $ATHcurve = +$ATHcurve;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 224|0);
 HEAPF32[$2>>2] = $ATHcurve;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_ATHcurve($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
  return (+$$0);
 }
 $2 = ((($gfp)) + 224|0);
 $3 = +HEAPF32[$2>>2];
 $$0 = $3;
 return (+$$0);
}
function _lame_set_ATHlower($gfp,$ATHlower) {
 $gfp = $gfp|0;
 $ATHlower = +$ATHlower;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 228|0);
 HEAPF32[$2>>2] = $ATHlower;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_ATHlower($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
  return (+$$0);
 }
 $2 = ((($gfp)) + 228|0);
 $3 = +HEAPF32[$2>>2];
 $$0 = $3;
 return (+$$0);
}
function _lame_set_athaa_sensitivity($gfp,$athaa_sensitivity) {
 $gfp = $gfp|0;
 $athaa_sensitivity = +$athaa_sensitivity;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 236|0);
 HEAPF32[$2>>2] = $athaa_sensitivity;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_athaa_sensitivity($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
  return (+$$0);
 }
 $2 = ((($gfp)) + 236|0);
 $3 = +HEAPF32[$2>>2];
 $$0 = $3;
 return (+$$0);
}
function _lame_set_interChRatio($gfp,$ratio) {
 $gfp = $gfp|0;
 $ratio = +$ratio;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $notlhs = ($0|0)==(0);
 $notrhs = !($ratio >= 0.0);
 $or$cond$not = $notrhs | $notlhs;
 $1 = !($ratio <= 1.0);
 $or$cond2 = $1 | $or$cond$not;
 if ($or$cond2) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 248|0);
 HEAPF32[$2>>2] = $ratio;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_interChRatio($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
  return (+$$0);
 }
 $2 = ((($gfp)) + 248|0);
 $3 = +HEAPF32[$2>>2];
 $$0 = $3;
 return (+$$0);
}
function _lame_set_sfscale($gfp,$val) {
 $gfp = $gfp|0;
 $val = $val|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ($val|0)!=(0);
 $3 = $2 ? 2 : 1;
 $4 = ((($gfp)) + 84|0);
 HEAP32[$4>>2] = $3;
 $$0 = 0;
 return ($$0|0);
}
function _lame_set_short_threshold_lrm($gfp,$lrm) {
 $gfp = $gfp|0;
 $lrm = +$lrm;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 264|0);
 HEAPF32[$2>>2] = $lrm;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_short_threshold_lrm($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
  return (+$$0);
 }
 $2 = ((($gfp)) + 264|0);
 $3 = +HEAPF32[$2>>2];
 $$0 = $3;
 return (+$$0);
}
function _lame_set_short_threshold_s($gfp,$s) {
 $gfp = $gfp|0;
 $s = +$s;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($gfp)) + 268|0);
 HEAPF32[$2>>2] = $s;
 $$0 = 0;
 return ($$0|0);
}
function _lame_get_short_threshold_s($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
  return (+$$0);
 }
 $2 = ((($gfp)) + 268|0);
 $3 = +HEAPF32[$2>>2];
 $$0 = $3;
 return (+$$0);
}
function _lame_set_msfix($gfp,$msfix) {
 $gfp = $gfp|0;
 $msfix = +$msfix;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 $2 = $msfix;
 $3 = ((($gfp)) + 252|0);
 HEAPF32[$3>>2] = $2;
 return;
}
function _lame_get_msfix($gfp) {
 $gfp = $gfp|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_is_lame_global_flags_valid($gfp)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0.0;
  return (+$$0);
 }
 $2 = ((($gfp)) + 252|0);
 $3 = +HEAPF32[$2>>2];
 $$0 = $3;
 return (+$$0);
}
function _noquant_count_bits($gfc,$gi,$prev_noise) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 $prev_noise = $prev_noise|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a1$0$lcssa = 0, $a1$04 = 0, $a1$2 = 0, $a2$0$lcssa = 0, $a2$03 = 0, $a2$1 = 0, $bits = 0, $i$0 = 0, $i$0$lcssa = 0, $i$0$lcssa24 = 0, $i$025 = 0, $i$1$ = 0, $i$1$1 = 0, $i$1$lcssa = 0;
 var $i$1$lcssa17 = 0, $i$15 = 0, $sfb$0 = 0, $sfb$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bits = sp;
 HEAP32[$bits>>2] = 0;
 $0 = ((($gi)) + 2304|0);
 $1 = ((($gi)) + 5208|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 2)|0;
 $4 = $3 & -2;
 $5 = ($4|0)>(576);
 $$ = $5 ? 576 : $4;
 $6 = ($prev_noise|0)!=(0|0);
 if ($6) {
  $7 = ((($prev_noise)) + 4|0);
  HEAP32[$7>>2] = 0;
  $i$0 = $$;
 } else {
  $i$0 = $$;
 }
 while(1) {
  $8 = ($i$0|0)>(1);
  if (!($8)) {
   $i$0$lcssa = $i$0;
   label = 4;
   break;
  }
  $10 = (($i$0) + -1)|0;
  $11 = (((($gi)) + 2304|0) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($i$0) + -2)|0;
  $14 = (((($gi)) + 2304|0) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 | $12;
  $17 = ($16|0)==(0);
  if ($17) {
   $i$0 = $13;
  } else {
   $i$0$lcssa24 = $i$0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 4) {
  $9 = ((($gi)) + 4776|0);
  HEAP32[$9>>2] = $i$0$lcssa;
  $i$025 = $i$0$lcssa;
  label = 9;
 }
 else if ((label|0) == 6) {
  $18 = ((($gi)) + 4776|0);
  HEAP32[$18>>2] = $i$0$lcssa24;
  $19 = ($i$0$lcssa24|0)>(3);
  if ($19) {
   $a1$04 = 0;$a2$03 = 0;$i$15 = $i$0$lcssa24;
   while(1) {
    $20 = (($i$15) + -4)|0;
    $21 = (((($gi)) + 2304|0) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($i$15) + -3)|0;
    $24 = (((($gi)) + 2304|0) + ($23<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($i$15) + -2)|0;
    $27 = (((($gi)) + 2304|0) + ($26<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($i$15) + -1)|0;
    $30 = (((($gi)) + 2304|0) + ($29<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $25 | $22;
    $33 = $32 | $28;
    $34 = $33 | $31;
    $35 = ($34>>>0)>(1);
    if ($35) {
     $a1$0$lcssa = $a1$04;$a2$0$lcssa = $a2$03;$i$1$lcssa = $i$15;
     break;
    }
    $36 = $22 << 1;
    $37 = (($36) + ($25))|0;
    $38 = $37 << 1;
    $39 = (($38) + ($28))|0;
    $40 = $39 << 1;
    $41 = (($40) + ($31))|0;
    $42 = (82240 + ($41)|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = (($44) + ($a1$04))|0;
    $46 = (82256 + ($41)|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&255;
    $49 = (($48) + ($a2$03))|0;
    $50 = ($20|0)>(3);
    if ($50) {
     $a1$04 = $45;$a2$03 = $49;$i$15 = $20;
    } else {
     $a1$0$lcssa = $45;$a2$0$lcssa = $49;$i$1$lcssa = $20;
     break;
    }
   }
   HEAP32[$bits>>2] = $a1$0$lcssa;
   $52 = ((($gi)) + 4840|0);
   HEAP32[$52>>2] = 0;
   $53 = ($a1$0$lcssa|0)>($a2$0$lcssa|0);
   if ($53) {
    HEAP32[$bits>>2] = $a2$0$lcssa;
    HEAP32[$52>>2] = 1;
    $55 = $a2$0$lcssa;$i$1$lcssa17 = $i$1$lcssa;
   } else {
    $55 = $a1$0$lcssa;$i$1$lcssa17 = $i$1$lcssa;
   }
  } else {
   $i$025 = $i$0$lcssa24;
   label = 9;
  }
 }
 if ((label|0) == 9) {
  HEAP32[$bits>>2] = 0;
  $51 = ((($gi)) + 4840|0);
  HEAP32[$51>>2] = 0;
  $55 = 0;$i$1$lcssa17 = $i$025;
 }
 $54 = ((($gi)) + 5184|0);
 HEAP32[$54>>2] = $55;
 $56 = ((($gi)) + 4772|0);
 HEAP32[$56>>2] = $i$1$lcssa17;
 $57 = ($i$1$lcssa17|0)==(0);
 if ($57) {
  $$0 = HEAP32[$bits>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $58 = ((($gi)) + 4788|0);
 $59 = HEAP32[$58>>2]|0;
 if ((($59|0) == 2)) {
  $60 = ((($gfc)) + 21464|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61*3)|0;
  $63 = ($62|0)>($i$1$lcssa17|0);
  $i$1$ = $63 ? $i$1$lcssa17 : $62;
  $a1$2 = $i$1$;$a2$1 = $i$1$lcssa17;
 } else if ((($59|0) == 0)) {
  $64 = (($i$1$lcssa17) + -2)|0;
  $65 = (((($gfc)) + 85100|0) + ($64)|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ((($gi)) + 4824|0);
  HEAP32[$68>>2] = $67;
  $69 = (($i$1$lcssa17) + -1)|0;
  $70 = (((($gfc)) + 85100|0) + ($69)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71 << 24 >> 24;
  $73 = ((($gi)) + 4828|0);
  HEAP32[$73>>2] = $72;
  $74 = (($67) + 2)|0;
  $75 = (($74) + ($72))|0;
  $76 = (((($gfc)) + 21360|0) + ($75<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($67) + 1)|0;
  $79 = (((($gfc)) + 21360|0) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($77|0)<($i$1$lcssa17|0);
  if ($81) {
   $82 = ((($gfc)) + 85816|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (((($gi)) + 2304|0) + ($77<<2)|0);
   $85 = (((($gi)) + 2304|0) + ($i$1$lcssa17<<2)|0);
   $86 = (FUNCTION_TABLE_iiii[$83 & 3]($84,$85,$bits)|0);
   $87 = ((($gi)) + 4804|0);
   HEAP32[$87>>2] = $86;
   $a1$2 = $80;$a2$1 = $77;
  } else {
   $a1$2 = $80;$a2$1 = $77;
  }
 } else {
  $88 = ((($gi)) + 4824|0);
  HEAP32[$88>>2] = 7;
  $89 = ((($gi)) + 4828|0);
  HEAP32[$89>>2] = 13;
  $90 = ((($gfc)) + 21392|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)>($i$1$lcssa17|0);
  $i$1$1 = $92 ? $i$1$lcssa17 : $91;
  $a1$2 = $i$1$1;$a2$1 = $i$1$lcssa17;
 }
 $93 = ($a1$2|0)<($i$1$lcssa17|0);
 $94 = $93 ? $a1$2 : $i$1$lcssa17;
 $95 = ($a2$1|0)<($i$1$lcssa17|0);
 $96 = $95 ? $a2$1 : $i$1$lcssa17;
 $97 = ($94|0)>(0);
 if ($97) {
  $98 = ((($gfc)) + 85816|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (((($gi)) + 2304|0) + ($94<<2)|0);
  $101 = (FUNCTION_TABLE_iiii[$99 & 3]($0,$100,$bits)|0);
  $102 = ((($gi)) + 4796|0);
  HEAP32[$102>>2] = $101;
 }
 $103 = ($94|0)<($96|0);
 if ($103) {
  $104 = ((($gfc)) + 85816|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (((($gi)) + 2304|0) + ($94<<2)|0);
  $107 = (((($gi)) + 2304|0) + ($96<<2)|0);
  $108 = (FUNCTION_TABLE_iiii[$105 & 3]($106,$107,$bits)|0);
  $109 = ((($gi)) + 4800|0);
  HEAP32[$109>>2] = $108;
 }
 $110 = ((($gfc)) + 36|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)==(2);
 if ($112) {
  $113 = HEAP32[$bits>>2]|0;
  $114 = ((($gi)) + 4768|0);
  HEAP32[$114>>2] = $113;
  _best_huffman_divide($gfc,$gi);
  $115 = HEAP32[$114>>2]|0;
  HEAP32[$bits>>2] = $115;
 }
 if (!($6)) {
  $$0 = HEAP32[$bits>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $116 = HEAP32[$58>>2]|0;
 $117 = ($116|0)==(0);
 if (!($117)) {
  $$0 = HEAP32[$bits>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $118 = HEAP32[$56>>2]|0;
 $sfb$0 = 0;
 while(1) {
  $119 = (((($gfc)) + 21360|0) + ($sfb$0<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($120|0)<($118|0);
  $122 = (($sfb$0) + 1)|0;
  if ($121) {
   $sfb$0 = $122;
  } else {
   $sfb$0$lcssa = $sfb$0;
   break;
  }
 }
 $123 = ((($prev_noise)) + 4|0);
 HEAP32[$123>>2] = $sfb$0$lcssa;
 $$0 = HEAP32[$bits>>2]|0;
 STACKTOP = sp;return ($$0|0);
}
function _best_huffman_divide($gfc,$gi) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 var $$ = 0, $$lcssa = 0, $$lcssa16 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a1$0$lcssa = 0, $a1$06 = 0, $a2$0$a1$0 = 0, $a2$0$lcssa = 0, $a2$05 = 0, $bits$i2 = 0, $cod_info2 = 0;
 var $gi$idx = 0, $gi$idx$val = 0, $i$0$ = 0, $i$07 = 0, $r0$12$i = 0, $r01_bits = 0, $r01_div = 0, $r0_tbl = 0, $r0bits$i = 0, $r1$01$i = 0, $r1_tbl = 0, $r2$01$i = 0, $r2$01$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5632|0;
 $bits$i2 = sp + 5624|0;
 $r0bits$i = sp + 5620|0;
 $cod_info2 = sp + 368|0;
 $r01_bits = sp + 276|0;
 $r01_div = sp + 184|0;
 $r0_tbl = sp + 92|0;
 $r1_tbl = sp;
 $0 = ((($gi)) + 2304|0);
 $1 = ((($gi)) + 4788|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(2);
 do {
  if ($3) {
   $4 = ((($gfc)) + 76|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(1);
   if ($6) {
    STACKTOP = sp;return;
   } else {
    _memcpy(($cod_info2|0),($gi|0),5252)|0;
    $207 = $gi;
    label = 5;
    break;
   }
  } else {
   _memcpy(($cod_info2|0),($gi|0),5252)|0;
   $7 = ($2|0)==(0);
   if ($7) {
    $gi$idx = ((($gi)) + 4772|0);
    $gi$idx$val = HEAP32[$gi$idx>>2]|0;
    HEAP32[$r01_bits>>2] = 100000;
    $8 = ((($r01_bits)) + 4|0);
    HEAP32[$8>>2] = 100000;
    $9 = ((($r01_bits)) + 8|0);
    HEAP32[$9>>2] = 100000;
    $10 = ((($r01_bits)) + 12|0);
    HEAP32[$10>>2] = 100000;
    $11 = ((($r01_bits)) + 16|0);
    HEAP32[$11>>2] = 100000;
    $12 = ((($r01_bits)) + 20|0);
    HEAP32[$12>>2] = 100000;
    $13 = ((($r01_bits)) + 24|0);
    HEAP32[$13>>2] = 100000;
    $14 = ((($r01_bits)) + 28|0);
    HEAP32[$14>>2] = 100000;
    $15 = ((($r01_bits)) + 32|0);
    HEAP32[$15>>2] = 100000;
    $16 = ((($r01_bits)) + 36|0);
    HEAP32[$16>>2] = 100000;
    $17 = ((($r01_bits)) + 40|0);
    HEAP32[$17>>2] = 100000;
    $18 = ((($r01_bits)) + 44|0);
    HEAP32[$18>>2] = 100000;
    $19 = ((($r01_bits)) + 48|0);
    HEAP32[$19>>2] = 100000;
    $20 = ((($r01_bits)) + 52|0);
    HEAP32[$20>>2] = 100000;
    $21 = ((($r01_bits)) + 56|0);
    HEAP32[$21>>2] = 100000;
    $22 = ((($r01_bits)) + 60|0);
    HEAP32[$22>>2] = 100000;
    $23 = ((($r01_bits)) + 64|0);
    HEAP32[$23>>2] = 100000;
    $24 = ((($r01_bits)) + 68|0);
    HEAP32[$24>>2] = 100000;
    $25 = ((($r01_bits)) + 72|0);
    HEAP32[$25>>2] = 100000;
    $26 = ((($r01_bits)) + 76|0);
    HEAP32[$26>>2] = 100000;
    $27 = ((($r01_bits)) + 80|0);
    HEAP32[$27>>2] = 100000;
    $28 = ((($r01_bits)) + 84|0);
    HEAP32[$28>>2] = 100000;
    $29 = ((($r01_bits)) + 88|0);
    HEAP32[$29>>2] = 100000;
    $30 = ((($gfc)) + 85816|0);
    $r0$12$i = 0;
    while(1) {
     $31 = (($r0$12$i) + 1)|0;
     $33 = (((($gfc)) + 21360|0) + ($31<<2)|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)<($gi$idx$val|0);
     if (!($35)) {
      break;
     }
     HEAP32[$r0bits$i>>2] = 0;
     $36 = HEAP32[$30>>2]|0;
     $37 = (((($gi)) + 2304|0) + ($34<<2)|0);
     $38 = (FUNCTION_TABLE_iiii[$36 & 3]($0,$37,$r0bits$i)|0);
     $r1$01$i = 0;
     while(1) {
      $39 = (($r1$01$i) + ($r0$12$i))|0;
      $40 = (($39) + 2)|0;
      $41 = (((($gfc)) + 21360|0) + ($40<<2)|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($42|0)<($gi$idx$val|0);
      if (!($43)) {
       break;
      }
      $44 = HEAP32[$r0bits$i>>2]|0;
      HEAP32[$bits$i2>>2] = $44;
      $45 = HEAP32[$30>>2]|0;
      $46 = (((($gi)) + 2304|0) + ($42<<2)|0);
      $47 = (FUNCTION_TABLE_iiii[$45 & 3]($37,$46,$bits$i2)|0);
      $48 = (($r01_bits) + ($39<<2)|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = HEAP32[$bits$i2>>2]|0;
      $51 = ($49|0)>($50|0);
      if ($51) {
       HEAP32[$48>>2] = $50;
       $52 = (($r01_div) + ($39<<2)|0);
       HEAP32[$52>>2] = $r0$12$i;
       $53 = (($r0_tbl) + ($39<<2)|0);
       HEAP32[$53>>2] = $38;
       $54 = (($r1_tbl) + ($39<<2)|0);
       HEAP32[$54>>2] = $47;
      }
      $55 = (($r1$01$i) + 1)|0;
      $56 = ($55|0)<(8);
      if ($56) {
       $r1$01$i = $55;
      } else {
       break;
      }
     }
     $32 = ($31|0)<(16);
     if ($32) {
      $r0$12$i = $31;
     } else {
      break;
     }
    }
    $57 = ((($cod_info2)) + 4772|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($cod_info2)) + 5184|0);
    $60 = ((($gi)) + 4768|0);
    $61 = (((($gi)) + 2304|0) + ($58<<2)|0);
    $62 = ((($gi)) + 4824|0);
    $63 = ((($gi)) + 4828|0);
    $64 = ((($gi)) + 4796|0);
    $65 = ((($gi)) + 4800|0);
    $66 = ((($gi)) + 4804|0);
    $r2$01$i = 2;
    while(1) {
     $67 = (((($gfc)) + 21360|0) + ($r2$01$i<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)<($58|0);
     if (!($69)) {
      break;
     }
     $70 = (($r2$01$i) + -2)|0;
     $71 = (($r01_bits) + ($70<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = HEAP32[$59>>2]|0;
     $74 = (($73) + ($72))|0;
     HEAP32[$bits$i2>>2] = $74;
     $75 = HEAP32[$60>>2]|0;
     $76 = ($75|0)>($74|0);
     if (!($76)) {
      break;
     }
     $77 = HEAP32[$30>>2]|0;
     $78 = (((($gi)) + 2304|0) + ($68<<2)|0);
     $79 = (FUNCTION_TABLE_iiii[$77 & 3]($78,$61,$bits$i2)|0);
     $80 = HEAP32[$60>>2]|0;
     $81 = HEAP32[$bits$i2>>2]|0;
     $82 = ($80|0)>($81|0);
     if ($82) {
      _memcpy(($gi|0),($cod_info2|0),5252)|0;
      HEAP32[$60>>2] = $81;
      $83 = (($r01_div) + ($70<<2)|0);
      $84 = HEAP32[$83>>2]|0;
      HEAP32[$62>>2] = $84;
      $85 = (($70) - ($84))|0;
      HEAP32[$63>>2] = $85;
      $86 = (($r0_tbl) + ($70<<2)|0);
      $87 = HEAP32[$86>>2]|0;
      HEAP32[$64>>2] = $87;
      $88 = (($r1_tbl) + ($70<<2)|0);
      $89 = HEAP32[$88>>2]|0;
      HEAP32[$65>>2] = $89;
      HEAP32[$66>>2] = $79;
     }
     $90 = (($r2$01$i) + 1)|0;
     $91 = ($90|0)<(23);
     if ($91) {
      $r2$01$i = $90;
     } else {
      break;
     }
    }
    $$pre$phiZ2D = $57;$106 = $gi;
   } else {
    $207 = $gi;
    label = 5;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$pre = ((($cod_info2)) + 4772|0);
  $$pre$phiZ2D = $$pre;$106 = $207;
 }
 $92 = HEAP32[$$pre$phiZ2D>>2]|0;
 $93 = ($92|0)==(0);
 if ($93) {
  STACKTOP = sp;return;
 }
 $94 = (($92) + -2)|0;
 $95 = (((($gi)) + 2304|0) + ($94<<2)|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($92) + -1)|0;
 $98 = (((($gi)) + 2304|0) + ($97<<2)|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $99 | $96;
 $101 = ($100>>>0)>(1);
 if ($101) {
  STACKTOP = sp;return;
 }
 $102 = ((($gi)) + 4776|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($103) + 2)|0;
 $105 = ($104|0)>(576);
 if ($105) {
  STACKTOP = sp;return;
 }
 _memcpy(($cod_info2|0),($106|0),5252)|0;
 $107 = ((($cod_info2)) + 4776|0);
 HEAP32[$107>>2] = $104;
 $108 = HEAP32[$$pre$phiZ2D>>2]|0;
 $109 = ($104|0)>($108|0);
 if ($109) {
  $110 = (($103) + -2)|0;
  $111 = ($108|0)>($110|0);
  $112 = $111 ? $110 : $108;
  $113 = $112 ^ -1;
  $114 = (($103) + ($113))|0;
  $115 = (($114) + 2)|0;
  $116 = $115 & -4;
  $a1$06 = 0;$a2$05 = 0;$i$07 = $104;
  while(1) {
   $117 = (($i$07) + -4)|0;
   $118 = (((($gi)) + 2304|0) + ($117<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 << 1;
   $121 = (($i$07) + -3)|0;
   $122 = (((($gi)) + 2304|0) + ($121<<2)|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($120) + ($123))|0;
   $125 = $124 << 1;
   $126 = (($i$07) + -2)|0;
   $127 = (((($gi)) + 2304|0) + ($126<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (($125) + ($128))|0;
   $130 = $129 << 1;
   $131 = (($i$07) + -1)|0;
   $132 = (((($gi)) + 2304|0) + ($131<<2)|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (($130) + ($133))|0;
   $135 = (82240 + ($134)|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = $136&255;
   $138 = (($137) + ($a1$06))|0;
   $139 = (82256 + ($134)|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $142 = (($141) + ($a2$05))|0;
   $143 = ($117|0)>($108|0);
   if ($143) {
    $a1$06 = $138;$a2$05 = $142;$i$07 = $117;
   } else {
    $$lcssa = $138;$$lcssa16 = $142;
    break;
   }
  }
  $144 = (($103) + -2)|0;
  $145 = (($144) - ($116))|0;
  $146 = $145;$a1$0$lcssa = $$lcssa;$a2$0$lcssa = $$lcssa16;
 } else {
  $146 = $104;$a1$0$lcssa = 0;$a2$0$lcssa = 0;
 }
 HEAP32[$$pre$phiZ2D>>2] = $146;
 $147 = ((($cod_info2)) + 4840|0);
 $148 = ($a1$0$lcssa|0)>($a2$0$lcssa|0);
 $$ = $148&1;
 $a2$0$a1$0 = $148 ? $a2$0$lcssa : $a1$0$lcssa;
 HEAP32[$147>>2] = $$;
 $149 = ((($cod_info2)) + 5184|0);
 HEAP32[$149>>2] = $a2$0$a1$0;
 $150 = ((($cod_info2)) + 4788|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = ($151|0)==(0);
 if ($152) {
  $153 = ((($gi)) + 4768|0);
  $154 = ((($gfc)) + 85816|0);
  $155 = (((($gi)) + 2304|0) + ($146<<2)|0);
  $156 = ((($gi)) + 4824|0);
  $157 = ((($gi)) + 4828|0);
  $158 = ((($gi)) + 4796|0);
  $159 = ((($gi)) + 4800|0);
  $160 = ((($gi)) + 4804|0);
  $r2$01$i3 = 2;
  while(1) {
   $161 = (((($gfc)) + 21360|0) + ($r2$01$i3<<2)|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($162|0)<($146|0);
   if (!($163)) {
    break;
   }
   $164 = (($r2$01$i3) + -2)|0;
   $165 = (($r01_bits) + ($164<<2)|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = HEAP32[$149>>2]|0;
   $168 = (($167) + ($166))|0;
   HEAP32[$bits$i2>>2] = $168;
   $169 = HEAP32[$153>>2]|0;
   $170 = ($169|0)>($168|0);
   if (!($170)) {
    break;
   }
   $171 = HEAP32[$154>>2]|0;
   $172 = (((($gi)) + 2304|0) + ($162<<2)|0);
   $173 = (FUNCTION_TABLE_iiii[$171 & 3]($172,$155,$bits$i2)|0);
   $174 = HEAP32[$153>>2]|0;
   $175 = HEAP32[$bits$i2>>2]|0;
   $176 = ($174|0)>($175|0);
   if ($176) {
    _memcpy(($106|0),($cod_info2|0),5252)|0;
    HEAP32[$153>>2] = $175;
    $177 = (($r01_div) + ($164<<2)|0);
    $178 = HEAP32[$177>>2]|0;
    HEAP32[$156>>2] = $178;
    $179 = (($164) - ($178))|0;
    HEAP32[$157>>2] = $179;
    $180 = (($r0_tbl) + ($164<<2)|0);
    $181 = HEAP32[$180>>2]|0;
    HEAP32[$158>>2] = $181;
    $182 = (($r1_tbl) + ($164<<2)|0);
    $183 = HEAP32[$182>>2]|0;
    HEAP32[$159>>2] = $183;
    HEAP32[$160>>2] = $173;
   }
   $184 = (($r2$01$i3) + 1)|0;
   $185 = ($184|0)<(23);
   if ($185) {
    $r2$01$i3 = $184;
   } else {
    break;
   }
  }
  STACKTOP = sp;return;
 } else {
  $186 = ((($cod_info2)) + 4768|0);
  HEAP32[$186>>2] = $a2$0$a1$0;
  $187 = ((($gfc)) + 21392|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ($188|0)>($146|0);
  $i$0$ = $189 ? $146 : $188;
  $190 = ($i$0$|0)>(0);
  if ($190) {
   $191 = ((($gfc)) + 85816|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = (((($gi)) + 2304|0) + ($i$0$<<2)|0);
   $194 = (FUNCTION_TABLE_iiii[$192 & 3]($0,$193,$186)|0);
   $195 = ((($cod_info2)) + 4796|0);
   HEAP32[$195>>2] = $194;
  }
  $196 = ($146|0)>($i$0$|0);
  if ($196) {
   $197 = ((($gfc)) + 85816|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (((($gi)) + 2304|0) + ($i$0$<<2)|0);
   $200 = (((($gi)) + 2304|0) + ($146<<2)|0);
   $201 = (FUNCTION_TABLE_iiii[$198 & 3]($199,$200,$186)|0);
   $202 = ((($cod_info2)) + 4800|0);
   HEAP32[$202>>2] = $201;
  }
  $203 = ((($gi)) + 4768|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = HEAP32[$186>>2]|0;
  $206 = ($204|0)>($205|0);
  if (!($206)) {
   STACKTOP = sp;return;
  }
  _memcpy(($106|0),($cod_info2|0),5252)|0;
  STACKTOP = sp;return;
 }
}
function _count_bits($gfc,$xr,$gi,$prev_noise) {
 $gfc = $gfc|0;
 $xr = $xr|0;
 $gi = $gi|0;
 $prev_noise = $prev_noise|0;
 var $$$i = 0, $$0 = 0, $$0$acc_xp$0$i = 0, $$041$i = 0, $$1$i = 0, $$2$i = 0, $$pre$pre = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $acc_iData$037$i = 0, $acc_iData$2$i = 0, $acc_iData$3$i = 0, $acc_iData$4$i = 0, $acc_iData$4$i$lcssa = 0, $acc_iData$5$i = 0, $acc_iData$5$i$lcssa = 0, $acc_xp$039$i = 0, $acc_xp$2$i = 0;
 var $acc_xp$3$i = 0, $acc_xp$4$i = 0, $acc_xp$4$i$lcssa = 0, $acc_xp$5$i = 0, $acc_xp$5$i$lcssa = 0, $accumulate$035$i = 0, $accumulate$3$i = 0, $accumulate$3$i$lcssa = 0, $accumulate$4$i = 0, $accumulate$4$i$lcssa = 0, $accumulate01$036$i = 0, $accumulate01$2$i = 0, $accumulate01$2$i$lcssa = 0, $accumulate01$4$i = 0, $accumulate01$4$i$lcssa = 0, $i$02$i$i = 0, $i$02$i14$i = 0, $i$02$i4$i = 0, $i$02$i9$i = 0, $iData$0$acc_iData$0$i = 0;
 var $iData$031$i = 0, $iData$1$i = 0, $j$028$i = 0, $j$03 = 0, $j$1$i = 0, $k$02 = 0, $l$0$i = 0, $not$$i$i = 0, $not$$i10$i = 0, $not$$i15$i = 0, $not$$i5$i = 0, $not$1$i$i = 0, $not$1$i11$i = 0, $not$1$i16$i = 0, $not$1$i6$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond3$i = 0, $sfb$029$i = 0, $sfb$04 = 0;
 var $sfb$1$i = 0, $sfb$2$i = 0, $step$019$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gi)) + 4780|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (79704 + ($1<<2)|0);
 $3 = +HEAPF32[$2>>2];
 $4 = 8206.0 / $3;
 $5 = ((($gi)) + 4764|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $6 > $4;
 if ($7) {
  $$0 = 100000;
  return ($$0|0);
 }
 $8 = ((($gi)) + 2304|0);
 $9 = ($prev_noise|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[$prev_noise>>2]|0;
  $11 = ($1|0)==($10|0);
  $161 = $11;
 } else {
  $161 = 0;
 }
 $12 = ((($gi)) + 4788|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(2);
 $$2$i = $14 ? 38 : 21;
 $15 = ((($gi)) + 4832|0);
 $16 = ((($gi)) + 4836|0);
 $17 = 0.59459996223449707 / $3;
 $18 = ((($gi)) + 5208|0);
 $19 = (($$2$i) + 1)|0;
 $20 = ((($prev_noise)) + 4|0);
 $$041$i = $xr;$acc_iData$037$i = $8;$acc_xp$039$i = $xr;$accumulate$035$i = 0;$accumulate01$036$i = 0;$iData$031$i = $8;$j$028$i = 0;$sfb$029$i = 0;
 while(1) {
  if ($161) {
   label = 7;
  } else {
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(0);
   if ($22) {
    label = 7;
   } else {
    $step$019$i = -1;
    label = 15;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $23 = HEAP32[$0>>2]|0;
   $24 = (((($gi)) + 4608|0) + ($sfb$029$i<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$15>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    $31 = 0;
   } else {
    $28 = (12112 + ($sfb$029$i<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    $31 = $29;
   }
   $30 = (($31) + ($25))|0;
   $32 = HEAP32[$16>>2]|0;
   $33 = (($32) + 1)|0;
   $34 = $30 << $33;
   $35 = (($23) - ($34))|0;
   $36 = (((($gi)) + 5028|0) + ($sfb$029$i<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (((($gi)) + 4808|0) + ($37<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 << 3;
   $41 = (($35) - ($40))|0;
   if ($161) {
    $42 = (((($prev_noise)) + 8|0) + ($sfb$029$i<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==($41|0);
    if ($44) {
     $45 = ($accumulate$035$i|0)==(0);
     if (!($45)) {
      _quantize_lines_xrpow($accumulate$035$i,$3,$acc_xp$039$i,$acc_iData$037$i);
     }
     $46 = ($accumulate01$036$i|0)==(0);
     if ($46) {
      $acc_iData$5$i = $acc_iData$037$i;$acc_xp$5$i = $acc_xp$039$i;$accumulate$4$i = 0;$accumulate01$4$i = 0;$sfb$2$i = $sfb$029$i;
     } else {
      $i$02$i$i = 0;
      while(1) {
       $47 = (($acc_xp$039$i) + ($i$02$i$i<<2)|0);
       $48 = +HEAPF32[$47>>2];
       $49 = $i$02$i$i | 1;
       $50 = (($acc_xp$039$i) + ($49<<2)|0);
       $51 = +HEAPF32[$50>>2];
       $not$$i$i = !($17 > $48);
       $52 = $not$$i$i&1;
       $not$1$i$i = !($17 > $51);
       $53 = $not$1$i$i&1;
       $54 = (($acc_iData$037$i) + ($i$02$i$i<<2)|0);
       HEAP32[$54>>2] = $52;
       $55 = (($acc_iData$037$i) + ($49<<2)|0);
       HEAP32[$55>>2] = $53;
       $56 = (($i$02$i$i) + 2)|0;
       $57 = ($56>>>0)<($accumulate01$036$i>>>0);
       if ($57) {
        $i$02$i$i = $56;
       } else {
        $acc_iData$5$i = $acc_iData$037$i;$acc_xp$5$i = $acc_xp$039$i;$accumulate$4$i = 0;$accumulate01$4$i = 0;$sfb$2$i = $sfb$029$i;
        break;
       }
      }
     }
    } else {
     $step$019$i = $41;
     label = 15;
    }
   } else {
    $step$019$i = $41;
    label = 15;
   }
  }
  if ((label|0) == 15) {
   label = 0;
   $58 = (((($gi)) + 4872|0) + ($sfb$029$i<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + ($j$028$i))|0;
   $61 = HEAP32[$18>>2]|0;
   $62 = ($60|0)>($61|0);
   if ($62) {
    $63 = (($61) - ($j$028$i))|0;
    $64 = (($63) + 1)|0;
    $65 = (((($gi)) + 2304|0) + ($61<<2)|0);
    $66 = (576 - ($61))|0;
    $67 = $66 << 2;
    _memset(($65|0),0,($67|0))|0;
    $68 = ($64|0)<(0);
    $$$i = $68 ? 0 : $64;
    $l$0$i = $$$i;$sfb$1$i = $19;
   } else {
    $l$0$i = $59;$sfb$1$i = $sfb$029$i;
   }
   $69 = ($accumulate$035$i|0)==(0);
   $70 = ($accumulate01$036$i|0)==(0);
   $71 = $accumulate$035$i | $accumulate01$036$i;
   $72 = ($71|0)==(0);
   $iData$0$acc_iData$0$i = $72 ? $iData$031$i : $acc_iData$037$i;
   $$0$acc_xp$0$i = $72 ? $$041$i : $acc_xp$039$i;
   if ($9) {
    $73 = HEAP32[$20>>2]|0;
    $74 = ($73|0)<(1);
    $75 = ($sfb$1$i|0)<($73|0);
    $or$cond$i = $74 | $75;
    if ($or$cond$i) {
     label = 23;
    } else {
     $76 = (((($prev_noise)) + 8|0) + ($sfb$1$i<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)<(1);
     $79 = ($step$019$i|0)<($77|0);
     $or$cond3$i = $78 | $79;
     if ($or$cond3$i) {
      label = 23;
     } else {
      if ($69) {
       $acc_iData$2$i = $iData$0$acc_iData$0$i;$acc_xp$2$i = $$0$acc_xp$0$i;
      } else {
       _quantize_lines_xrpow($accumulate$035$i,$3,$$0$acc_xp$0$i,$iData$0$acc_iData$0$i);
       $acc_iData$2$i = $iData$031$i;$acc_xp$2$i = $$041$i;
      }
      $80 = (($l$0$i) + ($accumulate01$036$i))|0;
      $acc_iData$4$i = $acc_iData$2$i;$acc_xp$4$i = $acc_xp$2$i;$accumulate$3$i = 0;$accumulate01$2$i = $80;
     }
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    if ($70) {
     $acc_iData$3$i = $iData$0$acc_iData$0$i;$acc_xp$3$i = $$0$acc_xp$0$i;
    } else {
     $i$02$i9$i = 0;
     while(1) {
      $81 = (($$0$acc_xp$0$i) + ($i$02$i9$i<<2)|0);
      $82 = +HEAPF32[$81>>2];
      $83 = $i$02$i9$i | 1;
      $84 = (($$0$acc_xp$0$i) + ($83<<2)|0);
      $85 = +HEAPF32[$84>>2];
      $not$$i10$i = !($17 > $82);
      $86 = $not$$i10$i&1;
      $not$1$i11$i = !($17 > $85);
      $87 = $not$1$i11$i&1;
      $88 = (($iData$0$acc_iData$0$i) + ($i$02$i9$i<<2)|0);
      HEAP32[$88>>2] = $86;
      $89 = (($iData$0$acc_iData$0$i) + ($83<<2)|0);
      HEAP32[$89>>2] = $87;
      $90 = (($i$02$i9$i) + 2)|0;
      $91 = ($90>>>0)<($accumulate01$036$i>>>0);
      if ($91) {
       $i$02$i9$i = $90;
      } else {
       $acc_iData$3$i = $iData$031$i;$acc_xp$3$i = $$041$i;
       break;
      }
     }
    }
    $92 = (($l$0$i) + ($accumulate$035$i))|0;
    $acc_iData$4$i = $acc_iData$3$i;$acc_xp$4$i = $acc_xp$3$i;$accumulate$3$i = $92;$accumulate01$2$i = 0;
   }
   $93 = ($l$0$i|0)<(1);
   if ($93) {
    $acc_iData$4$i$lcssa = $acc_iData$4$i;$acc_xp$4$i$lcssa = $acc_xp$4$i;$accumulate$3$i$lcssa = $accumulate$3$i;$accumulate01$2$i$lcssa = $accumulate01$2$i;
    label = 27;
    break;
   } else {
    $acc_iData$5$i = $acc_iData$4$i;$acc_xp$5$i = $acc_xp$4$i;$accumulate$4$i = $accumulate$3$i;$accumulate01$4$i = $accumulate01$2$i;$sfb$2$i = $sfb$1$i;
   }
  }
  $107 = ($sfb$2$i|0)>($$2$i|0);
  if ($107) {
   $$1$i = $$041$i;$iData$1$i = $iData$031$i;$j$1$i = $j$028$i;
  } else {
   $108 = (((($gi)) + 4872|0) + ($sfb$2$i<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($iData$031$i) + ($109<<2)|0);
   $111 = (($$041$i) + ($109<<2)|0);
   $112 = (($109) + ($j$028$i))|0;
   $$1$i = $111;$iData$1$i = $110;$j$1$i = $112;
  }
  $113 = (($sfb$2$i) + 1)|0;
  $114 = ($sfb$2$i|0)<($$2$i|0);
  if ($114) {
   $$041$i = $$1$i;$acc_iData$037$i = $acc_iData$5$i;$acc_xp$039$i = $acc_xp$5$i;$accumulate$035$i = $accumulate$4$i;$accumulate01$036$i = $accumulate01$4$i;$iData$031$i = $iData$1$i;$j$028$i = $j$1$i;$sfb$029$i = $113;
  } else {
   $acc_iData$5$i$lcssa = $acc_iData$5$i;$acc_xp$5$i$lcssa = $acc_xp$5$i;$accumulate$4$i$lcssa = $accumulate$4$i;$accumulate01$4$i$lcssa = $accumulate01$4$i;
   label = 34;
   break;
  }
 }
 if ((label|0) == 27) {
  $94 = ($accumulate01$2$i$lcssa|0)==(0);
  if (!($94)) {
   $i$02$i14$i = 0;
   while(1) {
    $95 = (($acc_xp$4$i$lcssa) + ($i$02$i14$i<<2)|0);
    $96 = +HEAPF32[$95>>2];
    $97 = $i$02$i14$i | 1;
    $98 = (($acc_xp$4$i$lcssa) + ($97<<2)|0);
    $99 = +HEAPF32[$98>>2];
    $not$$i15$i = !($17 > $96);
    $100 = $not$$i15$i&1;
    $not$1$i16$i = !($17 > $99);
    $101 = $not$1$i16$i&1;
    $102 = (($acc_iData$4$i$lcssa) + ($i$02$i14$i<<2)|0);
    HEAP32[$102>>2] = $100;
    $103 = (($acc_iData$4$i$lcssa) + ($97<<2)|0);
    HEAP32[$103>>2] = $101;
    $104 = (($i$02$i14$i) + 2)|0;
    $105 = ($104>>>0)<($accumulate01$2$i$lcssa>>>0);
    if ($105) {
     $i$02$i14$i = $104;
    } else {
     break;
    }
   }
  }
  $106 = ($accumulate$3$i$lcssa|0)==(0);
  if (!($106)) {
   _quantize_lines_xrpow($accumulate$3$i$lcssa,$3,$acc_xp$4$i$lcssa,$acc_iData$4$i$lcssa);
  }
 }
 else if ((label|0) == 34) {
  $115 = ($accumulate$4$i$lcssa|0)==(0);
  if (!($115)) {
   _quantize_lines_xrpow($accumulate$4$i$lcssa,$3,$acc_xp$5$i$lcssa,$acc_iData$5$i$lcssa);
  }
  $116 = ($accumulate01$4$i$lcssa|0)==(0);
  if (!($116)) {
   $i$02$i4$i = 0;
   while(1) {
    $117 = (($acc_xp$5$i$lcssa) + ($i$02$i4$i<<2)|0);
    $118 = +HEAPF32[$117>>2];
    $119 = $i$02$i4$i | 1;
    $120 = (($acc_xp$5$i$lcssa) + ($119<<2)|0);
    $121 = +HEAPF32[$120>>2];
    $not$$i5$i = !($17 > $118);
    $122 = $not$$i5$i&1;
    $not$1$i6$i = !($17 > $121);
    $123 = $not$1$i6$i&1;
    $124 = (($acc_iData$5$i$lcssa) + ($i$02$i4$i<<2)|0);
    HEAP32[$124>>2] = $122;
    $125 = (($acc_iData$5$i$lcssa) + ($119<<2)|0);
    HEAP32[$125>>2] = $123;
    $126 = (($i$02$i4$i) + 2)|0;
    $127 = ($126>>>0)<($accumulate01$4$i$lcssa>>>0);
    if ($127) {
     $i$02$i4$i = $126;
    } else {
     break;
    }
   }
  }
 }
 $128 = ((($gfc)) + 85096|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $129 & 2;
 $131 = ($130|0)==(0);
 if (!($131)) {
  $132 = HEAP32[$0>>2]|0;
  $133 = HEAP32[$16>>2]|0;
  $134 = (($133) + ($132))|0;
  $135 = (79704 + ($134<<2)|0);
  $136 = +HEAPF32[$135>>2];
  $137 = $136;
  $138 = 0.63452168224243899 / $137;
  $139 = $138;
  $140 = ((($gi)) + 4860|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($141|0)>(0);
  if ($142) {
   $162 = $141;$j$03 = 0;$sfb$04 = 0;
   while(1) {
    $143 = (((($gi)) + 4872|0) + ($sfb$04<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (((($gfc)) + 84936|0) + ($sfb$04<<2)|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)!=(0);
    $148 = (($144) + ($j$03))|0;
    $149 = ($144|0)>(0);
    $or$cond = $147 & $149;
    if ($or$cond) {
     $k$02 = $j$03;
     while(1) {
      $150 = (($xr) + ($k$02<<2)|0);
      $151 = +HEAPF32[$150>>2];
      $152 = !($151 >= $139);
      $$pre7 = (((($gi)) + 2304|0) + ($k$02<<2)|0);
      if ($152) {
       $154 = 0;
      } else {
       $153 = HEAP32[$$pre7>>2]|0;
       $154 = $153;
      }
      HEAP32[$$pre7>>2] = $154;
      $155 = (($k$02) + 1)|0;
      $156 = ($155|0)<($148|0);
      if ($156) {
       $k$02 = $155;
      } else {
       break;
      }
     }
     $$pre$pre = HEAP32[$140>>2]|0;
     $159 = $$pre$pre;
    } else {
     $159 = $162;
    }
    $157 = (($sfb$04) + 1)|0;
    $158 = ($157|0)<($159|0);
    if ($158) {
     $162 = $159;$j$03 = $148;$sfb$04 = $157;
    } else {
     break;
    }
   }
  }
 }
 $160 = (_noquant_count_bits($gfc,$gi,$prev_noise)|0);
 $$0 = $160;
 return ($$0|0);
}
function _best_scalefac_store($gfc,$gr,$ch,$l3_side) {
 $gfc = $gfc|0;
 $gr = $gr|0;
 $ch = $ch|0;
 $l3_side = $l3_side|0;
 var $$pre = 0, $$pre$i = 0, $$pre42 = 0, $$pre43 = 0, $$s$0 = 0, $$s$0$lcssa = 0, $$s1$0$1$i = 0, $$s1$0$10$i = 0, $$s1$0$2$i = 0, $$s1$0$3$i = 0, $$s1$0$4$i = 0, $$s1$0$5$i = 0, $$s1$0$6$i = 0, $$s1$0$7$i = 0, $$s1$0$8$i = 0, $$s1$0$9$i = 0, $$s1$0$i = 0, $$s2$0$i = 0, $$s2$0$i$1 = 0, $$s2$0$i$2 = 0;
 var $$s2$0$i$3 = 0, $$s2$0$i$4 = 0, $$s2$0$i$5 = 0, $$s2$0$i$6 = 0, $$s2$0$i$7 = 0, $$s2$0$i$8 = 0, $$s2$0$i$9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1$1$1$i = 0, $c1$1$10$i = 0, $c1$1$2$i = 0, $c1$1$3$i = 0, $c1$1$4$i = 0, $c1$1$5$i = 0, $c1$1$6$i = 0, $c1$1$7$i = 0, $c1$1$8$i = 0, $c1$1$9$i = 0, $c1$1$i = 0;
 var $c2$1$i = 0, $c2$1$i$1 = 0, $c2$1$i$2 = 0, $c2$1$i$3 = 0, $c2$1$i$4 = 0, $c2$1$i$5 = 0, $c2$1$i$6 = 0, $c2$1$i$7 = 0, $c2$1$i$8 = 0, $c2$1$i$9 = 0, $exitcond$i = 0, $i$14$i = 0, $j$027 = 0, $l$0$lcssa = 0, $l$020 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$1 = 0, $or$cond$i$2 = 0, $or$cond$i$3 = 0;
 var $or$cond3 = 0, $or$cond4 = 0, $or$cond4$1 = 0, $or$cond4$2 = 0, $or$cond4$3 = 0, $or$cond4$4 = 0, $or$cond4$5 = 0, $or$cond4$6 = 0, $or$cond4$7 = 0, $or$cond4$8 = 0, $or$cond4$9 = 0, $recalc$0$lcssa = 0, $recalc$028 = 0, $recalc$1 = 0, $recalc$2 = 0, $recalc$3 = 0, $recalc$4 = 0, $s$017 = 0, $s1$1$1$i = 0, $s1$1$10$i = 0;
 var $s1$1$2$i = 0, $s1$1$3$i = 0, $s1$1$4$i = 0, $s1$1$5$i = 0, $s1$1$6$i = 0, $s1$1$7$i = 0, $s1$1$8$i = 0, $s1$1$9$i = 0, $s1$1$i = 0, $s2$1$i = 0, $s2$1$i$1 = 0, $s2$1$i$2 = 0, $s2$1$i$3 = 0, $s2$1$i$4 = 0, $s2$1$i$5 = 0, $s2$1$i$6 = 0, $s2$1$i$7 = 0, $s2$1$i$8 = 0, $s2$1$i$9 = 0, $scevgep = 0;
 var $scevgep38 = 0, $scevgep38$1 = 0, $scevgep38$2 = 0, $scevgep38$3 = 0, $scevgep40 = 0, $sfb$0$lcssa$i = 0, $sfb$0$lcssa$i$1 = 0, $sfb$0$lcssa$i$2 = 0, $sfb$0$lcssa$i$3 = 0, $sfb$012$i = 0, $sfb$012$i$1 = 0, $sfb$012$i$2 = 0, $sfb$012$i$3 = 0, $sfb$029 = 0, $sfb$116 = 0, $sfb$213 = 0, $sfb$59 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0);
 $1 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4860|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  $319 = $2;$j$027 = 0;$recalc$028 = 0;$sfb$029 = 0;
  while(1) {
   $4 = (((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4872|0) + ($sfb$029<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + ($j$027))|0;
   $7 = ($5|0)>(0);
   L4: do {
    if ($7) {
     $l$020 = $j$027;
     while(1) {
      $8 = (((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 2304|0) + ($l$020<<2)|0);
      $9 = HEAP32[$8>>2]|0;
      $10 = ($9|0)==(0);
      if (!($10)) {
       $l$0$lcssa = $l$020;
       break L4;
      }
      $11 = (($l$020) + 1)|0;
      $12 = ($11|0)<($6|0);
      if ($12) {
       $l$020 = $11;
      } else {
       $l$0$lcssa = $11;
       break;
      }
     }
    } else {
     $l$0$lcssa = $j$027;
    }
   } while(0);
   $13 = ($l$0$lcssa|0)==($6|0);
   if ($13) {
    $14 = (((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4608|0) + ($sfb$029<<2)|0);
    HEAP32[$14>>2] = -2;
    $$pre = HEAP32[$1>>2]|0;
    $17 = $$pre;$recalc$1 = -2;
   } else {
    $17 = $319;$recalc$1 = $recalc$028;
   }
   $15 = (($sfb$029) + 1)|0;
   $16 = ($15|0)<($17|0);
   if ($16) {
    $319 = $17;$j$027 = $6;$recalc$028 = $recalc$1;$sfb$029 = $15;
   } else {
    $24 = $17;$recalc$0$lcssa = $recalc$1;
    break;
   }
  }
 } else {
  $24 = $2;$recalc$0$lcssa = 0;
 }
 $18 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4836|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 $21 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4832|0);
 if ($20) {
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $25 = ($24|0)>(0);
   if ($25) {
    $s$017 = 0;$sfb$116 = 0;
    while(1) {
     $26 = (((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4608|0) + ($sfb$116<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)>(0);
     $29 = $28 ? $27 : 0;
     $$s$0 = $29 | $s$017;
     $30 = (($sfb$116) + 1)|0;
     $31 = ($30|0)<($24|0);
     if ($31) {
      $s$017 = $$s$0;$sfb$116 = $30;
     } else {
      $$s$0$lcssa = $$s$0;
      break;
     }
    }
    $32 = $$s$0$lcssa & 1;
    $33 = ($32|0)==(0);
    $34 = ($$s$0$lcssa|0)!=(0);
    $or$cond = $34 & $33;
    if ($or$cond) {
     if ($25) {
      $320 = $24;$sfb$213 = 0;
      while(1) {
       $35 = (((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4608|0) + ($sfb$213<<2)|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = ($36|0)>(0);
       if ($37) {
        $38 = $36 >> 1;
        HEAP32[$35>>2] = $38;
        $$pre42 = HEAP32[$1>>2]|0;
        $41 = $$pre42;
       } else {
        $41 = $320;
       }
       $39 = (($sfb$213) + 1)|0;
       $40 = ($39|0)<($41|0);
       if ($40) {
        $320 = $41;$sfb$213 = $39;
       } else {
        break;
       }
      }
     }
     HEAP32[$18>>2] = 1;
     $recalc$2 = 1;
    } else {
     $recalc$2 = $recalc$0$lcssa;
    }
   } else {
    $recalc$2 = $recalc$0$lcssa;
   }
  } else {
   $recalc$2 = $recalc$0$lcssa;
  }
 } else {
  $recalc$2 = $recalc$0$lcssa;
 }
 $42 = HEAP32[$21>>2]|0;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4788|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(2);
  if ($46) {
   $recalc$3 = $recalc$2;
  } else {
   $47 = ((($gfc)) + 76|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(2);
   if ($49) {
    $50 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4652|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = HEAP32[(12156)>>2]|0;
    $53 = ($51|0)>=($52|0);
    $54 = ($51|0)==(-2);
    $or$cond4 = $54 | $53;
    if ($or$cond4) {
     $55 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4656|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = HEAP32[(12160)>>2]|0;
     $58 = ($56|0)>=($57|0);
     $59 = ($56|0)==(-2);
     $or$cond4$1 = $59 | $58;
     if ($or$cond4$1) {
      $267 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4660|0);
      $263 = HEAP32[$267>>2]|0;
      $266 = HEAP32[(12164)>>2]|0;
      $303 = ($263|0)>=($266|0);
      $304 = ($263|0)==(-2);
      $or$cond4$2 = $304 | $303;
      if ($or$cond4$2) {
       $272 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4664|0);
       $268 = HEAP32[$272>>2]|0;
       $271 = HEAP32[(12168)>>2]|0;
       $305 = ($268|0)>=($271|0);
       $306 = ($268|0)==(-2);
       $or$cond4$3 = $306 | $305;
       if ($or$cond4$3) {
        $277 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4668|0);
        $273 = HEAP32[$277>>2]|0;
        $276 = HEAP32[(12172)>>2]|0;
        $307 = ($273|0)>=($276|0);
        $308 = ($273|0)==(-2);
        $or$cond4$4 = $308 | $307;
        if ($or$cond4$4) {
         $282 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4672|0);
         $278 = HEAP32[$282>>2]|0;
         $281 = HEAP32[(12176)>>2]|0;
         $309 = ($278|0)>=($281|0);
         $310 = ($278|0)==(-2);
         $or$cond4$5 = $310 | $309;
         if ($or$cond4$5) {
          $287 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4676|0);
          $283 = HEAP32[$287>>2]|0;
          $286 = HEAP32[(12180)>>2]|0;
          $311 = ($283|0)>=($286|0);
          $312 = ($283|0)==(-2);
          $or$cond4$6 = $312 | $311;
          if ($or$cond4$6) {
           $292 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4680|0);
           $288 = HEAP32[$292>>2]|0;
           $291 = HEAP32[(12184)>>2]|0;
           $313 = ($288|0)>=($291|0);
           $314 = ($288|0)==(-2);
           $or$cond4$7 = $314 | $313;
           if ($or$cond4$7) {
            $297 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4684|0);
            $293 = HEAP32[$297>>2]|0;
            $296 = HEAP32[(12188)>>2]|0;
            $315 = ($293|0)>=($296|0);
            $316 = ($293|0)==(-2);
            $or$cond4$8 = $316 | $315;
            if ($or$cond4$8) {
             $302 = ((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4688|0);
             $298 = HEAP32[$302>>2]|0;
             $301 = HEAP32[(12192)>>2]|0;
             $317 = ($298|0)>=($301|0);
             $318 = ($298|0)==(-2);
             $or$cond4$9 = $318 | $317;
             if ($or$cond4$9) {
              $60 = ($51|0)>(0);
              if ($60) {
               $61 = (($51) - ($52))|0;
               HEAP32[$50>>2] = $61;
              }
              $62 = ($56|0)>(0);
              if ($62) {
               $262 = (($56) - ($57))|0;
               HEAP32[$55>>2] = $262;
              }
              $264 = ($263|0)>(0);
              if ($264) {
               $265 = (($263) - ($266))|0;
               HEAP32[$267>>2] = $265;
              }
              $269 = ($268|0)>(0);
              if ($269) {
               $270 = (($268) - ($271))|0;
               HEAP32[$272>>2] = $270;
              }
              $274 = ($273|0)>(0);
              if ($274) {
               $275 = (($273) - ($276))|0;
               HEAP32[$277>>2] = $275;
              }
              $279 = ($278|0)>(0);
              if ($279) {
               $280 = (($278) - ($281))|0;
               HEAP32[$282>>2] = $280;
              }
              $284 = ($283|0)>(0);
              if ($284) {
               $285 = (($283) - ($286))|0;
               HEAP32[$287>>2] = $285;
              }
              $289 = ($288|0)>(0);
              if ($289) {
               $290 = (($288) - ($291))|0;
               HEAP32[$292>>2] = $290;
              }
              $294 = ($293|0)>(0);
              if ($294) {
               $295 = (($293) - ($296))|0;
               HEAP32[$297>>2] = $295;
              }
              $299 = ($298|0)>(0);
              if ($299) {
               $300 = (($298) - ($301))|0;
               HEAP32[$302>>2] = $300;
              }
              HEAP32[$21>>2] = 1;
              $recalc$3 = 1;
             } else {
              $recalc$3 = $recalc$2;
             }
            } else {
             $recalc$3 = $recalc$2;
            }
           } else {
            $recalc$3 = $recalc$2;
           }
          } else {
           $recalc$3 = $recalc$2;
          }
         } else {
          $recalc$3 = $recalc$2;
         }
        } else {
         $recalc$3 = $recalc$2;
        }
       } else {
        $recalc$3 = $recalc$2;
       }
      } else {
       $recalc$3 = $recalc$2;
      }
     } else {
      $recalc$3 = $recalc$2;
     }
    } else {
     $recalc$3 = $recalc$2;
    }
   } else {
    $recalc$3 = $recalc$2;
   }
  }
 } else {
  $recalc$3 = $recalc$2;
 }
 $63 = $ch << 2;
 $64 = (($63) + 4)|0;
 $scevgep40 = (((($l3_side)) + 21008|0) + ($64<<2)|0);
 ;HEAP32[$scevgep40>>2]=0|0;HEAP32[$scevgep40+4>>2]=0|0;HEAP32[$scevgep40+8>>2]=0|0;HEAP32[$scevgep40+12>>2]=0|0;
 $65 = ((($gfc)) + 76|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==(2);
 $68 = ($gr|0)==(1);
 $or$cond3 = $68 & $67;
 if ($or$cond3) {
  $69 = (((($l3_side) + (($ch*5252)|0)|0)) + 4788|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)==(2);
  if ($71) {
   $recalc$4 = $recalc$3;
  } else {
   $72 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4788|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(2);
   if ($74) {
    $recalc$4 = $recalc$3;
   } else {
    $$pre$i = HEAP32[84136>>2]|0;
    $scevgep = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4608|0);
    $75 = HEAP32[(84140)>>2]|0;
    $76 = ($75|0)>($$pre$i|0);
    L77: do {
     if ($76) {
      $sfb$012$i = $$pre$i;
      while(1) {
       $77 = ((((($l3_side) + (($ch*5252)|0)|0)) + 4608|0) + ($sfb$012$i<<2)|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ((((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4608|0) + ($sfb$012$i<<2)|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = ($78|0)!=($80|0);
       $82 = ($80|0)>(-1);
       $or$cond$i = $81 & $82;
       if ($or$cond$i) {
        $sfb$0$lcssa$i = $sfb$012$i;
        break L77;
       }
       $83 = (($sfb$012$i) + 1)|0;
       $84 = ($83|0)<($75|0);
       if ($84) {
        $sfb$012$i = $83;
       } else {
        $sfb$0$lcssa$i = $83;
        break;
       }
      }
     } else {
      $sfb$0$lcssa$i = $$pre$i;
     }
    } while(0);
    $85 = ($sfb$0$lcssa$i|0)==($75|0);
    if ($85) {
     if ($76) {
      $scevgep38 = ((((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4608|0) + ($$pre$i<<2)|0);
      $88 = (($75) - ($$pre$i))|0;
      $89 = $88 << 2;
      _memset(($scevgep38|0),-1,($89|0))|0;
     }
     $90 = (((($l3_side)) + 21024|0) + ($ch<<4)|0);
     HEAP32[$90>>2] = 1;
    }
    $86 = HEAP32[(84144)>>2]|0;
    $87 = ($86|0)>($75|0);
    L88: do {
     if ($87) {
      $sfb$012$i$1 = $75;
      while(1) {
       $216 = ((((($l3_side) + (($ch*5252)|0)|0)) + 4608|0) + ($sfb$012$i$1<<2)|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = ((((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4608|0) + ($sfb$012$i$1<<2)|0);
       $219 = HEAP32[$218>>2]|0;
       $220 = ($217|0)!=($219|0);
       $221 = ($219|0)>(-1);
       $or$cond$i$1 = $220 & $221;
       if ($or$cond$i$1) {
        $sfb$0$lcssa$i$1 = $sfb$012$i$1;
        break L88;
       }
       $222 = (($sfb$012$i$1) + 1)|0;
       $223 = ($222|0)<($86|0);
       if ($223) {
        $sfb$012$i$1 = $222;
       } else {
        $sfb$0$lcssa$i$1 = $222;
        break;
       }
      }
     } else {
      $sfb$0$lcssa$i$1 = $75;
     }
    } while(0);
    $224 = ($sfb$0$lcssa$i$1|0)==($86|0);
    if ($224) {
     if ($87) {
      $scevgep38$1 = ((((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4608|0) + ($75<<2)|0);
      $225 = (($86) - ($75))|0;
      $226 = $225 << 2;
      _memset(($scevgep38$1|0),-1,($226|0))|0;
     }
     $227 = (((((($l3_side)) + 21024|0) + ($ch<<4)|0)) + 4|0);
     HEAP32[$227>>2] = 1;
    }
    $228 = HEAP32[(84148)>>2]|0;
    $229 = ($228|0)>($86|0);
    L99: do {
     if ($229) {
      $sfb$012$i$2 = $86;
      while(1) {
       $230 = ((((($l3_side) + (($ch*5252)|0)|0)) + 4608|0) + ($sfb$012$i$2<<2)|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = ((((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4608|0) + ($sfb$012$i$2<<2)|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = ($231|0)!=($233|0);
       $235 = ($233|0)>(-1);
       $or$cond$i$2 = $234 & $235;
       if ($or$cond$i$2) {
        $sfb$0$lcssa$i$2 = $sfb$012$i$2;
        break L99;
       }
       $236 = (($sfb$012$i$2) + 1)|0;
       $237 = ($236|0)<($228|0);
       if ($237) {
        $sfb$012$i$2 = $236;
       } else {
        $sfb$0$lcssa$i$2 = $236;
        break;
       }
      }
     } else {
      $sfb$0$lcssa$i$2 = $86;
     }
    } while(0);
    $238 = ($sfb$0$lcssa$i$2|0)==($228|0);
    if ($238) {
     if ($229) {
      $scevgep38$2 = ((((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4608|0) + ($86<<2)|0);
      $239 = (($228) - ($86))|0;
      $240 = $239 << 2;
      _memset(($scevgep38$2|0),-1,($240|0))|0;
     }
     $241 = (((((($l3_side)) + 21024|0) + ($ch<<4)|0)) + 8|0);
     HEAP32[$241>>2] = 1;
    }
    $242 = HEAP32[(84152)>>2]|0;
    $243 = ($242|0)>($228|0);
    L110: do {
     if ($243) {
      $sfb$012$i$3 = $228;
      while(1) {
       $244 = ((((($l3_side) + (($ch*5252)|0)|0)) + 4608|0) + ($sfb$012$i$3<<2)|0);
       $245 = HEAP32[$244>>2]|0;
       $246 = ((((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4608|0) + ($sfb$012$i$3<<2)|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = ($245|0)!=($247|0);
       $249 = ($247|0)>(-1);
       $or$cond$i$3 = $248 & $249;
       if ($or$cond$i$3) {
        $sfb$0$lcssa$i$3 = $sfb$012$i$3;
        break L110;
       }
       $250 = (($sfb$012$i$3) + 1)|0;
       $251 = ($250|0)<($242|0);
       if ($251) {
        $sfb$012$i$3 = $250;
       } else {
        $sfb$0$lcssa$i$3 = $250;
        break;
       }
      }
     } else {
      $sfb$0$lcssa$i$3 = $228;
     }
    } while(0);
    $252 = ($sfb$0$lcssa$i$3|0)==($242|0);
    if ($252) {
     if ($243) {
      $scevgep38$3 = ((((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4608|0) + ($228<<2)|0);
      $253 = (($242) - ($228))|0;
      $254 = $253 << 2;
      _memset(($scevgep38$3|0),-1,($254|0))|0;
     }
     $255 = (((((($l3_side)) + 21024|0) + ($ch<<4)|0)) + 12|0);
     HEAP32[$255>>2] = 1;
    }
    $256 = HEAP32[$scevgep>>2]|0;
    $257 = ($256|0)==(-1);
    $258 = ($256|0)>(0);
    $$s1$0$i = $258 ? $256 : 0;
    $259 = $257&1;
    $c1$1$i = $259 ^ 1;
    $s1$1$i = $257 ? 0 : $$s1$0$i;
    $260 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4612|0);
    $119 = HEAP32[$260>>2]|0;
    $261 = ($119|0)==(-1);
    if ($261) {
     $c1$1$1$i = $c1$1$i;$s1$1$1$i = $s1$1$i;
    } else {
     $117 = (($c1$1$i) + 1)|0;
     $118 = ($s1$1$i|0)<($119|0);
     $$s1$0$1$i = $118 ? $119 : $s1$1$i;
     $c1$1$1$i = $117;$s1$1$1$i = $$s1$0$1$i;
    }
    $120 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4616|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(-1);
    if ($122) {
     $c1$1$2$i = $c1$1$1$i;$s1$1$2$i = $s1$1$1$i;
    } else {
     $123 = (($c1$1$1$i) + 1)|0;
     $124 = ($s1$1$1$i|0)<($121|0);
     $$s1$0$2$i = $124 ? $121 : $s1$1$1$i;
     $c1$1$2$i = $123;$s1$1$2$i = $$s1$0$2$i;
    }
    $125 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4620|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==(-1);
    if ($127) {
     $c1$1$3$i = $c1$1$2$i;$s1$1$3$i = $s1$1$2$i;
    } else {
     $128 = (($c1$1$2$i) + 1)|0;
     $129 = ($s1$1$2$i|0)<($126|0);
     $$s1$0$3$i = $129 ? $126 : $s1$1$2$i;
     $c1$1$3$i = $128;$s1$1$3$i = $$s1$0$3$i;
    }
    $130 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4624|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($131|0)==(-1);
    if ($132) {
     $c1$1$4$i = $c1$1$3$i;$s1$1$4$i = $s1$1$3$i;
    } else {
     $133 = (($c1$1$3$i) + 1)|0;
     $134 = ($s1$1$3$i|0)<($131|0);
     $$s1$0$4$i = $134 ? $131 : $s1$1$3$i;
     $c1$1$4$i = $133;$s1$1$4$i = $$s1$0$4$i;
    }
    $135 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4628|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($136|0)==(-1);
    if ($137) {
     $c1$1$5$i = $c1$1$4$i;$s1$1$5$i = $s1$1$4$i;
    } else {
     $138 = (($c1$1$4$i) + 1)|0;
     $139 = ($s1$1$4$i|0)<($136|0);
     $$s1$0$5$i = $139 ? $136 : $s1$1$4$i;
     $c1$1$5$i = $138;$s1$1$5$i = $$s1$0$5$i;
    }
    $140 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4632|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ($141|0)==(-1);
    if ($142) {
     $c1$1$6$i = $c1$1$5$i;$s1$1$6$i = $s1$1$5$i;
    } else {
     $143 = (($c1$1$5$i) + 1)|0;
     $144 = ($s1$1$5$i|0)<($141|0);
     $$s1$0$6$i = $144 ? $141 : $s1$1$5$i;
     $c1$1$6$i = $143;$s1$1$6$i = $$s1$0$6$i;
    }
    $145 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4636|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(-1);
    if ($147) {
     $c1$1$7$i = $c1$1$6$i;$s1$1$7$i = $s1$1$6$i;
    } else {
     $148 = (($c1$1$6$i) + 1)|0;
     $149 = ($s1$1$6$i|0)<($146|0);
     $$s1$0$7$i = $149 ? $146 : $s1$1$6$i;
     $c1$1$7$i = $148;$s1$1$7$i = $$s1$0$7$i;
    }
    $150 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4640|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($151|0)==(-1);
    if ($152) {
     $c1$1$8$i = $c1$1$7$i;$s1$1$8$i = $s1$1$7$i;
    } else {
     $153 = (($c1$1$7$i) + 1)|0;
     $154 = ($s1$1$7$i|0)<($151|0);
     $$s1$0$8$i = $154 ? $151 : $s1$1$7$i;
     $c1$1$8$i = $153;$s1$1$8$i = $$s1$0$8$i;
    }
    $155 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4644|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==(-1);
    if ($157) {
     $c1$1$9$i = $c1$1$8$i;$s1$1$9$i = $s1$1$8$i;
    } else {
     $158 = (($c1$1$8$i) + 1)|0;
     $159 = ($s1$1$8$i|0)<($156|0);
     $$s1$0$9$i = $159 ? $156 : $s1$1$8$i;
     $c1$1$9$i = $158;$s1$1$9$i = $$s1$0$9$i;
    }
    $160 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4648|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ($161|0)==(-1);
    if ($162) {
     $c1$1$10$i = $c1$1$9$i;$s1$1$10$i = $s1$1$9$i;
    } else {
     $163 = (($c1$1$9$i) + 1)|0;
     $164 = ($s1$1$9$i|0)<($161|0);
     $$s1$0$10$i = $164 ? $161 : $s1$1$9$i;
     $c1$1$10$i = $163;$s1$1$10$i = $$s1$0$10$i;
    }
    $91 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4652|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(-1);
    $94 = ($92|0)>(0);
    $$s2$0$i = $94 ? $92 : 0;
    $95 = $93&1;
    $c2$1$i = $95 ^ 1;
    $s2$1$i = $93 ? 0 : $$s2$0$i;
    $96 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4656|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(-1);
    if ($98) {
     $c2$1$i$1 = $c2$1$i;$s2$1$i$1 = $s2$1$i;
    } else {
     $174 = (($c2$1$i) + 1)|0;
     $175 = ($s2$1$i|0)<($97|0);
     $$s2$0$i$1 = $175 ? $97 : $s2$1$i;
     $c2$1$i$1 = $174;$s2$1$i$1 = $$s2$0$i$1;
    }
    $176 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4660|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($177|0)==(-1);
    if ($178) {
     $c2$1$i$2 = $c2$1$i$1;$s2$1$i$2 = $s2$1$i$1;
    } else {
     $179 = (($c2$1$i$1) + 1)|0;
     $180 = ($s2$1$i$1|0)<($177|0);
     $$s2$0$i$2 = $180 ? $177 : $s2$1$i$1;
     $c2$1$i$2 = $179;$s2$1$i$2 = $$s2$0$i$2;
    }
    $181 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4664|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = ($182|0)==(-1);
    if ($183) {
     $c2$1$i$3 = $c2$1$i$2;$s2$1$i$3 = $s2$1$i$2;
    } else {
     $184 = (($c2$1$i$2) + 1)|0;
     $185 = ($s2$1$i$2|0)<($182|0);
     $$s2$0$i$3 = $185 ? $182 : $s2$1$i$2;
     $c2$1$i$3 = $184;$s2$1$i$3 = $$s2$0$i$3;
    }
    $186 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4668|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = ($187|0)==(-1);
    if ($188) {
     $c2$1$i$4 = $c2$1$i$3;$s2$1$i$4 = $s2$1$i$3;
    } else {
     $189 = (($c2$1$i$3) + 1)|0;
     $190 = ($s2$1$i$3|0)<($187|0);
     $$s2$0$i$4 = $190 ? $187 : $s2$1$i$3;
     $c2$1$i$4 = $189;$s2$1$i$4 = $$s2$0$i$4;
    }
    $191 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4672|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ($192|0)==(-1);
    if ($193) {
     $c2$1$i$5 = $c2$1$i$4;$s2$1$i$5 = $s2$1$i$4;
    } else {
     $194 = (($c2$1$i$4) + 1)|0;
     $195 = ($s2$1$i$4|0)<($192|0);
     $$s2$0$i$5 = $195 ? $192 : $s2$1$i$4;
     $c2$1$i$5 = $194;$s2$1$i$5 = $$s2$0$i$5;
    }
    $196 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4676|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = ($197|0)==(-1);
    if ($198) {
     $c2$1$i$6 = $c2$1$i$5;$s2$1$i$6 = $s2$1$i$5;
    } else {
     $199 = (($c2$1$i$5) + 1)|0;
     $200 = ($s2$1$i$5|0)<($197|0);
     $$s2$0$i$6 = $200 ? $197 : $s2$1$i$5;
     $c2$1$i$6 = $199;$s2$1$i$6 = $$s2$0$i$6;
    }
    $201 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4680|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = ($202|0)==(-1);
    if ($203) {
     $c2$1$i$7 = $c2$1$i$6;$s2$1$i$7 = $s2$1$i$6;
    } else {
     $204 = (($c2$1$i$6) + 1)|0;
     $205 = ($s2$1$i$6|0)<($202|0);
     $$s2$0$i$7 = $205 ? $202 : $s2$1$i$6;
     $c2$1$i$7 = $204;$s2$1$i$7 = $$s2$0$i$7;
    }
    $206 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4684|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = ($207|0)==(-1);
    if ($208) {
     $c2$1$i$8 = $c2$1$i$7;$s2$1$i$8 = $s2$1$i$7;
    } else {
     $209 = (($c2$1$i$7) + 1)|0;
     $210 = ($s2$1$i$7|0)<($207|0);
     $$s2$0$i$8 = $210 ? $207 : $s2$1$i$7;
     $c2$1$i$8 = $209;$s2$1$i$8 = $$s2$0$i$8;
    }
    $211 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4688|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = ($212|0)==(-1);
    if ($213) {
     $c2$1$i$9 = $c2$1$i$8;$s2$1$i$9 = $s2$1$i$8;
    } else {
     $214 = (($c2$1$i$8) + 1)|0;
     $215 = ($s2$1$i$8|0)<($212|0);
     $$s2$0$i$9 = $215 ? $212 : $s2$1$i$8;
     $c2$1$i$9 = $214;$s2$1$i$9 = $$s2$0$i$9;
    }
    $113 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4844|0);
    $115 = (((((($l3_side)) + 10504|0) + (($ch*5252)|0)|0)) + 4784|0);
    $i$14$i = 0;
    while(1) {
     $99 = (88776 + ($i$14$i<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($s1$1$10$i|0)<($100|0);
     do {
      if ($101) {
       $102 = (88840 + ($i$14$i<<2)|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($s2$1$i$9|0)<($103|0);
       if (!($104)) {
        break;
       }
       $105 = (88648 + ($i$14$i<<2)|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = Math_imul($106, $c1$1$10$i)|0;
       $108 = (88712 + ($i$14$i<<2)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = Math_imul($109, $c2$1$i$9)|0;
       $111 = (($110) + ($107))|0;
       $112 = HEAP32[$113>>2]|0;
       $114 = ($112|0)>($111|0);
       if (!($114)) {
        break;
       }
       HEAP32[$113>>2] = $111;
       HEAP32[$115>>2] = $i$14$i;
      }
     } while(0);
     $116 = (($i$14$i) + 1)|0;
     $exitcond$i = ($116|0)==(16);
     if ($exitcond$i) {
      $recalc$4 = 0;
      break;
     } else {
      $i$14$i = $116;
     }
    }
   }
  }
 } else {
  $recalc$4 = $recalc$3;
 }
 $165 = HEAP32[$1>>2]|0;
 $166 = ($165|0)>(0);
 if ($166) {
  $321 = $165;$sfb$59 = 0;
  while(1) {
   $167 = (((((($l3_side) + (($gr*10504)|0)|0) + (($ch*5252)|0)|0)) + 4608|0) + ($sfb$59<<2)|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ($168|0)==(-2);
   if ($169) {
    HEAP32[$167>>2] = 0;
    $$pre43 = HEAP32[$1>>2]|0;
    $172 = $$pre43;
   } else {
    $172 = $321;
   }
   $170 = (($sfb$59) + 1)|0;
   $171 = ($170|0)<($172|0);
   if ($171) {
    $321 = $172;$sfb$59 = $170;
   } else {
    break;
   }
  }
 }
 $173 = ($recalc$4|0)==(0);
 if ($173) {
  return;
 }
 (_scale_bitcount($gfc,$0)|0);
 return;
}
function _scale_bitcount($gfc,$cod_info) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 var $$$i = 0, $$$i1 = 0, $$0 = 0, $$lcssa = 0, $$lcssa30 = 0, $$lcssa31 = 0, $$max_slen1$0$i = 0, $$max_slen1$0$i$lcssa = 0, $$max_slen2$0$i = 0, $$over$0$1$i = 0, $$over$0$2$i = 0, $$over$0$3$i = 0, $$phi$trans$insert29$i = 0, $$phi$trans$insert31$i = 0, $$phi$trans$insert33$i = 0, $$pre$i = 0, $$pre28$i = 0, $$pre30$i = 0, $$pre32$i = 0, $$pre34$i = 0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i6 = 0, $exitcond16 = 0, $exitcond23$1$i = 0, $exitcond23$2$i = 0;
 var $exitcond23$3$i = 0, $exitcond23$i = 0, $i$19$i = 0, $i$213$1$i = 0, $i$213$2$i = 0, $i$213$3$i = 0, $k$04$i = 0, $max_sfac$i = 0, $max_slen1$0$lcssa$i = 0, $max_slen1$08$i = 0, $max_slen2$0$lcssa$i = 0, $max_slen2$06$i = 0, $partition$012$i = 0, $row_in_table$0$i = 0, $sfb$011$i = 0, $sfb$1$lcssa$i = 0, $sfb$110$i = 0, $sfb$2$lcssa$i = 0, $sfb$27$i = 0, $sfb$3$lcssa$1$i = 0;
 var $sfb$3$lcssa$2$i = 0, $sfb$3$lcssa$i = 0, $sfb$314$1$i = 0, $sfb$314$2$i = 0, $sfb$314$3$i = 0, $sfb$314$i = 0, $sfb$35$i = 0, $smax$i = 0, $smax$i3 = 0, $tab$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $max_sfac$i = sp;
 $0 = ((($gfc)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(2);
 if ($2) {
  $3 = ((($cod_info)) + 4788|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(2);
  if ($5) {
   $6 = ((($cod_info)) + 4792|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)!=(0);
   $$$i = $8 ? 88904 : 88968;
   $tab$0$i = $$$i;
  } else {
   $9 = ((($cod_info)) + 4832|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ((($cod_info)) + 4652|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP32[(12156)>>2]|0;
    $15 = ($13|0)<($14|0);
    if ($15) {
     $tab$0$i = 89032;
    } else {
     $16 = ((($cod_info)) + 4656|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = HEAP32[(12160)>>2]|0;
     $19 = ($17|0)<($18|0);
     if ($19) {
      $tab$0$i = 89032;
     } else {
      $25 = ((($cod_info)) + 4660|0);
      $24 = HEAP32[$25>>2]|0;
      $23 = HEAP32[(12164)>>2]|0;
      $82 = ($24|0)<($23|0);
      if ($82) {
       $tab$0$i = 89032;
      } else {
       $29 = ((($cod_info)) + 4664|0);
       $28 = HEAP32[$29>>2]|0;
       $27 = HEAP32[(12168)>>2]|0;
       $83 = ($28|0)<($27|0);
       if ($83) {
        $tab$0$i = 89032;
       } else {
        $33 = ((($cod_info)) + 4668|0);
        $32 = HEAP32[$33>>2]|0;
        $31 = HEAP32[(12172)>>2]|0;
        $84 = ($32|0)<($31|0);
        if ($84) {
         $tab$0$i = 89032;
        } else {
         $37 = ((($cod_info)) + 4672|0);
         $36 = HEAP32[$37>>2]|0;
         $35 = HEAP32[(12176)>>2]|0;
         $85 = ($36|0)<($35|0);
         if ($85) {
          $tab$0$i = 89032;
         } else {
          $41 = ((($cod_info)) + 4676|0);
          $40 = HEAP32[$41>>2]|0;
          $39 = HEAP32[(12180)>>2]|0;
          $86 = ($40|0)<($39|0);
          if ($86) {
           $tab$0$i = 89032;
          } else {
           $45 = ((($cod_info)) + 4680|0);
           $44 = HEAP32[$45>>2]|0;
           $43 = HEAP32[(12184)>>2]|0;
           $87 = ($44|0)<($43|0);
           if ($87) {
            $tab$0$i = 89032;
           } else {
            $49 = ((($cod_info)) + 4684|0);
            $48 = HEAP32[$49>>2]|0;
            $47 = HEAP32[(12188)>>2]|0;
            $88 = ($48|0)<($47|0);
            if ($88) {
             $tab$0$i = 89032;
            } else {
             $53 = ((($cod_info)) + 4688|0);
             $52 = HEAP32[$53>>2]|0;
             $51 = HEAP32[(12192)>>2]|0;
             $89 = ($52|0)<($51|0);
             if ($89) {
              $tab$0$i = 89032;
             } else {
              HEAP32[$9>>2] = 1;
              $20 = (($13) - ($14))|0;
              HEAP32[$12>>2] = $20;
              $21 = (($17) - ($18))|0;
              HEAP32[$16>>2] = $21;
              $22 = (($24) - ($23))|0;
              HEAP32[$25>>2] = $22;
              $26 = (($28) - ($27))|0;
              HEAP32[$29>>2] = $26;
              $30 = (($32) - ($31))|0;
              HEAP32[$33>>2] = $30;
              $34 = (($36) - ($35))|0;
              HEAP32[$37>>2] = $34;
              $38 = (($40) - ($39))|0;
              HEAP32[$41>>2] = $38;
              $42 = (($44) - ($43))|0;
              HEAP32[$45>>2] = $42;
              $46 = (($48) - ($47))|0;
              HEAP32[$49>>2] = $46;
              $50 = (($52) - ($51))|0;
              HEAP32[$53>>2] = $50;
              $tab$0$i = 89032;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } else {
    $tab$0$i = 89032;
   }
  }
  $54 = ((($cod_info)) + 4868|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)>(0);
  if ($56) {
   $max_slen1$08$i = 0;$sfb$27$i = 0;
   while(1) {
    $61 = (((($cod_info)) + 4608|0) + ($sfb$27$i<<2)|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($max_slen1$08$i|0)<($62|0);
    $$max_slen1$0$i = $63 ? $62 : $max_slen1$08$i;
    $64 = (($sfb$27$i) + 1)|0;
    $exitcond16 = ($64|0)==($55|0);
    if ($exitcond16) {
     $$max_slen1$0$i$lcssa = $$max_slen1$0$i;
     break;
    } else {
     $max_slen1$08$i = $$max_slen1$0$i;$sfb$27$i = $64;
    }
   }
   $57 = ($55|0)>(1);
   $smax$i = $57 ? $55 : 1;
   $max_slen1$0$lcssa$i = $$max_slen1$0$i$lcssa;$sfb$2$lcssa$i = $smax$i;
  } else {
   $max_slen1$0$lcssa$i = 0;$sfb$2$lcssa$i = 0;
  }
  $58 = ((($cod_info)) + 4860|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($sfb$2$lcssa$i|0)<($59|0);
  if ($60) {
   $max_slen2$06$i = 0;$sfb$35$i = $sfb$2$lcssa$i;
   while(1) {
    $65 = (((($cod_info)) + 4608|0) + ($sfb$35$i<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($max_slen2$06$i|0)<($66|0);
    $$max_slen2$0$i = $67 ? $66 : $max_slen2$06$i;
    $68 = (($sfb$35$i) + 1)|0;
    $exitcond = ($68|0)==($59|0);
    if ($exitcond) {
     $max_slen2$0$lcssa$i = $$max_slen2$0$i;
     break;
    } else {
     $max_slen2$06$i = $$max_slen2$0$i;$sfb$35$i = $68;
    }
   }
  } else {
   $max_slen2$0$lcssa$i = 0;
  }
  $69 = ((($cod_info)) + 4844|0);
  HEAP32[$69>>2] = 100000;
  $70 = ((($cod_info)) + 4784|0);
  $79 = 100000;$k$04$i = 0;
  while(1) {
   $71 = (88776 + ($k$04$i<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($max_slen1$0$lcssa$i|0)<($72|0);
   if ($73) {
    $74 = (88840 + ($k$04$i<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($max_slen2$0$lcssa$i|0)<($75|0);
    if ($76) {
     $77 = (($tab$0$i) + ($k$04$i<<2)|0);
     $78 = HEAP32[$77>>2]|0;
     $80 = ($79|0)>($78|0);
     if ($80) {
      HEAP32[$69>>2] = $78;
      HEAP32[$70>>2] = $k$04$i;
      $224 = $78;
     } else {
      $224 = $79;
     }
    } else {
     $224 = $79;
    }
   } else {
    $224 = $79;
   }
   $81 = (($k$04$i) + 1)|0;
   $exitcond$i = ($81|0)==(16);
   if ($exitcond$i) {
    $$lcssa = $224;
    break;
   } else {
    $79 = $224;$k$04$i = $81;
   }
  }
  $90 = ($$lcssa|0)==(100000);
  $91 = $90&1;
  $$0 = $91;
  STACKTOP = sp;return ($$0|0);
 }
 $92 = ((($cod_info)) + 4832|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)==(0);
 ;HEAP32[$max_sfac$i>>2]=0|0;HEAP32[$max_sfac$i+4>>2]=0|0;HEAP32[$max_sfac$i+8>>2]=0|0;HEAP32[$max_sfac$i+12>>2]=0|0;
 $$$i1 = $94 ? 0 : 2;
 $95 = ((($cod_info)) + 4788|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)==(2);
 if ($97) {
  $partition$012$i = 0;$sfb$011$i = 0;
  while(1) {
   $101 = ((((11824 + (($$$i1*48)|0)|0)) + 16|0) + ($partition$012$i<<2)|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (($102|0) / 3)&-1;
   $104 = ($102|0)>(2);
   if ($104) {
    $105 = (($max_sfac$i) + ($partition$012$i<<2)|0);
    $106 = ($103|0)>(1);
    $$pre$i = HEAP32[$105>>2]|0;
    $111 = $$pre$i;$i$19$i = 0;$sfb$110$i = $sfb$011$i;
    while(1) {
     $107 = ($sfb$110$i*3)|0;
     $108 = (((($cod_info)) + 4608|0) + ($107<<2)|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)>($111|0);
     if ($110) {
      HEAP32[$105>>2] = $109;
      $116 = $109;
     } else {
      $116 = $111;
     }
     $112 = (($107) + 1)|0;
     $113 = (((($cod_info)) + 4608|0) + ($112<<2)|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)>($116|0);
     if ($115) {
      HEAP32[$105>>2] = $114;
      $191 = $114;
     } else {
      $191 = $116;
     }
     $187 = (($107) + 2)|0;
     $188 = (((($cod_info)) + 4608|0) + ($187<<2)|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = ($189|0)>($191|0);
     if ($190) {
      HEAP32[$105>>2] = $189;
      $228 = $189;
     } else {
      $228 = $191;
     }
     $192 = (($i$19$i) + 1)|0;
     $193 = (($sfb$110$i) + 1)|0;
     $194 = ($192|0)<($103|0);
     if ($194) {
      $111 = $228;$i$19$i = $192;$sfb$110$i = $193;
     } else {
      break;
     }
    }
    $smax$i3 = $106 ? $103 : 1;
    $117 = (($smax$i3) + ($sfb$011$i))|0;
    $sfb$1$lcssa$i = $117;
   } else {
    $sfb$1$lcssa$i = $sfb$011$i;
   }
   $118 = (($partition$012$i) + 1)|0;
   $exitcond$i6 = ($118|0)==(4);
   if ($exitcond$i6) {
    break;
   } else {
    $partition$012$i = $118;$sfb$011$i = $sfb$1$lcssa$i;
   }
  }
  $$pre28$i = HEAP32[$max_sfac$i>>2]|0;
  $$phi$trans$insert29$i = ((($max_sfac$i)) + 4|0);
  $$pre30$i = HEAP32[$$phi$trans$insert29$i>>2]|0;
  $$phi$trans$insert31$i = ((($max_sfac$i)) + 8|0);
  $$pre32$i = HEAP32[$$phi$trans$insert31$i>>2]|0;
  $$phi$trans$insert33$i = ((($max_sfac$i)) + 12|0);
  $$pre34$i = HEAP32[$$phi$trans$insert33$i>>2]|0;
  $129 = $$pre28$i;$134 = $$pre30$i;$139 = $$pre32$i;$144 = $$pre34$i;$row_in_table$0$i = 1;
 } else {
  $98 = (11824 + (($$$i1*48)|0)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)>(0);
  if ($100) {
   $122 = 0;$sfb$314$i = 0;
   while(1) {
    $119 = (((($cod_info)) + 4608|0) + ($sfb$314$i<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ($120|0)>($122|0);
    if ($121) {
     HEAP32[$max_sfac$i>>2] = $120;
     $226 = $120;
    } else {
     $226 = $122;
    }
    $123 = (($sfb$314$i) + 1)|0;
    $exitcond23$i = ($123|0)==($99|0);
    if ($exitcond23$i) {
     $225 = $226;$sfb$3$lcssa$i = $99;
     break;
    } else {
     $122 = $226;$sfb$314$i = $123;
    }
   }
  } else {
   $225 = 0;$sfb$3$lcssa$i = 0;
  }
  $124 = (((11824 + (($$$i1*48)|0)|0)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($125|0)>(0);
  if ($126) {
   $195 = ((($max_sfac$i)) + 4|0);
   $199 = 0;$i$213$1$i = 0;$sfb$314$1$i = $sfb$3$lcssa$i;
   while(1) {
    $196 = (((($cod_info)) + 4608|0) + ($sfb$314$1$i<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = ($197|0)>($199|0);
    if ($198) {
     HEAP32[$195>>2] = $197;
     $229 = $197;
    } else {
     $229 = $199;
    }
    $200 = (($i$213$1$i) + 1)|0;
    $201 = (($sfb$314$1$i) + 1)|0;
    $exitcond23$1$i = ($200|0)==($125|0);
    if ($exitcond23$1$i) {
     $$lcssa31 = $229;
     break;
    } else {
     $199 = $229;$i$213$1$i = $200;$sfb$314$1$i = $201;
    }
   }
   $202 = (($125) + ($sfb$3$lcssa$i))|0;
   $227 = $$lcssa31;$sfb$3$lcssa$1$i = $202;
  } else {
   $227 = 0;$sfb$3$lcssa$1$i = $sfb$3$lcssa$i;
  }
  $203 = (((11824 + (($$$i1*48)|0)|0)) + 8|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = ($204|0)>(0);
  if ($205) {
   $206 = ((($max_sfac$i)) + 8|0);
   $210 = 0;$i$213$2$i = 0;$sfb$314$2$i = $sfb$3$lcssa$1$i;
   while(1) {
    $207 = (((($cod_info)) + 4608|0) + ($sfb$314$2$i<<2)|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ($208|0)>($210|0);
    if ($209) {
     HEAP32[$206>>2] = $208;
     $231 = $208;
    } else {
     $231 = $210;
    }
    $211 = (($i$213$2$i) + 1)|0;
    $212 = (($sfb$314$2$i) + 1)|0;
    $exitcond23$2$i = ($211|0)==($204|0);
    if ($exitcond23$2$i) {
     $$lcssa30 = $231;
     break;
    } else {
     $210 = $231;$i$213$2$i = $211;$sfb$314$2$i = $212;
    }
   }
   $213 = (($204) + ($sfb$3$lcssa$1$i))|0;
   $230 = $$lcssa30;$sfb$3$lcssa$2$i = $213;
  } else {
   $230 = 0;$sfb$3$lcssa$2$i = $sfb$3$lcssa$1$i;
  }
  $214 = (((11824 + (($$$i1*48)|0)|0)) + 12|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = ($215|0)>(0);
  if ($216) {
   $217 = ((($max_sfac$i)) + 12|0);
   $221 = 0;$i$213$3$i = 0;$sfb$314$3$i = $sfb$3$lcssa$2$i;
   while(1) {
    $218 = (((($cod_info)) + 4608|0) + ($sfb$314$3$i<<2)|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ($219|0)>($221|0);
    if ($220) {
     HEAP32[$217>>2] = $219;
     $232 = $219;
    } else {
     $232 = $221;
    }
    $222 = (($i$213$3$i) + 1)|0;
    $223 = (($sfb$314$3$i) + 1)|0;
    $exitcond23$3$i = ($222|0)==($215|0);
    if ($exitcond23$3$i) {
     $129 = $225;$134 = $227;$139 = $230;$144 = $232;$row_in_table$0$i = 0;
     break;
    } else {
     $221 = $232;$i$213$3$i = $222;$sfb$314$3$i = $223;
    }
   }
  } else {
   $129 = $225;$134 = $227;$139 = $230;$144 = 0;$row_in_table$0$i = 0;
  }
 }
 $127 = (89096 + ($$$i1<<4)|0);
 $128 = HEAP32[$127>>2]|0;
 $130 = ($129|0)>($128|0);
 $131 = $130&1;
 $132 = (((89096 + ($$$i1<<4)|0)) + 4|0);
 $133 = HEAP32[$132>>2]|0;
 $135 = ($134|0)>($133|0);
 $136 = $135&1;
 $$over$0$1$i = (($136) + ($131))|0;
 $137 = (((89096 + ($$$i1<<4)|0)) + 8|0);
 $138 = HEAP32[$137>>2]|0;
 $140 = ($139|0)>($138|0);
 $141 = $140&1;
 $$over$0$2$i = (($$over$0$1$i) + ($141))|0;
 $142 = (((89096 + ($$$i1<<4)|0)) + 12|0);
 $143 = HEAP32[$142>>2]|0;
 $145 = ($144|0)>($143|0);
 $146 = $145&1;
 $$over$0$3$i = (($$over$0$2$i) + ($146))|0;
 $147 = ($$over$0$3$i|0)==(0);
 if ($147) {
  $148 = ((11824 + (($$$i1*48)|0)|0) + ($row_in_table$0$i<<4)|0);
  $149 = ((($cod_info)) + 5188|0);
  HEAP32[$149>>2] = $148;
  $150 = (89192 + ($129<<2)|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ((($cod_info)) + 5192|0);
  HEAP32[$152>>2] = $151;
  $153 = (89192 + ($134<<2)|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ((($cod_info)) + 5196|0);
  HEAP32[$155>>2] = $154;
  $156 = (89192 + ($139<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ((($cod_info)) + 5200|0);
  HEAP32[$158>>2] = $157;
  $159 = (89192 + ($144<<2)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ((($cod_info)) + 5204|0);
  HEAP32[$161>>2] = $160;
  if ($94) {
   $162 = ($151*5)|0;
   $163 = (($162) + ($154))|0;
   $164 = $163 << 4;
   $165 = $157 << 2;
   $166 = (($165) + ($164))|0;
   $167 = (($166) + ($160))|0;
   $$sink$i = $167;
  } else {
   $168 = ($151*3)|0;
   $169 = (($168) + 500)|0;
   $170 = (($169) + ($154))|0;
   $$sink$i = $170;
  }
  $171 = ((($cod_info)) + 4784|0);
  HEAP32[$171>>2] = $$sink$i;
  $172 = ((($cod_info)) + 4844|0);
  $173 = HEAP32[$148>>2]|0;
  $174 = Math_imul($173, $151)|0;
  $175 = ((((11824 + (($$$i1*48)|0)|0) + ($row_in_table$0$i<<4)|0)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = Math_imul($176, $154)|0;
  $178 = (($177) + ($174))|0;
  $179 = ((((11824 + (($$$i1*48)|0)|0) + ($row_in_table$0$i<<4)|0)) + 8|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = Math_imul($180, $157)|0;
  $182 = (($178) + ($181))|0;
  $183 = ((((11824 + (($$$i1*48)|0)|0) + ($row_in_table$0$i<<4)|0)) + 12|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = Math_imul($184, $160)|0;
  $186 = (($182) + ($185))|0;
  HEAP32[$172>>2] = $186;
 }
 $$0 = $$over$0$3$i;
 STACKTOP = sp;return ($$0|0);
}
function _huffman_init($gfc) {
 $gfc = $gfc|0;
 var $$bv_index$0$lcssa = 0, $$bv_index$2$lcssa = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bv_index$0 = 0, $bv_index$0$lcssa = 0, $bv_index$2 = 0, $bv_index$2$lcssa = 0, $i$01 = 0, $scfb_anz$0 = 0;
 var $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 85816|0);
 HEAP32[$0>>2] = 2;
 $i$01 = 2;
 while(1) {
  $scfb_anz$0 = 0;
  while(1) {
   $1 = (($scfb_anz$0) + 1)|0;
   $2 = (((($gfc)) + 21360|0) + ($1<<2)|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)<($i$01|0);
   if ($4) {
    $scfb_anz$0 = $1;
   } else {
    $$lcssa = $1;
    break;
   }
  }
  $5 = (89256 + ($$lcssa<<3)|0);
  $6 = HEAP32[$5>>2]|0;
  $bv_index$0 = $6;
  while(1) {
   $7 = (($bv_index$0) + 1)|0;
   $8 = (((($gfc)) + 21360|0) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)>($i$01|0);
   $11 = (($bv_index$0) + -1)|0;
   if ($10) {
    $bv_index$0 = $11;
   } else {
    $bv_index$0$lcssa = $bv_index$0;
    break;
   }
  }
  $12 = ($bv_index$0$lcssa|0)<(0);
  $$bv_index$0$lcssa = $12 ? $6 : $bv_index$0$lcssa;
  $13 = $$bv_index$0$lcssa&255;
  $14 = (($i$01) + -2)|0;
  $15 = (((($gfc)) + 85100|0) + ($14)|0);
  HEAP8[$15>>0] = $13;
  $16 = (((89256 + ($$lcssa<<3)|0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $sext = $$bv_index$0$lcssa << 24;
  $18 = $sext >> 24;
  $bv_index$2 = $17;
  while(1) {
   $19 = (($bv_index$2) + 2)|0;
   $20 = (($19) + ($18))|0;
   $21 = (((($gfc)) + 21360|0) + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)>($i$01|0);
   $24 = (($bv_index$2) + -1)|0;
   if ($23) {
    $bv_index$2 = $24;
   } else {
    $bv_index$2$lcssa = $bv_index$2;
    break;
   }
  }
  $25 = ($bv_index$2$lcssa|0)<(0);
  $$bv_index$2$lcssa = $25 ? $17 : $bv_index$2$lcssa;
  $26 = $$bv_index$2$lcssa&255;
  $27 = (($i$01) + -1)|0;
  $28 = (((($gfc)) + 85100|0) + ($27)|0);
  HEAP8[$28>>0] = $26;
  $29 = (($i$01) + 2)|0;
  $30 = ($29|0)<(577);
  if ($30) {
   $i$01 = $29;
  } else {
   break;
  }
 }
 return;
}
function _quantize_lines_xrpow($l,$istep,$xp,$pi) {
 $l = $l|0;
 $istep = +$istep;
 $xp = $xp|0;
 $pi = $pi|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0;
 var $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $fi$0$lcssa = 0, $fi$02 = 0, $scevgep = 0, $scevgep7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $l & 2;
 $1 = $l >>> 2;
 $2 = ($1|0)==(0);
 if ($2) {
  $$01$lcssa = $xp;$fi$0$lcssa = $pi;
 } else {
  $3 = $1 << 2;
  $scevgep7 = (($pi) + ($3<<2)|0);
  $$013 = $xp;$$04 = $1;$fi$02 = $pi;
  while(1) {
   $4 = (($$04) + -1)|0;
   $5 = +HEAPF32[$$013>>2];
   $6 = $5 * $istep;
   $7 = $6;
   $8 = ((($$013)) + 4|0);
   $9 = +HEAPF32[$8>>2];
   $10 = $9 * $istep;
   $11 = $10;
   $12 = ((($$013)) + 8|0);
   $13 = +HEAPF32[$12>>2];
   $14 = $13 * $istep;
   $15 = $14;
   $16 = ((($$013)) + 12|0);
   $17 = +HEAPF32[$16>>2];
   $18 = $17 * $istep;
   $19 = $18;
   $20 = $7 + 8388608.0;
   $21 = $20;
   $22 = $11 + 8388608.0;
   $23 = $22;
   $24 = ((($fi$02)) + 4|0);
   $25 = $15 + 8388608.0;
   $26 = $25;
   $27 = ((($fi$02)) + 8|0);
   $28 = $19 + 8388608.0;
   $29 = $28;
   $30 = ((($fi$02)) + 12|0);
   $31 = (HEAPF32[tempDoublePtr>>2]=$21,HEAP32[tempDoublePtr>>2]|0);
   $32 = (($31) + -1258291200)|0;
   $33 = (46872 + ($32<<2)|0);
   $34 = +HEAPF32[$33>>2];
   $35 = $34;
   $36 = $35 + $20;
   $37 = $36;
   $38 = (HEAPF32[tempDoublePtr>>2]=$23,HEAP32[tempDoublePtr>>2]|0);
   $39 = (($38) + -1258291200)|0;
   $40 = (46872 + ($39<<2)|0);
   $41 = +HEAPF32[$40>>2];
   $42 = $41;
   $43 = $42 + $22;
   $44 = $43;
   $45 = (HEAPF32[tempDoublePtr>>2]=$26,HEAP32[tempDoublePtr>>2]|0);
   $46 = (($45) + -1258291200)|0;
   $47 = (46872 + ($46<<2)|0);
   $48 = +HEAPF32[$47>>2];
   $49 = $48;
   $50 = $49 + $25;
   $51 = $50;
   $52 = (HEAPF32[tempDoublePtr>>2]=$29,HEAP32[tempDoublePtr>>2]|0);
   $53 = (($52) + -1258291200)|0;
   $54 = (46872 + ($53<<2)|0);
   $55 = +HEAPF32[$54>>2];
   $56 = $55;
   $57 = $56 + $28;
   $58 = $57;
   $59 = (HEAPF32[tempDoublePtr>>2]=$37,HEAP32[tempDoublePtr>>2]|0);
   $60 = (($59) + -1258291200)|0;
   HEAP32[$fi$02>>2] = $60;
   $61 = (HEAPF32[tempDoublePtr>>2]=$44,HEAP32[tempDoublePtr>>2]|0);
   $62 = (($61) + -1258291200)|0;
   HEAP32[$24>>2] = $62;
   $63 = (HEAPF32[tempDoublePtr>>2]=$51,HEAP32[tempDoublePtr>>2]|0);
   $64 = (($63) + -1258291200)|0;
   HEAP32[$27>>2] = $64;
   $65 = (HEAPF32[tempDoublePtr>>2]=$58,HEAP32[tempDoublePtr>>2]|0);
   $66 = (($65) + -1258291200)|0;
   HEAP32[$30>>2] = $66;
   $67 = ((($fi$02)) + 16|0);
   $68 = ((($$013)) + 16|0);
   $69 = ($4|0)==(0);
   if ($69) {
    break;
   } else {
    $$013 = $68;$$04 = $4;$fi$02 = $67;
   }
  }
  $scevgep = (($xp) + ($3<<2)|0);
  $$01$lcssa = $scevgep;$fi$0$lcssa = $scevgep7;
 }
 $70 = ($0|0)==(0);
 if ($70) {
  return;
 }
 $71 = +HEAPF32[$$01$lcssa>>2];
 $72 = $71 * $istep;
 $73 = $72;
 $74 = ((($$01$lcssa)) + 4|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $75 * $istep;
 $77 = $76;
 $78 = $73 + 8388608.0;
 $79 = $78;
 $80 = $77 + 8388608.0;
 $81 = $80;
 $82 = ((($fi$0$lcssa)) + 4|0);
 $83 = (HEAPF32[tempDoublePtr>>2]=$79,HEAP32[tempDoublePtr>>2]|0);
 $84 = (($83) + -1258291200)|0;
 $85 = (46872 + ($84<<2)|0);
 $86 = +HEAPF32[$85>>2];
 $87 = $86;
 $88 = $87 + $78;
 $89 = $88;
 $90 = (HEAPF32[tempDoublePtr>>2]=$81,HEAP32[tempDoublePtr>>2]|0);
 $91 = (($90) + -1258291200)|0;
 $92 = (46872 + ($91<<2)|0);
 $93 = +HEAPF32[$92>>2];
 $94 = $93;
 $95 = $94 + $80;
 $96 = $95;
 $97 = (HEAPF32[tempDoublePtr>>2]=$89,HEAP32[tempDoublePtr>>2]|0);
 $98 = (($97) + -1258291200)|0;
 HEAP32[$fi$0$lcssa>>2] = $98;
 $99 = (HEAPF32[tempDoublePtr>>2]=$96,HEAP32[tempDoublePtr>>2]|0);
 $100 = (($99) + -1258291200)|0;
 HEAP32[$82>>2] = $100;
 return;
}
function _choose_table_nonMMX($ix,$end,$_s) {
 $ix = $ix|0;
 $end = $end|0;
 $_s = $_s|0;
 var $$0 = 0, $$0$i = 0, $$0$i1 = 0, $$2$i = 0, $$lcssa = 0, $$max1$0$i = 0, $$max1$0$i$lcssa = 0, $$op$i = 0, $$sum$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $choice$0$lcssa = 0, $choice$02 = 0, $choice2$0$lcssa$ph = 0, $choice2$0$lcssa8 = 0, $max1$0$i = 0, $max2$0$i = 0, $max2$1$$max1$0$i = 0, $max2$1$i = 0, $max2$1$i$lcssa = 0, $sum$0$i = 0;
 var $sum$2$i = 0, $t2$t1$i = 0, $y$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = $ix;$max1$0$i = 0;$max2$0$i = 0;
 while(1) {
  $0 = ((($$0$i)) + 4|0);
  $1 = HEAP32[$$0$i>>2]|0;
  $2 = ((($$0$i)) + 8|0);
  $3 = HEAP32[$0>>2]|0;
  $4 = ($max1$0$i|0)<($1|0);
  $$max1$0$i = $4 ? $1 : $max1$0$i;
  $5 = ($max2$0$i|0)<($3|0);
  $max2$1$i = $5 ? $3 : $max2$0$i;
  $6 = ($2>>>0)<($end>>>0);
  if ($6) {
   $$0$i = $2;$max1$0$i = $$max1$0$i;$max2$0$i = $max2$1$i;
  } else {
   $$max1$0$i$lcssa = $$max1$0$i;$max2$1$i$lcssa = $max2$1$i;
   break;
  }
 }
 $7 = ($$max1$0$i$lcssa|0)<($max2$1$i$lcssa|0);
 $max2$1$$max1$0$i = $7 ? $max2$1$i$lcssa : $$max1$0$i$lcssa;
 $8 = ($max2$1$$max1$0$i>>>0)<(16);
 if ($8) {
  $9 = (89440 + ($max2$1$$max1$0$i<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (FUNCTION_TABLE_iiiii[$10 & 7]($ix,$end,$max2$1$$max1$0$i,$_s)|0);
  $$0 = $11;
  return ($$0|0);
 }
 $12 = ($max2$1$$max1$0$i>>>0)>(8206);
 if ($12) {
  HEAP32[$_s>>2] = 100000;
  $$0 = -1;
  return ($$0|0);
 }
 $13 = (($max2$1$$max1$0$i) + -15)|0;
 $14 = HEAP32[(82660)>>2]|0;
 $15 = ($14>>>0)<($13>>>0);
 if ($15) {
  $16 = HEAP32[(82676)>>2]|0;
  $17 = ($16>>>0)<($13>>>0);
  if ($17) {
   $49 = HEAP32[(82692)>>2]|0;
   $50 = ($49>>>0)<($13>>>0);
   if ($50) {
    $51 = HEAP32[(82708)>>2]|0;
    $52 = ($51>>>0)<($13>>>0);
    if ($52) {
     $53 = HEAP32[(82724)>>2]|0;
     $54 = ($53>>>0)<($13>>>0);
     if ($54) {
      $55 = HEAP32[(82740)>>2]|0;
      $56 = ($55>>>0)<($13>>>0);
      if ($56) {
       $57 = HEAP32[(82756)>>2]|0;
       $58 = ($57>>>0)<($13>>>0);
       if ($58) {
        $59 = HEAP32[(82772)>>2]|0;
        $60 = ($59>>>0)<($13>>>0);
        if ($60) {
         $choice$0$lcssa = 24;$choice2$0$lcssa8 = 32;
        } else {
         $choice2$0$lcssa$ph = 31;
         label = 9;
        }
       } else {
        $choice2$0$lcssa$ph = 30;
        label = 9;
       }
      } else {
       $choice2$0$lcssa$ph = 29;
       label = 9;
      }
     } else {
      $choice2$0$lcssa$ph = 28;
      label = 9;
     }
    } else {
     $choice2$0$lcssa$ph = 27;
     label = 9;
    }
   } else {
    $choice2$0$lcssa$ph = 26;
    label = 9;
   }
  } else {
   $choice2$0$lcssa$ph = 25;
   label = 9;
  }
 } else {
  $choice2$0$lcssa$ph = 24;
  label = 9;
 }
 L20: do {
  if ((label|0) == 9) {
   $18 = (($choice2$0$lcssa$ph) + -8)|0;
   $choice$02 = $18;
   while(1) {
    $19 = (((82272 + ($choice$02<<4)|0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20>>>0)<($13>>>0);
    if (!($21)) {
     $choice$0$lcssa = $choice$02;$choice2$0$lcssa8 = $choice2$0$lcssa$ph;
     break L20;
    }
    $22 = (($choice$02) + 1)|0;
    $23 = ($22|0)<(24);
    if ($23) {
     $choice$02 = $22;
    } else {
     $choice$0$lcssa = $22;$choice2$0$lcssa8 = $choice2$0$lcssa$ph;
     break;
    }
   }
  }
 } while(0);
 $24 = (82272 + ($choice$0$lcssa<<4)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 << 16;
 $27 = (82272 + ($choice2$0$lcssa8<<4)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + ($28))|0;
 $$0$i1 = $ix;$sum$0$i = 0;
 while(1) {
  $30 = ((($$0$i1)) + 4|0);
  $31 = HEAP32[$$0$i1>>2]|0;
  $32 = ((($$0$i1)) + 8|0);
  $33 = HEAP32[$30>>2]|0;
  $34 = ($31>>>0)>(14);
  $35 = $34 ? $29 : 0;
  $$sum$0$i = (($35) + ($sum$0$i))|0;
  $36 = ($33>>>0)>(14);
  $37 = $36 ? $29 : 0;
  $y$0$i = $36 ? 15 : $33;
  $$op$i = $31 << 4;
  $38 = $34 ? 240 : $$op$i;
  $39 = (($y$0$i) + ($38))|0;
  $40 = (82816 + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $sum$2$i = (($$sum$0$i) + ($41))|0;
  $42 = (($sum$2$i) + ($37))|0;
  $43 = ($32>>>0)<($end>>>0);
  if ($43) {
   $$0$i1 = $32;$sum$0$i = $42;
  } else {
   $$lcssa = $42;
   break;
  }
 }
 $44 = $$lcssa & 65535;
 $45 = $$lcssa >>> 16;
 $46 = ($45>>>0)>($44>>>0);
 $t2$t1$i = $46 ? $choice2$0$lcssa8 : $choice$0$lcssa;
 $$2$i = $46 ? $44 : $45;
 $47 = HEAP32[$_s>>2]|0;
 $48 = (($47) + ($$2$i))|0;
 HEAP32[$_s>>2] = $48;
 $$0 = $t2$t1$i;
 return ($$0|0);
}
function _count_bit_null($ix,$end,$max,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $max = $max|0;
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _count_bit_noESC($ix,$end,$mx,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $mx = $mx|0;
 $s = $s|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sum1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(82300)>>2]|0;
 $$0 = $ix;$sum1$0 = 0;
 while(1) {
  $1 = ((($$0)) + 4|0);
  $2 = HEAP32[$$0>>2]|0;
  $3 = ((($$0)) + 8|0);
  $4 = HEAP32[$1>>2]|0;
  $5 = $2 << 1;
  $6 = (($5) + ($4))|0;
  $7 = (($0) + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = (($9) + ($sum1$0))|0;
  $11 = ($3>>>0)<($end>>>0);
  if ($11) {
   $$0 = $3;$sum1$0 = $10;
  } else {
   $$lcssa = $10;
   break;
  }
 }
 $12 = HEAP32[$s>>2]|0;
 $13 = (($12) + ($$lcssa))|0;
 HEAP32[$s>>2] = $13;
 return 1;
}
function _count_bit_noESC_from2($ix,$end,$max,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $max = $max|0;
 $s = $s|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sum$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($max) + -1)|0;
 $1 = (89504 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (82272 + ($2<<4)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($0|0)==(1);
 $6 = $5 ? 83840 : 83880;
 $$0 = $ix;$sum$0 = 0;
 while(1) {
  $7 = ((($$0)) + 4|0);
  $8 = HEAP32[$$0>>2]|0;
  $9 = ((($$0)) + 8|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = Math_imul($8, $4)|0;
  $12 = (($11) + ($10))|0;
  $13 = (($6) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($sum$0))|0;
  $16 = ($9>>>0)<($end>>>0);
  if ($16) {
   $$0 = $9;$sum$0 = $15;
  } else {
   $$lcssa = $15;
   break;
  }
 }
 $17 = $$lcssa & 65535;
 $18 = $$lcssa >>> 16;
 $19 = ($18>>>0)>($17>>>0);
 $$ = $19 ? $17 : $18;
 $20 = $19&1;
 $$1 = (($20) + ($2))|0;
 $21 = HEAP32[$s>>2]|0;
 $22 = (($21) + ($$))|0;
 HEAP32[$s>>2] = $22;
 return ($$1|0);
}
function _count_bit_noESC_from3($ix,$end,$max,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $max = $max|0;
 $s = $s|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$lcssa = 0, $$lcssa12 = 0, $$lcssa13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $sum1$0 = 0, $sum1$2 = 0, $sum2$0 = 0, $sum3$0 = 0, $t$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($max) + -1)|0;
 $1 = (89504 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (82272 + ($2<<4)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((82272 + ($2<<4)|0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($2) + 1)|0;
 $8 = (((82272 + ($7<<4)|0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($2) + 2)|0;
 $11 = (((82272 + ($10<<4)|0)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $$0 = $ix;$sum1$0 = 0;$sum2$0 = 0;$sum3$0 = 0;
 while(1) {
  $13 = ((($$0)) + 4|0);
  $14 = HEAP32[$$0>>2]|0;
  $15 = ((($$0)) + 8|0);
  $16 = HEAP32[$13>>2]|0;
  $17 = Math_imul($14, $4)|0;
  $18 = (($17) + ($16))|0;
  $19 = (($6) + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (($21) + ($sum1$0))|0;
  $23 = (($9) + ($18)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($25) + ($sum2$0))|0;
  $27 = (($12) + ($18)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = (($29) + ($sum3$0))|0;
  $31 = ($15>>>0)<($end>>>0);
  if ($31) {
   $$0 = $15;$sum1$0 = $22;$sum2$0 = $26;$sum3$0 = $30;
  } else {
   $$lcssa = $22;$$lcssa12 = $26;$$lcssa13 = $30;
   break;
  }
 }
 $32 = ($$lcssa>>>0)>($$lcssa12>>>0);
 $$ = $32 ? $7 : $2;
 $$1 = $32 ? $$lcssa12 : $$lcssa;
 $33 = ($$1>>>0)>($$lcssa13>>>0);
 $t$1 = $33 ? $10 : $$;
 $sum1$2 = $33 ? $$lcssa13 : $$1;
 $34 = HEAP32[$s>>2]|0;
 $35 = (($34) + ($sum1$2))|0;
 HEAP32[$s>>2] = $35;
 return ($t$1|0);
}
function _free_id3tag($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 85704|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
  HEAP32[$0>>2] = 0;
 }
 $3 = ((($gfc)) + 85708|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
  HEAP32[$3>>2] = 0;
 }
 $6 = ((($gfc)) + 85712|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _free($7);
  HEAP32[$6>>2] = 0;
 }
 $9 = ((($gfc)) + 85716|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  _free($10);
  HEAP32[$9>>2] = 0;
 }
 $12 = ((($gfc)) + 85728|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  _free($13);
  HEAP32[$12>>2] = 0;
  $15 = ((($gfc)) + 85732|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($gfc)) + 85740|0);
  HEAP32[$16>>2] = 0;
 }
 $17 = ((($gfc)) + 85744|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  return;
 } else {
  $node$0 = $18;
 }
 while(1) {
  $20 = ((($node$0)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($node$0)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$node$0>>2]|0;
  _free($21);
  _free($23);
  _free($node$0);
  $25 = ($24|0)==(0|0);
  if ($25) {
   break;
  } else {
   $node$0 = $24;
  }
 }
 HEAP32[$17>>2] = 0;
 $26 = ((($gfc)) + 85748|0);
 HEAP32[$26>>2] = 0;
 return;
}
function _freegfc($gfc) {
 $gfc = $gfc|0;
 var $$in$i = 0, $$pre$i = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $0 = (((($gfc)) + 37192|0) + ($i$01<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   _free($1);
   HEAP32[$0>>2] = 0;
  }
  $3 = (($i$01) + 1)|0;
  $exitcond = ($3|0)==(641);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $3;
  }
 }
 $4 = ((($gfc)) + 37184|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _free($5);
  HEAP32[$4>>2] = 0;
 }
 $7 = ((($gfc)) + 37188|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _free($8);
  HEAP32[$7>>2] = 0;
 }
 $10 = ((($gfc)) + 284|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _free($11);
  HEAP32[$10>>2] = 0;
 }
 $13 = ((($gfc)) + 85780|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  _free($14);
  HEAP32[$13>>2] = 0;
  $16 = ((($gfc)) + 85776|0);
  HEAP32[$16>>2] = 0;
 }
 $17 = ((($gfc)) + 85796|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  _free($18);
 }
 $20 = ((($gfc)) + 85676|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  _free($21);
 }
 $23 = ((($gfc)) + 52152|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 $26 = ((($gfc)) + 52156|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 _free_id3tag($gfc);
 $29 = ((($gfc)) + 85808|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  (_hip_decode_exit(($30|0))|0);
  HEAP32[$29>>2] = 0;
 }
 $32 = ((($gfc)) + 85800|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  _free($gfc);
  return;
 }
 $35 = ((($33)) + 2156|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if ($37) {
  $$in$i = $33;
 } else {
  _free($36);
  $$pre$i = HEAP32[$32>>2]|0;
  $$in$i = $$pre$i;
 }
 $38 = ((($$in$i)) + 4316|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if ($40) {
  $41 = $$in$i;
 } else {
  _free($39);
  $$pre1$i = HEAP32[$32>>2]|0;
  $41 = $$pre1$i;
 }
 _free($41);
 _free($gfc);
 return;
}
function _ATHformula($cfg,$f) {
 $cfg = $cfg|0;
 $f = +$f;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0, $ath$0 = 0.0, $f$op$i = 0.0, $f$op$i1 = 0.0, $f$op$i10 = 0.0, $f$op$i13 = 0.0, $f$op$i16 = 0.0, $f$op$i4 = 0.0, $f$op$i7 = 0.0, $pow2$i = 0.0, $pow2$i11 = 0.0, $pow2$i14 = 0.0, $pow2$i17 = 0.0, $pow2$i2 = 0.0, $pow2$i5 = 0.0, $pow2$i8 = 0.0, $pow21$i = 0.0, $pow21$i12 = 0.0, $pow21$i15 = 0.0, $pow21$i18 = 0.0;
 var $pow21$i3 = 0.0, $pow21$i6 = 0.0, $pow21$i9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cfg)) + 192|0);
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 5:  {
  $128 = ((($cfg)) + 188|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $f;
  $131 = $130 < -0.29999999999999999;
  $f$op$i13 = $f * 0.0010000000474974513;
  $132 = $131 ? 3.4100000858306885 : $f$op$i13;
  $133 = $132 < 3.4100000858306885;
  $134 = $133 ? 3.4100000858306885 : $132;
  $135 = $134 > 16.100000381469727;
  $136 = $134;
  $137 = $135 ? 16.100000381469727 : $136;
  $138 = (+Math_pow((+$137),-0.80000000000000004));
  $139 = $138 * 3.6400000000000001;
  $140 = $137 + -3.3999999999999999;
  $pow2$i14 = $140 * $140;
  $141 = $pow2$i14 * -0.59999999999999998;
  $142 = (+Math_exp((+$141)));
  $143 = $142 * 6.7999999999999998;
  $144 = $139 - $143;
  $145 = $137 + -8.6999999999999993;
  $pow21$i15 = $145 * $145;
  $146 = $pow21$i15 * -0.14999999999999999;
  $147 = (+Math_exp((+$146)));
  $148 = $147 * 6.0;
  $149 = $144 + $148;
  $150 = $129;
  $151 = $150 * 4.0000000000000003E-5;
  $152 = $151 + 5.9999999999999995E-4;
  $153 = (+Math_pow((+$137),4.0));
  $154 = $153 * $152;
  $155 = $149 + $154;
  $156 = $155;
  $ath$0 = $156;
  return (+$ath$0);
  break;
 }
 case 1:  {
  $26 = $f;
  $27 = $26 < -0.29999999999999999;
  $f$op$i1 = $f * 0.0010000000474974513;
  $28 = $27 ? 3.4100000858306885 : $f$op$i1;
  $29 = $28 < 0.10000000149011612;
  $30 = $29 ? 0.10000000149011612 : $28;
  $31 = $30 > 24.0;
  $32 = $30;
  $33 = $31 ? 24.0 : $32;
  $34 = (+Math_pow((+$33),-0.80000000000000004));
  $35 = $34 * 3.6400000000000001;
  $36 = $33 + -3.3999999999999999;
  $pow2$i2 = $36 * $36;
  $37 = $pow2$i2 * -0.59999999999999998;
  $38 = (+Math_exp((+$37)));
  $39 = $38 * 6.7999999999999998;
  $40 = $35 - $39;
  $41 = $33 + -8.6999999999999993;
  $pow21$i3 = $41 * $41;
  $42 = $pow21$i3 * -0.14999999999999999;
  $43 = (+Math_exp((+$42)));
  $44 = $43 * 6.0;
  $45 = $40 + $44;
  $46 = (+Math_pow((+$33),4.0));
  $47 = $46 * 5.5999999999999995E-4;
  $48 = $45 + $47;
  $49 = $48;
  $ath$0 = $49;
  return (+$ath$0);
  break;
 }
 case 0:  {
  $2 = $f;
  $3 = $2 < -0.29999999999999999;
  $f$op$i = $f * 0.0010000000474974513;
  $4 = $3 ? 3.4100000858306885 : $f$op$i;
  $5 = $4 < 0.10000000149011612;
  $6 = $5 ? 0.10000000149011612 : $4;
  $7 = $6 > 24.0;
  $8 = $6;
  $9 = $7 ? 24.0 : $8;
  $10 = (+Math_pow((+$9),-0.80000000000000004));
  $11 = $10 * 3.6400000000000001;
  $12 = $9 + -3.3999999999999999;
  $pow2$i = $12 * $12;
  $13 = $pow2$i * -0.59999999999999998;
  $14 = (+Math_exp((+$13)));
  $15 = $14 * 6.7999999999999998;
  $16 = $11 - $15;
  $17 = $9 + -8.6999999999999993;
  $pow21$i = $17 * $17;
  $18 = $pow21$i * -0.14999999999999999;
  $19 = (+Math_exp((+$18)));
  $20 = $19 * 6.0;
  $21 = $16 + $20;
  $22 = (+Math_pow((+$9),4.0));
  $23 = $22 * 9.5999999999999991E-4;
  $24 = $21 + $23;
  $25 = $24;
  $ath$0 = $25;
  return (+$ath$0);
  break;
 }
 case 3:  {
  $74 = $f;
  $75 = $74 < -0.29999999999999999;
  $f$op$i7 = $f * 0.0010000000474974513;
  $76 = $75 ? 3.4100000858306885 : $f$op$i7;
  $77 = $76 < 0.10000000149011612;
  $78 = $77 ? 0.10000000149011612 : $76;
  $79 = $78 > 24.0;
  $80 = $78;
  $81 = $79 ? 24.0 : $80;
  $82 = (+Math_pow((+$81),-0.80000000000000004));
  $83 = $82 * 3.6400000000000001;
  $84 = $81 + -3.3999999999999999;
  $pow2$i8 = $84 * $84;
  $85 = $pow2$i8 * -0.59999999999999998;
  $86 = (+Math_exp((+$85)));
  $87 = $86 * 6.7999999999999998;
  $88 = $83 - $87;
  $89 = $81 + -8.6999999999999993;
  $pow21$i9 = $89 * $89;
  $90 = $pow21$i9 * -0.14999999999999999;
  $91 = (+Math_exp((+$90)));
  $92 = $91 * 6.0;
  $93 = $88 + $92;
  $94 = (+Math_pow((+$81),4.0));
  $95 = $94 * 6.3999999999999994E-4;
  $96 = $93 + $95;
  $97 = $96;
  $98 = $97 + 6.0;
  $ath$0 = $98;
  return (+$ath$0);
  break;
 }
 case 4:  {
  $99 = ((($cfg)) + 188|0);
  $100 = +HEAPF32[$99>>2];
  $101 = $f;
  $102 = $101 < -0.29999999999999999;
  $f$op$i10 = $f * 0.0010000000474974513;
  $103 = $102 ? 3.4100000858306885 : $f$op$i10;
  $104 = $103 < 0.10000000149011612;
  $105 = $104 ? 0.10000000149011612 : $103;
  $106 = $105 > 24.0;
  $107 = $105;
  $108 = $106 ? 24.0 : $107;
  $109 = (+Math_pow((+$108),-0.80000000000000004));
  $110 = $109 * 3.6400000000000001;
  $111 = $108 + -3.3999999999999999;
  $pow2$i11 = $111 * $111;
  $112 = $pow2$i11 * -0.59999999999999998;
  $113 = (+Math_exp((+$112)));
  $114 = $113 * 6.7999999999999998;
  $115 = $110 - $114;
  $116 = $108 + -8.6999999999999993;
  $pow21$i12 = $116 * $116;
  $117 = $pow21$i12 * -0.14999999999999999;
  $118 = (+Math_exp((+$117)));
  $119 = $118 * 6.0;
  $120 = $115 + $119;
  $121 = $100;
  $122 = $121 * 4.0000000000000003E-5;
  $123 = $122 + 5.9999999999999995E-4;
  $124 = (+Math_pow((+$108),4.0));
  $125 = $124 * $123;
  $126 = $120 + $125;
  $127 = $126;
  $ath$0 = $127;
  return (+$ath$0);
  break;
 }
 case 2:  {
  $50 = $f;
  $51 = $50 < -0.29999999999999999;
  $f$op$i4 = $f * 0.0010000000474974513;
  $52 = $51 ? 3.4100000858306885 : $f$op$i4;
  $53 = $52 < 0.10000000149011612;
  $54 = $53 ? 0.10000000149011612 : $52;
  $55 = $54 > 24.0;
  $56 = $54;
  $57 = $55 ? 24.0 : $56;
  $58 = (+Math_pow((+$57),-0.80000000000000004));
  $59 = $58 * 3.6400000000000001;
  $60 = $57 + -3.3999999999999999;
  $pow2$i5 = $60 * $60;
  $61 = $pow2$i5 * -0.59999999999999998;
  $62 = (+Math_exp((+$61)));
  $63 = $62 * 6.7999999999999998;
  $64 = $59 - $63;
  $65 = $57 + -8.6999999999999993;
  $pow21$i6 = $65 * $65;
  $66 = $pow21$i6 * -0.14999999999999999;
  $67 = (+Math_exp((+$66)));
  $68 = $67 * 6.0;
  $69 = $64 + $68;
  $70 = (+Math_pow((+$57),4.0));
  $71 = $70 * 5.9999999999999995E-4;
  $72 = $69 + $71;
  $73 = $72;
  $ath$0 = $73;
  return (+$ath$0);
  break;
 }
 default: {
  $157 = $f;
  $158 = $157 < -0.29999999999999999;
  $f$op$i16 = $f * 0.0010000000474974513;
  $159 = $158 ? 3.4100000858306885 : $f$op$i16;
  $160 = $159 < 0.10000000149011612;
  $161 = $160 ? 0.10000000149011612 : $159;
  $162 = $161 > 24.0;
  $163 = $161;
  $164 = $162 ? 24.0 : $163;
  $165 = (+Math_pow((+$164),-0.80000000000000004));
  $166 = $165 * 3.6400000000000001;
  $167 = $164 + -3.3999999999999999;
  $pow2$i17 = $167 * $167;
  $168 = $pow2$i17 * -0.59999999999999998;
  $169 = (+Math_exp((+$168)));
  $170 = $169 * 6.7999999999999998;
  $171 = $166 - $170;
  $172 = $164 + -8.6999999999999993;
  $pow21$i18 = $172 * $172;
  $173 = $pow21$i18 * -0.14999999999999999;
  $174 = (+Math_exp((+$173)));
  $175 = $174 * 6.0;
  $176 = $171 + $175;
  $177 = (+Math_pow((+$164),4.0));
  $178 = $177 * 5.9999999999999995E-4;
  $179 = $176 + $178;
  $180 = $179;
  $ath$0 = $180;
  return (+$ath$0);
 }
 }
 return +(0.0);
}
function _freq2bark($freq) {
 $freq = +$freq;
 var $$op = 0.0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $freq < 0.0;
 $1 = $freq;
 $$op = $1 * 0.001;
 $2 = $$op;
 $3 = $0 ? 0.0 : $2;
 $4 = $3;
 $5 = $4 * 0.76000000000000001;
 $6 = (+Math_atan((+$5)));
 $7 = $6 * 13.0;
 $8 = $3 * $3;
 $9 = $8;
 $10 = $9 * 0.017777777777777778;
 $11 = (+Math_atan((+$10)));
 $12 = $11 * 3.5;
 $13 = $12 + $7;
 $14 = $13;
 return (+$14);
}
function _FindNearestBitrate($bRate,$version,$samplerate) {
 $bRate = $bRate|0;
 $version = $version|0;
 $samplerate = $samplerate|0;
 var $$bitrate$0 = 0, $$version = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bitrate$01 = 0, $bitrate$1 = 0;
 var $bitrate$1$lcssa = 0, $exitcond = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($samplerate|0)<(16000);
 $$version = $0 ? 2 : $version;
 $1 = (((83944 + ($$version<<6)|0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $bitrate$01 = $2;$i$02 = 2;
 while(1) {
  $3 = ((83944 + ($$version<<6)|0) + ($i$02<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   $6 = (($4) - ($bRate))|0;
   $7 = ($6|0)>(0);
   $8 = (0 - ($6))|0;
   $9 = $7 ? $6 : $8;
   $10 = (($bitrate$01) - ($bRate))|0;
   $11 = ($10|0)>(0);
   $12 = (0 - ($10))|0;
   $13 = $11 ? $10 : $12;
   $14 = ($9|0)<($13|0);
   $$bitrate$0 = $14 ? $4 : $bitrate$01;
   $bitrate$1 = $$bitrate$0;
  } else {
   $bitrate$1 = $bitrate$01;
  }
  $15 = (($i$02) + 1)|0;
  $exitcond = ($15|0)==(15);
  if ($exitcond) {
   $bitrate$1$lcssa = $bitrate$1;
   break;
  } else {
   $bitrate$01 = $bitrate$1;$i$02 = $15;
  }
 }
 return ($bitrate$1$lcssa|0);
}
function _nearestBitrateFullIndex($bitrate) {
 $bitrate = $bitrate|0;
 var $$ = 0, $$lcssa = 0, $$lcssa12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$0 = 0, $b$0$lcssa11 = 0, $lower_range$0 = 0, $lower_range$0$upper_range$0 = 0, $lower_range_kbps$0 = 0;
 var $upper_range$0 = 0, $upper_range_kbps$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $bitrate&65535;
 $b$0 = 0;
 while(1) {
  $1 = ($b$0|0)<(16);
  if (!($1)) {
   $lower_range$0 = 16;$lower_range_kbps$0 = 320;$upper_range$0 = 16;$upper_range_kbps$0 = 320;
   break;
  }
  $2 = (($b$0) + 1)|0;
  $3 = (89568 + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($0|0)>($4|0);
  $$ = $5 ? $0 : $4;
  $6 = ($$|0)==($0|0);
  if ($6) {
   $b$0 = $2;
  } else {
   $$lcssa = $2;$$lcssa12 = $4;$b$0$lcssa11 = $b$0;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = (89568 + ($b$0$lcssa11<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $lower_range$0 = $b$0$lcssa11;$lower_range_kbps$0 = $8;$upper_range$0 = $$lcssa;$upper_range_kbps$0 = $$lcssa12;
 }
 $9 = (($upper_range_kbps$0) - ($0))|0;
 $10 = (($0) - ($lower_range_kbps$0))|0;
 $11 = ($9|0)>($10|0);
 $lower_range$0$upper_range$0 = $11 ? $lower_range$0 : $upper_range$0;
 return ($lower_range$0$upper_range$0|0);
}
function _map2MP3Frequency($freq) {
 $freq = $freq|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($freq|0)<(8001);
 if ($0) {
  $$0 = 8000;
 } else {
  $1 = ($freq|0)<(11026);
  if ($1) {
   $$0 = 11025;
  } else {
   $2 = ($freq|0)<(12001);
   if ($2) {
    $$0 = 12000;
   } else {
    $3 = ($freq|0)<(16001);
    if ($3) {
     $$0 = 16000;
    } else {
     $4 = ($freq|0)<(22051);
     if ($4) {
      $$0 = 22050;
     } else {
      $5 = ($freq|0)<(24001);
      if ($5) {
       $$0 = 24000;
      } else {
       $6 = ($freq|0)<(32001);
       if ($6) {
        $$0 = 32000;
       } else {
        $7 = ($freq|0)<(44101);
        $$ = $7 ? 44100 : 48000;
        $$0 = $$;
       }
      }
     }
    }
   }
  }
 }
 return ($$0|0);
}
function _BitrateIndex($bRate,$version,$samplerate) {
 $bRate = $bRate|0;
 $version = $version|0;
 $samplerate = $samplerate|0;
 var $$ = 0, $$0 = 0, $$version = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$1 = 0, $or$cond$10 = 0, $or$cond$11 = 0, $or$cond$12 = 0, $or$cond$13 = 0, $or$cond$14 = 0, $or$cond$2 = 0, $or$cond$3 = 0, $or$cond$4 = 0, $or$cond$5 = 0, $or$cond$6 = 0, $or$cond$7 = 0, $or$cond$8 = 0, $or$cond$9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($samplerate|0)<(16000);
 $$version = $0 ? 2 : $version;
 $1 = (83944 + ($$version<<6)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 $4 = ($2|0)==($bRate|0);
 $or$cond = $3 & $4;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (((83944 + ($$version<<6)|0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 $8 = ($6|0)==($bRate|0);
 $or$cond$1 = $7 & $8;
 if ($or$cond$1) {
  $$0 = 1;
  return ($$0|0);
 }
 $9 = (((83944 + ($$version<<6)|0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 $12 = ($10|0)==($bRate|0);
 $or$cond$2 = $11 & $12;
 if ($or$cond$2) {
  $$0 = 2;
  return ($$0|0);
 }
 $13 = (((83944 + ($$version<<6)|0)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 $16 = ($14|0)==($bRate|0);
 $or$cond$3 = $15 & $16;
 if ($or$cond$3) {
  $$0 = 3;
  return ($$0|0);
 }
 $17 = (((83944 + ($$version<<6)|0)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)>(0);
 $20 = ($18|0)==($bRate|0);
 $or$cond$4 = $19 & $20;
 if ($or$cond$4) {
  $$0 = 4;
  return ($$0|0);
 }
 $21 = (((83944 + ($$version<<6)|0)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)>(0);
 $24 = ($22|0)==($bRate|0);
 $or$cond$5 = $23 & $24;
 if ($or$cond$5) {
  $$0 = 5;
  return ($$0|0);
 }
 $25 = (((83944 + ($$version<<6)|0)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)>(0);
 $28 = ($26|0)==($bRate|0);
 $or$cond$6 = $27 & $28;
 if ($or$cond$6) {
  $$0 = 6;
  return ($$0|0);
 }
 $29 = (((83944 + ($$version<<6)|0)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)>(0);
 $32 = ($30|0)==($bRate|0);
 $or$cond$7 = $31 & $32;
 if ($or$cond$7) {
  $$0 = 7;
  return ($$0|0);
 }
 $33 = (((83944 + ($$version<<6)|0)) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)>(0);
 $36 = ($34|0)==($bRate|0);
 $or$cond$8 = $35 & $36;
 if ($or$cond$8) {
  $$0 = 8;
  return ($$0|0);
 }
 $37 = (((83944 + ($$version<<6)|0)) + 36|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)>(0);
 $40 = ($38|0)==($bRate|0);
 $or$cond$9 = $39 & $40;
 if ($or$cond$9) {
  $$0 = 9;
  return ($$0|0);
 }
 $41 = (((83944 + ($$version<<6)|0)) + 40|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)>(0);
 $44 = ($42|0)==($bRate|0);
 $or$cond$10 = $43 & $44;
 if ($or$cond$10) {
  $$0 = 10;
  return ($$0|0);
 }
 $45 = (((83944 + ($$version<<6)|0)) + 44|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)>(0);
 $48 = ($46|0)==($bRate|0);
 $or$cond$11 = $47 & $48;
 if ($or$cond$11) {
  $$0 = 11;
  return ($$0|0);
 }
 $49 = (((83944 + ($$version<<6)|0)) + 48|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)>(0);
 $52 = ($50|0)==($bRate|0);
 $or$cond$12 = $51 & $52;
 if ($or$cond$12) {
  $$0 = 12;
  return ($$0|0);
 }
 $53 = (((83944 + ($$version<<6)|0)) + 52|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)>(0);
 $56 = ($54|0)==($bRate|0);
 $or$cond$13 = $55 & $56;
 if ($or$cond$13) {
  $$0 = 13;
  return ($$0|0);
 } else {
  $57 = (((83944 + ($$version<<6)|0)) + 56|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)>(0);
  $60 = ($58|0)==($bRate|0);
  $or$cond$14 = $59 & $60;
  $$ = $or$cond$14 ? 14 : -1;
  return ($$|0);
 }
 return (0)|0;
}
function _SmpFrqIndex($sample_freq,$version) {
 $sample_freq = $sample_freq|0;
 $version = $version|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  if ((($sample_freq|0) == 12000)) {
   HEAP32[$version>>2] = 0;
   $$0 = 1;
  } else if ((($sample_freq|0) == 44100)) {
   HEAP32[$version>>2] = 1;
   $$0 = 0;
  } else if ((($sample_freq|0) == 11025)) {
   HEAP32[$version>>2] = 0;
   $$0 = 0;
  } else if ((($sample_freq|0) == 16000)) {
   HEAP32[$version>>2] = 0;
   $$0 = 2;
  } else if ((($sample_freq|0) == 48000)) {
   HEAP32[$version>>2] = 1;
   $$0 = 1;
  } else if ((($sample_freq|0) == 22050)) {
   HEAP32[$version>>2] = 0;
   $$0 = 0;
  } else if ((($sample_freq|0) == 24000)) {
   HEAP32[$version>>2] = 0;
   $$0 = 1;
  } else if ((($sample_freq|0) == 8000)) {
   HEAP32[$version>>2] = 0;
   $$0 = 2;
  } else if ((($sample_freq|0) == 32000)) {
   HEAP32[$version>>2] = 1;
   $$0 = 2;
  } else {
   HEAP32[$version>>2] = 0;
   $$0 = -1;
  }
 } while(0);
 return ($$0|0);
}
function _isResamplingNecessary($cfg) {
 $cfg = $cfg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cfg)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (+($1|0));
 $3 = $2 * 0.99949997663497925;
 $4 = (~~(($3)));
 $5 = ((($cfg)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<($4|0);
 if ($7) {
  $12 = 1;
  $11 = $12&1;
  return ($11|0);
 }
 $8 = $2 * 1.000499963760376;
 $9 = (~~(($8)));
 $10 = ($9|0)<($6|0);
 $12 = $10;
 $11 = $12&1;
 return ($11|0);
}
function _fill_buffer($gfc,$mfbuf,$in_buffer,$nsamples,$n_in,$n_out) {
 $gfc = $gfc|0;
 $mfbuf = $mfbuf|0;
 $in_buffer = $in_buffer|0;
 $nsamples = $nsamples|0;
 $n_in = $n_in|0;
 $n_out = $n_out|0;
 var $$$i = 0, $$0$i$i = 0.0, $$0$in$i$i = 0.0, $$01$i$i = 0.0, $$1$i$i = 0.0, $$in$i = 0, $$lcssa = 0.0, $$lcssa20 = 0.0, $$neg4$i = 0.0, $$neg7$i = 0, $$op$i = 0.0, $$op54$i = 0, $$op54$op$i = 0, $$op54$op$op$i = 0, $$op55$i = 0, $$pre = 0, $$pre$i = 0.0, $$pre$phi52$iZ2D = 0, $$pre10 = 0, $$pre49$i = 0.0;
 var $$pre50$i = 0, $$pre51$i = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0;
 var $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0.0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0;
 var $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0;
 var $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $ch$0 = 0, $ch$1 = 0, $exitcond$i = 0, $exitcond46$i = 0, $fabsf$i$i = 0.0, $i$033$i = 0, $i$126$i = 0, $i$227$i = 0, $i$316$i = 0, $i$411$i = 0, $i$5$lcssa$i = 0, $i$514$i = 0, $i$613$i = 0;
 var $i$tr$lcssa$i$i = 0, $i$tr1$i$i = 0, $i$tr1$i$i$phi = 0, $j$0$lcssa$i = 0, $j$028$i = 0, $j$1$i = 0, $j$3$i = 0, $j$412$i = 0, $j$tr2$i$i = 0, $k$0$lcssa$i = 0, $k$0$lcssa$i$lcssa = 0, $k$018$i = 0, $len$$i = 0, $sum$025$i = 0.0, $xvalue$017$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gfc)) + 84036|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($gfc)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*576)|0;
 $5 = ((($gfc)) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($gfc)) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($8|0));
 $10 = $9 * 0.99949997663497925;
 $11 = (~~(($10)));
 $12 = ((($gfc)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<($11|0);
 if (!($14)) {
  $15 = $9 * 1.000499963760376;
  $16 = (~~(($15)));
  $17 = ($16|0)<($13|0);
  if (!($17)) {
   $194 = ($4|0)<($nsamples|0);
   $195 = $194 ? $4 : $nsamples;
   $196 = $195 << 2;
   $ch$1 = 0;
   while(1) {
    $197 = (($mfbuf) + ($ch$1<<2)|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = (($198) + ($1<<2)|0);
    $200 = (($in_buffer) + ($ch$1<<2)|0);
    $201 = HEAP32[$200>>2]|0;
    _memcpy(($199|0),($201|0),($196|0))|0;
    $202 = (($ch$1) + 1)|0;
    $203 = ($202|0)<($6|0);
    if ($203) {
     $ch$1 = $202;
    } else {
     break;
    }
   }
   HEAP32[$n_out>>2] = $195;
   HEAP32[$n_in>>2] = $195;
   return;
  }
 }
 $18 = ((($gfc)) + 12|0);
 $19 = ((($gfc)) + 37184|0);
 $20 = ((($gfc)) + 37188|0);
 $21 = ((($gfc)) + 37168|0);
 $22 = ($3|0)>(0);
 $28 = $13;$30 = $8;$ch$0 = 0;
 while(1) {
  $23 = (($mfbuf) + ($ch$0<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($in_buffer) + ($ch$0<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (+($28|0));
  $29 = (+($30|0));
  $31 = $27 / $29;
  $32 = ($28|0)==(0);
  if ($32) {
   $i$tr$lcssa$i$i = $30;
  } else {
   $i$tr1$i$i = $30;$j$tr2$i$i = $28;
   while(1) {
    $33 = (($i$tr1$i$i|0) % ($j$tr2$i$i|0))&-1;
    $34 = ($33|0)==(0);
    if ($34) {
     $i$tr$lcssa$i$i = $j$tr2$i$i;
     break;
    } else {
     $i$tr1$i$i$phi = $j$tr2$i$i;$j$tr2$i$i = $33;$i$tr1$i$i = $i$tr1$i$i$phi;
    }
   }
  }
  $35 = (($30|0) / ($i$tr$lcssa$i$i|0))&-1;
  $36 = ($35|0)>(320);
  $$$i = $36 ? 320 : $35;
  $37 = $31 + 0.5;
  $38 = (+Math_floor((+$37)));
  $39 = $31 - $38;
  $40 = (+Math_abs((+$39)));
  $41 = $40 < 1.0E-4;
  $42 = 1.0 / $31;
  $43 = $42;
  $44 = $43 > 1.0;
  $45 = $41 ? 32 : 31;
  $46 = (($45) + 1)|0;
  $47 = HEAP32[$18>>2]|0;
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = (_calloc($46,4)|0);
   HEAP32[$19>>2] = $49;
   $50 = (_calloc($46,4)|0);
   HEAP32[$20>>2] = $50;
   $51 = $$$i << 1;
   $52 = ($$$i|0)<(0);
   if ($52) {
    ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;HEAP32[$21+12>>2]=0|0;
    $j$0$lcssa$i = 0;
   } else {
    $i$033$i = 0;
    while(1) {
     $53 = (_calloc($46,4)|0);
     $54 = (((($gfc)) + 37192|0) + ($i$033$i<<2)|0);
     HEAP32[$54>>2] = $53;
     $55 = (($i$033$i) + 1)|0;
     $56 = ($i$033$i|0)<($51|0);
     if ($56) {
      $i$033$i = $55;
     } else {
      break;
     }
    }
    ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;HEAP32[$21+12>>2]=0|0;
    $57 = (+($$$i|0));
    $58 = $57 * 2.0;
    $59 = $43;
    $$op$i = $59 * 3.1415926535897931;
    $60 = $$op$i;
    $61 = $44 ? 3.1415927410125732 : $60;
    $62 = (+($45|0));
    $63 = $61;
    $64 = $63 * 0.31830988618379069;
    $65 = $61 * $62;
    $66 = (+($45|0));
    $67 = $66 * 3.1415926535897931;
    $68 = ($35|0)<(320);
    $$op54$i = $35 << 1;
    $$op54$op$i = $$op54$i ^ -2;
    $$op54$op$op$i = (-2 - ($$op54$op$i))|0;
    $69 = $68 ? $$op54$op$op$i : 640;
    $j$028$i = 0;
    while(1) {
     $70 = (($j$028$i) - ($$$i))|0;
     $71 = (+($70|0));
     $72 = $71 / $58;
     $73 = $72;
     $74 = (((($gfc)) + 37192|0) + ($j$028$i<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $i$126$i = 0;$sum$025$i = 0.0;
     while(1) {
      $76 = (+($i$126$i|0));
      $77 = $76 - $73;
      $78 = $77 / $62;
      $79 = $78 < 0.0;
      $$01$i$i = $79 ? 0.0 : $78;
      $80 = $$01$i$i > 1.0;
      $$1$i$i = $80 ? 1.0 : $$01$i$i;
      $81 = $$1$i$i + -0.5;
      $fabsf$i$i = (+Math_abs((+$81)));
      $82 = $fabsf$i$i;
      $83 = $82 < 1.0000000000000001E-9;
      if ($83) {
       $$0$in$i$i = $64;
      } else {
       $84 = $81;
       $85 = $$1$i$i * 2.0;
       $86 = $85;
       $87 = $86 * 3.1415926535897931;
       $88 = (+Math_cos((+$87)));
       $89 = $88 * 0.5;
       $90 = 0.41999999999999998 - $89;
       $91 = $$1$i$i * 4.0;
       $92 = $91;
       $93 = $92 * 3.1415926535897931;
       $94 = (+Math_cos((+$93)));
       $95 = $94 * 0.080000000000000002;
       $96 = $90 + $95;
       $97 = $96;
       $98 = $97;
       $99 = $65 * $81;
       $100 = $99;
       $101 = (+Math_sin((+$100)));
       $102 = $98 * $101;
       $103 = $67 * $84;
       $104 = $102 / $103;
       $$0$in$i$i = $104;
      }
      $$0$i$i = $$0$in$i$i;
      $105 = (($75) + ($i$126$i<<2)|0);
      HEAPF32[$105>>2] = $$0$i$i;
      $106 = $$0$i$i + $sum$025$i;
      $107 = (($i$126$i) + 1)|0;
      $108 = ($i$126$i|0)<($45|0);
      if ($108) {
       $i$126$i = $107;$sum$025$i = $106;
      } else {
       $$lcssa = $106;
       break;
      }
     }
     $i$227$i = 0;
     while(1) {
      $109 = (($75) + ($i$227$i<<2)|0);
      $110 = +HEAPF32[$109>>2];
      $111 = $110 / $$lcssa;
      HEAPF32[$109>>2] = $111;
      $112 = (($i$227$i) + 1)|0;
      $113 = ($i$227$i|0)<($45|0);
      if ($113) {
       $i$227$i = $112;
      } else {
       break;
      }
     }
     $114 = (($j$028$i) + 1)|0;
     $115 = ($j$028$i|0)<($51|0);
     if ($115) {
      $j$028$i = $114;
     } else {
      break;
     }
    }
    $116 = ($69|0)>(0);
    $$op55$i = $69 | 1;
    $117 = $116 ? $$op55$i : 1;
    $j$0$lcssa$i = $117;
   }
   HEAP32[$18>>2] = 1;
   $j$1$i = $j$0$lcssa$i;
  } else {
   $j$1$i = 0;
  }
  $118 = (((($gfc)) + 37184|0) + ($ch$0<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (((($gfc)) + 37168|0) + ($ch$0<<3)|0);
  L36: do {
   if ($22) {
    $121 = $45 >>> 1;
    $122 = (($45) - ($121))|0;
    $123 = $45 & 1;
    $124 = (+($123|0));
    $125 = $124 * 0.5;
    $126 = (+($$$i|0));
    $127 = $126 * 2.0;
    $$pre$i = +HEAPF64[$120>>3];
    $k$018$i = 0;
    while(1) {
     $128 = (+($k$018$i|0));
     $129 = $128 * $31;
     $130 = $129 - $$pre$i;
     $131 = (+Math_floor((+$130)));
     $132 = (~~(($131)));
     $133 = (($132) + ($122))|0;
     $134 = ($133|0)<($nsamples|0);
     if (!($134)) {
      $$pre$phi52$iZ2D = $122;$168 = $$pre$i;$j$3$i = $132;$k$0$lcssa$i = $k$018$i;
      break L36;
     }
     $135 = (+($132|0));
     $$neg4$i = $130 - $125;
     $136 = $$neg4$i - $135;
     $137 = $136;
     $138 = $127 * $137;
     $139 = $138 + $126;
     $140 = $139;
     $141 = $140 + 0.5;
     $142 = (+Math_floor((+$141)));
     $143 = (~~(($142)));
     $144 = (($132) - ($121))|0;
     $145 = (((($gfc)) + 37192|0) + ($143<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $i$316$i = 0;$xvalue$017$i = 0.0;
     while(1) {
      $147 = (($i$316$i) + ($144))|0;
      $148 = ($147|0)<(0);
      $149 = (($147) + ($46))|0;
      $150 = (($119) + ($149<<2)|0);
      $151 = (($26) + ($147<<2)|0);
      $$in$i = $148 ? $150 : $151;
      $152 = +HEAPF32[$$in$i>>2];
      $153 = (($146) + ($i$316$i<<2)|0);
      $154 = +HEAPF32[$153>>2];
      $155 = $154 * $152;
      $156 = $155 + $xvalue$017$i;
      $157 = (($i$316$i) + 1)|0;
      $158 = ($i$316$i|0)<($45|0);
      if ($158) {
       $i$316$i = $157;$xvalue$017$i = $156;
      } else {
       $$lcssa20 = $156;
       break;
      }
     }
     $$sum = (($k$018$i) + ($1))|0;
     $159 = (($24) + ($$sum<<2)|0);
     HEAPF32[$159>>2] = $$lcssa20;
     $160 = (($k$018$i) + 1)|0;
     $161 = ($160|0)<($4|0);
     if ($161) {
      $k$018$i = $160;
     } else {
      $$pre$phi52$iZ2D = $122;$168 = $$pre$i;$j$3$i = $132;$k$0$lcssa$i = $160;
      break;
     }
    }
   } else {
    $$pre49$i = +HEAPF64[$120>>3];
    $$pre50$i = $45 >>> 1;
    $$pre51$i = (($45) - ($$pre50$i))|0;
    $$pre$phi52$iZ2D = $$pre51$i;$168 = $$pre49$i;$j$3$i = $j$1$i;$k$0$lcssa$i = 0;
   }
  } while(0);
  $162 = (($j$3$i) + ($$pre$phi52$iZ2D))|0;
  $163 = ($162|0)>($nsamples|0);
  $len$$i = $163 ? $nsamples : $162;
  HEAP32[$n_in>>2] = $len$$i;
  $164 = (+($len$$i|0));
  $165 = (+($k$0$lcssa$i|0));
  $166 = $165 * $31;
  $167 = $168 - $166;
  $169 = $167 + $164;
  HEAPF64[$120>>3] = $169;
  $170 = ($45|0)<($len$$i|0);
  if ($170) {
   $$neg7$i = $45 ^ -1;
   $171 = (($len$$i) + ($$neg7$i))|0;
   $i$411$i = 0;
   while(1) {
    $172 = (($171) + ($i$411$i))|0;
    $173 = (($26) + ($172<<2)|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($119) + ($i$411$i<<2)|0);
    HEAP32[$175>>2] = $174;
    $176 = (($i$411$i) + 1)|0;
    $177 = ($176|0)<($46|0);
    if ($177) {
     $i$411$i = $176;
    } else {
     break;
    }
   }
  } else {
   $178 = (($46) - ($len$$i))|0;
   $179 = ($178|0)>(0);
   if ($179) {
    $i$514$i = 0;
    while(1) {
     $182 = (($i$514$i) + ($len$$i))|0;
     $183 = (($119) + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (($119) + ($i$514$i<<2)|0);
     HEAP32[$185>>2] = $184;
     $186 = (($i$514$i) + 1)|0;
     $exitcond46$i = ($186|0)==($178|0);
     if ($exitcond46$i) {
      $i$5$lcssa$i = $178;
      break;
     } else {
      $i$514$i = $186;
     }
    }
   } else {
    $i$5$lcssa$i = 0;
   }
   $180 = ($45|0)<($i$5$lcssa$i|0);
   if (!($180)) {
    $181 = (($46) - ($i$5$lcssa$i))|0;
    $i$613$i = $i$5$lcssa$i;$j$412$i = 0;
    while(1) {
     $187 = (($26) + ($j$412$i<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (($119) + ($i$613$i<<2)|0);
     HEAP32[$189>>2] = $188;
     $190 = (($i$613$i) + 1)|0;
     $191 = (($j$412$i) + 1)|0;
     $exitcond$i = ($191|0)==($181|0);
     if ($exitcond$i) {
      break;
     } else {
      $i$613$i = $190;$j$412$i = $191;
     }
    }
   }
  }
  $192 = (($ch$0) + 1)|0;
  $193 = ($192|0)<($6|0);
  if (!($193)) {
   $k$0$lcssa$i$lcssa = $k$0$lcssa$i;
   break;
  }
  $$pre = HEAP32[$12>>2]|0;
  $$pre10 = HEAP32[$7>>2]|0;
  $28 = $$pre;$30 = $$pre10;$ch$0 = $192;
 }
 HEAP32[$n_out>>2] = $k$0$lcssa$i$lcssa;
 return;
}
function _lame_report_def($format,$args) {
 $format = $format|0;
 $args = $args|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($args|0))|0);
 (_fflush(($0|0))|0);
 return;
}
function _lame_msgf($gfc,$format,$varargs) {
 $gfc = $gfc|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $args = sp;
 $0 = ($gfc|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = ((($gfc)) + 85828|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 $4 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$4 & 3]($format,$args);
 STACKTOP = sp;return;
}
function _lame_errorf($gfc,$format,$varargs) {
 $gfc = $gfc|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $args = sp;
 $0 = ($gfc|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = ((($gfc)) + 85836|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 $4 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$4 & 3]($format,$args);
 STACKTOP = sp;return;
}
function _has_MMX() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _has_3DNow() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _has_SSE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _has_SSE2() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _disable_FPE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _init_log_table() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $exitcond = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[89640>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $j$01 = 0;
 } else {
  HEAP32[89640>>2] = 1;
  return;
 }
 while(1) {
  $2 = (+($j$01|0));
  $3 = $2 * 0.001953125;
  $4 = $3 + 1.0;
  $5 = $4;
  $6 = (+Math_log((+$5)));
  $7 = $6 * 1.4426950408889634;
  $8 = $7;
  $9 = (89648 + ($j$01<<2)|0);
  HEAPF32[$9>>2] = $8;
  $10 = (($j$01) + 1)|0;
  $exitcond = ($10|0)==(513);
  if ($exitcond) {
   break;
  } else {
   $j$01 = $10;
  }
 }
 HEAP32[89640>>2] = 1;
 return;
}
function _fast_log2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 23;
 $2 = $1 & 255;
 $3 = (($2) + -127)|0;
 $4 = (+($3|0));
 $5 = $0 & 16383;
 $6 = (+($5|0));
 $7 = $6 * 6.103515625E-5;
 $8 = $0 >>> 14;
 $9 = $8 & 511;
 $10 = (89648 + ($9<<2)|0);
 $11 = +HEAPF32[$10>>2];
 $12 = 1.0 - $7;
 $13 = $11 * $12;
 $14 = (($9) + 1)|0;
 $15 = (89648 + ($14<<2)|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $16 * $7;
 $18 = $13 + $4;
 $19 = $18 + $17;
 return (+$19);
}
function _get_lame_short_version() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (91704|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0$be$i = 0, $$0$be$i19 = 0, $$0$i44 = 0, $$01$be$i = 0, $$01$be$i18 = 0, $$012$i = 0, $$012$i15 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$us$i = 0, $$02$us$i30 = 0, $$03$i = 0, $$03$i14 = 0, $$66 = 0, $$67 = 0, $$lcssa = 0, $$lcssa102 = 0, $$lcssa70 = 0, $$lcssa71 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre6$i = 0, $$pre6$i26 = 0, $$sum = 0, $$sum$i = 0, $$sum$i17 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0;
 var $exitcond$i = 0, $exitcond$i29 = 0, $head$0$lcssa = 0, $head$076 = 0, $head$174 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i23 = 0, $i$01$us$i = 0, $i$01$us$i28 = 0, $i$04$i = 0, $i$04$i13 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond68 = 0, $or$cond6873 = 0, $or$cond72 = 0;
 var $pshift$0$lcssa = 0, $pshift$077 = 0, $pshift$1 = 0, $pshift$275 = 0, $sum = 0, $sum$i = 0, $sum$i16 = 0, $tmp$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0;
 $tmp$i25 = sp + 424|0;
 $ar$i = sp + 192|0;
 $lp = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = ((($lp)) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = $11;
  $16 = 1;$51 = 0;$head$076 = $base;$pshift$077 = 1;
  while(1) {
   $15 = $16 & 3;
   $17 = ($15|0)==(3);
   do {
    if ($17) {
     HEAP32[$ar$i>>2] = $head$076;
     $18 = ($pshift$077|0)>(1);
     L13: do {
      if ($18) {
       $$012$i = $pshift$077;$$03$i = $head$076;$24 = $head$076;$i$04$i = 1;
       while(1) {
        $19 = (($$03$i) + ($10)|0);
        $20 = (($$012$i) + -2)|0;
        $21 = (($lp) + ($20<<2)|0);
        $22 = HEAP32[$21>>2]|0;
        $sum$i = (($22) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $23 = (($$03$i) + ($$sum$i)|0);
        $25 = (FUNCTION_TABLE_iii[$cmp & 1]($24,$23)|0);
        $26 = ($25|0)>(-1);
        if ($26) {
         $27 = (FUNCTION_TABLE_iii[$cmp & 1]($24,$19)|0);
         $28 = ($27|0)>(-1);
         if ($28) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $29 = (FUNCTION_TABLE_iii[$cmp & 1]($23,$19)|0);
        $30 = ($29|0)>(-1);
        $31 = (($i$04$i) + 1)|0;
        $32 = (($ar$i) + ($i$04$i<<2)|0);
        if ($30) {
         HEAP32[$32>>2] = $23;
         $33 = (($$012$i) + -1)|0;
         $$0$be$i = $23;$$01$be$i = $33;
        } else {
         HEAP32[$32>>2] = $19;
         $$0$be$i = $19;$$01$be$i = $20;
        }
        $34 = ($$01$be$i|0)>(1);
        if (!($34)) {
         $i$0$lcssa$i = $31;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$24 = $$pre$i;$i$04$i = $31;
       }
       $35 = ($i$0$lcssa$i|0)<(2);
       if (!($35)) {
        $36 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$36>>2] = $tmp$i25;
        if (!($13)) {
         $$02$us$i = $width;$48 = $tmp$i25;
         while(1) {
          $46 = ($$02$us$i>>>0)>(256);
          $38 = $46 ? 256 : $$02$us$i;
          $47 = HEAP32[$ar$i>>2]|0;
          _memcpy(($48|0),($47|0),($38|0))|0;
          $44 = $47;$i$01$us$i = 0;
          while(1) {
           $40 = (($ar$i) + ($i$01$us$i<<2)|0);
           $41 = (($i$01$us$i) + 1)|0;
           $42 = (($ar$i) + ($41<<2)|0);
           $43 = HEAP32[$42>>2]|0;
           _memcpy(($44|0),($43|0),($38|0))|0;
           $45 = (($44) + ($38)|0);
           HEAP32[$40>>2] = $45;
           $exitcond$i = ($41|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $44 = $43;$i$01$us$i = $41;
           }
          }
          $37 = ($$02$us$i|0)==($38|0);
          if ($37) {
           break L13;
          }
          $39 = (($$02$us$i) - ($38))|0;
          $$pre6$i = HEAP32[$36>>2]|0;
          $$02$us$i = $39;$48 = $$pre6$i;
         }
        }
       }
      } else {
      }
     } while(0);
     $49 = $16 >>> 2;
     $50 = $51 << 30;
     $52 = $49 | $50;
     $53 = $51 >>> 2;
     $54 = (($pshift$077) + 2)|0;
     $105 = $52;$168 = $53;$pshift$1 = $54;
    } else {
     $55 = (($pshift$077) + -1)|0;
     $56 = (($lp) + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $head$076;
     $59 = (($14) - ($58))|0;
     $60 = ($57>>>0)<($59>>>0);
     if ($60) {
      HEAP32[$ar$i>>2] = $head$076;
      $61 = ($pshift$077|0)>(1);
      L38: do {
       if ($61) {
        $$012$i15 = $pshift$077;$$03$i14 = $head$076;$67 = $head$076;$i$04$i13 = 1;
        while(1) {
         $62 = (($$03$i14) + ($10)|0);
         $63 = (($$012$i15) + -2)|0;
         $64 = (($lp) + ($63<<2)|0);
         $65 = HEAP32[$64>>2]|0;
         $sum$i16 = (($65) + ($width))|0;
         $$sum$i17 = (0 - ($sum$i16))|0;
         $66 = (($$03$i14) + ($$sum$i17)|0);
         $68 = (FUNCTION_TABLE_iii[$cmp & 1]($67,$66)|0);
         $69 = ($68|0)>(-1);
         if ($69) {
          $70 = (FUNCTION_TABLE_iii[$cmp & 1]($67,$62)|0);
          $71 = ($70|0)>(-1);
          if ($71) {
           $i$0$lcssa$i23 = $i$04$i13;
           break;
          }
         }
         $72 = (FUNCTION_TABLE_iii[$cmp & 1]($66,$62)|0);
         $73 = ($72|0)>(-1);
         $74 = (($i$04$i13) + 1)|0;
         $75 = (($ar$i) + ($i$04$i13<<2)|0);
         if ($73) {
          HEAP32[$75>>2] = $66;
          $76 = (($$012$i15) + -1)|0;
          $$0$be$i19 = $66;$$01$be$i18 = $76;
         } else {
          HEAP32[$75>>2] = $62;
          $$0$be$i19 = $62;$$01$be$i18 = $63;
         }
         $77 = ($$01$be$i18|0)>(1);
         if (!($77)) {
          $i$0$lcssa$i23 = $74;
          break;
         }
         $$pre$i21 = HEAP32[$ar$i>>2]|0;
         $$012$i15 = $$01$be$i18;$$03$i14 = $$0$be$i19;$67 = $$pre$i21;$i$04$i13 = $74;
        }
        $78 = ($i$0$lcssa$i23|0)<(2);
        if (!($78)) {
         $79 = (($ar$i) + ($i$0$lcssa$i23<<2)|0);
         HEAP32[$79>>2] = $tmp$i25;
         if (!($13)) {
          $$02$us$i30 = $width;$91 = $tmp$i25;
          while(1) {
           $89 = ($$02$us$i30>>>0)>(256);
           $81 = $89 ? 256 : $$02$us$i30;
           $90 = HEAP32[$ar$i>>2]|0;
           _memcpy(($91|0),($90|0),($81|0))|0;
           $87 = $90;$i$01$us$i28 = 0;
           while(1) {
            $83 = (($ar$i) + ($i$01$us$i28<<2)|0);
            $84 = (($i$01$us$i28) + 1)|0;
            $85 = (($ar$i) + ($84<<2)|0);
            $86 = HEAP32[$85>>2]|0;
            _memcpy(($87|0),($86|0),($81|0))|0;
            $88 = (($87) + ($81)|0);
            HEAP32[$83>>2] = $88;
            $exitcond$i29 = ($84|0)==($i$0$lcssa$i23|0);
            if ($exitcond$i29) {
             break;
            } else {
             $87 = $86;$i$01$us$i28 = $84;
            }
           }
           $80 = ($$02$us$i30|0)==($81|0);
           if ($80) {
            break L38;
           }
           $82 = (($$02$us$i30) - ($81))|0;
           $$pre6$i26 = HEAP32[$79>>2]|0;
           $$02$us$i30 = $82;$91 = $$pre6$i26;
          }
         }
        }
       } else {
       }
      } while(0);
     } else {
      _trinkle($head$076,$width,$cmp,$16,$51,$pshift$077,0,$lp);
     }
     $92 = ($pshift$077|0)==(1);
     if ($92) {
      $93 = $51 << 1;
      $94 = $16 >>> 31;
      $95 = $94 | $93;
      $96 = $16 << 1;
      $105 = $96;$168 = $95;$pshift$1 = 0;
      break;
     } else {
      $97 = ($55>>>0)>(31);
      $98 = (($pshift$077) + -33)|0;
      $$ = $97 ? 0 : $16;
      $$66 = $97 ? $16 : $51;
      $$67 = $97 ? $98 : $55;
      $99 = $$66 << $$67;
      $100 = (32 - ($$67))|0;
      $101 = $$ >>> $100;
      $102 = $101 | $99;
      $103 = $$ << $$67;
      $105 = $103;$168 = $102;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $104 = $105 | 1;
   $106 = (($head$076) + ($width)|0);
   $107 = ($106>>>0)<($11>>>0);
   if ($107) {
    $16 = $104;$51 = $168;$head$076 = $106;$pshift$077 = $pshift$1;
   } else {
    $$lcssa70 = $168;$$lcssa71 = $104;$head$0$lcssa = $106;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa70 = 0;$$lcssa71 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa71,$$lcssa70,$pshift$0$lcssa,0,$lp);
 $108 = ($pshift$0$lcssa|0)==(1);
 $109 = ($$lcssa71|0)==(1);
 $or$cond72 = $109 & $108;
 $110 = ($$lcssa70|0)==(0);
 $or$cond6873 = $110 & $or$cond72;
 if ($or$cond6873) {
  STACKTOP = sp;return;
 } else {
  $113 = $$lcssa71;$122 = $$lcssa70;$head$174 = $head$0$lcssa;$pshift$275 = $pshift$0$lcssa;
 }
 while(1) {
  $111 = ($pshift$275|0)<(2);
  if (!($111)) {
   $136 = $122 << 2;
   $137 = $113 >>> 30;
   $138 = $137 | $136;
   $139 = (($pshift$275) + -2)|0;
   $140 = $113 << 1;
   $141 = $140 & 2147483646;
   $142 = $137 << 31;
   $143 = $141 | $142;
   $144 = $143 ^ 3;
   $145 = $138 >>> 1;
   $146 = (($lp) + ($139<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   $sum = (($147) + ($width))|0;
   $$sum2 = (0 - ($sum))|0;
   $148 = (($head$174) + ($$sum2)|0);
   $149 = (($pshift$275) + -1)|0;
   _trinkle($148,$width,$cmp,$144,$145,$149,1,$lp);
   $150 = $145 << 1;
   $151 = $137 & 1;
   $152 = $150 | $151;
   $153 = $144 << 1;
   $154 = $153 | 1;
   $155 = (($head$174) + ($10)|0);
   _trinkle($155,$width,$cmp,$154,$152,$139,1,$lp);
   $113 = $154;$122 = $152;$head$174 = $155;$pshift$275 = $139;
   continue;
  }
  $112 = (($113) + -1)|0;
  $114 = ($112|0)==(0);
  do {
   if ($114) {
    $135 = 32;
    label = 56;
   } else {
    $115 = $112 & 1;
    $116 = ($115|0)==(0);
    if ($116) {
     $$02$i$i = $112;$nTrailingZeros$03$i$i = 0;
     while(1) {
      $117 = (($nTrailingZeros$03$i$i) + 1)|0;
      $118 = $$02$i$i >>> 1;
      $119 = $118 & 1;
      $120 = ($119|0)==(0);
      if ($120) {
       $$02$i$i = $118;$nTrailingZeros$03$i$i = $117;
      } else {
       $$lcssa = $117;
       break;
      }
     }
     $121 = ($$lcssa|0)==(0);
     if ($121) {
      label = 51;
     } else {
      $132 = $$lcssa;
     }
    } else {
     label = 51;
    }
    if ((label|0) == 51) {
     label = 0;
     $123 = ($122|0)==(0);
     if ($123) {
      $135 = 64;
      label = 56;
      break;
     }
     $124 = $122 & 1;
     $125 = ($124|0)==(0);
     if ($125) {
      $$02$i3$i = $122;$nTrailingZeros$03$i2$i = 0;
     } else {
      $$0$i44 = 0;$157 = $113;$160 = $122;$164 = 0;
      break;
     }
     while(1) {
      $126 = (($nTrailingZeros$03$i2$i) + 1)|0;
      $127 = $$02$i3$i >>> 1;
      $128 = $127 & 1;
      $129 = ($128|0)==(0);
      if ($129) {
       $$02$i3$i = $127;$nTrailingZeros$03$i2$i = $126;
      } else {
       $$lcssa102 = $126;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
       break;
      }
     }
     $130 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
     $131 = ($$lcssa102|0)==(0);
     if ($131) {
      $$0$i44 = 0;$157 = $113;$160 = $122;$164 = 0;
      break;
     } else {
      $132 = $130;
     }
    }
    $133 = ($132>>>0)>(31);
    if ($133) {
     $135 = $132;
     label = 56;
    } else {
     $$0$i44 = $132;$157 = $113;$160 = $122;$164 = $132;
    }
   }
  } while(0);
  if ((label|0) == 56) {
   label = 0;
   $134 = (($135) + -32)|0;
   $$0$i44 = $134;$157 = $122;$160 = 0;$164 = $135;
  }
  $156 = $157 >>> $$0$i44;
  $158 = (32 - ($$0$i44))|0;
  $159 = $160 << $158;
  $161 = $159 | $156;
  $162 = $160 >>> $$0$i44;
  $163 = (($164) + ($pshift$275))|0;
  $$pre = (($head$174) + ($10)|0);
  $165 = ($163|0)==(1);
  $166 = ($161|0)==(1);
  $or$cond = $166 & $165;
  $167 = ($162|0)==(0);
  $or$cond68 = $167 & $or$cond;
  if ($or$cond68) {
   break;
  } else {
   $113 = $161;$122 = $162;$head$174 = $$pre;$pshift$275 = $163;
  }
 }
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01$be$i = 0, $$01162 = 0, $$01162$phi = 0, $$012$i = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02$us$i = 0, $$02$us$i10 = 0, $$02964 = 0, $$03$i = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa76 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre6$i = 0, $$pre6$i6 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i9 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa50 = 0, $i$01$us$i = 0, $i$01$us$i8 = 0, $i$01063 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $pp$val1666 = 0, $sum = 0, $sum$i = 0, $tmp$i5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0;
 $tmp$i5 = sp + 456|0;
 $ar$i = sp + 228|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)!=(1);
 $2 = ($pp$1$val|0)!=(0);
 $3 = $2 | $1;
 L1: do {
  if ($3) {
   $4 = (($lp) + ($pshift<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (0 - ($5))|0;
   $7 = (($head) + ($6)|0);
   $8 = (FUNCTION_TABLE_iii[$cmp & 1]($7,$head)|0);
   $9 = ($8|0)<(1);
   if ($9) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 18;
   } else {
    $$01162 = $head;$$02964 = $pshift;$$03865 = $trusty;$16 = $7;$33 = $pp$1$val;$i$01063 = 1;$pp$val1666 = $pp$val;
    while(1) {
     $10 = ($$03865|0)==(0);
     $11 = ($$02964|0)>(1);
     $or$cond = $10 & $11;
     if ($or$cond) {
      $12 = (($$01162) + ($0)|0);
      $13 = (($$02964) + -2)|0;
      $14 = (($lp) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      $17 = (FUNCTION_TABLE_iii[$cmp & 1]($12,$16)|0);
      $18 = ($17|0)>(-1);
      if ($18) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       break L1;
      }
      $sum = (($15) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $19 = (($$01162) + ($$sum)|0);
      $20 = (FUNCTION_TABLE_iii[$cmp & 1]($19,$16)|0);
      $21 = ($20|0)>(-1);
      if ($21) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       break L1;
      }
     }
     $22 = (($i$01063) + 1)|0;
     $23 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$23>>2] = $16;
     $24 = (($pp$val1666) + -1)|0;
     $25 = ($24|0)==(0);
     do {
      if ($25) {
       $46 = 32;
       label = 15;
      } else {
       $26 = $24 & 1;
       $27 = ($26|0)==(0);
       if ($27) {
        $$02$i$i = $24;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $28 = (($nTrailingZeros$03$i$i) + 1)|0;
         $29 = $$02$i$i >>> 1;
         $30 = $29 & 1;
         $31 = ($30|0)==(0);
         if ($31) {
          $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
         } else {
          $$lcssa = $28;
          break;
         }
        }
        $32 = ($$lcssa|0)==(0);
        if ($32) {
         label = 10;
        } else {
         $43 = $$lcssa;
        }
       } else {
        label = 10;
       }
       if ((label|0) == 10) {
        label = 0;
        $34 = ($33|0)==(0);
        if ($34) {
         $46 = 64;
         label = 15;
         break;
        }
        $35 = $33 & 1;
        $36 = ($35|0)==(0);
        if ($36) {
         $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$48 = $pp$val1666;$51 = $33;$55 = 0;
         break;
        }
        while(1) {
         $37 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $38 = $$02$i3$i >>> 1;
         $39 = $38 & 1;
         $40 = ($39|0)==(0);
         if ($40) {
          $$02$i3$i = $38;$nTrailingZeros$03$i2$i = $37;
         } else {
          $$lcssa76 = $37;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $41 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $42 = ($$lcssa76|0)==(0);
        if ($42) {
         $$0$i = 0;$48 = $pp$val1666;$51 = $33;$55 = 0;
         break;
        } else {
         $43 = $41;
        }
       }
       $44 = ($43>>>0)>(31);
       if ($44) {
        $46 = $43;
        label = 15;
       } else {
        $$0$i = $43;$48 = $pp$val1666;$51 = $33;$55 = $43;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $45 = (($46) + -32)|0;
      $$0$i = $45;$48 = $33;$51 = 0;$55 = $46;
     }
     $47 = $48 >>> $$0$i;
     $49 = (32 - ($$0$i))|0;
     $50 = $51 << $49;
     $52 = $50 | $47;
     $53 = $51 >>> $$0$i;
     $54 = (($55) + ($$02964))|0;
     $56 = ($52|0)!=(1);
     $57 = ($53|0)!=(0);
     $58 = $57 | $56;
     if (!($58)) {
      $$0$lcssa49 = $16;$$02$lcssa51 = $54;$i$0$lcssa50 = $22;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $59 = (($lp) + ($54<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (0 - ($60))|0;
     $62 = (($16) + ($61)|0);
     $63 = (FUNCTION_TABLE_iii[$cmp & 1]($62,$$pre)|0);
     $64 = ($63|0)<(1);
     if ($64) {
      $$0$lcssa = $16;$$02$lcssa = $54;$$03$lcssa = 0;$i$0$lcssa = $22;
      label = 18;
      break;
     } else {
      $$01162$phi = $16;$$02964 = $54;$$03865 = 0;$16 = $62;$33 = $53;$i$01063 = $22;$pp$val1666 = $52;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $65 = ($$03$lcssa|0)==(0);
  if ($65) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $66 = ($i$0$lcssa50|0)<(2);
 L30: do {
  if (!($66)) {
   $67 = (($ar) + ($i$0$lcssa50<<2)|0);
   HEAP32[$67>>2] = $tmp$i5;
   $68 = ($width|0)==(0);
   if (!($68)) {
    $$02$us$i10 = $width;$80 = $tmp$i5;
    while(1) {
     $78 = ($$02$us$i10>>>0)>(256);
     $70 = $78 ? 256 : $$02$us$i10;
     $79 = HEAP32[$ar>>2]|0;
     _memcpy(($80|0),($79|0),($70|0))|0;
     $76 = $79;$i$01$us$i8 = 0;
     while(1) {
      $72 = (($ar) + ($i$01$us$i8<<2)|0);
      $73 = (($i$01$us$i8) + 1)|0;
      $74 = (($ar) + ($73<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      _memcpy(($76|0),($75|0),($70|0))|0;
      $77 = (($76) + ($70)|0);
      HEAP32[$72>>2] = $77;
      $exitcond$i9 = ($73|0)==($i$0$lcssa50|0);
      if ($exitcond$i9) {
       break;
      } else {
       $76 = $75;$i$01$us$i8 = $73;
      }
     }
     $69 = ($$02$us$i10|0)==($70|0);
     if ($69) {
      break L30;
     }
     $71 = (($$02$us$i10) - ($70))|0;
     $$pre6$i6 = HEAP32[$67>>2]|0;
     $$02$us$i10 = $71;$80 = $$pre6$i6;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa49;
 $81 = ($$02$lcssa51|0)>(1);
 L39: do {
  if ($81) {
   $$012$i = $$02$lcssa51;$$03$i = $$0$lcssa49;$87 = $$0$lcssa49;$i$04$i = 1;
   while(1) {
    $82 = (($$03$i) + ($0)|0);
    $83 = (($$012$i) + -2)|0;
    $84 = (($lp) + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $sum$i = (($85) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $86 = (($$03$i) + ($$sum$i)|0);
    $88 = (FUNCTION_TABLE_iii[$cmp & 1]($87,$86)|0);
    $89 = ($88|0)>(-1);
    if ($89) {
     $90 = (FUNCTION_TABLE_iii[$cmp & 1]($87,$82)|0);
     $91 = ($90|0)>(-1);
     if ($91) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $92 = (FUNCTION_TABLE_iii[$cmp & 1]($86,$82)|0);
    $93 = ($92|0)>(-1);
    $94 = (($i$04$i) + 1)|0;
    $95 = (($ar$i) + ($i$04$i<<2)|0);
    if ($93) {
     HEAP32[$95>>2] = $86;
     $96 = (($$012$i) + -1)|0;
     $$0$be$i = $86;$$01$be$i = $96;
    } else {
     HEAP32[$95>>2] = $82;
     $$0$be$i = $82;$$01$be$i = $83;
    }
    $97 = ($$01$be$i|0)>(1);
    if (!($97)) {
     $i$0$lcssa$i = $94;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$87 = $$pre$i;$i$04$i = $94;
   }
   $98 = ($i$0$lcssa$i|0)<(2);
   if ($98) {
    $113 = $tmp$i5;
   } else {
    $99 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$99>>2] = $tmp$i5;
    $100 = ($width|0)==(0);
    if ($100) {
     $113 = $tmp$i5;
    } else {
     $$02$us$i = $width;$112 = $tmp$i5;
     while(1) {
      $110 = ($$02$us$i>>>0)>(256);
      $102 = $110 ? 256 : $$02$us$i;
      $111 = HEAP32[$ar$i>>2]|0;
      _memcpy(($112|0),($111|0),($102|0))|0;
      $108 = $111;$i$01$us$i = 0;
      while(1) {
       $104 = (($ar$i) + ($i$01$us$i<<2)|0);
       $105 = (($i$01$us$i) + 1)|0;
       $106 = (($ar$i) + ($105<<2)|0);
       $107 = HEAP32[$106>>2]|0;
       _memcpy(($108|0),($107|0),($102|0))|0;
       $109 = (($108) + ($102)|0);
       HEAP32[$104>>2] = $109;
       $exitcond$i = ($105|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $108 = $107;$i$01$us$i = $105;
       }
      }
      $101 = ($$02$us$i|0)==($102|0);
      if ($101) {
       $113 = $tmp$i5;
       break L39;
      }
      $103 = (($$02$us$i) - ($102))|0;
      $$pre6$i = HEAP32[$99>>2]|0;
      $$02$us$i = $103;$112 = $$pre6$i;
     }
    }
   }
  } else {
   $113 = $tmp$i5;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _exp2($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__x = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__x = sp;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(1083174911);
 do {
  if ($3) {
   $4 = ($2>>>0)>(1083179007);
   $5 = ($1|0)>(-1);
   $6 = ($0>>>0)>(4294967295);
   $7 = ($1|0)==(-1);
   $8 = $7 & $6;
   $9 = $5 | $8;
   $or$cond = $9 & $4;
   if ($or$cond) {
    $10 = $x * 8.9884656743115795E+307;
    $$0 = $10;
    STACKTOP = sp;return (+$$0);
   }
   $11 = ($2>>>0)>(2146435071);
   if ($11) {
    $12 = -1.0 / $x;
    $$0 = $12;
    STACKTOP = sp;return (+$$0);
   }
   $13 = ($1|0)<(0);
   if ($13) {
    $14 = !($x <= -1075.0);
    if ($14) {
     $17 = $x + -4503599627370496.0;
     $18 = $17 + 4503599627370496.0;
     $19 = $18 != $x;
     if (!($19)) {
      break;
     }
     $20 = -1.4012984643248171E-45 / $x;
     $21 = $20;
     HEAPF32[$__x>>2] = $21;
     break;
    } else {
     $15 = -1.4012984643248171E-45 / $x;
     $16 = $15;
     HEAPF32[$__x>>2] = $16;
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
   }
  } else {
   $22 = ($2>>>0)<(1016070144);
   if ($22) {
    $23 = $x + 1.0;
    $$0 = $23;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 $24 = $x + 26388279066624.0;
 HEAPF64[tempDoublePtr>>3] = $24;$25 = HEAP32[tempDoublePtr>>2]|0;
 $26 = HEAP32[tempDoublePtr+4>>2]|0;
 $27 = (($25) + 128)|0;
 $28 = $27 & -256;
 $29 = (($28|0) / 256)&-1;
 $30 = $24 + -26388279066624.0;
 $31 = $x - $30;
 $32 = $27 << 1;
 $33 = $32 & 510;
 $34 = (91712 + ($33<<3)|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $33 | 1;
 $37 = (91712 + ($36<<3)|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $31 - $38;
 $40 = $35 * $39;
 $41 = $39 * 0.0013333559164630223;
 $42 = $41 + 0.0096181298421260663;
 $43 = $39 * $42;
 $44 = $43 + 0.055504108664821403;
 $45 = $39 * $44;
 $46 = $45 + 0.2402265069591;
 $47 = $39 * $46;
 $48 = $47 + 0.69314718055994529;
 $49 = $40 * $48;
 $50 = $35 + $49;
 $51 = (+_scalbn($50,$29));
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _log10($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $8 = 0.0, $9 = 0.0, $hx$0 = 0, $k$0 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = ($1>>>0)<(1048576);
 $3 = ($1|0)<(0);
 $or$cond = $3 | $2;
 do {
  if ($or$cond) {
   $4 = $1 & 2147483647;
   $5 = ($0|0)==(0);
   $6 = ($4|0)==(0);
   $7 = $5 & $6;
   if ($7) {
    $8 = $x * $x;
    $9 = -1.0 / $8;
    $$0 = $9;
    return (+$$0);
   }
   if (!($3)) {
    $12 = $x * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $12;$13 = HEAP32[tempDoublePtr>>2]|0;
    $14 = HEAP32[tempDoublePtr+4>>2]|0;
    $26 = $13;$70 = $14;$hx$0 = $14;$k$0 = -1077;
    break;
   }
   $10 = $x - $x;
   $11 = $10 / 0.0;
   $$0 = $11;
   return (+$$0);
  } else {
   $15 = ($1>>>0)>(2146435071);
   if ($15) {
    $$0 = $x;
    return (+$$0);
   }
   $16 = ($1|0)==(1072693248);
   $17 = ($0|0)==(0);
   $18 = (0)==(0);
   $19 = $17 & $18;
   $or$cond4 = $19 & $16;
   if ($or$cond4) {
    $$0 = 0.0;
    return (+$$0);
   } else {
    $26 = $0;$70 = $1;$hx$0 = $1;$k$0 = -1023;
   }
  }
 } while(0);
 $20 = (($hx$0) + 614242)|0;
 $21 = $20 >>> 20;
 $22 = (($k$0) + ($21))|0;
 $23 = $20 & 1048575;
 $24 = (($23) + 1072079006)|0;
 HEAP32[tempDoublePtr>>2] = $26;HEAP32[tempDoublePtr+4>>2] = $24;$25 = +HEAPF64[tempDoublePtr>>3];
 $27 = $25 + -1.0;
 $28 = $27 * 0.5;
 $29 = $27 * $28;
 $30 = $27 + 2.0;
 $31 = $27 / $30;
 $32 = $31 * $31;
 $33 = $32 * $32;
 $34 = $33 * 0.15313837699209373;
 $35 = $34 + 0.22222198432149784;
 $36 = $33 * $35;
 $37 = $36 + 0.39999999999409419;
 $38 = $33 * $37;
 $39 = $33 * 0.14798198605116586;
 $40 = $39 + 0.1818357216161805;
 $41 = $33 * $40;
 $42 = $41 + 0.28571428743662391;
 $43 = $33 * $42;
 $44 = $43 + 0.66666666666667351;
 $45 = $32 * $44;
 $46 = $38 + $45;
 $47 = $27 - $29;
 HEAPF64[tempDoublePtr>>3] = $47;$48 = HEAP32[tempDoublePtr>>2]|0;
 $49 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $49;$50 = +HEAPF64[tempDoublePtr>>3];
 $51 = $27 - $50;
 $52 = $51 - $29;
 $53 = $29 + $46;
 $54 = $31 * $53;
 $55 = $54 + $52;
 $56 = $50 * 0.43429448187816888;
 $57 = (+($22|0));
 $58 = $57 * 0.30102999566361177;
 $59 = $57 * 3.6942390771589308E-13;
 $60 = $50 + $55;
 $61 = $60 * 2.5082946711645275E-11;
 $62 = $59 + $61;
 $63 = $55 * 0.43429448187816888;
 $64 = $63 + $62;
 $65 = $58 + $56;
 $66 = $58 - $65;
 $67 = $56 + $66;
 $68 = $67 + $64;
 $69 = $65 + $68;
 $$0 = $69;
 return (+$$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = ((($s)) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = ((($s)) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = ((($s)) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = ((($f)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 3]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = ((($f)) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa10 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = ((($f)) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 3]($f,$s,$i$0$lcssa10)|0);
   $26 = ($25>>>0)<($i$0$lcssa10>>>0);
   if ($26) {
    $$0 = $i$0$lcssa10;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa10)|0);
    $28 = (($l) - ($i$0$lcssa10))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($f)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = ((($f)) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = ((($f)) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = ((($f)) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = ((($internal_buf)) + 80|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = ((($f)) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 3]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=95808; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = ((($f)) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = ((($f)) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = ((($f)) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = ((($f)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($f)) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i51 = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i61 = 0, $$0$lcssa$i63$i = 0, $$0$lcssa$i68 = 0, $$0$lcssa$i69$i = 0;
 var $$0$lcssa$i75 = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i85 = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i37$i = 0, $$01$i44 = 0, $$01$i44$i = 0, $$01$i54$i = 0, $$01$i59 = 0, $$01$i61$i = 0, $$01$i66 = 0, $$01$i67$i = 0, $$01$i73 = 0, $$01$i74$i = 0;
 var $$01$i83 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i48 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0, $$12$i119$i = 0;
 var $$12$i134$i = 0, $$12$i134$i$lcssa = 0, $$12$i87$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$24 = 0, $$25 = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412184$i = 0;
 var $$5196$i = 0, $$92 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us303$i = 0, $$a$3$us304$i = 0, $$a$3305$i = 0, $$a$3306$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa106 = 0, $$lcssa275$i = 0, $$lcssa450 = 0, $$lcssa451 = 0, $$lcssa455 = 0, $$lcssa457 = 0, $$lcssa458 = 0, $$lcssa459 = 0, $$lcssa460 = 0, $$lcssa461 = 0;
 var $$lcssa463 = 0, $$lcssa464 = 0, $$lcssa470 = 0, $$lcssa474 = 0, $$lcssa476 = 0, $$lcssa479 = 0, $$lcssa480 = 0, $$lcssa483 = 0.0, $$lcssa484 = 0, $$lcssa487 = 0, $$lcssa491 = 0, $$mask$i = 0, $$mask$i38 = 0, $$mask1$i = 0, $$mask1$i37 = 0, $$neg151$i = 0, $$neg152$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0;
 var $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi302$iZ2D = 0, $$pre270 = 0, $$pre300$i = 0, $$pre301$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0;
 var $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0;
 var $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0;
 var $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0;
 var $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0.0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0.0, $1162 = 0, $1163 = 0;
 var $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $1169$phi = 0, $117 = 0, $1170 = 0, $1170$phi = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0;
 var $472 = 0.0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0.0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0.0, $64 = 0, $640 = 0.0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0.0, $781 = 0.0, $782 = 0, $783 = 0.0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1253$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3240$i = 0, $a$3240$us$i = 0, $a$5$lcssa$i = 0, $a$5215$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0;
 var $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0;
 var $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0;
 var $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0246$i = 0, $carry3$0234$i = 0, $carry3$0234$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0245$i = 0, $d$0247$i = 0, $d$1233$i = 0, $d$1233$us$i = 0, $d$2$lcssa$i = 0, $d$2214$i = 0;
 var $d$3$i = 0, $d$4191$i = 0, $d$5183$i = 0, $d$6195$i = 0, $e$0229$i = 0, $e$1$i = 0, $e$2210$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0;
 var $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded112 = 0, $expanded113 = 0, $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0;
 var $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded140 = 0, $expanded141 = 0, $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0;
 var $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded168 = 0, $expanded169 = 0, $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0, $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0;
 var $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded196 = 0, $expanded197 = 0, $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0;
 var $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0;
 var $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded98 = 0, $expanded99 = 0, $fl$0110 = 0, $fl$0170 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa273 = 0, $i$0175 = 0, $i$0228$i = 0, $i$03$i = 0, $i$03$i30 = 0;
 var $i$1$lcssa$i = 0, $i$1186 = 0, $i$1222$i = 0, $i$2162 = 0, $i$2162$lcssa = 0, $i$2209$i = 0, $i$3160 = 0, $i$3205$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i32 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i28 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i31 = 0, $isdigittmp1$i = 0;
 var $isdigittmp1$i27 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i29 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0221$i = 0, $j$0223$i = 0, $j$1206$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1174 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0;
 var $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i52$i = 0, $or$cond$i57 = 0, $or$cond$i59$i = 0, $or$cond$i64 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i79 = 0, $or$cond$i81 = 0, $or$cond$i93$i = 0, $or$cond15 = 0;
 var $or$cond19 = 0, $or$cond22 = 0, $or$cond29$i = 0, $or$cond332 = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4272 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0;
 var $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1179$i = 0, $round$0178$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0188$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0180$i = 0, $s9$0$i = 0;
 var $s9$1192$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa456 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge8169 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0;
 var $ws$0176 = 0, $ws$1187 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0163 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1252$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3239$i = 0, $z$3239$us$i = 0;
 var $z$4$i = 0, $z$4$us$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0;
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = ((($buf)) + 40|0);
 $3 = $2;
 $4 = ((($buf)) + 39|0);
 $5 = ((($wc)) + 4|0);
 $6 = $wc;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $1169 = 0;$1170 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 344;
   break;
  } else {
   $1171 = $22;$26 = $23;
  }
  while(1) {
   if ((($1171<<24>>24) == 0)) {
    $$lcssa106 = $26;$z$0$lcssa = $26;
    break;
   } else if ((($1171<<24>>24) == 37)) {
    $28 = $26;$z$0163 = $26;
    label = 9;
    break;
   }
   $25 = ((($26)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1171 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = ((($28)) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa106 = $28;$z$0$lcssa = $z$0163;
      break L12;
     }
     $31 = ((($z$0163)) + 1|0);
     $32 = ((($28)) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$0163 = $31;
      label = 9;
     } else {
      $$lcssa106 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$1170$phi = $1170;$1169$phi = $1169;$23 = $$lcssa106;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;$1170 = $1170$phi;$1169 = $1169$phi;
   continue;
  }
  $39 = ((($$lcssa106)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($$lcssa106)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($$lcssa106)) + 3|0);
   $$92 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre270 = HEAP8[$$92>>0]|0;
   $47 = $$pre270;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$92;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L24: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0170 = 0;$storemerge8169 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$0110 = $fl$0170;$storemerge8108 = $storemerge8169;
      break L24;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0170;
     $60 = ((($storemerge8169)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0170 = $59;$storemerge8169 = $60;
     } else {
      $65 = $61;$fl$0110 = $59;$storemerge8108 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$0110 = 0;$storemerge8108 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge8108)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge8108)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge8108)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      label = 363;
      break L1;
     }
     if (!($1)) {
      $105 = $67;$fl$1 = $fl$0110;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded64 = $87;
     $expanded = (($expanded64) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded68 = $89;
     $expanded67 = (($expanded68) - 1)|0;
     $expanded66 = $expanded67 ^ -1;
     $90 = $88 & $expanded66;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$0110 | 8192;
     $95 = (0 - ($w$0))|0;
     $105 = $storemerge13;$fl$1 = $94;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $105 = $storemerge13;$fl$1 = $fl$0110;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge8108;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa450 = $98;$$lcssa451 = $99;
       break;
      }
     }
     $103 = ($$lcssa450|0)<(0);
     if ($103) {
      $$0 = -1;
      label = 363;
      break L1;
     } else {
      $105 = $$lcssa451;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = $$lcssa450;
     }
    } else {
     $105 = $storemerge8108;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$105>>0]|0;
  $106 = ($104<<24>>24)==(46);
  L45: do {
   if ($106) {
    $107 = ((($105)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i27 = (($136) + -48)|0;
     $isdigit2$i28 = ($isdigittmp1$i27>>>0)<(10);
     if ($isdigit2$i28) {
      $140 = $107;$i$03$i30 = 0;$isdigittmp4$i29 = $isdigittmp1$i27;
     } else {
      $1172 = $107;$p$0 = 0;
      break;
     }
     while(1) {
      $137 = ($i$03$i30*10)|0;
      $138 = (($137) + ($isdigittmp4$i29))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i31 = (($142) + -48)|0;
      $isdigit$i32 = ($isdigittmp$i31>>>0)<(10);
      if ($isdigit$i32) {
       $140 = $139;$i$03$i30 = $138;$isdigittmp4$i29 = $isdigittmp$i31;
      } else {
       $1172 = $139;$p$0 = $138;
       break L45;
      }
     }
    }
    $110 = ((($105)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($105)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($105)) + 4|0);
      $1172 = $127;$p$0 = $123;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     label = 363;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded71 = $130;
     $expanded70 = (($expanded71) - 1)|0;
     $131 = (($129) + ($expanded70))|0;
     $132 = ((0) + 4|0);
     $expanded75 = $132;
     $expanded74 = (($expanded75) - 1)|0;
     $expanded73 = $expanded74 ^ -1;
     $133 = $131 & $expanded73;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1172 = $110;$p$0 = $135;
    } else {
     $1172 = $110;$p$0 = 0;
    }
   } else {
    $1172 = $105;$p$0 = -1;
   }
  } while(0);
  $144 = $1172;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$144>>0]|0;
   $145 = $143 << 24 >> 24;
   $146 = (($145) + -65)|0;
   $147 = ($146>>>0)>(57);
   if ($147) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   $148 = ((($144)) + 1|0);
   $149 = ((95920 + (($st$0*58)|0)|0) + ($146)|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = (($151) + -1)|0;
   $153 = ($152>>>0)<(8);
   if ($153) {
    $144 = $148;$st$0 = $151;
   } else {
    $$lcssa455 = $144;$$lcssa457 = $148;$$lcssa458 = $150;$$lcssa459 = $151;$st$0$lcssa456 = $st$0;
    break;
   }
  }
  $154 = ($$lcssa458<<24>>24)==(0);
  if ($154) {
   $$0 = -1;
   label = 363;
   break;
  }
  $155 = ($$lcssa458<<24>>24)==(19);
  $156 = ($argpos$0|0)>(-1);
  L64: do {
   if ($155) {
    if ($156) {
     $$0 = -1;
     label = 363;
     break L1;
    } else {
     $1173 = $1169;$1174 = $1170;
     label = 62;
    }
   } else {
    if ($156) {
     $157 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$157>>2] = $$lcssa459;
     $158 = (($nl_arg) + ($argpos$0<<3)|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ((($158)) + 4|0);
     $161 = HEAP32[$160>>2]|0;
     $1173 = $161;$1174 = $159;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 363;
     break L1;
    }
    $162 = ($$lcssa458&255)>(20);
    if ($162) {
     $264 = $1170;$291 = $1169;
    } else {
     do {
      switch ($$lcssa459|0) {
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $218 = $arglist_current23;
       $219 = ((0) + 4|0);
       $expanded120 = $219;
       $expanded119 = (($expanded120) - 1)|0;
       $220 = (($218) + ($expanded119))|0;
       $221 = ((0) + 4|0);
       $expanded124 = $221;
       $expanded123 = (($expanded124) - 1)|0;
       $expanded122 = $expanded123 ^ -1;
       $222 = $220 & $expanded122;
       $223 = $222;
       $224 = HEAP32[$223>>2]|0;
       $arglist_next24 = ((($223)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $225 = $224&255;
       $226 = $225 << 24 >> 24;
       $227 = ($226|0)<(0);
       $228 = $227 << 31 >> 31;
       $sext = $224 << 24;
       $229 = $sext >> 24;
       $264 = $229;$291 = $228;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $187 = $arglist_current14;
       $188 = ((0) + 8|0);
       $expanded99 = $188;
       $expanded98 = (($expanded99) - 1)|0;
       $189 = (($187) + ($expanded98))|0;
       $190 = ((0) + 8|0);
       $expanded103 = $190;
       $expanded102 = (($expanded103) - 1)|0;
       $expanded101 = $expanded102 ^ -1;
       $191 = $189 & $expanded101;
       $192 = $191;
       $193 = $192;
       $194 = $193;
       $195 = HEAP32[$194>>2]|0;
       $196 = (($193) + 4)|0;
       $197 = $196;
       $198 = HEAP32[$197>>2]|0;
       $arglist_next15 = ((($192)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $264 = $195;$291 = $198;
       break L64;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       $237 = $arglist_current29;
       $238 = ((0) + 8|0);
       $expanded134 = $238;
       $expanded133 = (($expanded134) - 1)|0;
       $239 = (($237) + ($expanded133))|0;
       $240 = ((0) + 8|0);
       $expanded138 = $240;
       $expanded137 = (($expanded138) - 1)|0;
       $expanded136 = $expanded137 ^ -1;
       $241 = $239 & $expanded136;
       $242 = $241;
       $243 = +HEAPF64[$242>>3];
       $arglist_next30 = ((($242)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $243;$244 = HEAP32[tempDoublePtr>>2]|0;
       $245 = HEAP32[tempDoublePtr+4>>2]|0;
       $264 = $244;$291 = $245;
       break L64;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $180 = $arglist_current11;
       $181 = ((0) + 4|0);
       $expanded92 = $181;
       $expanded91 = (($expanded92) - 1)|0;
       $182 = (($180) + ($expanded91))|0;
       $183 = ((0) + 4|0);
       $expanded96 = $183;
       $expanded95 = (($expanded96) - 1)|0;
       $expanded94 = $expanded95 ^ -1;
       $184 = $182 & $expanded94;
       $185 = $184;
       $186 = HEAP32[$185>>2]|0;
       $arglist_next12 = ((($185)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $264 = $186;$291 = 0;
       break L64;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $171 = $arglist_current8;
       $172 = ((0) + 4|0);
       $expanded85 = $172;
       $expanded84 = (($expanded85) - 1)|0;
       $173 = (($171) + ($expanded84))|0;
       $174 = ((0) + 4|0);
       $expanded89 = $174;
       $expanded88 = (($expanded89) - 1)|0;
       $expanded87 = $expanded88 ^ -1;
       $175 = $173 & $expanded87;
       $176 = $175;
       $177 = HEAP32[$176>>2]|0;
       $arglist_next9 = ((($176)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $178 = ($177|0)<(0);
       $179 = $178 << 31 >> 31;
       $264 = $177;$291 = $179;
       break L64;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $163 = $arglist_current5;
       $164 = ((0) + 4|0);
       $expanded78 = $164;
       $expanded77 = (($expanded78) - 1)|0;
       $165 = (($163) + ($expanded77))|0;
       $166 = ((0) + 4|0);
       $expanded82 = $166;
       $expanded81 = (($expanded82) - 1)|0;
       $expanded80 = $expanded81 ^ -1;
       $167 = $165 & $expanded80;
       $168 = $167;
       $169 = HEAP32[$168>>2]|0;
       $arglist_next6 = ((($168)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $170 = $169;
       $264 = $170;$291 = $1169;
       break L64;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $199 = $arglist_current17;
       $200 = ((0) + 4|0);
       $expanded106 = $200;
       $expanded105 = (($expanded106) - 1)|0;
       $201 = (($199) + ($expanded105))|0;
       $202 = ((0) + 4|0);
       $expanded110 = $202;
       $expanded109 = (($expanded110) - 1)|0;
       $expanded108 = $expanded109 ^ -1;
       $203 = $201 & $expanded108;
       $204 = $203;
       $205 = HEAP32[$204>>2]|0;
       $arglist_next18 = ((($204)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $206 = $205&65535;
       $207 = $206 << 16 >> 16;
       $208 = ($207|0)<(0);
       $209 = $208 << 31 >> 31;
       $sext93 = $205 << 16;
       $210 = $sext93 >> 16;
       $264 = $210;$291 = $209;
       break L64;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $230 = $arglist_current26;
       $231 = ((0) + 4|0);
       $expanded127 = $231;
       $expanded126 = (($expanded127) - 1)|0;
       $232 = (($230) + ($expanded126))|0;
       $233 = ((0) + 4|0);
       $expanded131 = $233;
       $expanded130 = (($expanded131) - 1)|0;
       $expanded129 = $expanded130 ^ -1;
       $234 = $232 & $expanded129;
       $235 = $234;
       $236 = HEAP32[$235>>2]|0;
       $arglist_next27 = ((($235)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i38 = $236 & 255;
       $264 = $$mask$i38;$291 = 0;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       $246 = $arglist_current32;
       $247 = ((0) + 8|0);
       $expanded141 = $247;
       $expanded140 = (($expanded141) - 1)|0;
       $248 = (($246) + ($expanded140))|0;
       $249 = ((0) + 8|0);
       $expanded145 = $249;
       $expanded144 = (($expanded145) - 1)|0;
       $expanded143 = $expanded144 ^ -1;
       $250 = $248 & $expanded143;
       $251 = $250;
       $252 = +HEAPF64[$251>>3];
       $arglist_next33 = ((($251)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $252;$253 = HEAP32[tempDoublePtr>>2]|0;
       $254 = HEAP32[tempDoublePtr+4>>2]|0;
       $264 = $253;$291 = $254;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $211 = $arglist_current20;
       $212 = ((0) + 4|0);
       $expanded113 = $212;
       $expanded112 = (($expanded113) - 1)|0;
       $213 = (($211) + ($expanded112))|0;
       $214 = ((0) + 4|0);
       $expanded117 = $214;
       $expanded116 = (($expanded117) - 1)|0;
       $expanded115 = $expanded116 ^ -1;
       $215 = $213 & $expanded115;
       $216 = $215;
       $217 = HEAP32[$216>>2]|0;
       $arglist_next21 = ((($216)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i37 = $217 & 65535;
       $264 = $$mask1$i37;$291 = 0;
       break L64;
       break;
      }
      default: {
       $264 = $1170;$291 = $1169;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $264 = $1174;$291 = $1173;
   } else {
    $1169 = $1173;$1170 = $1174;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $255 = HEAP8[$$lcssa455>>0]|0;
  $256 = $255 << 24 >> 24;
  $257 = ($st$0$lcssa456|0)!=(0);
  $258 = $256 & 15;
  $259 = ($258|0)==(3);
  $or$cond15 = $257 & $259;
  $260 = $256 & -33;
  $t$0 = $or$cond15 ? $260 : $256;
  $261 = $fl$1 & 8192;
  $262 = ($261|0)==(0);
  $263 = $fl$1 & -65537;
  $fl$1$ = $262 ? $fl$1 : $263;
  L86: do {
   switch ($t$0|0) {
   case 117:  {
    $336 = $291;$338 = $264;$pl$0 = 0;$prefix$0 = 96400;
    label = 84;
    break;
   }
   case 111:  {
    $312 = ($264|0)==(0);
    $313 = ($291|0)==(0);
    $314 = $312 & $313;
    if ($314) {
     $$0$lcssa$i51 = $2;
    } else {
     $$03$i48 = $2;$316 = $264;$320 = $291;
     while(1) {
      $315 = $316 & 7;
      $317 = $315 | 48;
      $318 = $317&255;
      $319 = ((($$03$i48)) + -1|0);
      HEAP8[$319>>0] = $318;
      $321 = (_bitshift64Lshr(($316|0),($320|0),3)|0);
      $322 = tempRet0;
      $323 = ($321|0)==(0);
      $324 = ($322|0)==(0);
      $325 = $323 & $324;
      if ($325) {
       $$0$lcssa$i51 = $319;
       break;
      } else {
       $$03$i48 = $319;$316 = $321;$320 = $322;
      }
     }
    }
    $326 = $fl$1$ & 8;
    $327 = ($326|0)==(0);
    $or$cond19 = $327 | $314;
    $$24 = $or$cond19 ? 96400 : (96405);
    $328 = $or$cond19&1;
    $$25 = $328 ^ 1;
    $366 = $264;$368 = $291;$a$0 = $$0$lcssa$i51;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$25;$prefix$1 = $$24;
    label = 89;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $264;
    HEAP32[$5>>2] = 0;
    $1179 = $wc;$1180 = $6;$p$4272 = -1;
    label = 97;
    break;
   }
   case 83:  {
    $391 = $264;
    $392 = ($p$0|0)==(0);
    if ($392) {
     $1181 = $264;$1182 = $391;$i$0$lcssa273 = 0;
     label = 102;
    } else {
     $1179 = $391;$1180 = $264;$p$4272 = $p$0;
     label = 97;
    }
    break;
   }
   case 110:  {
    switch ($st$0$lcssa456|0) {
    case 7:  {
     $279 = ($cnt$1|0)<(0);
     $280 = $279 << 31 >> 31;
     $281 = $264;
     $282 = $281;
     $283 = $282;
     HEAP32[$283>>2] = $cnt$1;
     $284 = (($282) + 4)|0;
     $285 = $284;
     HEAP32[$285>>2] = $280;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $265 = $264;
     HEAP32[$265>>2] = $cnt$1;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $266 = $264;
     HEAP32[$266>>2] = $cnt$1;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $267 = ($cnt$1|0)<(0);
     $268 = $267 << 31 >> 31;
     $269 = $264;
     $270 = $269;
     $271 = $270;
     HEAP32[$271>>2] = $cnt$1;
     $272 = (($270) + 4)|0;
     $273 = $272;
     HEAP32[$273>>2] = $268;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $274 = $cnt$1&65535;
     $275 = $264;
     HEAP16[$275>>1] = $274;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $276 = $cnt$1&255;
     $277 = $264;
     HEAP8[$277>>0] = $276;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $278 = $264;
     HEAP32[$278>>2] = $cnt$1;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $264;HEAP32[tempDoublePtr+4>>2] = $291;$430 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $431 = ($291|0)<(0);
    if ($431) {
     $432 = -$430;
     $$07$i = $432;$pl$0$i = 1;$prefix$0$i = 96424;
    } else {
     $433 = $fl$1$ & 2048;
     $434 = ($433|0)==(0);
     if ($434) {
      $435 = $fl$1$ & 1;
      $436 = ($435|0)==(0);
      $$$i = $436 ? (96425) : (96430);
      $$07$i = $430;$pl$0$i = $435;$prefix$0$i = $$$i;
     } else {
      $$07$i = $430;$pl$0$i = 1;$prefix$0$i = (96427);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$437 = HEAP32[tempDoublePtr>>2]|0;
    $438 = HEAP32[tempDoublePtr+4>>2]|0;
    $439 = $438 & 2146435072;
    $440 = ($439>>>0)<(2146435072);
    $441 = (0)<(0);
    $442 = ($439|0)==(2146435072);
    $443 = $442 & $441;
    $444 = $440 | $443;
    do {
     if ($444) {
      $471 = (+_frexpl($$07$i,$e2$i));
      $472 = $471 * 2.0;
      $473 = $472 != 0.0;
      if ($473) {
       $474 = HEAP32[$e2$i>>2]|0;
       $475 = (($474) + -1)|0;
       HEAP32[$e2$i>>2] = $475;
      }
      $476 = $t$0 | 32;
      $477 = ($476|0)==(97);
      if ($477) {
       $478 = $t$0 & 32;
       $479 = ($478|0)==(0);
       $480 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $479 ? $prefix$0$i : $480;
       $481 = $pl$0$i | 2;
       $482 = ($p$0>>>0)>(11);
       $483 = (12 - ($p$0))|0;
       $484 = ($483|0)==(0);
       $485 = $482 | $484;
       do {
        if ($485) {
         $$1$i = $472;
        } else {
         $re$1179$i = $483;$round$0178$i = 8.0;
         while(1) {
          $486 = (($re$1179$i) + -1)|0;
          $487 = $round$0178$i * 16.0;
          $488 = ($486|0)==(0);
          if ($488) {
           $$lcssa483 = $487;
           break;
          } else {
           $re$1179$i = $486;$round$0178$i = $487;
          }
         }
         $489 = HEAP8[$prefix$0$$i>>0]|0;
         $490 = ($489<<24>>24)==(45);
         if ($490) {
          $491 = -$472;
          $492 = $491 - $$lcssa483;
          $493 = $$lcssa483 + $492;
          $494 = -$493;
          $$1$i = $494;
          break;
         } else {
          $495 = $472 + $$lcssa483;
          $496 = $495 - $$lcssa483;
          $$1$i = $496;
          break;
         }
        }
       } while(0);
       $497 = HEAP32[$e2$i>>2]|0;
       $498 = ($497|0)<(0);
       $499 = (0 - ($497))|0;
       $500 = $498 ? $499 : $497;
       $501 = ($500|0)<(0);
       if ($501) {
        $502 = ($500|0)<(0);
        $503 = $502 << 31 >> 31;
        $$05$i$i = $7;$504 = $500;$505 = $503;
        while(1) {
         $506 = (___uremdi3(($504|0),($505|0),10,0)|0);
         $507 = tempRet0;
         $508 = $506 | 48;
         $509 = $508&255;
         $510 = ((($$05$i$i)) + -1|0);
         HEAP8[$510>>0] = $509;
         $511 = (___udivdi3(($504|0),($505|0),10,0)|0);
         $512 = tempRet0;
         $513 = ($505>>>0)>(9);
         $514 = ($504>>>0)>(4294967295);
         $515 = ($505|0)==(9);
         $516 = $515 & $514;
         $517 = $513 | $516;
         if ($517) {
          $$05$i$i = $510;$504 = $511;$505 = $512;
         } else {
          $$lcssa484 = $510;$1183 = $511;$1184 = $512;
          break;
         }
        }
        $$0$lcssa$i48$i = $$lcssa484;$$01$lcssa$off0$i$i = $1183;
       } else {
        $$0$lcssa$i48$i = $7;$$01$lcssa$off0$i$i = $500;
       }
       $518 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($518) {
        $$1$lcssa$i$i = $$0$lcssa$i48$i;
       } else {
        $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $519 = (($y$03$i$i>>>0) % 10)&-1;
         $520 = $519 | 48;
         $521 = $520&255;
         $522 = ((($$12$i$i)) + -1|0);
         HEAP8[$522>>0] = $521;
         $523 = (($y$03$i$i>>>0) / 10)&-1;
         $524 = ($y$03$i$i>>>0)<(10);
         if ($524) {
          $$1$lcssa$i$i = $522;
          break;
         } else {
          $$12$i$i = $522;$y$03$i$i = $523;
         }
        }
       }
       $525 = ($$1$lcssa$i$i|0)==($7|0);
       if ($525) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $526 = HEAP32[$e2$i>>2]|0;
       $527 = $526 >> 31;
       $528 = $527 & 2;
       $529 = (($528) + 43)|0;
       $530 = $529&255;
       $531 = ((($estr$0$i)) + -1|0);
       HEAP8[$531>>0] = $530;
       $532 = (($t$0) + 15)|0;
       $533 = $532&255;
       $534 = ((($estr$0$i)) + -2|0);
       HEAP8[$534>>0] = $533;
       $535 = $fl$1$ & 8;
       $536 = ($535|0)==(0);
       if ($536) {
        $notrhs$i = ($p$0|0)<(1);
        if ($notrhs$i) {
         $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
         while(1) {
          $537 = (~~(($$2$us$us$i)));
          $538 = (96384 + ($537)|0);
          $539 = HEAP8[$538>>0]|0;
          $540 = $539&255;
          $541 = $540 | $478;
          $542 = $541&255;
          $543 = ((($s$0$us$us$i)) + 1|0);
          HEAP8[$s$0$us$us$i>>0] = $542;
          $544 = (+($537|0));
          $545 = $$2$us$us$i - $544;
          $546 = $545 * 16.0;
          $547 = $543;
          $548 = (($547) - ($0))|0;
          $549 = ($548|0)!=(1);
          $notlhs$us$us$i = $546 == 0.0;
          $or$cond$i79 = $549 | $notlhs$us$us$i;
          if ($or$cond$i79) {
           $s$1$us$us$i = $543;
          } else {
           $550 = ((($s$0$us$us$i)) + 2|0);
           HEAP8[$543>>0] = 46;
           $s$1$us$us$i = $550;
          }
          $551 = $546 != 0.0;
          if ($551) {
           $$2$us$us$i = $546;$s$0$us$us$i = $s$1$us$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$us$i;
           break;
          }
         }
        } else {
         $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
         while(1) {
          $552 = (~~(($$2$us$i)));
          $553 = (96384 + ($552)|0);
          $554 = HEAP8[$553>>0]|0;
          $555 = $554&255;
          $556 = $555 | $478;
          $557 = $556&255;
          $558 = ((($s$0$us$i)) + 1|0);
          HEAP8[$s$0$us$i>>0] = $557;
          $559 = (+($552|0));
          $560 = $$2$us$i - $559;
          $561 = $560 * 16.0;
          $562 = $558;
          $563 = (($562) - ($0))|0;
          $564 = ($563|0)==(1);
          if ($564) {
           $565 = ((($s$0$us$i)) + 2|0);
           HEAP8[$558>>0] = 46;
           $s$1$us$i = $565;
          } else {
           $s$1$us$i = $558;
          }
          $566 = $561 != 0.0;
          if ($566) {
           $$2$us$i = $561;$s$0$us$i = $s$1$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$i;
           break;
          }
         }
        }
       } else {
        $$2$i = $$1$i;$s$0$i = $buf$i;
        while(1) {
         $567 = (~~(($$2$i)));
         $568 = (96384 + ($567)|0);
         $569 = HEAP8[$568>>0]|0;
         $570 = $569&255;
         $571 = $570 | $478;
         $572 = $571&255;
         $573 = ((($s$0$i)) + 1|0);
         HEAP8[$s$0$i>>0] = $572;
         $574 = (+($567|0));
         $575 = $$2$i - $574;
         $576 = $575 * 16.0;
         $577 = $573;
         $578 = (($577) - ($0))|0;
         $579 = ($578|0)==(1);
         if ($579) {
          $580 = ((($s$0$i)) + 2|0);
          HEAP8[$573>>0] = 46;
          $s$1$i = $580;
         } else {
          $s$1$i = $573;
         }
         $581 = $576 != 0.0;
         if ($581) {
          $$2$i = $576;$s$0$i = $s$1$i;
         } else {
          $s$1$lcssa$i = $s$1$i;
          break;
         }
        }
       }
       $582 = ($p$0|0)!=(0);
       $$pre300$i = $s$1$lcssa$i;
       $583 = (($11) + ($$pre300$i))|0;
       $584 = ($583|0)<($p$0|0);
       $or$cond332 = $582 & $584;
       $585 = $534;
       $586 = (($12) + ($p$0))|0;
       $587 = (($586) - ($585))|0;
       $588 = $534;
       $589 = (($10) - ($588))|0;
       $590 = (($589) + ($$pre300$i))|0;
       $l$0$i = $or$cond332 ? $587 : $590;
       $591 = (($l$0$i) + ($481))|0;
       $592 = $fl$1$ & 73728;
       $593 = ($592|0)==(0);
       $594 = ($w$1|0)>($591|0);
       $or$cond$i52$i = $593 & $594;
       if ($or$cond$i52$i) {
        $595 = (($w$1) - ($591))|0;
        $596 = ($595>>>0)>(256);
        $597 = $596 ? 256 : $595;
        _memset(($pad$i|0),32,($597|0))|0;
        $598 = ($595>>>0)>(255);
        if ($598) {
         $$01$i54$i = $595;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $599 = (($$01$i54$i) + -256)|0;
          $600 = ($599>>>0)>(255);
          if ($600) {
           $$01$i54$i = $599;
          } else {
           break;
          }
         }
         $601 = $595 & 255;
         $$0$lcssa$i56$i = $601;
        } else {
         $$0$lcssa$i56$i = $595;
        }
        (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$481,$f)|0);
       $602 = ($592|0)==(65536);
       $or$cond$i59$i = $602 & $594;
       if ($or$cond$i59$i) {
        $603 = (($w$1) - ($591))|0;
        $604 = ($603>>>0)>(256);
        $605 = $604 ? 256 : $603;
        _memset(($pad$i|0),48,($605|0))|0;
        $606 = ($603>>>0)>(255);
        if ($606) {
         $$01$i61$i = $603;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $607 = (($$01$i61$i) + -256)|0;
          $608 = ($607>>>0)>(255);
          if ($608) {
           $$01$i61$i = $607;
          } else {
           break;
          }
         }
         $609 = $603 & 255;
         $$0$lcssa$i63$i = $609;
        } else {
         $$0$lcssa$i63$i = $603;
        }
        (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
       }
       $610 = (($$pre300$i) - ($0))|0;
       (___fwritex($buf$i,$610,$f)|0);
       $611 = $534;
       $612 = (($9) - ($611))|0;
       $613 = (($l$0$i) - ($612))|0;
       $614 = (($613) - ($610))|0;
       $615 = ($614|0)>(0);
       if ($615) {
        $616 = ($614>>>0)>(256);
        $617 = $616 ? 256 : $614;
        _memset(($pad$i|0),48,($617|0))|0;
        $618 = ($614>>>0)>(255);
        if ($618) {
         $$01$i67$i = $614;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $619 = (($$01$i67$i) + -256)|0;
          $620 = ($619>>>0)>(255);
          if ($620) {
           $$01$i67$i = $619;
          } else {
           break;
          }
         }
         $621 = $614 & 255;
         $$0$lcssa$i69$i = $621;
        } else {
         $$0$lcssa$i69$i = $614;
        }
        (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
       }
       (___fwritex($534,$612,$f)|0);
       $622 = ($592|0)==(8192);
       $or$cond$i72$i = $622 & $594;
       if ($or$cond$i72$i) {
        $623 = (($w$1) - ($591))|0;
        $624 = ($623>>>0)>(256);
        $625 = $624 ? 256 : $623;
        _memset(($pad$i|0),32,($625|0))|0;
        $626 = ($623>>>0)>(255);
        if ($626) {
         $$01$i74$i = $623;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $627 = (($$01$i74$i) + -256)|0;
          $628 = ($627>>>0)>(255);
          if ($628) {
           $$01$i74$i = $627;
          } else {
           break;
          }
         }
         $629 = $623 & 255;
         $$0$lcssa$i76$i = $629;
        } else {
         $$0$lcssa$i76$i = $623;
        }
        (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
       }
       $w$$i = $594 ? $w$1 : $591;
       $$0$i = $w$$i;
       break;
      }
      $630 = ($p$0|0)<(0);
      $$p$i = $630 ? 6 : $p$0;
      if ($473) {
       $631 = $472 * 268435456.0;
       $632 = HEAP32[$e2$i>>2]|0;
       $633 = (($632) + -28)|0;
       HEAP32[$e2$i>>2] = $633;
       $$3$i = $631;$634 = $633;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $472;$634 = $$pre$i;
      }
      $635 = ($634|0)<(0);
      $$31$i = $635 ? $big$i : $13;
      $636 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $637 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $637;
       $638 = ((($z$0$i)) + 4|0);
       $639 = (+($637>>>0));
       $640 = $$4$i - $639;
       $641 = $640 * 1.0E+9;
       $642 = $641 != 0.0;
       if ($642) {
        $$4$i = $641;$z$0$i = $638;
       } else {
        $$lcssa460 = $638;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $643 = ($$pr$i|0)>(0);
      if ($643) {
       $644 = $$pr$i;$a$1253$i = $$31$i;$z$1252$i = $$lcssa460;
       while(1) {
        $645 = ($644|0)>(29);
        $646 = $645 ? 29 : $644;
        $d$0245$i = ((($z$1252$i)) + -4|0);
        $647 = ($d$0245$i>>>0)<($a$1253$i>>>0);
        do {
         if ($647) {
          $a$2$ph$i = $a$1253$i;
         } else {
          $carry$0246$i = 0;$d$0247$i = $d$0245$i;
          while(1) {
           $648 = HEAP32[$d$0247$i>>2]|0;
           $649 = (_bitshift64Shl(($648|0),0,($646|0))|0);
           $650 = tempRet0;
           $651 = (_i64Add(($649|0),($650|0),($carry$0246$i|0),0)|0);
           $652 = tempRet0;
           $653 = (___uremdi3(($651|0),($652|0),1000000000,0)|0);
           $654 = tempRet0;
           HEAP32[$d$0247$i>>2] = $653;
           $655 = (___udivdi3(($651|0),($652|0),1000000000,0)|0);
           $656 = tempRet0;
           $d$0$i = ((($d$0247$i)) + -4|0);
           $657 = ($d$0$i>>>0)<($a$1253$i>>>0);
           if ($657) {
            $$lcssa461 = $655;
            break;
           } else {
            $carry$0246$i = $655;$d$0247$i = $d$0$i;
           }
          }
          $658 = ($$lcssa461|0)==(0);
          if ($658) {
           $a$2$ph$i = $a$1253$i;
           break;
          }
          $659 = ((($a$1253$i)) + -4|0);
          HEAP32[$659>>2] = $$lcssa461;
          $a$2$ph$i = $659;
         }
        } while(0);
        $z$2$i = $z$1252$i;
        while(1) {
         $660 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($660)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $661 = ((($z$2$i)) + -4|0);
         $662 = HEAP32[$661>>2]|0;
         $663 = ($662|0)==(0);
         if ($663) {
          $z$2$i = $661;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $664 = HEAP32[$e2$i>>2]|0;
        $665 = (($664) - ($646))|0;
        HEAP32[$e2$i>>2] = $665;
        $666 = ($665|0)>(0);
        if ($666) {
         $644 = $665;$a$1253$i = $a$2$ph$i;$z$1252$i = $z$2$i$lcssa;
        } else {
         $$pr146$i = $665;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa460;
      }
      $667 = ($$pr146$i|0)<(0);
      L228: do {
       if ($667) {
        $668 = (($$p$i) + 25)|0;
        $669 = (($668|0) / 9)&-1;
        $670 = (($669) + 1)|0;
        $671 = ($476|0)==(102);
        if (!($671)) {
         $704 = $$pr146$i;$a$3240$i = $a$1$lcssa$i;$z$3239$i = $z$1$lcssa$i;
         while(1) {
          $703 = (0 - ($704))|0;
          $705 = ($703|0)>(9);
          $706 = $705 ? 9 : $703;
          $707 = ($a$3240$i>>>0)<($z$3239$i>>>0);
          do {
           if ($707) {
            $711 = 1 << $706;
            $712 = (($711) + -1)|0;
            $713 = 1000000000 >>> $706;
            $carry3$0234$i = 0;$d$1233$i = $a$3240$i;
            while(1) {
             $714 = HEAP32[$d$1233$i>>2]|0;
             $715 = $714 & $712;
             $716 = $714 >>> $706;
             $717 = (($716) + ($carry3$0234$i))|0;
             HEAP32[$d$1233$i>>2] = $717;
             $718 = Math_imul($715, $713)|0;
             $719 = ((($d$1233$i)) + 4|0);
             $720 = ($719>>>0)<($z$3239$i>>>0);
             if ($720) {
              $carry3$0234$i = $718;$d$1233$i = $719;
             } else {
              $$lcssa463 = $718;
              break;
             }
            }
            $721 = HEAP32[$a$3240$i>>2]|0;
            $722 = ($721|0)==(0);
            $723 = ((($a$3240$i)) + 4|0);
            $$a$3$i = $722 ? $723 : $a$3240$i;
            $724 = ($$lcssa463|0)==(0);
            if ($724) {
             $$a$3306$i = $$a$3$i;$z$4$i = $z$3239$i;
             break;
            }
            $725 = ((($z$3239$i)) + 4|0);
            HEAP32[$z$3239$i>>2] = $$lcssa463;
            $$a$3306$i = $$a$3$i;$z$4$i = $725;
           } else {
            $708 = HEAP32[$a$3240$i>>2]|0;
            $709 = ($708|0)==(0);
            $710 = ((($a$3240$i)) + 4|0);
            $$a$3305$i = $709 ? $710 : $a$3240$i;
            $$a$3306$i = $$a$3305$i;$z$4$i = $z$3239$i;
           }
          } while(0);
          $726 = $z$4$i;
          $727 = $$a$3306$i;
          $728 = (($726) - ($727))|0;
          $729 = $728 >> 2;
          $730 = ($729|0)>($670|0);
          $731 = (($$a$3306$i) + ($670<<2)|0);
          $$z$4$i = $730 ? $731 : $z$4$i;
          $732 = HEAP32[$e2$i>>2]|0;
          $733 = (($732) + ($706))|0;
          HEAP32[$e2$i>>2] = $733;
          $734 = ($733|0)<(0);
          if ($734) {
           $704 = $733;$a$3240$i = $$a$3306$i;$z$3239$i = $$z$4$i;
          } else {
           $a$3$lcssa$i = $$a$3306$i;$z$3$lcssa$i = $$z$4$i;
           break L228;
          }
         }
        }
        $672 = (($$31$i) + ($670<<2)|0);
        $674 = $$pr146$i;$a$3240$us$i = $a$1$lcssa$i;$z$3239$us$i = $z$1$lcssa$i;
        while(1) {
         $673 = (0 - ($674))|0;
         $675 = ($673|0)>(9);
         $676 = $675 ? 9 : $673;
         $677 = ($a$3240$us$i>>>0)<($z$3239$us$i>>>0);
         do {
          if ($677) {
           $702 = 1 << $676;
           $695 = (($702) + -1)|0;
           $699 = 1000000000 >>> $676;
           $carry3$0234$us$i = 0;$d$1233$us$i = $a$3240$us$i;
           while(1) {
            $693 = HEAP32[$d$1233$us$i>>2]|0;
            $694 = $693 & $695;
            $696 = $693 >>> $676;
            $697 = (($696) + ($carry3$0234$us$i))|0;
            HEAP32[$d$1233$us$i>>2] = $697;
            $698 = Math_imul($694, $699)|0;
            $700 = ((($d$1233$us$i)) + 4|0);
            $701 = ($700>>>0)<($z$3239$us$i>>>0);
            if ($701) {
             $carry3$0234$us$i = $698;$d$1233$us$i = $700;
            } else {
             $$lcssa464 = $698;
             break;
            }
           }
           $681 = HEAP32[$a$3240$us$i>>2]|0;
           $682 = ($681|0)==(0);
           $683 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us$i = $682 ? $683 : $a$3240$us$i;
           $684 = ($$lcssa464|0)==(0);
           if ($684) {
            $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $z$3239$us$i;
            break;
           }
           $685 = ((($z$3239$us$i)) + 4|0);
           HEAP32[$z$3239$us$i>>2] = $$lcssa464;
           $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $685;
          } else {
           $678 = HEAP32[$a$3240$us$i>>2]|0;
           $679 = ($678|0)==(0);
           $680 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us303$i = $679 ? $680 : $a$3240$us$i;
           $$a$3$us304$i = $$a$3$us303$i;$z$4$us$i = $z$3239$us$i;
          }
         } while(0);
         $686 = $z$4$us$i;
         $687 = (($686) - ($636))|0;
         $688 = $687 >> 2;
         $689 = ($688|0)>($670|0);
         $$z$4$us$i = $689 ? $672 : $z$4$us$i;
         $690 = HEAP32[$e2$i>>2]|0;
         $691 = (($690) + ($676))|0;
         HEAP32[$e2$i>>2] = $691;
         $692 = ($691|0)<(0);
         if ($692) {
          $674 = $691;$a$3240$us$i = $$a$3$us304$i;$z$3239$us$i = $$z$4$us$i;
         } else {
          $a$3$lcssa$i = $$a$3$us304$i;$z$3$lcssa$i = $$z$4$us$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $735 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($735) {
        $736 = $a$3$lcssa$i;
        $737 = (($636) - ($736))|0;
        $738 = $737 >> 2;
        $739 = ($738*9)|0;
        $740 = HEAP32[$a$3$lcssa$i>>2]|0;
        $741 = ($740>>>0)<(10);
        if ($741) {
         $e$1$i = $739;
         break;
        } else {
         $e$0229$i = $739;$i$0228$i = 10;
        }
        while(1) {
         $742 = ($i$0228$i*10)|0;
         $743 = (($e$0229$i) + 1)|0;
         $744 = ($740>>>0)<($742>>>0);
         if ($744) {
          $e$1$i = $743;
          break;
         } else {
          $e$0229$i = $743;$i$0228$i = $742;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $745 = ($476|0)!=(102);
      $746 = $745 ? $e$1$i : 0;
      $747 = (($$p$i) - ($746))|0;
      $748 = ($476|0)==(103);
      $749 = ($$p$i|0)!=(0);
      $750 = $749 & $748;
      $$neg151$i = $750 << 31 >> 31;
      $751 = (($747) + ($$neg151$i))|0;
      $752 = $z$3$lcssa$i;
      $753 = (($752) - ($636))|0;
      $754 = $753 >> 2;
      $755 = ($754*9)|0;
      $756 = (($755) + -9)|0;
      $757 = ($751|0)<($756|0);
      if ($757) {
       $758 = (($751) + 9216)|0;
       $759 = (($758|0) / 9)&-1;
       $$sum$i = (($759) + -1023)|0;
       $760 = (($$31$i) + ($$sum$i<<2)|0);
       $761 = (($758|0) % 9)&-1;
       $j$0221$i = (($761) + 1)|0;
       $762 = ($j$0221$i|0)<(9);
       if ($762) {
        $i$1222$i = 10;$j$0223$i = $j$0221$i;
        while(1) {
         $763 = ($i$1222$i*10)|0;
         $j$0$i = (($j$0223$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $763;
          break;
         } else {
          $i$1222$i = $763;$j$0223$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $764 = HEAP32[$760>>2]|0;
       $765 = (($764>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $766 = ($765|0)==(0);
       if ($766) {
        $$sum15$i = (($759) + -1022)|0;
        $767 = (($$31$i) + ($$sum15$i<<2)|0);
        $768 = ($767|0)==($z$3$lcssa$i|0);
        if ($768) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $760;$e$3$i = $e$1$i;
        } else {
         label = 221;
        }
       } else {
        label = 221;
       }
       do {
        if ((label|0) == 221) {
         label = 0;
         $769 = (($764>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $770 = $769 & 1;
         $771 = ($770|0)==(0);
         $$20$i = $771 ? 9007199254740992.0 : 9007199254740994.0;
         $772 = (($i$1$lcssa$i|0) / 2)&-1;
         $773 = ($765>>>0)<($772>>>0);
         do {
          if ($773) {
           $small$0$i = 0.5;
          } else {
           $774 = ($765|0)==($772|0);
           if ($774) {
            $$sum16$i = (($759) + -1022)|0;
            $775 = (($$31$i) + ($$sum16$i<<2)|0);
            $776 = ($775|0)==($z$3$lcssa$i|0);
            if ($776) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $777 = ($pl$0$i|0)==(0);
         do {
          if ($777) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $778 = HEAP8[$prefix$0$i>>0]|0;
           $779 = ($778<<24>>24)==(45);
           if (!($779)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $780 = -$$20$i;
           $781 = -$small$0$i;
           $round6$1$i = $780;$small$1$i = $781;
          }
         } while(0);
         $782 = (($764) - ($765))|0;
         HEAP32[$760>>2] = $782;
         $783 = $round6$1$i + $small$1$i;
         $784 = $783 != $round6$1$i;
         if (!($784)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $760;$e$3$i = $e$1$i;
          break;
         }
         $785 = (($782) + ($i$1$lcssa$i))|0;
         HEAP32[$760>>2] = $785;
         $786 = ($785>>>0)>(999999999);
         if ($786) {
          $a$5215$i = $a$3$lcssa$i;$d$2214$i = $760;
          while(1) {
           $787 = ((($d$2214$i)) + -4|0);
           HEAP32[$d$2214$i>>2] = 0;
           $788 = ($787>>>0)<($a$5215$i>>>0);
           if ($788) {
            $789 = ((($a$5215$i)) + -4|0);
            HEAP32[$789>>2] = 0;
            $a$6$i = $789;
           } else {
            $a$6$i = $a$5215$i;
           }
           $790 = HEAP32[$787>>2]|0;
           $791 = (($790) + 1)|0;
           HEAP32[$787>>2] = $791;
           $792 = ($791>>>0)>(999999999);
           if ($792) {
            $a$5215$i = $a$6$i;$d$2214$i = $787;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $787;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $760;
         }
         $793 = $a$5$lcssa$i;
         $794 = (($636) - ($793))|0;
         $795 = $794 >> 2;
         $796 = ($795*9)|0;
         $797 = HEAP32[$a$5$lcssa$i>>2]|0;
         $798 = ($797>>>0)<(10);
         if ($798) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $796;
          break;
         } else {
          $e$2210$i = $796;$i$2209$i = 10;
         }
         while(1) {
          $799 = ($i$2209$i*10)|0;
          $800 = (($e$2210$i) + 1)|0;
          $801 = ($797>>>0)<($799>>>0);
          if ($801) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $800;
           break;
          } else {
           $e$2210$i = $800;$i$2209$i = $799;
          }
         }
        }
       } while(0);
       $802 = ((($d$3$i)) + 4|0);
       $803 = ($z$3$lcssa$i>>>0)>($802>>>0);
       $$z$3$i = $803 ? $802 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $804 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $805 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($805)) {
        $$lcssa275$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $806 = ((($z$6$i)) + -4|0);
       $807 = HEAP32[$806>>2]|0;
       $808 = ($807|0)==(0);
       if ($808) {
        $z$6$i = $806;
       } else {
        $$lcssa275$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($748) {
        $809 = $749&1;
        $810 = $809 ^ 1;
        $$p$$i = (($810) + ($$p$i))|0;
        $811 = ($$p$$i|0)>($e$4$ph$i|0);
        $812 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $811 & $812;
        if ($or$cond6$i) {
         $813 = (($t$0) + -1)|0;
         $$neg152$i = (($$p$$i) + -1)|0;
         $814 = (($$neg152$i) - ($e$4$ph$i))|0;
         $$013$i = $813;$$210$i = $814;
        } else {
         $815 = (($t$0) + -2)|0;
         $816 = (($$p$$i) + -1)|0;
         $$013$i = $815;$$210$i = $816;
        }
        $817 = $fl$1$ & 8;
        $818 = ($817|0)==(0);
        if (!($818)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi302$iZ2D = $817;
         break;
        }
        do {
         if ($$lcssa275$i) {
          $819 = ((($z$6$i$lcssa)) + -4|0);
          $820 = HEAP32[$819>>2]|0;
          $821 = ($820|0)==(0);
          if ($821) {
           $j$2$i = 9;
           break;
          }
          $822 = (($820>>>0) % 10)&-1;
          $823 = ($822|0)==(0);
          if ($823) {
           $i$3205$i = 10;$j$1206$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $824 = ($i$3205$i*10)|0;
           $825 = (($j$1206$i) + 1)|0;
           $826 = (($820>>>0) % ($824>>>0))&-1;
           $827 = ($826|0)==(0);
           if ($827) {
            $i$3205$i = $824;$j$1206$i = $825;
           } else {
            $j$2$i = $825;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $828 = $$013$i | 32;
        $829 = ($828|0)==(102);
        $830 = $z$6$i$lcssa;
        $831 = (($830) - ($636))|0;
        $832 = $831 >> 2;
        $833 = ($832*9)|0;
        $834 = (($833) + -9)|0;
        if ($829) {
         $835 = (($834) - ($j$2$i))|0;
         $836 = ($835|0)<(0);
         $$21$i = $836 ? 0 : $835;
         $837 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $837 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi302$iZ2D = 0;
         break;
        } else {
         $838 = (($834) + ($e$4$ph$i))|0;
         $839 = (($838) - ($j$2$i))|0;
         $840 = ($839|0)<(0);
         $$23$i = $840 ? 0 : $839;
         $841 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $841 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi302$iZ2D = 0;
         break;
        }
       } else {
        $$pre301$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi302$iZ2D = $$pre301$i;
       }
      } while(0);
      $842 = $$311$i | $$pre$phi302$iZ2D;
      $843 = ($842|0)!=(0);
      $844 = $843&1;
      $845 = $$114$i | 32;
      $846 = ($845|0)==(102);
      if ($846) {
       $847 = ($e$4$ph$i|0)>(0);
       $848 = $847 ? $e$4$ph$i : 0;
       $$pn$i = $848;$estr$2$i = 0;
      } else {
       $849 = ($e$4$ph$i|0)<(0);
       $850 = $849 ? $804 : $e$4$ph$i;
       $851 = ($850|0)<(0);
       if ($851) {
        $852 = ($850|0)<(0);
        $853 = $852 << 31 >> 31;
        $$05$i79$i = $7;$854 = $850;$855 = $853;
        while(1) {
         $856 = (___uremdi3(($854|0),($855|0),10,0)|0);
         $857 = tempRet0;
         $858 = $856 | 48;
         $859 = $858&255;
         $860 = ((($$05$i79$i)) + -1|0);
         HEAP8[$860>>0] = $859;
         $861 = (___udivdi3(($854|0),($855|0),10,0)|0);
         $862 = tempRet0;
         $863 = ($855>>>0)>(9);
         $864 = ($854>>>0)>(4294967295);
         $865 = ($855|0)==(9);
         $866 = $865 & $864;
         $867 = $863 | $866;
         if ($867) {
          $$05$i79$i = $860;$854 = $861;$855 = $862;
         } else {
          $$lcssa470 = $860;$1185 = $861;$1186 = $862;
          break;
         }
        }
        $$0$lcssa$i84$i = $$lcssa470;$$01$lcssa$off0$i85$i = $1185;
       } else {
        $$0$lcssa$i84$i = $7;$$01$lcssa$off0$i85$i = $850;
       }
       $868 = ($$01$lcssa$off0$i85$i|0)==(0);
       if ($868) {
        $estr$1$ph$i = $$0$lcssa$i84$i;
       } else {
        $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
        while(1) {
         $869 = (($y$03$i86$i>>>0) % 10)&-1;
         $870 = $869 | 48;
         $871 = $870&255;
         $872 = ((($$12$i87$i)) + -1|0);
         HEAP8[$872>>0] = $871;
         $873 = (($y$03$i86$i>>>0) / 10)&-1;
         $874 = ($y$03$i86$i>>>0)<(10);
         if ($874) {
          $estr$1$ph$i = $872;
          break;
         } else {
          $$12$i87$i = $872;$y$03$i86$i = $873;
         }
        }
       }
       $875 = $estr$1$ph$i;
       $876 = (($9) - ($875))|0;
       $877 = ($876|0)<(2);
       if ($877) {
        $estr$1201$i = $estr$1$ph$i;
        while(1) {
         $878 = ((($estr$1201$i)) + -1|0);
         HEAP8[$878>>0] = 48;
         $879 = $878;
         $880 = (($9) - ($879))|0;
         $881 = ($880|0)<(2);
         if ($881) {
          $estr$1201$i = $878;
         } else {
          $estr$1$lcssa$i = $878;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $882 = $e$4$ph$i >> 31;
       $883 = $882 & 2;
       $884 = (($883) + 43)|0;
       $885 = $884&255;
       $886 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$886>>0] = $885;
       $887 = $$114$i&255;
       $888 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$888>>0] = $887;
       $889 = $888;
       $890 = (($9) - ($889))|0;
       $$pn$i = $890;$estr$2$i = $888;
      }
      $891 = (($pl$0$i) + 1)|0;
      $892 = (($891) + ($$311$i))|0;
      $l$1$i = (($892) + ($844))|0;
      $893 = (($l$1$i) + ($$pn$i))|0;
      $894 = $fl$1$ & 73728;
      $895 = ($894|0)==(0);
      $896 = ($w$1|0)>($893|0);
      $or$cond$i93$i = $895 & $896;
      if ($or$cond$i93$i) {
       $897 = (($w$1) - ($893))|0;
       $898 = ($897>>>0)>(256);
       $899 = $898 ? 256 : $897;
       _memset(($pad$i|0),32,($899|0))|0;
       $900 = ($897>>>0)>(255);
       if ($900) {
        $$01$i95$i = $897;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $901 = (($$01$i95$i) + -256)|0;
         $902 = ($901>>>0)>(255);
         if ($902) {
          $$01$i95$i = $901;
         } else {
          break;
         }
        }
        $903 = $897 & 255;
        $$0$lcssa$i97$i = $903;
       } else {
        $$0$lcssa$i97$i = $897;
       }
       (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $904 = ($894|0)==(65536);
      $or$cond$i100$i = $904 & $896;
      if ($or$cond$i100$i) {
       $905 = (($w$1) - ($893))|0;
       $906 = ($905>>>0)>(256);
       $907 = $906 ? 256 : $905;
       _memset(($pad$i|0),48,($907|0))|0;
       $908 = ($905>>>0)>(255);
       if ($908) {
        $$01$i102$i = $905;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $909 = (($$01$i102$i) + -256)|0;
         $910 = ($909>>>0)>(255);
         if ($910) {
          $$01$i102$i = $909;
         } else {
          break;
         }
        }
        $911 = $905 & 255;
        $$0$lcssa$i104$i = $911;
       } else {
        $$0$lcssa$i104$i = $905;
       }
       (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
      }
      if ($846) {
       $912 = ($a$8$ph$i>>>0)>($$31$i>>>0);
       $r$0$a$8$i = $912 ? $$31$i : $a$8$ph$i;
       $d$4191$i = $r$0$a$8$i;
       while(1) {
        $913 = HEAP32[$d$4191$i>>2]|0;
        $914 = ($913|0)==(0);
        if ($914) {
         $$1$lcssa$i112$i = $14;
        } else {
         $$12$i110$i = $14;$y$03$i109$i = $913;
         while(1) {
          $915 = (($y$03$i109$i>>>0) % 10)&-1;
          $916 = $915 | 48;
          $917 = $916&255;
          $918 = ((($$12$i110$i)) + -1|0);
          HEAP8[$918>>0] = $917;
          $919 = (($y$03$i109$i>>>0) / 10)&-1;
          $920 = ($y$03$i109$i>>>0)<(10);
          if ($920) {
           $$1$lcssa$i112$i = $918;
           break;
          } else {
           $$12$i110$i = $918;$y$03$i109$i = $919;
          }
         }
        }
        $921 = ($d$4191$i|0)==($r$0$a$8$i|0);
        do {
         if ($921) {
          $925 = ($$1$lcssa$i112$i|0)==($14|0);
          if (!($925)) {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          HEAP8[$16>>0] = 48;
          $s7$1$i = $16;
         } else {
          $922 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
          if ($922) {
           $s7$0188$i = $$1$lcssa$i112$i;
          } else {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          while(1) {
           $923 = ((($s7$0188$i)) + -1|0);
           HEAP8[$923>>0] = 48;
           $924 = ($923>>>0)>($buf$i>>>0);
           if ($924) {
            $s7$0188$i = $923;
           } else {
            $s7$1$i = $923;
            break;
           }
          }
         }
        } while(0);
        $926 = $s7$1$i;
        $927 = (($15) - ($926))|0;
        (___fwritex($s7$1$i,$927,$f)|0);
        $928 = ((($d$4191$i)) + 4|0);
        $929 = ($928>>>0)>($$31$i>>>0);
        if ($929) {
         $$lcssa479 = $928;
         break;
        } else {
         $d$4191$i = $928;
        }
       }
       $930 = ($842|0)==(0);
       if (!($930)) {
        (___fwritex(96480,1,$f)|0);
       }
       $931 = ($$lcssa479>>>0)<($z$6$i$lcssa>>>0);
       $932 = ($$311$i|0)>(0);
       $933 = $932 & $931;
       if ($933) {
        $$412184$i = $$311$i;$d$5183$i = $$lcssa479;
        while(1) {
         $934 = HEAP32[$d$5183$i>>2]|0;
         $935 = ($934|0)==(0);
         if ($935) {
          $s8$0180$i = $14;
          label = 289;
         } else {
          $$12$i119$i = $14;$y$03$i118$i = $934;
          while(1) {
           $936 = (($y$03$i118$i>>>0) % 10)&-1;
           $937 = $936 | 48;
           $938 = $937&255;
           $939 = ((($$12$i119$i)) + -1|0);
           HEAP8[$939>>0] = $938;
           $940 = (($y$03$i118$i>>>0) / 10)&-1;
           $941 = ($y$03$i118$i>>>0)<(10);
           if ($941) {
            $$lcssa480 = $939;
            break;
           } else {
            $$12$i119$i = $939;$y$03$i118$i = $940;
           }
          }
          $942 = ($$lcssa480>>>0)>($buf$i>>>0);
          if ($942) {
           $s8$0180$i = $$lcssa480;
           label = 289;
          } else {
           $s8$0$lcssa$i = $$lcssa480;
          }
         }
         if ((label|0) == 289) {
          while(1) {
           label = 0;
           $943 = ((($s8$0180$i)) + -1|0);
           HEAP8[$943>>0] = 48;
           $944 = ($943>>>0)>($buf$i>>>0);
           if ($944) {
            $s8$0180$i = $943;
            label = 289;
           } else {
            $s8$0$lcssa$i = $943;
            break;
           }
          }
         }
         $945 = ($$412184$i|0)>(9);
         $946 = $945 ? 9 : $$412184$i;
         (___fwritex($s8$0$lcssa$i,$946,$f)|0);
         $947 = ((($d$5183$i)) + 4|0);
         $948 = (($$412184$i) + -9)|0;
         $949 = ($947>>>0)<($z$6$i$lcssa>>>0);
         $950 = $945 & $949;
         if ($950) {
          $$412184$i = $948;$d$5183$i = $947;
         } else {
          $$412$lcssa$i = $948;
          break;
         }
        }
       } else {
        $$412$lcssa$i = $$311$i;
       }
       $951 = ($$412$lcssa$i|0)>(0);
       if ($951) {
        $952 = ($$412$lcssa$i>>>0)>(256);
        $953 = $952 ? 256 : $$412$lcssa$i;
        _memset(($pad$i|0),48,($953|0))|0;
        $954 = ($$412$lcssa$i>>>0)>(255);
        if ($954) {
         $$01$i126$i = $$412$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $955 = (($$01$i126$i) + -256)|0;
          $956 = ($955>>>0)>(255);
          if ($956) {
           $$01$i126$i = $955;
          } else {
           break;
          }
         }
         $957 = $$412$lcssa$i & 255;
         $$0$lcssa$i128$i = $957;
        } else {
         $$0$lcssa$i128$i = $$412$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
       }
      } else {
       $958 = ((($a$8$ph$i)) + 4|0);
       $z$6$$i = $$lcssa275$i ? $z$6$i$lcssa : $958;
       $959 = ($$311$i|0)>(-1);
       do {
        if ($959) {
         $960 = ($$pre$phi302$iZ2D|0)==(0);
         $$5196$i = $$311$i;$d$6195$i = $a$8$ph$i;
         while(1) {
          $961 = HEAP32[$d$6195$i>>2]|0;
          $962 = ($961|0)==(0);
          if ($962) {
           label = 303;
          } else {
           $$12$i134$i = $14;$y$03$i133$i = $961;
           while(1) {
            $963 = (($y$03$i133$i>>>0) % 10)&-1;
            $964 = $963 | 48;
            $965 = $964&255;
            $966 = ((($$12$i134$i)) + -1|0);
            HEAP8[$966>>0] = $965;
            $967 = (($y$03$i133$i>>>0) / 10)&-1;
            $968 = ($y$03$i133$i>>>0)<(10);
            if ($968) {
             $$12$i134$i$lcssa = $$12$i134$i;$$lcssa474 = $966;
             break;
            } else {
             $$12$i134$i = $966;$y$03$i133$i = $967;
            }
           }
           $969 = ($$lcssa474|0)==($14|0);
           if ($969) {
            label = 303;
           } else {
            $1187 = $$12$i134$i$lcssa;$s9$0$i = $$lcssa474;
           }
          }
          if ((label|0) == 303) {
           label = 0;
           HEAP8[$16>>0] = 48;
           $1187 = $14;$s9$0$i = $16;
          }
          $970 = ($d$6195$i|0)==($a$8$ph$i|0);
          do {
           if ($970) {
            (___fwritex($s9$0$i,1,$f)|0);
            $974 = ($$5196$i|0)<(1);
            $or$cond29$i = $960 & $974;
            if ($or$cond29$i) {
             $s9$2$i = $1187;
             break;
            }
            (___fwritex(96480,1,$f)|0);
            $s9$2$i = $1187;
           } else {
            $971 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($971) {
             $s9$1192$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $972 = ((($s9$1192$i)) + -1|0);
             HEAP8[$972>>0] = 48;
             $973 = ($972>>>0)>($buf$i>>>0);
             if ($973) {
              $s9$1192$i = $972;
             } else {
              $s9$2$i = $972;
              break;
             }
            }
           }
          } while(0);
          $975 = $s9$2$i;
          $976 = (($15) - ($975))|0;
          $977 = ($$5196$i|0)>($976|0);
          $978 = $977 ? $976 : $$5196$i;
          (___fwritex($s9$2$i,$978,$f)|0);
          $979 = (($$5196$i) - ($976))|0;
          $980 = ((($d$6195$i)) + 4|0);
          $981 = ($980>>>0)<($z$6$$i>>>0);
          $982 = ($979|0)>(-1);
          $983 = $981 & $982;
          if ($983) {
           $$5196$i = $979;$d$6195$i = $980;
          } else {
           $$lcssa476 = $979;
           break;
          }
         }
         $984 = ($$lcssa476|0)>(0);
         if (!($984)) {
          break;
         }
         $985 = ($$lcssa476>>>0)>(256);
         $986 = $985 ? 256 : $$lcssa476;
         _memset(($pad$i|0),48,($986|0))|0;
         $987 = ($$lcssa476>>>0)>(255);
         if ($987) {
          $$01$i141$i = $$lcssa476;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $988 = (($$01$i141$i) + -256)|0;
           $989 = ($988>>>0)>(255);
           if ($989) {
            $$01$i141$i = $988;
           } else {
            break;
           }
          }
          $990 = $$lcssa476 & 255;
          $$0$lcssa$i143$i = $990;
         } else {
          $$0$lcssa$i143$i = $$lcssa476;
         }
         (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
        } else {
        }
       } while(0);
       $991 = $estr$2$i;
       $992 = (($9) - ($991))|0;
       (___fwritex($estr$2$i,$992,$f)|0);
      }
      $993 = ($894|0)==(8192);
      $or$cond$i$i = $993 & $896;
      if ($or$cond$i$i) {
       $994 = (($w$1) - ($893))|0;
       $995 = ($994>>>0)>(256);
       $996 = $995 ? 256 : $994;
       _memset(($pad$i|0),32,($996|0))|0;
       $997 = ($994>>>0)>(255);
       if ($997) {
        $$01$i$i = $994;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $998 = (($$01$i$i) + -256)|0;
         $999 = ($998>>>0)>(255);
         if ($999) {
          $$01$i$i = $998;
         } else {
          break;
         }
        }
        $1000 = $994 & 255;
        $$0$lcssa$i$i = $1000;
       } else {
        $$0$lcssa$i$i = $994;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$30$i = $896 ? $w$1 : $893;
      $$0$i = $w$30$i;
     } else {
      $445 = $t$0 & 32;
      $446 = ($445|0)!=(0);
      $447 = $446 ? 96448 : 96456;
      $448 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $449 = $446 ? 96464 : 96472;
      $pl$1$i = $448 ? 0 : $pl$0$i;
      $s1$0$i = $448 ? $449 : $447;
      $450 = (($pl$1$i) + 3)|0;
      $451 = $fl$1$ & 8192;
      $452 = ($451|0)==(0);
      $453 = ($w$1|0)>($450|0);
      $or$cond$i35$i = $452 & $453;
      if ($or$cond$i35$i) {
       $454 = (($w$1) - ($450))|0;
       $455 = ($454>>>0)>(256);
       $456 = $455 ? 256 : $454;
       _memset(($pad$i|0),32,($456|0))|0;
       $457 = ($454>>>0)>(255);
       if ($457) {
        $$01$i37$i = $454;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $458 = (($$01$i37$i) + -256)|0;
         $459 = ($458>>>0)>(255);
         if ($459) {
          $$01$i37$i = $458;
         } else {
          break;
         }
        }
        $460 = $454 & 255;
        $$0$lcssa$i39$i = $460;
       } else {
        $$0$lcssa$i39$i = $454;
       }
       (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
      (___fwritex($s1$0$i,3,$f)|0);
      $461 = $fl$1$ & 73728;
      $462 = ($461|0)==(8192);
      $or$cond$i42$i = $462 & $453;
      if ($or$cond$i42$i) {
       $463 = (($w$1) - ($450))|0;
       $464 = ($463>>>0)>(256);
       $465 = $464 ? 256 : $463;
       _memset(($pad$i|0),32,($465|0))|0;
       $466 = ($463>>>0)>(255);
       if ($466) {
        $$01$i44$i = $463;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $467 = (($$01$i44$i) + -256)|0;
         $468 = ($467>>>0)>(255);
         if ($468) {
          $$01$i44$i = $467;
         } else {
          break;
         }
        }
        $469 = $463 & 255;
        $$0$lcssa$i46$i = $469;
       } else {
        $$0$lcssa$i46$i = $463;
       }
       (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
      }
      $470 = $453 ? $w$1 : $450;
      $$0$i = $470;
     }
    } while(0);
    $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 112:  {
    $286 = ($p$0>>>0)>(8);
    $287 = $286 ? $p$0 : 8;
    $288 = $fl$1$ | 8;
    $fl$3 = $288;$p$1 = $287;$t$1 = 120;
    label = 73;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 73;
    break;
   }
   case 105: case 100:  {
    $329 = ($291|0)<(0);
    if ($329) {
     $330 = (_i64Subtract(0,0,($264|0),($291|0))|0);
     $331 = tempRet0;
     $336 = $331;$338 = $330;$pl$0 = 1;$prefix$0 = 96400;
     label = 84;
     break L86;
    }
    $332 = $fl$1$ & 2048;
    $333 = ($332|0)==(0);
    if ($333) {
     $334 = $fl$1$ & 1;
     $335 = ($334|0)==(0);
     $$ = $335 ? 96400 : (96402);
     $336 = $291;$338 = $264;$pl$0 = $334;$prefix$0 = $$;
     label = 84;
    } else {
     $336 = $291;$338 = $264;$pl$0 = 1;$prefix$0 = (96401);
     label = 84;
    }
    break;
   }
   case 99:  {
    $378 = $264&255;
    HEAP8[$4>>0] = $378;
    $1175 = $291;$1176 = $264;$a$2 = $4;$fl$6 = $263;$p$5 = 1;$pl$2 = 0;$prefix$2 = 96400;$z$2 = $2;
    break;
   }
   case 109:  {
    $379 = (___errno_location()|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = (_strerror(($380|0))|0);
    $a$1 = $381;
    label = 94;
    break;
   }
   case 115:  {
    $382 = $264;
    $383 = ($264|0)!=(0);
    $384 = $383 ? $382 : 96416;
    $a$1 = $384;
    label = 94;
    break;
   }
   default: {
    $1175 = $291;$1176 = $264;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 96400;$z$2 = $2;
   }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $289 = $t$1 & 32;
   $290 = ($264|0)==(0);
   $292 = ($291|0)==(0);
   $293 = $290 & $292;
   if ($293) {
    $366 = $264;$368 = $291;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 96400;
    label = 89;
   } else {
    $$012$i = $2;$295 = $264;$302 = $291;
    while(1) {
     $294 = $295 & 15;
     $296 = (96384 + ($294)|0);
     $297 = HEAP8[$296>>0]|0;
     $298 = $297&255;
     $299 = $298 | $289;
     $300 = $299&255;
     $301 = ((($$012$i)) + -1|0);
     HEAP8[$301>>0] = $300;
     $303 = (_bitshift64Lshr(($295|0),($302|0),4)|0);
     $304 = tempRet0;
     $305 = ($303|0)==(0);
     $306 = ($304|0)==(0);
     $307 = $305 & $306;
     if ($307) {
      $$lcssa491 = $301;
      break;
     } else {
      $$012$i = $301;$295 = $303;$302 = $304;
     }
    }
    $308 = $fl$3 & 8;
    $309 = ($308|0)==(0);
    if ($309) {
     $366 = $264;$368 = $291;$a$0 = $$lcssa491;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 96400;
     label = 89;
    } else {
     $310 = $t$1 >> 4;
     $311 = (96400 + ($310)|0);
     $366 = $264;$368 = $291;$a$0 = $$lcssa491;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $311;
     label = 89;
    }
   }
  }
  else if ((label|0) == 84) {
   label = 0;
   $337 = ($336>>>0)>(0);
   $339 = ($338>>>0)>(4294967295);
   $340 = ($336|0)==(0);
   $341 = $340 & $339;
   $342 = $337 | $341;
   if ($342) {
    $$05$i = $2;$343 = $338;$344 = $336;
    while(1) {
     $345 = (___uremdi3(($343|0),($344|0),10,0)|0);
     $346 = tempRet0;
     $347 = $345 | 48;
     $348 = $347&255;
     $349 = ((($$05$i)) + -1|0);
     HEAP8[$349>>0] = $348;
     $350 = (___udivdi3(($343|0),($344|0),10,0)|0);
     $351 = tempRet0;
     $352 = ($344>>>0)>(9);
     $353 = ($343>>>0)>(4294967295);
     $354 = ($344|0)==(9);
     $355 = $354 & $353;
     $356 = $352 | $355;
     if ($356) {
      $$05$i = $349;$343 = $350;$344 = $351;
     } else {
      $$lcssa487 = $349;$1177 = $350;$1178 = $351;
      break;
     }
    }
    $$0$lcssa$i53 = $$lcssa487;$$01$lcssa$off0$i = $1177;
   } else {
    $$0$lcssa$i53 = $2;$$01$lcssa$off0$i = $338;
   }
   $357 = ($$01$lcssa$off0$i|0)==(0);
   if ($357) {
    $366 = $338;$368 = $336;$a$0 = $$0$lcssa$i53;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 89;
   } else {
    $$12$i = $$0$lcssa$i53;$y$03$i = $$01$lcssa$off0$i;
    while(1) {
     $358 = (($y$03$i>>>0) % 10)&-1;
     $359 = $358 | 48;
     $360 = $359&255;
     $361 = ((($$12$i)) + -1|0);
     HEAP8[$361>>0] = $360;
     $362 = (($y$03$i>>>0) / 10)&-1;
     $363 = ($y$03$i>>>0)<(10);
     if ($363) {
      $366 = $338;$368 = $336;$a$0 = $361;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 89;
      break;
     } else {
      $$12$i = $361;$y$03$i = $362;
     }
    }
   }
  }
  else if ((label|0) == 94) {
   label = 0;
   $385 = (_memchr($a$1,0,$p$0)|0);
   $386 = ($385|0)==(0|0);
   $387 = $385;
   $388 = $a$1;
   $389 = (($387) - ($388))|0;
   $390 = (($a$1) + ($p$0)|0);
   $z$1 = $386 ? $390 : $385;
   $p$3 = $386 ? $p$0 : $389;
   $1175 = $291;$1176 = $264;$a$2 = $a$1;$fl$6 = $263;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 96400;$z$2 = $z$1;
  }
  else if ((label|0) == 97) {
   label = 0;
   $i$0175 = 0;$l$1174 = 0;$ws$0176 = $1179;
   while(1) {
    $393 = HEAP32[$ws$0176>>2]|0;
    $394 = ($393|0)==(0);
    if ($394) {
     $i$0$lcssa = $i$0175;$l$2 = $l$1174;
     break;
    }
    $395 = (_wctomb($mb,$393)|0);
    $396 = ($395|0)<(0);
    $397 = (($p$4272) - ($i$0175))|0;
    $398 = ($395>>>0)>($397>>>0);
    $or$cond22 = $396 | $398;
    if ($or$cond22) {
     $i$0$lcssa = $i$0175;$l$2 = $395;
     break;
    }
    $399 = ((($ws$0176)) + 4|0);
    $400 = (($395) + ($i$0175))|0;
    $401 = ($p$4272>>>0)>($400>>>0);
    if ($401) {
     $i$0175 = $400;$l$1174 = $395;$ws$0176 = $399;
    } else {
     $i$0$lcssa = $400;$l$2 = $395;
     break;
    }
   }
   $402 = ($l$2|0)<(0);
   if ($402) {
    $$0 = -1;
    label = 363;
    break;
   } else {
    $1181 = $1180;$1182 = $1179;$i$0$lcssa273 = $i$0$lcssa;
    label = 102;
   }
  }
  if ((label|0) == 89) {
   label = 0;
   $364 = ($p$2|0)>(-1);
   $365 = $fl$4 & -65537;
   $$fl$4 = $364 ? $365 : $fl$4;
   $367 = ($366|0)!=(0);
   $369 = ($368|0)!=(0);
   $370 = $367 | $369;
   $371 = ($p$2|0)!=(0);
   $or$cond = $370 | $371;
   if ($or$cond) {
    $372 = $a$0;
    $373 = (($3) - ($372))|0;
    $374 = $370&1;
    $375 = $374 ^ 1;
    $376 = (($375) + ($373))|0;
    $377 = ($p$2|0)>($376|0);
    $p$2$ = $377 ? $p$2 : $376;
    $1175 = $368;$1176 = $366;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1175 = $368;$1176 = $366;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 102) {
   label = 0;
   $403 = $fl$1$ & 73728;
   $404 = ($403|0)==(0);
   $405 = ($w$1|0)>($i$0$lcssa273|0);
   $or$cond$i64 = $404 & $405;
   if ($or$cond$i64) {
    $406 = (($w$1) - ($i$0$lcssa273))|0;
    $407 = ($406>>>0)>(256);
    $408 = $407 ? 256 : $406;
    _memset(($pad$i|0),32,($408|0))|0;
    $409 = ($406>>>0)>(255);
    if ($409) {
     $$01$i66 = $406;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $410 = (($$01$i66) + -256)|0;
      $411 = ($410>>>0)>(255);
      if ($411) {
       $$01$i66 = $410;
      } else {
       break;
      }
     }
     $412 = $406 & 255;
     $$0$lcssa$i68 = $412;
    } else {
     $$0$lcssa$i68 = $406;
    }
    (___fwritex($pad$i,$$0$lcssa$i68,$f)|0);
   }
   $413 = ($i$0$lcssa273|0)==(0);
   L465: do {
    if (!($413)) {
     $i$1186 = 0;$ws$1187 = $1182;
     while(1) {
      $414 = HEAP32[$ws$1187>>2]|0;
      $415 = ($414|0)==(0);
      if ($415) {
       break L465;
      }
      $416 = (_wctomb($mb,$414)|0);
      $417 = (($416) + ($i$1186))|0;
      $418 = ($417|0)>($i$0$lcssa273|0);
      if ($418) {
       break L465;
      }
      $419 = ((($ws$1187)) + 4|0);
      (___fwritex($mb,$416,$f)|0);
      $420 = ($417>>>0)<($i$0$lcssa273>>>0);
      if ($420) {
       $i$1186 = $417;$ws$1187 = $419;
      } else {
       break;
      }
     }
    }
   } while(0);
   $421 = ($403|0)==(8192);
   $or$cond$i71 = $421 & $405;
   if ($or$cond$i71) {
    $422 = (($w$1) - ($i$0$lcssa273))|0;
    $423 = ($422>>>0)>(256);
    $424 = $423 ? 256 : $422;
    _memset(($pad$i|0),32,($424|0))|0;
    $425 = ($422>>>0)>(255);
    if ($425) {
     $$01$i73 = $422;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $426 = (($$01$i73) + -256)|0;
      $427 = ($426>>>0)>(255);
      if ($427) {
       $$01$i73 = $426;
      } else {
       break;
      }
     }
     $428 = $422 & 255;
     $$0$lcssa$i75 = $428;
    } else {
     $$0$lcssa$i75 = $422;
    }
    (___fwritex($pad$i,$$0$lcssa$i75,$f)|0);
   }
   $429 = $405 ? $w$1 : $i$0$lcssa273;
   $1169 = $291;$1170 = $1181;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $429;$l10n$0 = $l10n$3;
   continue;
  }
  $1001 = $z$2;
  $1002 = $a$2;
  $1003 = (($1001) - ($1002))|0;
  $1004 = ($p$5|0)<($1003|0);
  $$p$5 = $1004 ? $1003 : $p$5;
  $1005 = (($pl$2) + ($$p$5))|0;
  $1006 = ($w$1|0)<($1005|0);
  $w$2 = $1006 ? $1005 : $w$1;
  $1007 = $fl$6 & 73728;
  $1008 = ($1007|0)==(0);
  $1009 = ($w$2|0)>($1005|0);
  $or$cond$i81 = $1008 & $1009;
  if ($or$cond$i81) {
   $1010 = (($w$2) - ($1005))|0;
   $1011 = ($1010>>>0)>(256);
   $1012 = $1011 ? 256 : $1010;
   _memset(($pad$i|0),32,($1012|0))|0;
   $1013 = ($1010>>>0)>(255);
   if ($1013) {
    $$01$i83 = $1010;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1014 = (($$01$i83) + -256)|0;
     $1015 = ($1014>>>0)>(255);
     if ($1015) {
      $$01$i83 = $1014;
     } else {
      break;
     }
    }
    $1016 = $1010 & 255;
    $$0$lcssa$i85 = $1016;
   } else {
    $$0$lcssa$i85 = $1010;
   }
   (___fwritex($pad$i,$$0$lcssa$i85,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $1017 = ($1007|0)==(65536);
  $or$cond$i57 = $1017 & $1009;
  if ($or$cond$i57) {
   $1018 = (($w$2) - ($1005))|0;
   $1019 = ($1018>>>0)>(256);
   $1020 = $1019 ? 256 : $1018;
   _memset(($pad$i|0),48,($1020|0))|0;
   $1021 = ($1018>>>0)>(255);
   if ($1021) {
    $$01$i59 = $1018;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1022 = (($$01$i59) + -256)|0;
     $1023 = ($1022>>>0)>(255);
     if ($1023) {
      $$01$i59 = $1022;
     } else {
      break;
     }
    }
    $1024 = $1018 & 255;
    $$0$lcssa$i61 = $1024;
   } else {
    $$0$lcssa$i61 = $1018;
   }
   (___fwritex($pad$i,$$0$lcssa$i61,$f)|0);
  }
  $1025 = ($$p$5|0)>($1003|0);
  if ($1025) {
   $1026 = (($$p$5) - ($1003))|0;
   $1027 = ($1026>>>0)>(256);
   $1028 = $1027 ? 256 : $1026;
   _memset(($pad$i|0),48,($1028|0))|0;
   $1029 = ($1026>>>0)>(255);
   if ($1029) {
    $$01$i44 = $1026;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1030 = (($$01$i44) + -256)|0;
     $1031 = ($1030>>>0)>(255);
     if ($1031) {
      $$01$i44 = $1030;
     } else {
      break;
     }
    }
    $1032 = $1026 & 255;
    $$0$lcssa$i46 = $1032;
   } else {
    $$0$lcssa$i46 = $1026;
   }
   (___fwritex($pad$i,$$0$lcssa$i46,$f)|0);
  }
  (___fwritex($a$2,$1003,$f)|0);
  $1033 = ($1007|0)==(8192);
  $or$cond$i = $1033 & $1009;
  if ($or$cond$i) {
   $1034 = (($w$2) - ($1005))|0;
   $1035 = ($1034>>>0)>(256);
   $1036 = $1035 ? 256 : $1034;
   _memset(($pad$i|0),32,($1036|0))|0;
   $1037 = ($1034>>>0)>(255);
   if ($1037) {
    $$01$i = $1034;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1038 = (($$01$i) + -256)|0;
     $1039 = ($1038>>>0)>(255);
     if ($1039) {
      $$01$i = $1038;
     } else {
      break;
     }
    }
    $1040 = $1034 & 255;
    $$0$lcssa$i = $1040;
   } else {
    $$0$lcssa$i = $1034;
   }
   (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  }
  $1169 = $1175;$1170 = $1176;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $1041 = ($f|0)==(0|0);
  if (!($1041)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1042 = ($l10n$0$lcssa|0)==(0);
  if ($1042) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2162 = 1;
  }
  while(1) {
   $1043 = (($nl_type) + ($i$2162<<2)|0);
   $1044 = HEAP32[$1043>>2]|0;
   $1045 = ($1044|0)==(0);
   if ($1045) {
    $i$2162$lcssa = $i$2162;
    break;
   }
   $1047 = (($nl_arg) + ($i$2162<<3)|0);
   $1048 = ($1044>>>0)>(20);
   L530: do {
    if (!($1048)) {
     do {
      switch ($1044|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1049 = $arglist_current35;
       $1050 = ((0) + 4|0);
       $expanded148 = $1050;
       $expanded147 = (($expanded148) - 1)|0;
       $1051 = (($1049) + ($expanded147))|0;
       $1052 = ((0) + 4|0);
       $expanded152 = $1052;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1053 = $1051 & $expanded150;
       $1054 = $1053;
       $1055 = HEAP32[$1054>>2]|0;
       $arglist_next36 = ((($1054)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1047>>2] = $1055;
       break L530;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1056 = $arglist_current38;
       $1057 = ((0) + 4|0);
       $expanded155 = $1057;
       $expanded154 = (($expanded155) - 1)|0;
       $1058 = (($1056) + ($expanded154))|0;
       $1059 = ((0) + 4|0);
       $expanded159 = $1059;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1060 = $1058 & $expanded157;
       $1061 = $1060;
       $1062 = HEAP32[$1061>>2]|0;
       $arglist_next39 = ((($1061)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1063 = ($1062|0)<(0);
       $1064 = $1063 << 31 >> 31;
       $1065 = $1047;
       $1066 = $1065;
       HEAP32[$1066>>2] = $1062;
       $1067 = (($1065) + 4)|0;
       $1068 = $1067;
       HEAP32[$1068>>2] = $1064;
       break L530;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1069 = $arglist_current41;
       $1070 = ((0) + 4|0);
       $expanded162 = $1070;
       $expanded161 = (($expanded162) - 1)|0;
       $1071 = (($1069) + ($expanded161))|0;
       $1072 = ((0) + 4|0);
       $expanded166 = $1072;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1073 = $1071 & $expanded164;
       $1074 = $1073;
       $1075 = HEAP32[$1074>>2]|0;
       $arglist_next42 = ((($1074)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1076 = $1047;
       $1077 = $1076;
       HEAP32[$1077>>2] = $1075;
       $1078 = (($1076) + 4)|0;
       $1079 = $1078;
       HEAP32[$1079>>2] = 0;
       break L530;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1080 = $arglist_current44;
       $1081 = ((0) + 8|0);
       $expanded169 = $1081;
       $expanded168 = (($expanded169) - 1)|0;
       $1082 = (($1080) + ($expanded168))|0;
       $1083 = ((0) + 8|0);
       $expanded173 = $1083;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1084 = $1082 & $expanded171;
       $1085 = $1084;
       $1086 = $1085;
       $1087 = $1086;
       $1088 = HEAP32[$1087>>2]|0;
       $1089 = (($1086) + 4)|0;
       $1090 = $1089;
       $1091 = HEAP32[$1090>>2]|0;
       $arglist_next45 = ((($1085)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1092 = $1047;
       $1093 = $1092;
       HEAP32[$1093>>2] = $1088;
       $1094 = (($1092) + 4)|0;
       $1095 = $1094;
       HEAP32[$1095>>2] = $1091;
       break L530;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1096 = $arglist_current47;
       $1097 = ((0) + 4|0);
       $expanded176 = $1097;
       $expanded175 = (($expanded176) - 1)|0;
       $1098 = (($1096) + ($expanded175))|0;
       $1099 = ((0) + 4|0);
       $expanded180 = $1099;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1100 = $1098 & $expanded178;
       $1101 = $1100;
       $1102 = HEAP32[$1101>>2]|0;
       $arglist_next48 = ((($1101)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1103 = $1102&65535;
       $1104 = $1103 << 16 >> 16;
       $1105 = ($1104|0)<(0);
       $1106 = $1105 << 31 >> 31;
       $1107 = $1047;
       $1108 = $1107;
       HEAP32[$1108>>2] = $1104;
       $1109 = (($1107) + 4)|0;
       $1110 = $1109;
       HEAP32[$1110>>2] = $1106;
       break L530;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1111 = $arglist_current50;
       $1112 = ((0) + 4|0);
       $expanded183 = $1112;
       $expanded182 = (($expanded183) - 1)|0;
       $1113 = (($1111) + ($expanded182))|0;
       $1114 = ((0) + 4|0);
       $expanded187 = $1114;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1115 = $1113 & $expanded185;
       $1116 = $1115;
       $1117 = HEAP32[$1116>>2]|0;
       $arglist_next51 = ((($1116)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1117 & 65535;
       $1118 = $1047;
       $1119 = $1118;
       HEAP32[$1119>>2] = $$mask1$i;
       $1120 = (($1118) + 4)|0;
       $1121 = $1120;
       HEAP32[$1121>>2] = 0;
       break L530;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1122 = $arglist_current53;
       $1123 = ((0) + 4|0);
       $expanded190 = $1123;
       $expanded189 = (($expanded190) - 1)|0;
       $1124 = (($1122) + ($expanded189))|0;
       $1125 = ((0) + 4|0);
       $expanded194 = $1125;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1126 = $1124 & $expanded192;
       $1127 = $1126;
       $1128 = HEAP32[$1127>>2]|0;
       $arglist_next54 = ((($1127)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1129 = $1128&255;
       $1130 = $1129 << 24 >> 24;
       $1131 = ($1130|0)<(0);
       $1132 = $1131 << 31 >> 31;
       $1133 = $1047;
       $1134 = $1133;
       HEAP32[$1134>>2] = $1130;
       $1135 = (($1133) + 4)|0;
       $1136 = $1135;
       HEAP32[$1136>>2] = $1132;
       break L530;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1137 = $arglist_current56;
       $1138 = ((0) + 4|0);
       $expanded197 = $1138;
       $expanded196 = (($expanded197) - 1)|0;
       $1139 = (($1137) + ($expanded196))|0;
       $1140 = ((0) + 4|0);
       $expanded201 = $1140;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1141 = $1139 & $expanded199;
       $1142 = $1141;
       $1143 = HEAP32[$1142>>2]|0;
       $arglist_next57 = ((($1142)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1143 & 255;
       $1144 = $1047;
       $1145 = $1144;
       HEAP32[$1145>>2] = $$mask$i;
       $1146 = (($1144) + 4)|0;
       $1147 = $1146;
       HEAP32[$1147>>2] = 0;
       break L530;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1148 = $arglist_current59;
       $1149 = ((0) + 8|0);
       $expanded204 = $1149;
       $expanded203 = (($expanded204) - 1)|0;
       $1150 = (($1148) + ($expanded203))|0;
       $1151 = ((0) + 8|0);
       $expanded208 = $1151;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1152 = $1150 & $expanded206;
       $1153 = $1152;
       $1154 = +HEAPF64[$1153>>3];
       $arglist_next60 = ((($1153)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1047>>3] = $1154;
       break L530;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1155 = $arglist_current62;
       $1156 = ((0) + 8|0);
       $expanded211 = $1156;
       $expanded210 = (($expanded211) - 1)|0;
       $1157 = (($1155) + ($expanded210))|0;
       $1158 = ((0) + 8|0);
       $expanded215 = $1158;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1159 = $1157 & $expanded213;
       $1160 = $1159;
       $1161 = +HEAPF64[$1160>>3];
       $arglist_next63 = ((($1160)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1047>>3] = $1161;
       break L530;
       break;
      }
      default: {
       break L530;
      }
      }
     } while(0);
    }
   } while(0);
   $1162 = (($i$2162) + 1)|0;
   $1163 = ($1162|0)<(10);
   if ($1163) {
    $i$2162 = $1162;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
  $1046 = ($i$2162$lcssa|0)<(10);
  if ($1046) {
   $i$3160 = $i$2162$lcssa;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1166 = (($nl_type) + ($i$3160<<2)|0);
   $1167 = HEAP32[$1166>>2]|0;
   $1168 = ($1167|0)==(0);
   $1164 = (($i$3160) + 1)|0;
   if (!($1168)) {
    $$0 = -1;
    label = 363;
    break;
   }
   $1165 = ($1164|0)<(10);
   if ($1165) {
    $i$3160 = $1164;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 363) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[96488>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (96528 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (96528 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[96488>>2] = $22;
     } else {
      $23 = HEAP32[(96504)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(96496)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (96528 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (96528 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[96488>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(96504)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(96496)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(96508)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (96528 + ($92<<2)|0);
      $94 = HEAP32[96488>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[96488>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (96528 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (96528 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(96504)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(96496)>>2] = $81;
     HEAP32[(96508)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(96492)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (96792 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(96504)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (96792 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(96492)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(96492)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(96504)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(96504)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(96504)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(96496)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(96508)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (96528 + ($229<<2)|0);
       $231 = HEAP32[96488>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[96488>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (96528 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (96528 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(96504)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(96496)>>2] = $rsize$0$i$lcssa;
      HEAP32[(96508)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(96492)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (96792 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (96792 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(96496)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(96504)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (96792 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(96492)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(96492)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(96504)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(96504)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(96504)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (96528 + ($424<<2)|0);
          $426 = HEAP32[96488>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[96488>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (96528 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (96528 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(96504)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (96792 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(96492)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(96492)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(96504)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(96504)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(96496)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(96508)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(96508)>>2] = $514;
   HEAP32[(96496)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(96496)>>2] = 0;
   HEAP32[(96508)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(96500)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(96500)>>2] = $528;
  $529 = HEAP32[(96512)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(96512)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[96960>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(96968)>>2] = $538;
    HEAP32[(96964)>>2] = $538;
    HEAP32[(96972)>>2] = -1;
    HEAP32[(96976)>>2] = -1;
    HEAP32[(96980)>>2] = 0;
    HEAP32[(96932)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[96960>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(96968)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(96928)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(96920)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(96932)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(96512)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (96936);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(96500)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(96964)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(96920)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(96928)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(96968)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(96932)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(96932)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(96920)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(96920)>>2] = $632;
  $633 = HEAP32[(96924)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(96924)>>2] = $632;
  }
  $635 = HEAP32[(96512)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(96504)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(96504)>>2] = $tbase$255$i;
    }
    HEAP32[(96936)>>2] = $tbase$255$i;
    HEAP32[(96940)>>2] = $tsize$254$i;
    HEAP32[(96948)>>2] = 0;
    $640 = HEAP32[96960>>2]|0;
    HEAP32[(96524)>>2] = $640;
    HEAP32[(96520)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (96528 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (96528 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (96528 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(96512)>>2] = $654;
    HEAP32[(96500)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(96976)>>2]|0;
    HEAP32[(96516)>>2] = $659;
   } else {
    $sp$084$i = (96936);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(96500)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(96512)>>2] = $684;
       HEAP32[(96500)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(96976)>>2]|0;
       HEAP32[(96516)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(96504)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(96504)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (96936);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (96936);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(96500)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(96500)>>2] = $730;
        HEAP32[(96512)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(96508)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(96496)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(96496)>>2] = $736;
         HEAP32[(96508)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L331: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (96528 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[96488>>2]|0;
            $763 = $762 & $761;
            HEAP32[96488>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (96792 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(96492)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(96492)>>2] = $806;
             break L331;
            } else {
             $807 = HEAP32[(96504)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L331;
             }
            }
           } while(0);
           $814 = HEAP32[(96504)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(96504)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (96528 + ($840<<2)|0);
         $842 = HEAP32[96488>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[96488>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (96528 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (96528 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(96504)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (96792 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(96492)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(96492)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L417: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L417;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(96504)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(96504)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (96936);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(96512)>>2] = $953;
    HEAP32[(96500)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(96976)>>2]|0;
    HEAP32[(96516)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(96936)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(96936)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(96936)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(96936)+12>>2]|0;
    HEAP32[(96936)>>2] = $tbase$255$i;
    HEAP32[(96940)>>2] = $tsize$254$i;
    HEAP32[(96948)>>2] = 0;
    HEAP32[(96944)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (96528 + ($977<<2)|0);
      $979 = HEAP32[96488>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[96488>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (96528 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (96528 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(96504)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (96792 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(96492)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(96492)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(96504)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(96504)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(96500)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(96500)>>2] = $1062;
   $1063 = HEAP32[(96512)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(96512)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(96504)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(96508)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(96496)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (96528 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[96488>>2]|0;
     $36 = $35 & $34;
     HEAP32[96488>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (96792 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(96492)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(96492)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(96504)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(96504)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(96504)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(96512)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(96500)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(96500)>>2] = $120;
   HEAP32[(96512)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(96508)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(96508)>>2] = 0;
   HEAP32[(96496)>>2] = 0;
   return;
  }
  $125 = HEAP32[(96508)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(96496)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(96496)>>2] = $128;
   HEAP32[(96508)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (96528 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(96504)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[96488>>2]|0;
     $152 = $151 & $150;
     HEAP32[96488>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(96504)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(96504)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(96504)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (96792 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(96492)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(96492)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(96504)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(96504)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(96504)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(96508)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(96496)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (96528 + ($233<<2)|0);
  $235 = HEAP32[96488>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[96488>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (96528 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (96528 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(96504)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (96792 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(96492)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(96492)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L201: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L201;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(96504)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(96504)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(96520)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(96520)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (96944);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(96520)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function runPostSets() {

}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================




function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&3](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&3](a1|0,a2|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&1](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&7](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0; }
function b1(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(1);return 0; }
function b2(p0,p1) { p0 = p0|0;p1 = p1|0; abort(2); }
function b3(p0,p1) { p0 = p0|0;p1 = p1|0; abort(3);return 0; }
function b4(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(4); }
function _init_xrpow_core_sse__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _init_xrpow_core_sse(p0|0,p1|0,p2|0,p3|0); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,_sn_write,_choose_table_nonMMX,b0];
var FUNCTION_TABLE_iiiii = [b1,_count_bit_null,_count_bit_noESC,_count_bit_noESC_from2,_count_bit_noESC_from3,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,_fht,_lame_report_def,b2];
var FUNCTION_TABLE_iii = [b3,_floatcompare];
var FUNCTION_TABLE_viiii = [b4,_VBR_new_iteration_loop,_VBR_old_iteration_loop,_CBR_iteration_loop,_ABR_iteration_loop,_init_xrpow_core_sse__wrapper,_init_xrpow_core_c,b4];

  return { _i64Subtract: _i64Subtract, _lame_set_brate: _lame_set_brate, _lame_encode_buffer_ieee_float: _lame_encode_buffer_ieee_float, _lame_close: _lame_close, _lame_set_in_samplerate: _lame_set_in_samplerate, _i64Add: _i64Add, _lame_set_num_channels: _lame_set_num_channels, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _lame_init: _lame_init, _bitshift64Lshr: _bitshift64Lshr, _free: _free, _lame_init_params: _lame_init_params, _lame_encode_flush: _lame_encode_flush, _bitshift64Shl: _bitshift64Shl, _lame_set_mode: _lame_set_mode, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_vii: dynCall_vii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _lame_set_brate = Module["_lame_set_brate"] = asm["_lame_set_brate"];
var _lame_encode_buffer_ieee_float = Module["_lame_encode_buffer_ieee_float"] = asm["_lame_encode_buffer_ieee_float"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _lame_close = Module["_lame_close"] = asm["_lame_close"];
var _lame_set_in_samplerate = Module["_lame_set_in_samplerate"] = asm["_lame_set_in_samplerate"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _lame_set_num_channels = Module["_lame_set_num_channels"] = asm["_lame_set_num_channels"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _lame_set_mode = Module["_lame_set_mode"] = asm["_lame_set_mode"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _lame_init = Module["_lame_init"] = asm["_lame_init"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _lame_init_params = Module["_lame_init_params"] = asm["_lame_init_params"];
var _lame_encode_flush = Module["_lame_encode_flush"] = asm["_lame_encode_flush"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



  var NUM_CH = 2,
      HEAPU8 = Module.HEAPU8,
      malloc = Module._malloc,
      free = Module._free,
      lame_init = Module._lame_init,
      lame_set_mode = Module._lame_set_mode,
      lame_set_num_channels = Module._lame_set_num_channels,
      lame_set_in_samplerate = Module._lame_set_in_samplerate,
      lame_set_brate = Module._lame_set_brate,
      lame_init_params = Module._lame_init_params,
      lame_encode_buffer_ieee_float = Module._lame_encode_buffer_ieee_float,
      lame_encode_flush = Module._lame_encode_flush,
      lame_close = Module._lame_close;

  var Encoder = function(sampleRate, bitRate) {
    this.gfp = lame_init();
    lame_set_mode(this.gfp, 1/*JOINT_STEREO*/);
    lame_set_num_channels(this.gfp, NUM_CH);
    lame_set_in_samplerate(this.gfp, sampleRate);
    lame_set_brate(this.gfp, bitRate);
    lame_init_params(this.gfp);
    this.allocBuffers(8192);
    this.mp3Buffers = [];
  };

  Encoder.prototype.encode = function(buffers) {
    var length = buffers[0].length;
    if (length > this.srcLen) {
      this.freeBuffers();
      this.allocBuffers(length);
    }
    for (var ch = 0; ch < NUM_CH; ++ch)
      this.srcBuf[ch].set(buffers[ch]);
    var nBytes = lame_encode_buffer_ieee_float(
      this.gfp, this.srcPtr[0], this.srcPtr[1], length,
      this.dstPtr, this.dstSz);
    this.mp3Buffers.push(new Uint8Array(this.dstBuf.subarray(0, nBytes)));
  };

  Encoder.prototype.finish = function(mimeType) {
    var nBytes = lame_encode_flush(this.gfp, this.dstPtr, this.dstSz);
    this.mp3Buffers.push(new Uint8Array(this.dstBuf.subarray(0, nBytes)));
    var blob = new Blob(this.mp3Buffers, {type: mimeType || 'audio/mpeg'});
    this.cleanup();
    return blob;
  };

  Encoder.prototype.cancel = Encoder.prototype.cleanup = function() {
    lame_close(this.gfp);
    delete this.gfp;
    delete this.mp3Buffers;
    this.freeBuffers();
  };

  Encoder.prototype.allocBuffers = function(srcLen) {
    this.srcLen = srcLen;
    this.srcPtr = [];
    this.srcBuf = [];
    for (var ch = 0; ch < NUM_CH; ++ch) {
      this.srcPtr[ch] = malloc(this.srcLen * 4);
      this.srcBuf[ch] = new Float32Array(HEAPU8.buffer,
                                         this.srcPtr[ch], this.srcLen);
    }
    this.dstSz = Math.ceil(1.25 * this.srcLen) + 7200;  // see lame.h
    this.dstPtr = malloc(this.dstSz);
    this.dstBuf = new Uint8Array(HEAPU8.buffer, this.dstPtr, this.dstSz);
  };

  Encoder.prototype.freeBuffers = function() {
    delete this.dstBuf;
    delete this.srcBuf;
    free(this.dstPtr);
    for (var ch = 0; ch < NUM_CH; ++ch)
      free(this.srcPtr[ch]);
    delete this.dstPtr;
    delete this.srcPtr;
  };

  self.Mp3LameEncoder = Encoder;
})(self);
